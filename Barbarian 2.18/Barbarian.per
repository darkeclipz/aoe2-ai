; Barbarian by II2N/TheMax
; Plays any map with any civ
; Version 2.18

; No longer plays 1.0c - compatible only with UserPatch

; Pop 200+ should work fine
; Having all techs on will probably cause unintended behavior so better play without them
; The code may not be easy to read due to mess here-and-there, but there are still some comments included
; AoC and AoFE

; Game type: Any
; Map: Any map that is playable for AIs (for example forest nothing is highly limited for AIs by game engine)
; Civilization: Any
; Difficulty: Any (optimized to hard)
; Resources: Any
; Population: Any (200 preferred)
; Starting age: Any
; Victory: Any (optimized to conquest, standard is fine too)
; Have fun trying Barbarian

; Feedback is always welcome!

; Thanks to the whole AI Scripters community, Barbarian would never have developed to this level without you guys!

; ============== GOALS

(defconst gl-current-age 1)
(defconst TSA 2)
(defconst MILITARY 3); 0 = no superiority, 1 = superiority, 2 = water superiority (no land attacking)
(defconst gl-strategy 4); Controls the opening strategy; will always eventually return to default; basic-class flushes use default
(defconst gl-fixed-eco-balancing 5); NO = allow calculating gatherer percentages, YES = use set gatherer percentages
(defconst gl-population 6); Keeps track of our population + units in queue
(defconst TC 7); 1 = adds extra TCs requested by special-class strategies
(defconst gl-escrow-state 8); used for housing without affecting escrow
(defconst gl-strategy-control 9); Used with some strategies to specify the strategy
(defconst gl-normal-milling 10); 0 = lumber camp first, 1 = mill first, 2 = dock first, 3 = no mill
(defconst gl-town-under-attack 11); Used by Horde, Promi, Juggernaut and some other AIs
(defconst gl-super-pocket 12)
(defconst gl-DRUSH 13); Whether drush is used or not
(defconst gl-DRUSH-CONTROL 14)
(defconst DOCK 15)
(defconst gl-SCRUSH-CONTROL 16)
(defconst gl-pair-player-military 17)
(defconst gl-target-soldier-count 18)
(defconst SLING 19); 1-3 = shot, 4-6 = sling
(defconst gl-early-scout-time 20)
(defconst gl-lured-boar-id 21)
(defconst target-system 22); Determines which target priority set is used
(defconst gl-enemy-elephant-count 23)

(defconst threat-time 25)
(defconst threat-player 26)
(defconst threat-source 27)
(defconst threat-target 28)
(defconst saved-threat-level 29); Saves the threat level if it gets overwritten while trying to join an ally's attack
(defconst gl-assisting-ally 30); Tells are we assisting an ally in attack
(defconst gl-max-farm-count 31)
(defconst gl-my-villager-count 32)
(defconst gl-enemy-assist 33)
(defconst gl-fixed-target-player 34); Usually the target is the closest player and will be constantly checked, this controls if the target is locked
(defconst gl-enemy-pocket-civ 35)
(defconst gl-unit-selection-block 36)
(defconst gl-start-with-castle 37)
(defconst gl-sum-villagers 38)
(defconst gl-gold-score-last 38)
(defconst gl-castle-control 39)
(defconst gl-boar-eaten 40)
(defconst gl-stored-boar-id 41)
(defconst gl-saved-focus-player 42)
(defconst gl-saved-focus-player2 43)
(defconst temporary-goal3 44)
(defconst gl-villager-max-carry 45)
(defconst gl-pocket-target-time 45)
(defconst POSITION 46); Shared with Horde, 1 = flank, 2 = pocket
(defconst gl-resources-on-map 47)
(defconst gl-eternal-drush 48); Tells whether a massive drush is used or not
(defconst winning-player 49)
(defconst victory-type 50)
(defconst temporary-goal9 50)
(defconst victory-time 51)
(defconst gl-islands-style 52)
(defconst gl-my-food-gp 53)
(defconst gl-castle-placed 54)
(defconst gl-town-center-placed 55)
(defconst temporary-goal6 56)
(defconst temporary-goal7 57)
(defconst saved-threat-level2 58)
(defconst temporary-goal11 59)
(defconst gl-defend-group-notice 60)
(defconst gl-direct-attacking 61)
(defconst gl-attack-target-id 62)
(defconst gl-start-with-scout 63)
(defconst gl-attack-notice 63)
(defconst gl-villagers-to-start-boar-hunt 64); The number of villagers to allow boar hunting
(defconst gl-other-pocket-player 65)
(defconst gl-battle-elephant-count-total 66)
(defconst gl-current-sheep-count 67)
(defconst gl-sheep-count-last 68)
(defconst gl-modern-build-order 69)
(defconst gl-rush-suitability-on-map 70); Determines the rush suitibility on map. If it's low, more passive strategies are preferred
(defconst gl-enemy-strategy 71); Used to the determine only a few enemy strategy types
(defconst gl-patrol-defence 72)
(defconst gl-controlled-forward-castle 73); Controls forward castle drop used by castle push or fast imp monk rush
(defconst CASTLE 74)
(defconst gl-strategy-type 75); Basic-flush (versatile), controlled-flush, FC (fast up), FC2, FI or FI2 (fast imperial UUs/monks+trebuchets)
(defconst gl-food-gp-points 76); These goals control the number of resource gatherer percentage points to calculate the gathere percentages we want to use
(defconst gl-wood-gp-points 77)
(defconst gl-gold-gp-points 78)
(defconst gl-gp-points-total 79); The sum of the gatherer percentage points
(defconst gl-peace-in-town 80); Checks if we are in peace or not, used to allow some gp-point rules
(defconst gl-enemy-score-last 81); Score-reading
(defconst gl-enemy-attacker 82)
(defconst gl-my-town-size 83)
(defconst gl-front-gold 84)
(defconst gl-advanced-monastery 84)
(defconst gl-farming 85)
(defconst gl-disable-market-placing 86); Disables placing more than 1 market independently, turned on if a human ally wants to control Barbarian's market placement
(defconst gl-skirmisher-count-total 87)
(defconst gl-my-maximum-town-size 88)
(defconst gl-town-size-increasing-time 89)
(defconst gl-units-required-to-spreading 90)
(defconst gl-boats-required-to-spreading 91)
(defconst gl-game-time-required 92)
(defconst gl-archery-leader-id 93)
(defconst gl-wonder-repair-time 94)
(defconst gl-castle-build-time 95)
(defconst gl-advanced-trash 96)
(defconst gl-unit-spreading 97)
(defconst gl-unit-spreading-count 98)
(defconst gl-toughest-fought-enemy-military 99)
(defconst gl-saved-point-x 100)
(defconst gl-saved-point-y 101)
(defconst gl-interfered-scout 102)
(defconst gl-feudal-infantry 103)
(defconst gl-feudal-archery 104)
(defconst gl-advanced-infantry 105)
(defconst gl-advanced-archery 106)
(defconst gl-required-eagle-upgrades 106)
(defconst gl-advanced-cavalry 107)
(defconst gl-eagles 108)
(defconst gl-starting-scout-count 109)
(defconst gl-eew-strategy-type 110)
(defconst gl-lured-deer-count 111)
(defconst gl-doubling 112)
(defconst substitute-timer3 113)
(defconst gl-disable-eternal-drush 114)
(defconst gl-boar-food 115)
(defconst gl-enemy-scorpion-count 116)
(defconst gl-FC-type 117); 2/3 villagers at feudal or wheelbarrow
(defconst gl-castle-sling-order 118)
(defconst gl-direct-attack-notice 119)
(defconst gl-my-villager-count-total 120)
(defconst RAM 121)
(defconst castle-dropped-timer 122)
(defconst gl-TC-build-priority 123)
(defconst gl-barracks-build-priority 124)
(defconst gl-range-build-priority 125)
(defconst gl-stable-build-priority 126)
(defconst gl-workshop-build-priority 127)
(defconst gl-market-build-priority 128)
(defconst gl-university-build-priority 129)
(defconst gl-monastery-build-priority 130)
(defconst gl-strategy-class 131); Basic-class (versatile) or special-class
(defconst gl-house-build-priority 132)
(defconst gl-sheep-distance 133)
(defconst strategy-selection-control 134)
(defconst temporary-goal 135)
(defconst temporary-goal2 136)
(defconst gl-my-wood-gp 137)
(defconst gl-my-gold-gp 138)
(defconst gl-scout-party 139)
(defconst gl-military-percentage2 140)
(defconst gl-military-percentage3 141)
(defconst gl-enemy-pocket 142)
(defconst gl-wood-backup 143)
(defconst gl-gathering-inside 144)
(defconst RETREAT 145)
(defconst gl-arena-forward 146)
(defconst gl-migration-notice 146)
(defconst gl-trade-tower-time 147)
(defconst timer-enabler 148)
(defconst gl-gathered-relics 149)
(defconst gl-villager-laming 150)
(defconst mill-dropped-timer 151)
(defconst gl-gold-income-per-minute 152)
(defconst gl-required-current-age-time 153)
(defconst gl-deer-distance 154)
(defconst gl-farm-builder-time 155)
(defconst gl-TC-lost 156)
(defconst gl-boar-hunting-stage 157)
(defconst gl-scout-unit 158)
(defconst gl-safe-to-assist-ally 159)
(defconst gl-rush-target-player 160)
(defconst gl-military-rating 161)
(defconst gl-enemy-sling 162)
(defconst gl-enemy-camelry-count 163)
(defconst gl-enemy-eew-count 164)
(defconst gl-enemy-wall-count-total 165)
(defconst gl-enemy-skirmisher-count 166)
(defconst gl-enemy-eagle-count 167)
(defconst gl-enemy-huskarl-count 168)
(defconst gl-enemy-cavalry-count 169)
(defconst gl-enemy-archery-count 170)
(defconst gl-enemy-spearman-count 171)
(defconst gl-enemy-infantry-count 172)
(defconst gl-enemy-gunpowder-count 173)
(defconst gl-enemy-cataphract-count 174)
(defconst gl-enemy-archer-count 175)
(defconst gl-enemy-heavy-cavalry-count 176)
(defconst gl-point-x 177)
(defconst gl-point-y 178)
(defconst gl-heavy-water-map 179)
(defconst gl-trush-notice 179)
(defconst gl-water-retreating 180)
(defconst gl-flag 181)
(defconst gl-dm-barracks-number 182)
(defconst gl-score-difference 182)
(defconst gl-dm-range-number 183)
(defconst gl-enemy-up-game-time 183)
(defconst gl-dm-stable-number 184)
(defconst gl-doubling-time 184)
(defconst gl-dm-workshop-number 185)
(defconst gl-sling-counter-type 185)
(defconst gl-my-builder-count 186)
(defconst gl-tower-defence 186)
(defconst gl-dm-food-to-sell 187)
(defconst gl-mining-camp-notice 187)
(defconst gl-dm-wood-to-sell 188)
(defconst gl-castle-age-style 188)
(defconst gl-dm-stone-to-sell 189)
(defconst gl-scout-point-x 189)
(defconst gl-my-house-count 190)
(defconst gl-scout-point-y 190)
(defconst gl-dm-allow-counter-halbs 191)
(defconst gl-scout-point-counter 191)
(defconst gl-dm-allow-counter-skirms 192)
(defconst gl-circle-scouting-time 192)
(defconst gl-dm-main-unit 193)
(defconst gl-boar-lurer-id 193)
(defconst gl-food-villagers 194)
(defconst gl-wood-villagers 195)
(defconst gl-gold-villagers 196)
(defconst gl-stone-villagers 197)
(defconst gl-military-rating-time 197)
(defconst gl-dm-allow-UU-training 198)
(defconst gl-lumber-camp-time 198)
(defconst gl-defensive-castle-placed 199)
(defconst gl-wonder-build-attempt-stage 200)
(defconst gl-wonder-outpost 201); Yay
(defconst gl-enemy-mameluke-count 202)
(defconst gl-anti-trush 203)
(defconst gl-castle-build-priority 203)
(defconst gl-farm-function 204)
(defconst gl-feudal-upgrade-order 205)
(defconst gl-ship-timer 206)
(defconst gl-scout-target-id 207)
(defconst gl-attack-stance-switcher 208)
(defconst gl-target-player-distance 209)
(defconst gl-retreat-notice 210)
(defconst gl-mill-farm-counter 211)
(defconst gl-uncommon-settings 212)
(defconst gl-wonder-assault 213)
(defconst gl-score-reference 213)
(defconst gl-flexible-target-fix 214)
(defconst gl-dm-water-strategy 215)
(defconst gl-nothing-style-map 216)
(defconst gl-point6-x 217)
(defconst gl-point6-y 218)
(defconst gl-nothing-boom-style 219)
(defconst gl-nothing-caravan-status 220)
(defconst gl-enable-camels 221)
(defconst gl-scout-added-to-drush 222)
(defconst gl-nothing-selling-started 223)
(defconst gl-michi-attack 223)
(defconst gl-strategy-selection-notice 224)
(defconst gl-route-control 225)
(defconst gl-retargeting 226)
(defconst gl-ally-threat-player 227)
(defconst gl-deer-luring 228)
(defconst gl-disable-mining-upgrades 229)
(defconst gl-tower-up 230)
(defconst gl-loomless-boar-hunting 231)
(defconst temporary-goal4 232)
(defconst gl-camp-raid 233)
(defconst gl-garrison-rule-fired 234)
(defconst gl-sling-towers 235)
(defconst gl-sling-camp-total 236)
(defconst gl-anti-trush-time 237)
(defconst gl-eagle-warrior-count-total 238)
(defconst gl-direction-switch 239)
(defconst gl-trush-tiles 239)
(defconst gl-mangonel-micro-time 240)
(defconst gl-trush-tower-order 240)
(defconst gl-close-deer 241)
(defconst gl-dock-build-priority 242)
(defconst gl-enemy-castle-distance 243)
(defconst gl-enemy-tower-distance 244)
(defconst gl-panic-xbow-counter 245)
(defconst gl-required-food 246)
(defconst gl-wonder-placement-at-back 247)
(defconst gl-other-side-flank 248)
(defconst gl-available-food-amount 249)
(defconst gl-available-wood-amount 250)
(defconst temporary-goal8 251); Gets overwritten with cost-data, so it can act as a temporary goal
(defconst gl-available-gold-amount 252)
(defconst gl-map-wood-percentage 253)
(defconst gl-local-total 254)
(defconst gl-local-last 255)
(defconst gl-remote-total 256)
(defconst gl-remote-last 257)
(defconst gl-migration-progress 258)
(defconst gl-navy-train-notice 259)
(defconst gl-pocket-check 260)
(defconst gl-closest-enemy-military 261)
(defconst gl-soldier-percentage 262)
(defconst gl-total-food-amount 263)
(defconst gl-camp-raid-time 264)
(defconst gl-home-point-x 265)
(defconst gl-original-back-point-x 265)
(defconst gl-ranged-patrolling 265)
(defconst gl-home-point-y 266)
(defconst gl-original-back-point-y 266)
(defconst gl-scout-movement-tiles 267)
(defconst gl-grush-control 267)
(defconst gl-target-navy-count 268)
(defconst gl-object-point-x 269)
(defconst gl-object-point-y 270)
(defconst gl-cut-point-x 271)
(defconst gl-cut-point-y 272)
(defconst gl-boar-stealing 273)
(defconst gl-blacksmith-build-priority 274)
(defconst gl-starting-island-x 275)
(defconst gl-second-cut-point-x 275)
(defconst gl-starting-island-y 276)
(defconst gl-second-cut-point-y 276)
(defconst gl-main-island-x 277)
(defconst gl-third-cut-point-x 277)
(defconst gl-main-island-y 278)
(defconst gl-third-cut-point-y 278)
(defconst gl-dodging-TC 279)
(defconst gl-TC-garrisoning 280)
(defconst gl-route-control2 281)
(defconst gl-ancient-target-id 281)
(defconst gl-enemy-tower-count 282)
(defconst gl-boar-unit 283)
(defconst gl-temporary-point-x 284)
(defconst gl-temporary-point-y 285)
(defconst gl-drush-reaction 286)
(defconst gl-loom-notice 286)
(defconst gl-candidate1-point-x 287)
(defconst gl-candidate1-point-y 288)
(defconst gl-candidate2-point-x 289)
(defconst gl-candidate2-point-y 290)
(defconst gl-drush-target-object 291)
(defconst gl-drush-waypoint 292)
(defconst gl-rescouting-time 293)
(defconst gl-drush-waypoint-required 294)
(defconst gl-drush-retreat-point-required 295)
(defconst gl-wood-to-be-seen 296)
(defconst gl-sighted-relic-count 296)
(defconst gl-nomad-wood-point-x 297)
(defconst gl-enemy-position-x 297); DM
(defconst gl-nomad-wood-point-y 298)
(defconst gl-enemy-position-y 298)
(defconst temporary-goal10 299)
(defconst gl-old-target-id 300)
(defconst gl-my-UU-count-total 301)
(defconst gl-cutter 302)
(defconst gl-new-scouting-style 302)
(defconst gl-mining-camp-backup 303)
(defconst gl-nomad-TC-placement-style 304)
(defconst gl-group-notice 304)
(defconst temporary-goal5 305)
(defconst gl-early-raid 306)
(defconst gl-raid-attempt-number 307)
(defconst gl-raid-stage 307)
(defconst gl-starting-scout-id 307)
(defconst gl-raid-target-count 308)
(defconst gl-raid-sending 308)
(defconst gl-candidate3-point-x 309)
(defconst gl-original-cut-point-x 309)
(defconst gl-candidate3-point-y 310)
(defconst gl-original-cut-point-y 310)
(defconst gl-candidate4-point-x 311)
(defconst gl-candidate4-point-y 312)
(defconst gl-raid-unit-class 313)
(defconst gl-raider3-id 313)
(defconst gl-raid-retargeting 314)
(defconst gl-raid-target-player2 314)
(defconst gl-raider4-id 314)
(defconst gl-position-center-x 315)
(defconst gl-position-center-y 316)
(defconst gl-raid-target-id 317)
(defconst gl-raid-target-player 317)
(defconst gl-raid-time 318)
(defconst gl-raid-type 319)
(defconst gl-relic-notice 319)
(defconst gl-wood3-point-x 319)
(defconst gl-group-leaderid 320)
(defconst gl-wood3-point-y 320)
(defconst gl-vice-group-leaderid 321)
(defconst gl-max-coordinate-value 322)
(defconst gl-map-treatment-switch-time 323)
(defconst gl-my-flank1 324)
(defconst gl-my-flank2 325); in 3v3
(defconst gl-defending-ally 326)
(defconst gl-ally-under-attack 327)
(defconst gl-attacking-with-ally 328)
(defconst gl-attacking-ally 329)
(defconst gl-wood-counter1 330)
(defconst gl-current-age-time-for-farms 330)
(defconst gl-camp-defense 331)
(defconst gl-wood-counter2 331)
(defconst gl-point3-x 333)
(defconst gl-point3-y 334)
(defconst gl-villager-micro-function 335)
(defconst gl-military-percentage 336)
(defconst gl-trade-unit-count-total 337)
(defconst gl-point2-x 338)
(defconst gl-point2-y 339)
(defconst gl-retreat-notice2 340)
(defconst gl-pocket-enemy-military 341)
(defconst gl-enable-pikemen 342)
(defconst gl-enable-skirmishers 343)
(defconst gl-target-market 344)
(defconst gl-scout-movement 344)
(defconst gl-dropsite-market 345)
(defconst gl-enemy-notice-point-x 346)
(defconst gl-enemy-notice-point-y 347)
(defconst gl-enemy-notice-time 348)
(defconst gl-enemy-onager-count 349)
(defconst gl-units-in-ally-town 350)
(defconst gl-main-tc-id 351)
(defconst gl-point4-x 352)
(defconst gl-point4-y 353)
(defconst gl-next-villager-target 354)
(defconst gl-tc-gather-point 355)
(defconst gl-point5-x 356)
(defconst gl-point5-y 357)
(defconst gl-point7-x 358)
(defconst gl-point7-y 359)
(defconst gl-camp-function 360)
(defconst temporary-goal12 361)
(defconst gl-eagle-warrior-count 362)
(defconst gl-micro-direction 363)
(defconst gl-group-initializing-time 364)
(defconst gl-march-point-x 365)
(defconst gl-march-point-y 366)
(defconst gl-old-target2-id 367)
(defconst gl-group-state-flag 368)
(defconst gl-group0-state-flag 369)
(defconst gl-group1-state-flag 370)
(defconst gl-group2-state-flag 371)
(defconst temporary-goal13 372)
(defconst gl-group2-1-x 373)
(defconst gl-group2-1-y 374)
(defconst gl-group2-2-x 375)
(defconst gl-group2-2-y 376)
(defconst gl-group2-3-x 377)
(defconst gl-group2-3-y 378)
(defconst gl-group2-4-x 379)
(defconst gl-group2-4-y 380)
(defconst gl-group2-5-x 381)
(defconst gl-group2-5-y 382)
(defconst gl-group2-initializing-time 383)
(defconst gl-fire-ship-count-total 384)
(defconst gl-old2-target-id 385)
(defconst gl-old2-target2-id 386)
(defconst gl-ancient-target0-id 387)
(defconst gl-ancient-target1-id 388)
(defconst gl-ancient-target2-id 389)
(defconst gl-demolition-ship-count-total 390)

(defconst gl-attacking0-target-id 396); 391-395 reserved
(defconst gl-attacking1-target-id 397)
(defconst gl-attacking2-target-id 398)
(defconst gl-enemy-fire-ship-count 399)
(defconst gl-point8-x 400)
(defconst gl-point8-y 401)
(defconst gl-group0-1-x 403)
(defconst gl-group0-1-y 404)
(defconst gl-group0-2-x 405)
(defconst gl-group0-2-y 406)
(defconst gl-group0-3-x 407)
(defconst gl-group0-3-y 408)
(defconst gl-group0-4-x 409)
(defconst gl-group0-4-y 410)
(defconst gl-group0-5-x 411)
(defconst gl-group0-5-y 412)
(defconst gl-group0-initializing-time 413)

(defconst gl-old0-target-id 415)
(defconst gl-old0-target2-id 416)

(defconst gl-group1-1-x 423)
(defconst gl-group1-1-y 424)
(defconst gl-group1-2-x 425)
(defconst gl-group1-2-y 426)
(defconst gl-group1-3-x 427)
(defconst gl-group1-3-y 428)
(defconst gl-group1-4-x 429)
(defconst gl-group1-4-y 430)
(defconst gl-group1-5-x 431)
(defconst gl-group1-5-y 432)
(defconst gl-group1-initializing-time 437)

(defconst gl-old1-target-id 439)
(defconst gl-old1-target2-id 440)

(defconst gl-attack-in-progress 392); 0 = no, 1 = yes. It allows a Barbarian sharing same target to become more eager to attack - this goal can be added to any AI to improve coordination
(defconst gl-enemy-units-in-town 393)
(defconst gl-slinging 394)
(defconst gl-sling-target-player 395)

(defconst gl-strategy-aggressiveness-level 418); Keeps track of the aggressiveness level of the chosen strategy, set to 24 when most aggressive
(defconst gl-strategy-cooperation 419); Set to 3453 to allow Barbarian read ally's strategy aggressiveness level for possible strategy adjustments
(defconst gl-identity 420)
(defconst gl-safe-in-town 436)
(defconst gl-position-self-x 478)
(defconst gl-position-self-y 479)

; gl-current-age
(defconst gv-dark 1)
(defconst gv-dark-up 2)
(defconst gv-feudal 3)
(defconst gv-feudal-up 4)
(defconst gv-castle 5)
(defconst gv-castle-up 6)
(defconst gv-imperial 7)

; gl-strategy-control
(defconst HUSKS 1)
(defconst FULL-HUSKS 2)
(defconst HUSKS-PIKS 3)
(defconst HUSKS-CHAMPS 4)
(defconst CHAMPS 5)
(defconst PICK-A-STRATEGY 6)
(defconst MEN-AT-ARMS 8)
(defconst AGE-UP-CASTLE 10)
(defconst UNUSUAL-SWITCH 11)
(defconst FLUSH-SKIRMS 12)
(defconst FLUSH-ARCHERS 13)
(defconst gv-1-stable 14)
(defconst gv-1-barracks 15)
(defconst gv-2-TC-knights 16)

(defconst GRUSHING 20)
(defconst GET-AGE-UP 21)
(defconst defences-needed 22)
(defconst open-the-wall 23)
(defconst SCRUSH 24)
(defconst SCRUSH-SKIRM 25)
(defconst SCRUSH-MIX 26)

; gl-grush-control
(defconst adding-archers 16)

; gl-nothing-boom-style
(defconst 1TC-4MARKET 1); Most nothing map features are currently unused, they will be possibly added in the future
(defconst 2TC-1MARKET 2)
(defconst 2TC-2MARKET 3)
(defconst 2TC-3MARKET 4)
(defconst 2TC-4MARKET 5)
(defconst 3TC-1MARKET 6)
(defconst 2TC 7)

; gl-nothing-caravan-status
(defconst take-fast 1)
(defconst take-late 2)
(defconst taken 3)

; gl-scout-added-to-drush
(defconst added -1)

; gl-enemy-strategy
(defconst EAGLERUSH-NOTE 1)
(defconst EAGLERUSH 2)
(defconst UP-TO-CASTLE 3)
(defconst SCORPION-RUSH 4)
(defconst CASTLE-DROP 5)
(defconst RANGED-STRATEGY 6)
(defconst KNIGHT-RUSH 7)
(defconst MONK-RUSH 8)
(defconst XBOW-RUSH 9)

(defconst FLUSH 22)
(defconst SCOUT-RUSH 23)
(defconst NOT-EAGLERUSH 24)
(defconst MAA-FLUSH 25)
(defconst TRUSH 26)

; ...
(defconst MAYBE 0)
(defconst IN-PROGRESS 11)
(defconst DONE 21)

; gl-DRUSH-CONTROL
(defconst GOLD-NEEDED-FOR-MILITIAS 0)
(defconst GOLD-MINED 1)
(defconst MILITIAS-DONE 2)
(defconst DRUSH-OVER 3)

; POSITION
(defconst UNKNOWN -1)
(defconst CHECK-POSITION 0)
(defconst FLANK 1)
(defconst POCKET 2)

; gl-SCRUSH-CONTROL
(defconst SCOUTS-DONE 1)
(defconst ARCHERS-ADDED 2)

; gl-assisting-ally
(defconst RESET 1)

; target-system
(defconst basic 1)
(defconst rush 2)
(defconst raid 3)
(defconst aggressive-raid 4)
(defconst siege 5)

; gl-*-placed
(defconst placed-to-side1 2)
(defconst placed-to-side2 3)
(defconst placed-to-ally 30)
(defconst safe-TC 31)

; gl-controlled-forward-castle
(defconst placed-forward 32)
(defconst next-to-wall 33)

; gl-wonder-build-attempt-stage
(defconst saving-resources 1)
(defconst placed 2)
(defconst lost 3)

; gl-sling-counter-type
(defconst anti-boom -33)
(defconst anti-sling -38)

; gl-raid-type
(defconst archer-sneak 5)
(defconst archer-raid 15)
(defconst knight-raid 16)
(defconst scout-raid 17)

; gl-raid-stage

(defconst approaching 45)
(defconst arrived 55)
(defconst retreating 56)

; gl-FC-type
(defconst gv-0-villagers -2); Khmer
(defconst gv-wheelbarrow 0)
(defconst gv-2-villagers 1)
(defconst gv-3-villagers 2)

; gl-strategy-type
(defconst default 0)
(defconst basic-flush 0)
(defconst controlled-flush 1)
(defconst FC 2)
(defconst FC2 3)
(defconst FI 4)
(defconst FI2 5)

; gl-feudal-infantry
(defconst men-at-arms 1)

; gl-feudal-archery
(defconst archers 1)
(defconst archer-skirm 2)
(defconst skirmishers 3)
(defconst pure-archers 4)

; gl-advanced-infantry
(defconst heavy-swordsmen 3)
(defconst pikemen 12)

; gl-advanced-archery
(defconst slingers 2)
(defconst heavy-archers 3)
(defconst full-upgrades 4)
(defconst heavy-cannoneers 5)
(defconst light-cannoneers 6)
(defconst CAs 7)
(defconst backup-xbows 8)
(defconst scorpions 9)
(defconst elite-skirmishers 10)
(defconst hun-CAs 11)
(defconst light-archers 12)
(defconst light-CAs 13)
(defconst medium-cannoneers 14)

; gl-advanced-cavalry
(defconst indian-camels 2)
(defconst heavy-knights 2)
(defconst heavy-camels 3)
(defconst light-elephants 4)
(defconst heavy-elephants 5)
(defconst LC 11)

; gl-eagles
(defconst flush-counter-eagles 1)
(defconst heavy-eagles 2)
(defconst extra-eagles 3)

; gl-advanced monastery
(defconst monks 893)

; gl-eew-strategy-type
(defconst boom 10)
(defconst fast-imp 13)
(defconst plain-fast-imp 14)

; gl-castle-age-style
(defconst mangonel-push 11)
(defconst mangonel-defence 12)
(defconst one-workshop-mangonels 13)

; gl-rush-suitability-on-map
(defconst VERY-LOW 21)
(defconst LOW 22)
(defconst AVERAGE 23)
(defconst GOOD 24)

; gl-strategy-aggressiveness-level
(defconst HIGH 24)

; gl-strategy-cooperation
(defconst enabled 3453)

; gl-identity
(defconst Unknown 69)
(defconst Promi 420)
(defconst Barbarian 4651)

; gl-slinging
(defconst slinging 2197)
(defconst forced-sling 2198)
(defconst shot 3197)

; gl-resources-on-map
(defconst plenty 7)
(defconst regular 9)

; gl-scout-party
(defconst leader 92386)

; gl-TC-garrisoning
(defconst shoot-stage1 1)
(defconst shoot-stage2 2)
(defconst wolf-stage1 3)
(defconst wolf-stage2 4)
(defconst modern-build-order-stages 5)
(defconst early-retask-stage1 5)
(defconst deer-hunt-stage1 6)
(defconst boar-lurer-stage1 7)

; gl-flag
(defconst farm-dropped 1)
(defconst last-mill-full 2)
(defconst manual-farms 4)
(defconst wonder-build-attempt 8)
(defconst pikeman-upgrade-notice 16)
(defconst sync-update-test 32)
(defconst meso-civ-focus 64)
(defconst disabled-luring-scouting 128)
(defconst ok-chat-flag 256)
(defconst target-system-rewriting 512)
(defconst defend-group-notice 1024)
(defconst trade-sling 2048)
(defconst walls-deleted 4096)
(defconst stuck-notice 8192)
(defconst villager-queue-notice 16384)


; state-flag
(defconst group-active 1)
(defconst march-state1 2)
(defconst march-state2 4)
(defconst march-state3 8)
(defconst march-state4 16)
(defconst march-state5 32)
(defconst initializing 64)
(defconst combat-mode 128)
(defconst size-increase 256)
(defconst retreating-mode 512)
(defconst ignore-structures 1024)
(defconst empty-retarget 2048)
(defconst suicide-enabled 4096); allow trading for villagers instead of retreating
(defconst melee-group 8192)
(defconst fast-group 16384)
;(defconst land-group 32768)
;(defconst route-reset 65536)
;(defconst dive-in 131072)
;(defconst full-dive-in 262144)
;(defconst partial-retreat 524288)

; gl-strategy-requirement

#load-if-defined DEATH-MATCH
(defconst gl-strategy-requirement gl-strategy-class)
(defconst gl-saved-id-goal gl-scout-target-id)
#else
(defconst gl-strategy-requirement gl-strategy)
(defconst gl-saved-id-goal temporary-goal7); Not saved
#end-if

; gl-strategy
(defconst default 0)
(defconst flush 0)

(defconst eew-strategy 2)
(defconst heavy-krush 3)
(defconst wonder-race-blocked-vills 3)
(defconst CA-boom 4)
(defconst archery-boom 5)

(defconst xbow-rush 7)
(defconst ew-boom 8)
(defconst turkish-fast-imp 9)
(defconst wonder-race-fi 10)
(defconst castle-drop 11)
(defconst xbow-boom 12)
(defconst scorpion-rush 13)
(defconst flush-overwrite 14)
(defconst CA-rush 15)
(defconst eagle-rush 16); Mayan/Incan
(defconst eagle-monk-rush 16); Aztec
(defconst scorpion-boom 17)
(defconst forward 18)
(defconst eles 19)


(defconst mayan-fi-counter 22)
(defconst gothic-boom 23)
(defconst scrush 24)
(defconst trush-push 25)
(defconst wall-boom 26)
(defconst fi-monk-rush 27)
(defconst grush 28)
(defconst landing 29)
(defconst krush 30)
(defconst sling 31)
(defconst eternal-drush 32)
(defconst michi-boom 33)
(defconst fi-castle-drop 34)
(defconst castle-push 35)


(defconst castle-sling 38)

(defconst knight-boom 40)
(defconst camel-boom 40)
(defconst mongol-boom 41)
(defconst monk-mango-push 42)
(defconst knight-rush 43)
(defconst camel-rush 43)
(defconst turtle-rush 44)
(defconst fc-notice 45)
(defconst nothing-FC-boom 46); Nothing-strategies aren't yet properly separated from each other
(defconst nothing-feudal-boom 47)
(defconst nothing-FC-rush 48)
(defconst nothing-market-flush 49)
(defconst war-galley-rush 50)
(defconst fire-ship-rush 51)
(defconst turkish-bombardment 52)
(defconst champion-boom 52)
(defconst elephant-boom 52)
(defconst paladin-boom 52)
(defconst uu-boom 52)
(defconst trush 53)

; post-imp DM
(defconst dm-eagles 101)
(defconst dm-champs 102)
(defconst dm-arbalests 103)
(defconst dm-palas 104)
(defconst dm-cannoneers 105)
(defconst dm-camels 106)
(defconst dm-turtling 107)
(defconst dm-CA 108)
(defconst dm-husks 109)
(defconst dm-halb-arbalest 110)
(defconst dm-halb-husk 111)
(defconst dm-halb-champ 112)
(defconst dm-husk-champ 113)
(defconst dm-eagle-halb 114)
(defconst dm-eagle-champ 115)
(defconst dm-eagle-arbalest 116)
(defconst dm-halb-cannoneer 117)
(defconst dm-pala-CA 118)
(defconst dm-pala-arbalest 119)
(defconst dm-pala-cannoneer 120)
(defconst dm-UU 121)
(defconst dm-camel-cannoneer 122)
(defconst dm-champ-cannoneer 123)
(defconst dm-pala-turtle 124)
(defconst dm-UU-halb 125)
(defconst dm-UU-halb-cannoneer 126)
(defconst dm-champ-turtle 127)
(defconst dm-UU-champ 128)
(defconst dm-halb-scorpion 129)
(defconst dm-UU-scorpion 130)
(defconst dm-halb-onager 131)
(defconst dm-champ-scorpion 132)
(defconst dm-pala-scorpion 133)
(defconst dm-eles 134)

(defconst dm-galleons 1)
(defconst dm-fireships 2)
(defconst dm-fire-galley 3)
(defconst dm-light-galleons 4)
(defconst dm-light-fireships 5)
(defconst dm-light-fire-galley 6)

; dm-UU-type
(defconst useless-type 0)
(defconst anti-infantry-type 1)
(defconst anti-archer-type 2)
(defconst anti-cavalry-type 3)
(defconst infantry-type 4)
(defconst archer-type 5)
(defconst cavalry-type 6)
(defconst durable-type 7)
(defconst gunpowder-type 8)
(defconst anti-UU-type 9)
(defconst trash-unit-type 10)

; gl-strategy-class
(defconst basic-class 1)
(defconst special-class 2)

; ============ MORE

(defconst forager1 120)
(defconst forager2 354)
(defconst hunter1 122)
(defconst hunter2 216)
(defconst shepherd1 592)
(defconst shepherd2 590)
(defconst lumberjack1 123)
(defconst lumberjack2 218)
(defconst gold-miner1 579)
(defconst gold-miner2 581)
(defconst fisherman1 56)
(defconst fisherman2 57)
(defconst farmer1 259)
(defconst farmer2 214)
(defconst builder1 118)
(defconst builder2 212)
(defconst idle-villager1 83)
(defconst idle-villager2 293)
(defconst livestock-class 958)
(defconst sheep 958)
(defconst ri-herbal-medicine 441)
(defconst ri-anarchy 16)
(defconst ri-perfusion 457)
(defconst huskarl2 759)
(defconst elite-huskarl2 761)
(defconst hunting-wolf 700)
(defconst unpacked-trebuchet 42)
(defconst dead-miner1 221)
(defconst dead-miner2 229)
(defconst dead-builder1 213)
(defconst dead-builder2 225)
(defconst dead-cart1 178)
(defconst dead-cart2 205)
(defconst cobra-car 748)
(defconst saboteur 706)
(defconst monkey-boy 860)
(defconst koth-monument 826)
(defconst king 434)
(defconst flare 274)
(defconst sea-tower 785)
(defconst boarding-galley 536)
(defconst gate-ascending 487)
(defconst gate-ascending-closed 64)
(defconst gate-ascending-open 78)
(defconst gate-descending 490)
(defconst gate-descending-closed 88)
(defconst gate-descending-open 99)
(defconst gate-horizontal 665)
(defconst gate-horizontal-closed 659)
(defconst gate-horizontal-open 661)
(defconst gate-vertical 673)
(defconst gate-vertical-closed 667)
(defconst gate-vertical-open 669)
(defconst town-center-foundation 621)
(defconst farm-class 949)

(defconst forage-bush 59)
(defconst deep-fish 905)
(defconst shore-fish 933)

(defconst gold-mine 66)
(defconst stone-mine 102)
(defconst relic 285)

(defconst deer 65)
(defconst wild-boar 48)
(defconst javelina 822)
(defconst wolf 126)
(defconst jaguar 812)
(defconst tree 915)
(defconst horse 814)

(defconst zebra 1019)
(defconst ostrich 1026)
(defconst elephant 936); not detected
(defconst rhino 1139)
(defconst fruit-bush 1059)

(defconst forage-class 907)
(defconst deer-class 909)
(defconst boar-class 910)

(defconst sn-allow-resource-spending 39); < 0 = block to get a certain technology, >= 0 technologies can be taken depending on their importance, > 5 free spending
(defconst sn-threat-level 45); The smaller the number the less units are required for attacking. Varies between -6 and 2
(defconst sn-allow-new-build-order 49); 1 = land map, 2 = water map, rest for special dark age styles
(defconst sn-add-rams-in-attack 53)
(defconst sn-unit-spreading2 64)
(defconst sn-wood-found 65)
(defconst sn-age-up-castle 71); To know when to up while doing a basic-class flush
(defconst sn-enemy-flush-notice 71); Re-use same number
(defconst sn-extra-builder-notice 71)
(defconst sn-strategy-lock 78)
(defconst sn-lumber-time 80)
(defconst sn-enemy-castle-count 89)
(defconst sn-skip-first-mining-camp 94)
(defconst sn-forest-distance 126)
(defconst sn-stance-reset-notice 152)
(defconst sn-civ-comparison 152)
(defconst sn-retreating 169)
(defconst sn-boars-on-map 170)
(defconst sn-hitting-pop-cap 170)
(defconst sn-sheep-count 171)
(defconst sn-unit-queue-speed 171)
(defconst sn-town-center-start 174)
(defconst sn-lumber-camp-escrow 178)
(defconst sn-nomad-style-start 180)
(defconst sn-heresy-escrow 181)
(defconst sn-barbarian-count 182)
(defconst sn-sheep-scouting-notice 183)
(defconst sn-dm-low-housing-time 183)
(defconst sn-villager-deleting 186)
(defconst sn-sling-control 190)
(defconst sn-siege-workshop-escrow 190)
(defconst sn-low-eco-push 190)
(defconst sn-fast-imp-switch 190)
(defconst sn-patrol-group-notice 190)
(defconst sn-upgrade-eagles 191)
(defconst sn-start-with-forage 193)
(defconst sn-market-notice 193)
(defconst sn-lumber-camp-security 206)
(defconst sn-unit-spreading 209)
(defconst sn-pre-mill-fishers 213)
(defconst sn-party-scout-count 214)
(defconst sn-ally-defence 215)
(defconst sn-tc-control-time 217)
(defconst sn-monk-trained 223)
(defconst sn-farm-block 224)

(defconst sn-food-modifier-percentage 156)
(defconst sn-wood-modifier-percentage 157)
(defconst sn-stone-modifier-percentage 158)
(defconst sn-gold-modifier-percentage 159)

(defconst sn-special-attack-type2 107)
(defconst sn-special-attack-influence2 110)

(defconst deep-fish-food 905)
(defconst forage-food 907)
(defconst deer-food 909)
(defconst boar-food 910)
(defconst fish-food 933)
(defconst farm-food 949)
(defconst sheep-food 958)

(defconst CHECKING 0)
(defconst patrol-off 10)
(defconst PARTLY 11)
(defconst disable-stone 11)
(defconst YES 12)
(defconst patrol-on 13)
(defconst NO 13)
(defconst direct-attack-disabled 14)
(defconst NONE 14)
(defconst SOME 15)
(defconst MOST 16)
(defconst ALL 17)
(defconst LAND-ARMY 18)
(defconst EVEN-CASTLE 19)
(defconst direct-raid 20)
(defconst potential-raid 21)
(defconst to-pocket 22)
(defconst DUC-system 23)

(defconst game-time 0)
(defconst population-cap 1)
(defconst population-headroom 2)
(defconst housing-headroom 3)
(defconst idle-farm-count 4)
(defconst food-amount 5)
(defconst wood-amount 6)
(defconst stone-amount 7)
(defconst gold-amount 8)
(defconst escrow-amount 9)
(defconst commodity-buying-price 10)
(defconst commodity-selling-price 11)
(defconst dropsite-min-distance 12)
(defconst soldier-count 13)
(defconst attack-soldier-count 14)
(defconst defend-soldier-count 15)
(defconst warboat-count 16)
(defconst attack-warboat-count 17)
(defconst defend-warboat-count 18)
(defconst current-age 19)
(defconst current-score 20)
(defconst civilization 21)
(defconst player-number 22)
(defconst player-in-game 23)
(defconst unit-count 24)
(defconst unit-type-count 25)
(defconst unit-type-count-total 26)
(defconst building-count 27)
(defconst building-type-count 28)
(defconst building-type-count-total 29)
(defconst population 30)
(defconst military-population 31)
(defconst civilian-population 32)
(defconst random-number 33)
(defconst resource-amount 34)
(defconst player-distance 35)
(defconst allied-goal 36)
(defconst allied-sn 37)
(defconst resource-percent 38)
(defconst enemy-buildings-in-town 39)
(defconst enemy-units-in-town 40)
(defconst enemy-villagers-in-town 41)
(defconst players-in-game 42)
(defconst defender-count 43)
(defconst building-type-in-town 44)
(defconst unit-type-in-town 45)
(defconst villager-type-in-town 46)
(defconst gaia-type-count 47)
(defconst gaia-type-count-total 48)

(defconst scout-cavalry-class 947)
(defconst villager-class 904)
(defconst building-class 903)
(defconst tower-class 952)
(defconst wall-class 927)
(defconst gate-class 939)
(defconst infantry-class 906)
(defconst archery-class 900)
(defconst archery-cannon-class 944)
(defconst cavalry-class 912)
(defconst cavalry-archer-class 936)
(defconst cavalry-cannon-class 923)
(defconst monastery-class 918)
(defconst siege-weapon-class 913)
(defconst scorpion-class 955)
(defconst packed-trebuchet-class 951)
(defconst unpacked-trebuchet-class 954)
(defconst petard-class 935)
(defconst warship-class 922)
(defconst all-units-class -1)
(defconst dangerous-animal-class 910)
(defconst transport-ship-class 920)
(defconst tree-class 915)
(defconst stone-mine-class 908)
(defconst gold-mine-class 932)

(defconst research-unavailable 0)
(defconst research-available 1)
(defconst research-pending 2)
(defconst research-complete 3)

(defconst aggressive 0)
(defconst defensive 1)
(defconst stand-ground 2)
(defconst no-attack 3)

(defconst amount-food 0)
(defconst amount-wood 1)
(defconst amount-stone 2)
(defconst amount-gold 3)
(defconst amount-population-cap 4)
(defconst amount-religion 5)
(defconst amount-current-age 6)
(defconst amount-relics 7)
(defconst amount-trade-bonus 8)
(defconst amount-trade-goods 9)
(defconst amount-trade-production 10)
(defconst amount-population 11)
(defconst amount-decay 12)
(defconst amount-discovery 13)
(defconst amount-ruins 14)
(defconst amount-meat 15)
(defconst amount-berries 16)
(defconst amount-fish 17)
(defconst amount-kills 20)
(defconst amount-research-count 21)
(defconst amount-exploration 22)
(defconst amount-convert-priest 27)
(defconst amount-convert-building 28)
(defconst amount-building-limit 30)
(defconst amount-food-limit 31)
(defconst amount-unit-limit 32)
(defconst amount-maintenance 33)
(defconst amount-faith 34)
(defconst amount-faith-recharge-rate 35)
(defconst amount-farm-food 36)
(defconst amount-civilian-population 37)
(defconst amount-all-techs-achieved 39)
(defconst amount-military-population 40)
(defconst amount-conversions 41)
(defconst amount-wonder 42)
(defconst amount-razings 43)
(defconst amount-kill-ratio 44)
(defconst amount-player-killed 45)
(defconst amount-tribute-inefficiency 46)
(defconst amount-gold-bonus 47)
(defconst amount-town-center-unavailable 48)
(defconst amount-gold-counter 49)
(defconst amount-writing 50)
(defconst amount-monasteries 52)
(defconst amount-tribute 53)
(defconst amount-hold-ruins 54)
(defconst amount-hold-relics 55)
(defconst amount-ore 56)
(defconst amount-captured-unit 57)
(defconst amount-trade-good-quality 59)
(defconst amount-trade-market-level 60)
(defconst amount-formations 61)
(defconst amount-building-housing-rate 62)
(defconst amount-gather-tax-rate 63)
(defconst amount-gather-accumulator 64)
(defconst amount-salvage-decay-rate 65)
(defconst amount-allow-formations 66)
(defconst amount-can-convert 67)
(defconst amount-player1-kills 69)
(defconst amount-player2-kills 70)
(defconst amount-player3-kills 71)
(defconst amount-player4-kills 72)
(defconst amount-player5-kills 73)
(defconst amount-player6-kills 74)
(defconst amount-player7-kills 75)
(defconst amount-player8-kills 76)
(defconst amount-convert-resistance 77)
(defconst amount-trade-vig-rate 78)
(defconst amount-stone-bonus 79)
(defconst amount-queued-count 80)
(defconst amount-training-count 81)
(defconst amount-raider 82)
(defconst amount-boarding-recharge-rate 83)
(defconst amount-starting-villagers 84)
(defconst amount-research-cost-mod 85)
(defconst amount-research-time-mod 86)
(defconst amount-convert-boats 87)
(defconst amount-fish-trap-food 88)
(defconst amount-heal-rate-modifier 89)
(defconst amount-heal-range 90)
(defconst amount-starting-food 91)
(defconst amount-starting-wood 92)
(defconst amount-starting-stone 93)
(defconst amount-starting-gold 94)
(defconst amount-raider-ability 95)
(defconst amount-berserker-heal-timer 96)
(defconst amount-dominant-sheep-control 97)
(defconst amount-object-cost-summation 98)
(defconst amount-research-cost-summation 99)
(defconst amount-relic-income-summation 100)
(defconst amount-trade-income-summation 101)
(defconst amount-player1-tribute 102)
(defconst amount-player2-tribute 103)
(defconst amount-player3-tribute 104)
(defconst amount-player4-tribute 105)
(defconst amount-player5-tribute 106)
(defconst amount-player6-tribute 107)
(defconst amount-player7-tribute 108)
(defconst amount-player8-tribute 109)
(defconst amount-player1-kill-value 110)
(defconst amount-player2-kill-value 111)
(defconst amount-player3-kill-value 112)
(defconst amount-player4-kill-value 113)
(defconst amount-player5-kill-value 114)
(defconst amount-player6-kill-value 115)
(defconst amount-player7-kill-value 116)
(defconst amount-player8-kill-value 117)
(defconst amount-player1-razings 118)
(defconst amount-player2-razings 119)
(defconst amount-player3-razings 120)
(defconst amount-player4-razings 121)
(defconst amount-player5-razings 122)
(defconst amount-player6-razings 123)
(defconst amount-player7-razings 124)
(defconst amount-player8-razings 125)
(defconst amount-player1-razing-value 126)
(defconst amount-player2-razing-value 127)
(defconst amount-player3-razing-value 128)
(defconst amount-player4-razing-value 129)
(defconst amount-player5-razing-value 130)
(defconst amount-player6-razing-value 131)
(defconst amount-player7-razing-value 132)
(defconst amount-player8-razing-value 133)
(defconst amount-castle 134)
(defconst amount-kills-by-player1 136)
(defconst amount-kills-by-player2 137)
(defconst amount-kills-by-player3 138)
(defconst amount-kills-by-player4 139)
(defconst amount-kills-by-player5 140)
(defconst amount-kills-by-player6 141)
(defconst amount-kills-by-player7 142)
(defconst amount-kills-by-player8 143)
(defconst amount-razings-by-player1 144)
(defconst amount-razings-by-player2 145)
(defconst amount-razings-by-player3 146)
(defconst amount-razings-by-player4 147)
(defconst amount-razings-by-player5 148)
(defconst amount-razings-by-player6 149)
(defconst amount-razings-by-player7 150)
(defconst amount-razings-by-player8 151)
(defconst amount-value-killed-by-others 152)
(defconst amount-value-razed-by-others 153)
(defconst amount-killed-by-others 154)
(defconst amount-razed-by-others 155)
(defconst amount-tribute-from-player1 156)
(defconst amount-tribute-from-player2 157)
(defconst amount-tribute-from-player3 158)
(defconst amount-tribute-from-player4 159)
(defconst amount-tribute-from-player5 160)
(defconst amount-tribute-from-player6 161)
(defconst amount-tribute-from-player7 162)
(defconst amount-tribute-from-player8 163)
(defconst amount-value-current-units 164)
(defconst amount-value-current-buildings 165)
(defconst amount-food-total 166)
(defconst amount-wood-total 167)
(defconst amount-stone-total 168)
(defconst amount-gold-total 169)
(defconst amount-total-value-of-kills 170)
(defconst amount-total-tribute-received 171)
(defconst amount-total-value-of-razings 172)
(defconst amount-total-castles-built 173)
(defconst amount-total-wonders-built 174)
(defconst amount-tribute-score 175)
(defconst amount-convert-min-adj 176)
(defconst amount-convert-max-adj 177)
(defconst amount-convert-resist-min-adj 178)
(defconst amount-convert-resist-max-adj 179)
(defconst amount-convert-building-min 180)
(defconst amount-convert-building-max 181)
(defconst amount-convert-building-chance 182)
(defconst amount-spies 183)
(defconst amount-value-wonders-castles 184)
(defconst amount-food-score 185)
(defconst amount-wood-score 186)
(defconst amount-stone-score 187)
(defconst amount-gold-score 188)
(defconst amount-wood-bonus 189)
(defconst amount-food-bonus 190)
(defconst amount-relic-rate 191)
(defconst amount-heresy 192)
(defconst amount-theocracy 193)
(defconst amount-crenellations 194)
(defconst amount-construction-rate-mod 195)
(defconst amount-hun-wonder-bonus 196)
(defconst amount-spies-discount 197)

(defconst amount-houses 51)
(defconst amount-hit-points-killed 68)
(defconst amount-hit-points-razings 135)

(defconst projectile-town-center 0)
(defconst projectile-castle 1)
(defconst projectile-watch-tower 2)
(defconst projectile-bombard-tower 3)
(defconst projectile-ship 4)
(defconst projectile-siege 5)
(defconst projectile-fortification 6)
(defconst projectile-any 7)

(defconst with-escrow 0)
(defconst without-escrow 1)

(defconst explored-no 0)
(defconst explored-yes 128)
(defconst explored-active 15)

(defconst place-normal 0)
(defconst place-forward 1)
(defconst place-control 2)
(defconst place-point 3)

(defconst priority-offense 0)
(defconst priority-defense 1)

(defconst find-attacker 0)
(defconst find-random 1)
(defconst find-closest 2)
(defconst find-ordered 3)

(defconst ally 0)
(defconst neutral 1)
(defconst enemy 3)
(defconst any 2)

(defconst hunting 4)
(defconst boar-hunting 5)
(defconst deer-hunting 6)

(defconst monk-set 970)
(defconst trebuchet-set 971)
(defconst huskarl-set 972)
(defconst villager-shepherd 973)
(defconst villager-forager 974)
(defconst villager-farmer 975)
(defconst villager-hunter 976)
(defconst villager-fisherman 977)
(defconst villager-food 978)
(defconst villager-wood 979)
(defconst villager-stone 980)
(defconst villager-gold 981)
(defconst villager-builder 982)
(defconst villager-repairer 983)
(defconst villager-base 984)

(defconst sn-special-attack-influence3 111)

(defconst timer-disabled 0)
(defconst timer-triggered 1)
(defconst timer-running 2)

(defconst group-type-land-attack 100)
(defconst group-type-land-explore 101)
(defconst group-type-land-trade 109)
(defconst group-type-water-attack 102)
(defconst group-type-water-explore 103)
(defconst group-type-water-trade 106)
(defconst group-type-transport-ship 104)
(defconst group-type-fishing-ship 105)
(defconst group-type-forward-builder 107)
(defconst group-type-monk 108)

(defconst idle-type-villager 0)
(defconst idle-type-trade-cart 1)
(defconst idle-type-fishing-ship 2)
(defconst idle-type-trade-cog 3)

(defconst scout-center 0)
(defconst scout-opposite 1)
(defconst scout-corner 2)
(defconst scout-enemy 3)
(defconst scout-border 4)
(defconst scout-mirror 5)
(defconst scout-flank 6)

(defconst adjust-default 0)
(defconst adjust-left 1)
(defconst adjust-top 2)
(defconst adjust-right 3)
(defconst adjust-bottom 4)
(defconst adjust-middle 5)
(defconst adjust-precise 6)

(defconst position-center 0)
(defconst position-opposite 1)
(defconst position-corner 2)
(defconst position-enemy 3)
(defconst position-border 4)
(defconst position-mirror 5)
(defconst position-flank 6)
(defconst position-zero 7)
(defconst position-map-size 8)
(defconst position-self 9)
(defconst position-target 10)
(defconst position-focus 11)
(defconst position-object 12)
(defconst position-point 13)

(defconst search-local 1)
(defconst search-remote 2)

(defconst action-default 0)
(defconst action-move 1)
(defconst action-patrol 2)
(defconst action-guard 3)
(defconst action-follow 4)
(defconst action-stop 5)
(defconst action-ground 6)
(defconst action-garrison 7)
(defconst action-delete 8)
(defconst action-unload 9)
(defconst action-train 10)
(defconst action-gather 11)
(defconst action-lock 12)
(defconst action-work 13)
(defconst action-ungarrison 14)
(defconst action-drop-relic 15)
(defconst action-pack 16)
(defconst action-unpack 17)
(defconst action-none 18)

(defconst formation-line 2)
(defconst formation-box 4)
(defconst formation-stagger 7)
(defconst formation-flank 8)

(defconst cmdid-flag 0)
(defconst cmdid-livestock-gaia 1)
(defconst cmdid-civilian-building 2)
(defconst cmdid-villager 3)
(defconst cmdid-military 4)
(defconst cmdid-trade 5)
(defconst cmdid-monk 6)
(defconst cmdid-transport 7)
(defconst cmdid-relic 8)	;includes monk-with-relic
(defconst cmdid-unknown 9)
(defconst cmdid-military-building 10)

(defconst actionid-attack 600)
(defconst actionid-defend 601)
(defconst actionid-build 602)
(defconst actionid-heal 603)
(defconst actionid-convert 604)
(defconst actionid-explore 605)
(defconst actionid-stop 606)
(defconst actionid-runaway 607)
(defconst actionid-retreat 608)
(defconst actionid-gather 609)
(defconst actionid-move 610)
(defconst actionid-patrol 611)
(defconst actionid-follow 612)
(defconst actionid-hunt 613)
(defconst actionid-transport 614)
(defconst actionid-trade 615)
(defconst actionid-evade 616)
(defconst actionid-enter 617)
(defconst actionid-repair 618)
(defconst actionid-train 619)
(defconst actionid-research 620)
(defconst actionid-unload 621)
(defconst actionid-relic 631)

(defconst orderid-attack 700)
(defconst orderid-defend 701)
(defconst orderid-build 702)
(defconst orderid-heal 703)
(defconst orderid-convert 704)
(defconst orderid-explore 705)
(defconst orderid-stop 706)
(defconst orderid-runaway 707)
(defconst orderid-retreat 708)
(defconst orderid-gather 709)
(defconst orderid-move 710)
(defconst orderid-patrol 711)
(defconst orderid-follow 712)
(defconst orderid-hunt 713)
(defconst orderid-transport 714)
(defconst orderid-trade 715)
(defconst orderid-evade 716)
(defconst orderid-enter 717)
(defconst orderid-repair 718)
(defconst orderid-train 719)
(defconst orderid-research 720)
(defconst orderid-unload 721)
(defconst orderid-relic 731)

(defconst off-mainland 0)
(defconst on-mainland 1)

(defconst object-data-index -1)
(defconst object-data-id 0)
(defconst object-data-type 1)
(defconst object-data-class 2)
(defconst object-data-category 3)
(defconst object-data-cmdid 4)
(defconst object-data-action 5)
(defconst object-data-order 6)
(defconst object-data-target 7)
(defconst object-data-point-x 8)
(defconst object-data-point-y 9)
(defconst object-data-hitpoints 10)
(defconst object-data-maxhp 11)
(defconst object-data-range 12)
(defconst object-data-speed 13)
(defconst object-data-dropsite 14)
(defconst object-data-resource 15)
(defconst object-data-carry 16)
(defconst object-data-garrisoned 17)
(defconst object-data-garrison-count 18)
(defconst object-data-status 19)
(defconst object-data-player 20)
(defconst object-data-attack-stance 21)
(defconst object-data-action-time 22)
(defconst object-data-target-id 23)
(defconst object-data-formation-id 24)
(defconst object-data-patrolling 25)
(defconst object-data-strike-armor 26)
(defconst object-data-pierce-armor 27)
(defconst object-data-base-attack 28)
(defconst object-data-locked 29)
(defconst object-data-garrison-id 30)
(defconst object-data-train-count 31)
(defconst object-data-tasks-count 32)		;increased for internal tasks performed on the object (may be more than 1 per event)
(defconst object-data-attacker-count 33)	;not increased for certain situations like hunting
(defconst object-data-attacker-id 34)		;not set for certain situations like hunting
(defconst object-data-under-attack 35)		;not set for certain situations like hunting
(defconst object-data-attack-timer 36)		;resets to 60s for each attack (buildings only)
(defconst object-data-point-z 37)
(defconst object-data-precise-x 38)			;point x100.0
(defconst object-data-precise-y 39)
(defconst object-data-precise-z 40)
(defconst object-data-researching 41)
(defconst object-data-tile-position 42)		;match with sn-target-point-adjustment
(defconst object-data-tile-inverse 43)
(defconst object-data-distance 44)			;based on target-point
(defconst object-data-precise-distance 45)
(defconst object-data-full-distance 46)
(defconst object-data-map-zone-id 47)
(defconst object-data-on-mainland 48)		;compares map-zone-id to home TC map-zone-id
(defconst object-data-idling 49)
(defconst object-data-move-x 50)
(defconst object-data-move-y 51)
(defconst object-data-precise-move-x 52)
(defconst object-data-precise-move-y 53)
(defconst object-data-reload-time 54)
(defconst object-data-next-attack 55)
(defconst object-data-train-site 56)
(defconst object-data-train-time 57)		;in seconds
(defconst object-data-blast-radius 58)		;radius x100.0
(defconst object-data-blast-level 59)
(defconst object-data-progress-type 60)
(defconst object-data-progress-value 61)
(defconst object-data-min-range 62)
(defconst object-data-target-time 63)		;in milliseconds (not for villagers)
(defconst object-data-heresy 64)		;checks amount-heresy
(defconst object-data-faith 65)			;checks amount-convert-resistance
(defconst object-data-redemption 66)		;checks amount-convert-building
(defconst object-data-atonement 67)		;checks amount-convert-priest
(defconst object-data-theocracy 68)		;checks amount-theocracy
(defconst object-data-spies 69)			;checks amount-spies
(defconst object-data-ballistics 70)
(defconst object-data-gather-type 71)		;food, wood, gold, stone, or -1 for none
(defconst object-data-language-id 72)		;can use to check villager types
(defconst object-data-group-flag 73)		;group id from 0 to 9 or -2 for none
(defconst object-data-hero-flags 74)		;combined hero status flags
(defconst object-data-hero 75)			;has actual hero flag set
(defconst object-data-auto-heal 76)		;will hero heal (non-berserk)
(defconst object-data-no-convert 77)		;cannot be converted
(defconst object-data-frame-delay 78)		;number of frames for projectile delay
(defconst object-data-attack-count 79)		;consecutive attack count
(defconst object-data-to-precise 80)		;precise distance to a precise target-point
(defconst object-data-base-type 81)		;object base type id
(defconst object-data-upgrade-type 82)		;object upgrade type id

(defconst list-active 0)
(defconst list-inactive 1)

(defconst status-pending 0)
(defconst status-ready 2)
(defconst status-resource 3)
(defconst status-down 4)
(defconst status-gather 5)

(defconst search-order-none 0)
(defconst search-order-asc 1)
(defconst search-order-desc 2)

(defconst progress-type-train 102)
(defconst progress-type-research 103)

(defconst terrain-grass 0)
(defconst terrain-grass2 12)
(defconst terrain-grass3 9)
(defconst terrain-grass-snow 34)
(defconst terrain-grass-old 16)
(defconst terrain-water 1)
(defconst terrain-water-deep 22)
(defconst terrain-water-medium 23)
(defconst terrain-water-bridge 28)
(defconst terrain-water-old 15)
(defconst terrain-water-beach 2)
(defconst terrain-shallows 4)
(defconst terrain-ice 26)
(defconst terrain-ice2 35)
(defconst terrain-ice-beach 37)
(defconst terrain-desert 14)
(defconst terrain-dirt 6)
(defconst terrain-dirt2 11)
(defconst terrain-dirt3 3)
(defconst terrain-dirt-snow 33)
(defconst terrain-farm 7)
(defconst terrain-farm1 29)
(defconst terrain-farm2 30)
(defconst terrain-farm3 31)
(defconst terrain-farm-dead 8)
(defconst terrain-forest 10)
(defconst terrain-forest-bamboo 18)
(defconst terrain-forest-jungle 17)
(defconst terrain-forest-oak 20)
(defconst terrain-forest-palm 13)
(defconst terrain-forest-pine 19)
(defconst terrain-forest-snow 21)
(defconst terrain-foundation 27)
(defconst terrain-foundation-snow 36)
(defconst terrain-koh 40)
(defconst terrain-leaves 5)
(defconst terrain-road 24)
(defconst terrain-road-broken 25)
(defconst terrain-road-snow 38)
(defconst terrain-road-fungus 39)
(defconst terrain-snow 32)
(defconst terrain-unknown 41)

(defconst sort-targets 0)
(defconst sort-random 1)
(defconst sort-distance 2)
(defconst sort-hitpoints 3)
(defconst sort-range 4)

(defconst ri-yeomen 3)

(defconst ri-chivalry 493)
(defconst ri-inquisition 492)
(defconst ri-sipahi 491)
(defconst ri-madrasah 490)
(defconst ri-ironclad 489)
(defconst ri-boiling-oil 488)
(defconst ri-nomads 487)
(defconst ri-panokseon 486)
(defconst ri-yasama 484)
(defconst ri-renegades 483)
(defconst ri-atlatl 460)
(defconst ri-war-wolf 461)
(defconst ri-greek-fire 464)
(defconst ri-chieftains 463)
(defconst ri-great-wall 462)
(defconst ri-stronghold 482)

(defconst stable-tarkan 886)
(defconst stable-elite-tarkan 887)

(defconst ri-orthodoxy 512)
(defconst ri-druzhina 513)
(defconst ri-elite-boyar 504)

(defconst boyar 876)
(defconst elite-boyar 878)

(defconst ri-andean-sling 516)
(defconst ri-couriers 517)
(defconst ri-elite-kamayuk 509)

(defconst kamayuk 879)
(defconst elite-kamayuk 881)
(defconst slinger 185)

(defconst ri-sultans 506)
(defconst ri-shatagni 507)
(defconst ri-imperial-camel 521)
(defconst ri-elite-elephant-archer 481)

(defconst elephant-archer 873)
(defconst elite-elephant-archer 875)
(defconst imperial-camel 897)

(defconst ri-mercenaries 514)
(defconst ri-recurve-bow 515)
(defconst ri-elite-magyar-huszar 472)

(defconst magyar-huszar 869)
(defconst elite-magyar-huszar 871)

(defconst ri-silk-road 499)
(defconst ri-pavise 494)
(defconst ri-elite-genoese-crossbow 468)

(defconst genoese-crossbowman 866)
(defconst elite-genoese-crossbowman 868)
(defconst condottiero 882)
(defconst condottiero-unit 184)

(defconst heavy-eagle-warrior 753)

(defconst ri-revetments 525)
(defconst ri-eagle-warrior 384)
(defconst ri-gillnets 65)

(defconst siege-tower 885)
(defconst sea-wall 788)

(defconst organ-gun 106)
(defconst elite-organ-gun 114)
(defconst shotel-warrior 453)
(defconst elite-shotel-warrior 459)
(defconst gbeto 260)
(defconst elite-gbeto 418)
(defconst camel-archer 203)
(defconst elite-camel-archer 208)
(defconst ballista-elephant 760)
(defconst elite-ballista-elephant 891)
(defconst karambit-warrior 836)
(defconst elite-karambit-warrior 830)
(defconst arambai 823)
(defconst elite-arambai 811)
(defconst rattan-archer 784)
(defconst elite-rattan-archer 782)

(defconst caravel 162)
(defconst elite-caravel 183)

(defconst battle-elephant 774)
(defconst elite-battle-elephant 766)
(defconst imperial-skirmisher 762)
(defconst genitour 223)
(defconst elite-genitour 230)
(defconst aofe-fire-ship 467)
(defconst aofe-demolition-ship 653)

(defconst ri-elite-organ-gun 563)
(defconst ri-elite-shotel-warrior 569)
(defconst ri-elite-gbeto 567)
(defconst ri-elite-camel-archer 565)
(defconst ri-elite-ballista-elephant 615)
(defconst ri-elite-karambit-warrior 617)
(defconst ri-elite-arambai 619)
(defconst ri-elite-rattan-archer 621)
(defconst ri-elite-caravel 597)
(defconst ri-elite-genitour 599)

(defconst ri-carrack 572)
(defconst ri-arquebus 573)
(defconst ri-royal-heirs 574)
(defconst ri-torsion-engines 575)
(defconst ri-kasbah 578)
(defconst ri-maghrabi-camels 579)

(defconst ri-tusk-swords 622)
(defconst ri-double-crossbow 623)
(defconst ri-thalassocracy 624)
(defconst ri-forced-levy 625)
(defconst ri-howdah 626)
(defconst ri-manipur-cavalry 627)
(defconst ri-chatras 628)
(defconst ri-paper-money 629)

(defconst ri-tigui 576)
(defconst ri-farimba 577)

(defconst ri-arson 602)
(defconst ri-arrowslits 608)
(defconst ri-elite-battle-elephant 631)
(defconst ri-imperial-skirmisher 655)

; Defining civ IDs to keep AoC-compatibility
(defconst italian 19)
(defconst indian 20)
(defconst incan 21)
(defconst magyar 22)
(defconst slavic 23)
(defconst portuguese 24)
(defconst ethiopian 25)
(defconst malian 26)
(defconst berbers 27)
(defconst khmer 28)
(defconst malay 29)
(defconst burmese 30)
(defconst vietnamese 31)

; ============== CIV SPECIFIC STUFF

#load-if-defined AZTEC-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 100)

(defconst castle-drop-uu-amount 25)
(defconst uu-food-buffer 110)
(defconst late-game-scout-amount 0); Number of scouts fielded in any case
(defconst upgraded-scout-amount 0); Number of scouts in late game when they happen to be fully upgraded
(defconst hit-and-run-unit cobra-car)

(defconst castle-drop-food-gp 44)
(defconst castle-drop-wood-gp 42)
(defconst castle-drop-gold-gp 10)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 120)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 50)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 10)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 0)
(defconst escrow-UU-resource2-count 0)
#load-if-not-defined IMPERIAL-AGE-END
(defconst ffa-strategy xbow-boom)
(defconst regicide-strategy xbow-boom)
(defconst rf-strategy xbow-boom)
(defconst mixed-strategy ew-boom)
#else
(defconst ffa-strategy eew-strategy)
(defconst regicide-strategy eew-strategy)
(defconst rf-strategy eew-strategy)
(defconst mixed-strategy eew-strategy)
#end-if
(defconst boom-strategy uu-boom)
(defconst aggressive-strategy xbow-rush)
(defconst backup-strategy xbow-boom)
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 3)
(defconst DTW-ADVANCED-ARCHERY 0)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14); Never used
(defconst castle-sling-priority2 4)
(defconst landing-priority 7)
(defconst dm-UU-type 1)
(defconst dm-water-plan 2)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 1)
(defconst UU-type infantry-class)
(defconst stone-for-castle-time 1960)
(defconst nothing-number-fc-villagers 25)
(defconst nothing-number-dark-farms 12)
(defconst range-for-UU 0)
(defconst stable-for-UU 0)
(defconst late-game-villagers 87)
(defconst gv-max-carts2 43)
(defconst cannon-galleons-available 0)
(defconst cannons-available 0)
(defconst min-defensive-castles 1)
(defconst trash-war-villager-limit 110)
(defconst preferred-knight-count 30); Why not?
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 1)

(defconst normal-carry 15)
#load-if-defined DARK-AGE-START
(defconst wheel-carry 19)
(defconst cart-carry 29)
#else
#load-if-defined FEUDAL-AGE-START
(defconst wheel-carry 19)
(defconst cart-carry 29)
#else
(defconst wheel-carry 18)
#load-if-defined CASTLE-AGE-START
(defconst cart-carry 27)
#else
(defconst cart-carry 25)
#end-if
#end-if
#end-if

(defconst drush-militias 5)
(defconst minimum-stone-eagles 100)
(defconst lower-number-extra-farms 10)
(defconst higher-number-extra-farms 11)
(defconst mush-support-unit eagle-warrior-line)
(defconst boom-hand-cart-status research-available)
(defconst scout-los -6)
(defconst scout-los2 13)
(defconst scout-los3 44)
#load-if-defined UP-ALLY-IN-GAME
(defconst raid-unit eagle-warrior-line)
#else
(defconst raid-unit skirmisher-line)
#end-if
(defconst scout-unit eagle-warrior-line)
(defconst base-scout-unit eagle-warrior)
(defconst dm-raid-unit eagle-warrior-line)
(defconst anti-skirmisher-unit eagle-warrior-line)
(defconst shot-strategy eew-strategy)
(defconst last-spearman-up ri-pikeman)
#else
#load-if-defined VIKING-CIV
(defconst last-spearman-up ri-pikeman)
#else
(defconst last-spearman-up ri-halberdier)
#end-if
(defconst normal-carry 10)
(defconst wheel-carry 13)
(defconst cart-carry 20)
(defconst drush-militias 3)
(defconst minimum-stone-eagles 0)
(defconst lower-number-extra-farms 11)
(defconst higher-number-extra-farms 12)
(defconst mush-support-unit my-unique-unit-line)
#load-if-defined MAYAN-CIV
(defconst scout-los -6)
(defconst scout-los2 13)
(defconst scout-los3 44)
(defconst shot-strategy eew-strategy)
(defconst cannon-galleons-available 0)
(defconst dm-raid-unit eagle-warrior-line)
(defconst anti-skirmisher-unit eagle-warrior-line)
(defconst boom-hand-cart-status research-available)
#load-if-not-defined IMPERIAL-AGE-END
(defconst mixed-strategy ew-boom)
#else
(defconst mixed-strategy eew-strategy)
#end-if
#load-if-defined UP-ALLY-IN-GAME
(defconst raid-unit eagle-warrior-line)
#else
(defconst raid-unit skirmisher-line)
#end-if
(defconst base-scout-unit eagle-warrior)
(defconst scout-unit eagle-warrior-line)
#else
(defconst boom-hand-cart-status research-pending)
#load-if-defined HUN-CIV
#load-if-defined UP-GAME-WK
(defconst cannon-galleons-available 0)
#else
(defconst cannon-galleons-available 1)
#end-if
#else
#load-if-not-defined INCAN-CIV
#load-if-not-defined BRITON-CIV
(defconst cannon-galleons-available 1)
#end-if
#end-if
#end-if
#load-if-defined INCAN-CIV
(defconst scout-los -6)
(defconst scout-los2 13)
(defconst scout-los3 44)
(defconst shot-strategy eew-strategy)
(defconst dm-raid-unit eagle-warrior-line)
(defconst anti-skirmisher-unit eagle-warrior-line)
(defconst cannon-galleons-available 0)
#load-if-not-defined IMPERIAL-AGE-END
(defconst mixed-strategy ew-boom)
#else
(defconst mixed-strategy eew-strategy)
#end-if
#load-if-defined UP-ALLY-IN-GAME
(defconst raid-unit eagle-warrior-line)
#else
(defconst raid-unit skirmisher-line)
#end-if
(defconst base-scout-unit eagle-warrior)
(defconst scout-unit eagle-warrior-line)
#else
(defconst base-scout-unit scout-cavalry)
(defconst scout-unit scout-cavalry-line)
(defconst anti-skirmisher-unit cavalry-class)
(defconst shot-strategy knight-rush)
(defconst mixed-strategy knight-rush)
#load-if-defined GOTHIC-CIV
(defconst dm-raid-unit huskarl2)
(defconst raid-unit huskarl-line)
#else
#load-if-defined BRITON-CIV
(defconst dm-raid-unit militiaman-line)
#load-if-defined UP-GAME-WK
(defconst cannon-galleons-available 1)
#else
(defconst cannon-galleons-available 0)
#end-if
#else
#load-if-defined KOREAN-CIV
(defconst dm-raid-unit militiaman-line)
#else
#load-if-defined JAPANESE-CIV
(defconst dm-raid-unit militiaman-line)
#else
#load-if-defined MONGOL-CIV
(defconst dm-raid-unit militiaman-line)
#else
#load-if-defined VIKING-CIV
(defconst dm-raid-unit militiaman-line)
#else
#load-if-defined BYZANTINE-CIV
(defconst dm-raid-unit knight-line)
#else
#load-if-defined PERSIAN-CIV
(defconst dm-raid-unit knight-line)
#else
#load-if-defined PORTUGUESE-CIV
(defconst dm-raid-unit militiaman-line)
#else
(defconst dm-raid-unit cavalry-class)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#load-if-defined CELTIC-CIV
(defconst raid-unit woad-raider-line)
#else
(defconst raid-unit scout-cavalry-line)
#end-if
#end-if
#end-if
#end-if
#end-if

#load-if-defined BRITON-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 60)

(defconst castle-drop-uu-amount 30)
(defconst uu-food-buffer 0)
(defconst late-game-scout-amount 0)
#load-if-defined UP-2-PLAYER-GAME
(defconst upgraded-scout-amount 10)
#else
(defconst upgraded-scout-amount 0)
#end-if
(defconst hit-and-run-unit cobra-car)

(defconst castle-drop-food-gp 38)
(defconst castle-drop-wood-gp 46)
(defconst castle-drop-gold-gp 12)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 40)
(defconst castle-drop-wood-gp-points 100)
(defconst castle-drop-gold-gp-points 90)

(defconst escrow-UU-soldier 35)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 16)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 850)
(defconst escrow-UU-resource2-count 850)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy uu-boom)
(defconst regicide-strategy castle-drop)
(defconst rf-strategy castle-drop)
(defconst backup-strategy castle-drop)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archers)
(defconst DTW-ADVANCED-INFANTRY 3)
(defconst DTW-ADVANCED-ARCHERY 0)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 3)
(defconst landing-priority 9)
(defconst dm-UU-type 5)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 0)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type archery-class)
(defconst stone-for-castle-time 1860)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 0)
(defconst late-game-villagers 82)
(defconst gv-max-carts2 43)
(defconst cannons-available 0)
(defconst min-defensive-castles 4)
(defconst trash-war-villager-limit 113)
(defconst preferred-knight-count 12)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 1)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst town-center-wood 138)
(defconst gv-10-boar-villagers 9)
(defconst gv-11-boar-villagers 10)
#else
#load-if-defined MALIAN-CIV
(defconst town-center-wood 234)
#else
(defconst town-center-wood 275)
#end-if
(defconst gv-10-boar-villagers 10)
(defconst gv-11-boar-villagers 11)
#end-if

#load-if-defined BYZANTINE-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 100)

(defconst castle-drop-uu-amount 20)
(defconst uu-food-buffer 120)
(defconst late-game-scout-amount 0)
(defconst upgraded-scout-amount 15)
(defconst hit-and-run-unit cobra-car)

(defconst castle-drop-food-gp 44)
(defconst castle-drop-wood-gp 41)
(defconst castle-drop-gold-gp 11)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 120)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 120)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 190)
(defconst escrow-UU-count 10)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1600)
(defconst escrow-UU-resource2-count 800)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy uu-boom)
#load-if-not-defined REGICIDE
(defconst regicide-strategy xbow-boom)
#else
(defconst regicide-strategy castle-drop)
#end-if
(defconst rf-strategy castle-drop)
(defconst backup-strategy xbow-boom)
(defconst aggressive-strategy xbow-rush)
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER skirmishers)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 0)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 5)
(defconst landing-priority 17)
(defconst dm-UU-type 1)
(defconst dm-water-plan 3)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 0); They do have but ECatas are better with byzantines
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type cavalry-class)
#load-if-defined TINY-MAP
(defconst stone-for-castle-time 2200)
#else
(defconst stone-for-castle-time 1900)
#end-if
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 1)
(defconst late-game-villagers 88)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 3)
(defconst trash-war-villager-limit 105)
(defconst preferred-knight-count 12)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 1)

(defconst maximum-castle-queue-food 407)
(defconst high-castle-food 517)
(defconst needed-castle-food 667)
(defconst very-high-castle-food 767)

(defconst maximum-castle-queue-gold 256)
(defconst high-castle-gold 386)
(defconst needed-castle-gold 536)
(defconst extra-monk-gold 636)
#load-if-not-defined WONDER-RACE
(defconst very-high-castle-gold 936)
#else
(defconst very-high-castle-gold 686)
#end-if

(defconst extra-knights 1); Switching to UUs but no castle up yet -> use knights if prepared for knights already
(defconst ri-required-armor-upgrade ri-plate-barding); Required to allow castle age knights anyway - block with byzantines
(defconst archery-goal gl-advanced-trash)
(defconst landing-navy-unit fire-ship-line)
(defconst anti-mangudai-camels 1)
#else
#load-if-not-defined ITALIAN-CIV
(defconst maximum-castle-queue-food 530)
(defconst high-castle-food 800)
(defconst needed-castle-food 1000)
(defconst very-high-castle-food 1100)

(defconst maximum-castle-queue-gold 400)
(defconst high-castle-gold 600)
(defconst needed-castle-gold 800)
(defconst extra-monk-gold 900)
#else
(defconst maximum-castle-queue-food 410)
(defconst high-castle-food 650)
(defconst needed-castle-food 850)
(defconst very-high-castle-food 950)

(defconst maximum-castle-queue-gold 320)
(defconst high-castle-gold 520)
(defconst needed-castle-gold 680)
(defconst extra-monk-gold 780)
#end-if
#load-if-defined CHINESE-CIV
(defconst anti-mangudai-camels 1)
#else
#load-if-defined TURKISH-CIV
(defconst anti-mangudai-camels 1)
#else
#load-if-defined SARACEN-CIV
(defconst anti-mangudai-camels 1)
#else
(defconst anti-mangudai-camels 0)
#end-if
#end-if
#end-if
#load-if-not-defined WONDER-RACE
(defconst very-high-castle-gold 1200)
#else
(defconst very-high-castle-gold 950)
#end-if

#load-if-defined JAPANESE-CIV
(defconst extra-knights 1)
#else
(defconst extra-knights 0)
#end-if
(defconst ri-required-armor-upgrade ri-chain-barding)
(defconst archery-goal gl-advanced-archery)
#load-if-defined AZTEC-CIV
(defconst landing-navy-unit fire-ship-line)
#else
(defconst landing-navy-unit galley-line)
#end-if
#end-if

#load-if-defined CELTIC-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 0)

(defconst castle-drop-uu-amount 25)
(defconst uu-food-buffer 115)
(defconst late-game-scout-amount 0)
(defconst upgraded-scout-amount 17)
(defconst hit-and-run-unit cobra-car)

(defconst castle-drop-food-gp 44)
(defconst castle-drop-wood-gp 43)
(defconst castle-drop-gold-gp 9)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 120)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 50)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 10)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1000)
(defconst escrow-UU-resource2-count 800)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy uu-boom)
#load-if-defined REGICIDE
(defconst regicide-strategy castle-drop)
#else
#load-if-defined UP-ALLY-IN-GAME
#load-if-defined UP-POCKET-POSITION
#load-if-defined ARABIA-MAP
(defconst regicide-strategy krush)
#else
(defconst regicide-strategy scorpion-boom)
#end-if
#else
(defconst regicide-strategy scorpion-boom)
#end-if
#else
(defconst regicide-strategy scorpion-boom)
#end-if
#end-if
(defconst rf-strategy castle-drop)
(defconst backup-strategy castle-drop)
#load-if-defined UP-POCKET-POSITION
(defconst aggressive-strategy knight-rush)
#else
(defconst aggressive-strategy scorpion-rush)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 9)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 3)
(defconst landing-priority 16)
(defconst dm-UU-type 4)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 0); Too weak to be used
(defconst elephants-available 0)
(defconst SO-in-tech-tree 1)
(defconst UU-type infantry-class)
(defconst stone-for-castle-time 1860)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 0)
(defconst late-game-villagers 88)
(defconst gv-max-carts2 43)
(defconst cannons-available 0)
(defconst min-defensive-castles 1)
(defconst trash-war-villager-limit 120)
(defconst preferred-knight-count 12)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 1)

(defconst mangonel-shot-time 4)
(defconst wood-bonus-civ 1)
#else
(defconst mangonel-shot-time 5)
#load-if-defined HUN-CIV
(defconst wood-bonus-civ 1)
#else
#load-if-defined JAPANESE-CIV
(defconst wood-bonus-civ 1)
#else
#load-if-defined MAYAN-CIV
(defconst wood-bonus-civ 1)
#else
#load-if-defined TEUTONIC-CIV
(defconst wood-bonus-civ 1)
#else
#load-if-defined MALIAN-CIV
(defconst wood-bonus-civ 1)
#else
(defconst wood-bonus-civ 0)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

#load-if-defined CHINESE-CIV
(defconst wonder-dark-villagers 33)
(defconst mush-strength 25)

(defconst castle-drop-uu-amount 30)
(defconst uu-food-buffer 0)
(defconst late-game-scout-amount 20)
(defconst upgraded-scout-amount 20)
(defconst hit-and-run-unit cobra-car)

(defconst castle-drop-food-gp 38)
(defconst castle-drop-wood-gp 46)
(defconst castle-drop-gold-gp 12)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 40)
(defconst castle-drop-wood-gp-points 105)
(defconst castle-drop-gold-gp-points 85)

(defconst escrow-UU-soldier 35)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 16)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 760)
(defconst escrow-UU-resource2-count 760)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy uu-boom)
(defconst regicide-strategy castle-drop)
(defconst rf-strategy castle-drop)
(defconst backup-strategy castle-drop)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 3)
(defconst DTW-ADVANCED-ARCHERY 9)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 6)
(defconst castle-sling-priority2 3)
(defconst landing-priority 10)
(defconst dm-UU-type 5)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 0)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type archery-class)
(defconst stone-for-castle-time 1860)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 14)
(defconst range-for-UU 2)
(defconst stable-for-UU 0)
(defconst late-game-villagers 86)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 4)
(defconst trash-war-villager-limit 120)
(defconst preferred-knight-count 20)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 1)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst dark-housing-cap 2)
(defconst bad-start-sheep 6)
(defconst wr-min-houses 3)
(defconst farm-number1 5)
(defconst farm-number2 7)
(defconst farm-number3 8)
(defconst flush-villagers1 23)
(defconst flush-villagers2 25)
(defconst flush-villagers3 24)
(defconst transport-max-villagers 5)
(defconst land-nomad-TC-villagers 6)
(defconst min-food-villagers 7)
(defconst min-wood-for-extra-food 0)
(defconst game-time-for-early-boar 128)
(defconst hardest-flush-vills 23)
(defconst extra-food-for-uu 1)
#else
(defconst dark-housing-cap 3)
(defconst bad-start-sheep 4)
(defconst wr-min-houses 4)
(defconst farm-number1 4)
(defconst min-wood-for-extra-food 1)
(defconst game-time-for-early-boar 105)
(defconst hardest-flush-vills 22)
#load-if-defined MAYAN-CIV
(defconst farm-number2 5)
(defconst min-food-villagers 7)
#else
(defconst farm-number2 6)
#load-if-defined AZTEC-CIV
(defconst min-food-villagers 7)
#else
#load-if-defined UP-MICHI-STYLE
(defconst min-food-villagers 7)
#else
#load-if-defined BRITON-CIV
(defconst min-food-villagers 5)
#else
(defconst min-food-villagers 6)
#end-if
#end-if
#end-if
#end-if
(defconst farm-number3 7)
#load-if-not-defined MONGOL-CIV
(defconst flush-villagers1 22)
(defconst flush-villagers3 23)
(defconst flush-villagers2 24)
(defconst extra-food-for-uu 1)
#else
(defconst flush-villagers1 21)
(defconst flush-villagers3 22)
(defconst flush-villagers2 23)
#load-if-defined BRITON-CIV
(defconst extra-food-for-uu 1)
#else
(defconst extra-food-for-uu 0)
#end-if
#end-if
#load-if-defined MAYAN-CIV
(defconst transport-max-villagers 4)
(defconst land-nomad-TC-villagers 3)
#else
(defconst transport-max-villagers 3)
#load-if-defined HUN-CIV
(defconst land-nomad-TC-villagers 3)
#else
(defconst land-nomad-TC-villagers 2)
#end-if
#end-if
#end-if

#load-if-defined FRANKISH-CIV
(defconst wonder-dark-villagers 33)
(defconst mush-strength 60)

(defconst castle-drop-uu-amount 25)
(defconst uu-food-buffer 105)
#load-if-not-defined UP-GAME-WK
(defconst late-game-scout-amount 0)
#load-if-defined UP-2-PLAYER-GAME
(defconst upgraded-scout-amount 14)
#else
(defconst upgraded-scout-amount 0)
#end-if
#else
(defconst late-game-scout-amount 20)
#load-if-defined UP-2-PLAYER-GAME
(defconst upgraded-scout-amount 30)
#else
(defconst upgraded-scout-amount 0)
#end-if
#end-if
(defconst hit-and-run-unit cobra-car)

(defconst castle-drop-food-gp 44)
(defconst castle-drop-wood-gp 43)
(defconst castle-drop-gold-gp 9)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 110)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 50)

(defconst escrow-UU-soldier 10000)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 10000)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 0)
(defconst escrow-UU-resource2-count 0)
(defconst preferred-knight-count 27)

(defconst ffa-strategy krush)
(defconst boom-strategy knight-boom)
(defconst regicide-strategy krush)
(defconst rf-strategy krush)
(defconst backup-strategy krush)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy knight-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 9)
(defconst DTW-ADVANCED-CAVALRY 2)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 2)
(defconst castle-sling-priority2 1)
(defconst landing-priority 5)
(defconst dm-UU-type 1)
(defconst dm-water-plan 2)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 1)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type infantry-class)
(defconst stone-for-castle-time 2100)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 0)
(defconst late-game-villagers 88)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 1)
(defconst trash-war-villager-limit 120)
(defconst gv-drush-rush 0)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 0)
(defconst gv-extra-piks-vs-catas 0)

(defconst cavalry-hp-research ri-loom)
(defconst anti-spearman-unit throwing-axeman-line)
(defconst near-castle-stone 388)
(defconst castle-stone 488)
(defconst fc-castle-drop-food-gp 34); Feudal-Castle tranfer gathering percentages
(defconst fc-castle-drop-wood-gp 41)
(defconst fc-castle-drop-gold-gp 4)
(defconst fc-castle-drop-stone-gp 21)
#else
(defconst cavalry-hp-research ri-bloodlines)
#load-if-defined AZTEC-CIV
(defconst anti-spearman-unit jaguar-man-line)
#else
(defconst anti-spearman-unit teutonic-knight-line)
#end-if
#load-if-not-defined INCAN-CIV
(defconst near-castle-stone 550)
(defconst castle-stone 650)
(defconst fc-castle-drop-food-gp 32)
(defconst fc-castle-drop-wood-gp 37)
(defconst fc-castle-drop-gold-gp 4)
(defconst fc-castle-drop-stone-gp 27)
#else
(defconst near-castle-stone 420)
(defconst castle-stone 520)
(defconst fc-castle-drop-food-gp 34)
(defconst fc-castle-drop-wood-gp 40)
(defconst fc-castle-drop-gold-gp 4)
(defconst fc-castle-drop-stone-gp 22)
#end-if
#end-if

#load-if-defined GOTHIC-CIV
(defconst wonder-dark-villagers 33)
(defconst mush-strength 0)
(defconst castle-drop-uu-amount 25)
(defconst uu-food-buffer 104)
(defconst late-game-scout-amount 0)
(defconst upgraded-scout-amount 20)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy uu-boom)
(defconst regicide-strategy castle-drop)
(defconst rf-strategy castle-drop)
(defconst backup-strategy castle-drop)
#load-if-defined UP-POCKET-POSITION
(defconst aggressive-strategy knight-rush)
#else
(defconst aggressive-strategy xbow-rush)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0); Don't use these
(defconst DTW-ADVANCED-ARCHERY 0)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 0)
(defconst castle-sling-priority 10)
(defconst castle-sling-priority2 1)
(defconst landing-priority 2)
(defconst dm-UU-type 2)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type infantry-class)
(defconst stone-for-castle-time 1860)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 0)
(defconst late-game-villagers 91)
(defconst gv-max-carts2 40)
(defconst cannons-available 1)
(defconst min-defensive-castles 1)
(defconst trash-war-villager-limit 120)
(defconst preferred-knight-count 12)
(defconst gv-drush-rush 0)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 1)

(defconst castle-drop-food-gp 44)
(defconst castle-drop-wood-gp 43)
(defconst castle-drop-gold-gp 9)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 120)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 50)

(defconst escrow-UU-soldier 35)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 10)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1200)
(defconst escrow-UU-resource2-count 550)

#load-if-not-defined FEUDAL-AGE-END
(defconst max-feudal-maa 30)
#else
(defconst max-feudal-maa 1000)
#end-if
(defconst militia-food 89)
(defconst maa1-villagers 22)
(defconst maa1-farms 1)
(defconst dm-raid-unit2 elite-huskarl2)
(defconst dm-housing-villagers1 6); Villagers to build more than 2 houses at same time
(defconst dm-housing-villagers2 9); Villagers to build more than 4 houses at same time
(defconst dm-extra-TC-pop 100)
(defconst UU-extra-priority 3)
(defconst dm-low-housing-time 120)
(defconst boar-shoot-distance 6)
(defconst hunter-max-carry 50)
(defconst boar-hp1 75)
#else
#load-if-not-defined FEUDAL-AGE-END
(defconst max-feudal-maa 20)
#else
(defconst max-feudal-maa 1000)
#end-if
(defconst militia-food 110)
(defconst maa1-villagers 21)
(defconst maa1-farms 1)
(defconst dm-raid-unit2 dm-raid-unit)
(defconst dm-extra-TC-pop 60)
#load-if-defined CHINESE-CIV
(defconst dm-housing-villagers1 11)
(defconst dm-housing-villagers2 15)
#else
(defconst dm-housing-villagers1 8)
(defconst dm-housing-villagers2 11)
#end-if
(defconst UU-extra-priority 4)
(defconst dm-low-housing-time 180)
(defconst boar-shoot-distance 6)
#load-if-defined UP-MULTIPLAYER-GAME
(defconst boar-hp1 46)
#else
(defconst boar-hp1 40)
#end-if
#load-if-defined AZTEC-CIV
(defconst hunter-max-carry 40)
#else
(defconst hunter-max-carry 35)
#end-if
#end-if

#load-if-defined HUN-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 0)

(defconst castle-drop-uu-amount 25)
(defconst uu-food-buffer 110)
(defconst late-game-scout-amount 50)
(defconst upgraded-scout-amount 50)
(defconst hit-and-run-unit cavalry-archer-line)

(defconst ffa-strategy CA-boom)
(defconst boom-strategy knight-boom)
#load-if-defined UP-2-PLAYER-GAME
(defconst regicide-strategy CA-boom)
(defconst rf-strategy CA-boom)
#else
(defconst regicide-strategy krush)
(defconst rf-strategy knight-boom)
#end-if
(defconst backup-strategy krush)
(defconst aggressive-strategy knight-rush)
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archers)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 7)
(defconst DTW-ADVANCED-CAVALRY 2)
(defconst DTW-CASTLE 0)
(defconst castle-sling-priority 4)
(defconst castle-sling-priority2 4)
(defconst landing-priority 4)
(defconst dm-UU-type 0)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 1)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type cavalry-class)
(defconst stone-for-castle-time 2200)
(defconst nothing-number-fc-villagers 25)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 3); Hun CA is UU, right?
(defconst late-game-villagers 88)
(defconst gv-max-carts2 43)
(defconst cannons-available 0)
(defconst min-defensive-castles 1)
(defconst trash-war-villager-limit 120)
(defconst preferred-knight-count 27)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 0)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 44)
(defconst castle-drop-wood-gp 41)
(defconst castle-drop-gold-gp 11)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 120)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 70)

(defconst escrow-UU-soldier 10000)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 10000)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 0)
(defconst escrow-UU-resource2-count 0)

(defconst ts-gt-900 10)
(defconst ts-gt-1200 12)
(defconst ts-gt-1500 14)
(defconst min-added-tc-distance 18)
(defconst basic-town-size 4)

(defconst nomad-start-max-mill-time 620)
(defconst up-nomad-start-max-mill-time 570)
(defconst main-ranged-unit cavalry-archer-line)
(defconst first-main-ranged-unit-upgrade ri-fletching)
(defconst relative-crossbow-upgrade ri-bodkin-arrow)
(defconst main-ranged-unit-upgrade ri-heavy-cavalry-archer)
(defconst high-stone-mining-percentage 6)
(defconst stone-for-castle-time 2200)
(defconst ranged-boom-strategy CA-boom)
(defconst ranged-rush-strategy CA-rush)
(defconst main-ranged hun-CAs)
(defconst dm-villager-mining 16)
#else
(defconst ts-gt-900 12)
(defconst ts-gt-1200 14)
(defconst ts-gt-1500 16)
(defconst min-added-tc-distance 21)
(defconst basic-town-size 6)

(defconst nomad-start-max-mill-time 480)
(defconst up-nomad-start-max-mill-time 430)
(defconst main-ranged-unit archer-line)
(defconst first-main-ranged-unit-upgrade ri-crossbow)
(defconst relative-crossbow-upgrade ri-crossbow)
(defconst main-ranged-unit-upgrade ri-arbalest)
(defconst ranged-boom-strategy xbow-boom)
(defconst ranged-rush-strategy xbow-rush)
(defconst main-ranged heavy-archers)
(defconst dm-villager-mining 22)

#load-if-defined FRANKISH-CIV
(defconst high-stone-mining-percentage 6)
#else
#load-if-defined PERSIAN-CIV
(defconst high-stone-mining-percentage 6)
#else
(defconst high-stone-mining-percentage 8)
#end-if
#end-if

#end-if

#load-if-defined INCAN-CIV
(defconst wonder-dark-villagers 33)
(defconst mush-strength 40)

(defconst castle-drop-uu-amount 25)
(defconst uu-food-buffer 110)
(defconst late-game-scout-amount 0)
(defconst upgraded-scout-amount 0)
(defconst hit-and-run-unit cobra-car)

(defconst castle-drop-food-gp 44)
(defconst castle-drop-wood-gp 43)
(defconst castle-drop-gold-gp 9)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 120)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 50)

(defconst escrow-UU-soldier 55)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 14)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1000)
(defconst escrow-UU-resource2-count 1000)

(defconst ffa-strategy castle-drop)
#load-if-defined IMPERIAL-AGE-END
(defconst boom-strategy eew-strategy)
#else
(defconst boom-strategy castle-drop)
#end-if
(defconst regicide-strategy castle-drop)
(defconst rf-strategy castle-drop)
(defconst backup-strategy xbow-boom)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 2)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 5)
(defconst landing-priority 19)
(defconst dm-UU-type 3)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type infantry-class)
(defconst stone-for-castle-time 2100)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 2)
(defconst stable-for-UU 0)
(defconst late-game-villagers 87)
(defconst gv-max-carts2 43)
(defconst cannons-available 0)
(defconst min-defensive-castles 3)
(defconst trash-war-villager-limit 110)
(defconst preferred-knight-count 12)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 1)

(defconst my-UU 879)
(defconst my-elite-UU 881)
(defconst aofe-civ 1)
(defconst cavalry-archer-unit slinger)
#else
(defconst cavalry-archer-unit cavalry-archer-line)
#end-if

#load-if-defined INDIAN-CIV
(defconst wonder-dark-villagers 33)
(defconst mush-strength 60)

(defconst castle-drop-uu-amount 150)
(defconst uu-food-buffer 160)
(defconst late-game-scout-amount 50)
(defconst upgraded-scout-amount 50)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy xbow-boom)
(defconst boom-strategy knight-boom)
(defconst regicide-strategy castle-drop)
(defconst rf-strategy castle-drop)
(defconst backup-strategy xbow-boom)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 5)
(defconst DTW-ADVANCED-CAVALRY 2)
(defconst DTW-CASTLE 0)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 5)
(defconst landing-priority 20)
(defconst dm-UU-type 5)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 1); Camels are quite paladins?
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type cavalry-archer-class)
(defconst stone-for-castle-time 2000)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 2)
(defconst stable-for-UU 1)
(defconst late-game-villagers 87)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 3)
(defconst trash-war-villager-limit 120)
(defconst preferred-knight-count 20)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 44)
(defconst castle-drop-wood-gp 41)
(defconst castle-drop-gold-gp 11)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 140)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 70)

(defconst escrow-UU-soldier 55)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 11)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1000)
(defconst escrow-UU-resource2-count 1000)

(defconst my-UU 873)
(defconst my-elite-UU 875)
(defconst aofe-civ 1)
(defconst knight-unit camel-line)
(defconst ri-1st-knight-upgrade ri-heavy-camel)
(defconst ri-2nd-knight-upgrade ri-imperial-camel)
#else
(defconst knight-unit knight-line)
(defconst ri-1st-knight-upgrade ri-cavalier)
(defconst ri-2nd-knight-upgrade ri-paladin)
#end-if

#load-if-defined ITALIAN-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 60)

(defconst castle-drop-uu-amount 20)
(defconst uu-food-buffer 0)
(defconst late-game-scout-amount 30)
(defconst upgraded-scout-amount 30)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy xbow-boom)
(defconst boom-strategy xbow-boom)
(defconst regicide-strategy xbow-boom)
(defconst rf-strategy castle-drop)
(defconst backup-strategy xbow-boom)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 3)
(defconst DTW-ADVANCED-ARCHERY 5)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 5)
(defconst landing-priority 21)
(defconst dm-UU-type 3)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 0)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type archery-class)
(defconst stone-for-castle-time 1860)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 2)
(defconst stable-for-UU 0)
(defconst late-game-villagers 87)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 3)
(defconst trash-war-villager-limit 110)
(defconst preferred-knight-count 12)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 38)
(defconst castle-drop-wood-gp 46)
(defconst castle-drop-gold-gp 12)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 40)
(defconst castle-drop-wood-gp-points 100)
(defconst castle-drop-gold-gp-points 90)

(defconst escrow-UU-soldier 55)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 15)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1000)
(defconst escrow-UU-resource2-count 1000)

(defconst my-UU 866)
(defconst my-elite-UU 868)
(defconst aofe-civ 1)

(defconst dark-up-food 425)
(defconst dark-queue-food 350)
(defconst high-dark-food1 360)
(defconst high-dark-food2 310)
(defconst high-feudal-food 570)
(defconst high-feudal-gold 131)
(defconst gv-2-villager-FC-food 620)
(defconst militia-dark-food 485)
#else
(defconst dark-up-food 500)
(defconst dark-queue-food 420)
(defconst high-dark-food1 430)
(defconst high-dark-food2 370)
(defconst high-feudal-food 690)
(defconst high-feudal-gold 161)
(defconst gv-2-villager-FC-food 740)
(defconst militia-dark-food 560)
#end-if

#load-if-defined JAPANESE-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 100)

(defconst castle-drop-uu-amount 25)
(defconst uu-food-buffer 110)
(defconst late-game-scout-amount 0)
(defconst upgraded-scout-amount 0)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy xbow-boom)
(defconst boom-strategy uu-boom)
(defconst regicide-strategy xbow-boom)
(defconst rf-strategy castle-drop)
(defconst backup-strategy xbow-boom)
(defconst aggressive-strategy xbow-rush)
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 5)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 6)
(defconst landing-priority 15)
(defconst dm-UU-type 9)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type infantry-class)
(defconst stone-for-castle-time 1860)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 0)
(defconst late-game-villagers 87)
(defconst gv-max-carts2 41)
(defconst cannons-available 1)
(defconst min-defensive-castles 3)
(defconst trash-war-villager-limit 113)
(defconst preferred-knight-count 12)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 1)

(defconst castle-drop-food-gp 44)
(defconst castle-drop-wood-gp 43)
(defconst castle-drop-gold-gp 9)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 120)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 55)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 10)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 950)
(defconst escrow-UU-resource2-count 875)
#end-if

#load-if-defined KOREAN-CIV
(defconst wonder-dark-villagers 33)
(defconst mush-strength 50)

(defconst castle-drop-uu-amount 20)
(defconst uu-food-buffer 0)
(defconst late-game-scout-amount 0)
(defconst upgraded-scout-amount 0)
(defconst hit-and-run-unit war-wagon-line)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy uu-boom)
(defconst regicide-strategy castle-drop)
(defconst rf-strategy castle-drop)
(defconst backup-strategy castle-drop)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archers)
(defconst DTW-ADVANCED-INFANTRY 3)
(defconst DTW-ADVANCED-ARCHERY 5)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 4)
(defconst landing-priority 18)
(defconst dm-UU-type 2)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 0)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 1)
(defconst UU-type cavalry-archer-class)
(defconst stone-for-castle-time 1860)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 2)
(defconst stable-for-UU 1)
(defconst late-game-villagers 88)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 4)
(defconst trash-war-villager-limit 113)
(defconst preferred-knight-count 10)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 38)
(defconst castle-drop-wood-gp 49)
(defconst castle-drop-gold-gp 9)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 40)
(defconst castle-drop-wood-gp-points 140)
(defconst castle-drop-gold-gp-points 70)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 13)
(defconst escrow-UU-resource1 wood)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1000)
(defconst escrow-UU-resource2-count 800)

(defconst mangonel-high-distance 10)
(defconst max-castle-sling-priority 4)
#load-if-defined ALL-TECHS-ENABLED
(defconst villager-los -4)
(defconst villager-los2 9)
(defconst villager-los3 19)
#else
(defconst villager-los -7)
(defconst villager-los2 15)
(defconst villager-los3 57)
#end-if
#else
#load-if-defined UP-KOREAN-CIV-ALLY
#load-if-defined UP-GAME-WK
(defconst mangonel-high-distance 9)
#else
(defconst mangonel-high-distance 10)
#end-if
#else
(defconst mangonel-high-distance 9)
#end-if
(defconst max-castle-sling-priority 5)
(defconst villager-los -4)
(defconst villager-los2 9)
(defconst villager-los3 19)
#end-if

#load-if-defined MAGYAR-CIV
(defconst wonder-dark-villagers 33)
(defconst mush-strength 40)

(defconst castle-drop-uu-amount 20)
(defconst uu-food-buffer 130)
(defconst late-game-scout-amount 0)
(defconst upgraded-scout-amount 0)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy krush)
(defconst boom-strategy knight-boom)
(defconst regicide-strategy krush)
(defconst rf-strategy krush)
(defconst backup-strategy krush)
(defconst aggressive-strategy knight-rush)
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 9)
(defconst DTW-ADVANCED-CAVALRY 2)
(defconst DTW-CASTLE 0)
(defconst castle-sling-priority 13)
(defconst castle-sling-priority2 1)
(defconst landing-priority 22)
(defconst dm-UU-type 10)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 1)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type cavalry-class)
(defconst stone-for-castle-time 2100)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 2)
(defconst late-game-villagers 88)
(defconst gv-max-carts2 43)
(defconst cannons-available 0)
(defconst min-defensive-castles 1)
(defconst trash-war-villager-limit 120)
(defconst preferred-knight-count 27)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 46)
(defconst castle-drop-wood-gp 45)
(defconst castle-drop-gold-gp 5)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 140)
(defconst castle-drop-wood-gp-points 80)
(defconst castle-drop-gold-gp-points 20)

(defconst escrow-UU-soldier 55)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 11)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1000)
(defconst escrow-UU-resource2-count 1000)

(defconst my-UU 869)
(defconst my-elite-UU 871)
(defconst aofe-civ 1)
#end-if

#load-if-defined MAYAN-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 80)

(defconst castle-drop-uu-amount 30)
(defconst uu-food-buffer 0)
(defconst late-game-scout-amount 0)
(defconst upgraded-scout-amount 0)
(defconst hit-and-run-unit plumed-archer-line)

(defconst castle-drop-food-gp 39)
(defconst castle-drop-wood-gp 45)
(defconst castle-drop-gold-gp 11)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 40)
(defconst castle-drop-wood-gp-points 100)
(defconst castle-drop-gold-gp-points 90)

(defconst escrow-UU-soldier 30)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 16)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 wood)
#load-if-defined UP-GAME-WK
(defconst escrow-UU-resource1-count 700)
#else
(defconst escrow-UU-resource1-count 500)
#end-if
(defconst escrow-UU-resource2-count 1000)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy uu-boom)
(defconst regicide-strategy castle-drop)
(defconst rf-strategy castle-drop)
(defconst backup-strategy castle-drop)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 0)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 3)
(defconst landing-priority 1)
(defconst dm-UU-type 5)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 0)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type archery-class)
(defconst stone-for-castle-time 1860)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 14)
(defconst range-for-UU 2)
(defconst stable-for-UU 0)
(defconst late-game-villagers 81)
(defconst gv-max-carts2 44)
(defconst cannons-available 0)
(defconst min-defensive-castles 3)
(defconst trash-war-villager-limit 108)
(defconst preferred-knight-count 12)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 1)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 1)

(defconst extra-sheep-scout-time 40)
(defconst flush-defense-villagers 28)
#else
(defconst extra-sheep-scout-time 30)
#load-if-defined AZTEC-CIV
(defconst flush-defense-villagers 28)
#else
#load-if-defined CHINESE-CIV
(defconst flush-defense-villagers 28)
#else
(defconst flush-defense-villagers 27)
#end-if
#end-if
#end-if

#load-if-defined MONGOL-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 0)

(defconst castle-drop-uu-amount 25)
(defconst uu-food-buffer 0)
(defconst late-game-scout-amount 50)
(defconst upgraded-scout-amount 50)
(defconst hit-and-run-unit mangudai-line)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy uu-boom)
(defconst regicide-strategy castle-drop)
(defconst rf-strategy castle-drop)
(defconst backup-strategy castle-drop)
#load-if-not-defined ARENA-MAP
#load-if-defined UP-POCKET-POSITION
(defconst aggressive-strategy knight-rush)
#else
(defconst aggressive-strategy xbow-rush)
#end-if
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-ARCHERY 0)
#load-if-defined UP-GOTHIC-CIV-ENEMY
(defconst DTW-ADVANCED-INFANTRY 3)
(defconst DTW-ADVANCED-CAVALRY 0)
#else
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-CAVALRY 11)
#end-if
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 7)
(defconst castle-sling-priority2 1)
(defconst landing-priority 11)
(defconst dm-UU-type 5)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 0)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 1)
(defconst UU-type cavalry-archer-class)
(defconst stone-for-castle-time 1860)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 2)
(defconst stable-for-UU 2)
(defconst late-game-villagers 87)
(defconst gv-max-carts2 43)
(defconst cannons-available 0)
(defconst min-defensive-castles 6)
(defconst trash-war-villager-limit 120)
(defconst preferred-knight-count 12)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 1)
(defconst gv-castle-sling-civ 0)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 38)
(defconst castle-drop-wood-gp 47)
(defconst castle-drop-gold-gp 11)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 40)
(defconst castle-drop-wood-gp-points 120)
(defconst castle-drop-gold-gp-points 80)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 12)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1100)
(defconst escrow-UU-resource2-count 675)

(defconst early-wood-villagers 7)
(defconst fast-grush-fishers 3)
#load-if-defined ALL-TECHS-ENABLED
(defconst scout-los -4)
(defconst scout-los2 9)
(defconst scout-los3 19)
#else
(defconst scout-los -6)
(defconst scout-los2 13)
(defconst scout-los3 44)
#end-if
(defconst flush-villagers4 24)
(defconst flush-villagers5 25)
(defconst michi-boom-vills 24)
#load-if-defined UP-MICHI-STYLE
(defconst early-gold-villager-number 23)
#else
(defconst early-gold-villager-number 24)
#end-if
(defconst hunt-multiplier 8)
(defconst hunt-base-resource 80)
(defconst forward-villagers 18)
#else
(defconst early-wood-villagers 6)
(defconst fast-grush-fishers 4)
(defconst flush-villagers4 25)
(defconst flush-villagers5 26)
(defconst early-gold-villager-number 24)
#load-if-defined AZTEC-CIV
(defconst michi-boom-vills 26)
#else
#load-if-defined BRITON-CIV
(defconst michi-boom-vills 25)
#else
#load-if-defined CELTIC-CIV
(defconst michi-boom-vills 26)
#else
#load-if-defined HUN-CIV
(defconst michi-boom-vills 26)
#else
#load-if-defined MAYAN-CIV
(defconst michi-boom-vills 26)
#else
(defconst michi-boom-vills 27)
#end-if
#end-if
#end-if
#end-if
#end-if
#load-if-not-defined AZTEC-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-defined UP-MONGOL-CIV-ALLY
#load-if-defined ALL-TECHS-ENABLED
(defconst scout-los -4)
(defconst scout-los2 9)
(defconst scout-los3 19)
#else
(defconst scout-los -6)
(defconst scout-los2 13)
(defconst scout-los3 44)
#end-if
#else
(defconst scout-los -4)
(defconst scout-los2 9)
(defconst scout-los3 19)
#end-if
#end-if
#end-if
#end-if
#load-if-defined MAYAN-CIV
(defconst hunt-multiplier 4)
(defconst hunt-base-resource 55)
#else
(defconst hunt-multiplier 5)
(defconst hunt-base-resource 55)
#end-if
(defconst forward-villagers 21)
#end-if

#load-if-defined PERSIAN-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 5)

(defconst castle-drop-uu-amount 15)
(defconst uu-food-buffer 250)
(defconst late-game-scout-amount 50)
(defconst upgraded-scout-amount 50)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy uu-boom)
(defconst regicide-strategy krush)
(defconst rf-strategy krush)
(defconst backup-strategy krush)
(defconst aggressive-strategy knight-rush)
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 5)
(defconst DTW-ADVANCED-CAVALRY 2)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 3)
(defconst castle-sling-priority2 1)
(defconst landing-priority 3)
(defconst dm-UU-type 7)
(defconst dm-water-plan 3)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 1)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type cavalry-class)
(defconst stone-for-castle-time 2200)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 1)
(defconst late-game-villagers 88)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 5)
(defconst trash-war-villager-limit 120)
(defconst preferred-knight-count 27)
(defconst gv-drush-rush 0)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 0)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 44)
(defconst castle-drop-wood-gp 48)
(defconst castle-drop-gold-gp 4)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 260)
(defconst castle-drop-wood-gp-points 90)
(defconst castle-drop-gold-gp-points 110)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 9)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1600)
(defconst escrow-UU-resource2-count 1200)

(defconst farm-time-substraction 15)
(defconst castle-forward-time 64)
(defconst gv-2-villager-time 43)
(defconst gv-wheelbarrow-time 66)
(defconst feudal-villager-queue-time 18)
(defconst gv-2-stable-villagers 42)
(defconst extra-civ-pop 7)
#else
(defconst gv-2-villager-time 47)
(defconst gv-wheelbarrow-time 72)
(defconst farm-time-substraction 0)
(defconst castle-forward-time 80)
(defconst feudal-villager-queue-time 21)
(defconst gv-2-stable-villagers 35)
(defconst extra-civ-pop 0)
#end-if

#load-if-defined SARACEN-CIV
(defconst wonder-dark-villagers 33)
(defconst mush-strength 100)

(defconst castle-drop-uu-amount 20)
(defconst uu-food-buffer 105)
(defconst late-game-scout-amount 50)
(defconst upgraded-scout-amount 50)
(defconst hit-and-run-unit mameluke-line)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy uu-boom)
#load-if-defined REGICIDE
(defconst regicide-strategy castle-drop)
#else
(defconst regicide-strategy xbow-boom)
#end-if
(defconst rf-strategy castle-drop)
(defconst backup-strategy xbow-boom)
#load-if-not-defined ARENA-MAP
#load-if-defined ARABIA-MAP
#load-if-defined UP-POCKET-POSITION
(defconst aggressive-strategy knight-rush)
#else
(defconst aggressive-strategy xbow-rush)
#end-if
#else
(defconst aggressive-strategy xbow-rush)
#end-if
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 5)
(defconst DTW-ADVANCED-CAVALRY 11)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 13)
(defconst castle-sling-priority2 2)
(defconst landing-priority 13)
(defconst dm-UU-type 3)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 1)
(defconst UU-type cavalry-class)
#load-if-defined UP-2-PLAYER-GAME
(defconst stone-for-castle-time 2100)
#else
(defconst stone-for-castle-time 1920)
#end-if
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 2)
(defconst late-game-villagers 88)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 5)
(defconst trash-war-villager-limit 120)
(defconst preferred-knight-count 10)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 0)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 40)
(defconst castle-drop-wood-gp 42)
(defconst castle-drop-gold-gp 14)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 130)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 150)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 10)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 600)
(defconst escrow-UU-resource2-count 500)

(defconst default-stone-price 123)
(defconst saracen-heavy-krush heavy-krush)
(defconst non-saracen-heavy-krush -1)
(defconst transport-bonus 5)
(defconst gv-imperial-pikemen 0)
(defconst gv-treb-retreat-distance 160)
#else
#load-if-defined MONGOL-CIV
(defconst gv-imperial-pikemen 0)
#else
#load-if-defined TURKISH-CIV
(defconst gv-imperial-pikemen 0)
#else
(defconst gv-imperial-pikemen 1)
#end-if
#end-if
(defconst default-stone-price 91)
(defconst saracen-heavy-krush -1); Doesn't exist
(defconst non-saracen-heavy-krush heavy-krush)
(defconst transport-bonus 0)
(defconst gv-treb-retreat-distance 140)
#end-if

#load-if-defined SLAVIC-CIV
(defconst wonder-dark-villagers 33)
(defconst mush-strength 100)

(defconst castle-drop-uu-amount 20)
(defconst uu-food-buffer 110)
(defconst late-game-scout-amount 30)
(defconst upgraded-scout-amount 30)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy scorpion-boom)
(defconst boom-strategy scorpion-boom)
(defconst regicide-strategy castle-drop)
(defconst rf-strategy castle-drop)
(defconst backup-strategy castle-drop)
#load-if-defined UP-POCKET-POSITION
(defconst aggressive-strategy knight-rush)
#else
(defconst aggressive-strategy scorpion-rush)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 3)
(defconst DTW-ADVANCED-ARCHERY 9)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 12)
(defconst castle-sling-priority2 5)
(defconst landing-priority 23)
(defconst dm-UU-type 7)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 1)
(defconst UU-type cavalry-class)
(defconst stone-for-castle-time 1900)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 2)
(defconst late-game-villagers 87)
(defconst gv-max-carts2 43)
(defconst cannons-available 0)
(defconst min-defensive-castles 3)
(defconst trash-war-villager-limit 120)
(defconst preferred-knight-count 12)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 42)
(defconst castle-drop-wood-gp 41)
(defconst castle-drop-gold-gp 13)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 130)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 150)

(defconst escrow-UU-soldier 55)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 11)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1000)
(defconst escrow-UU-resource2-count 1000)

(defconst my-UU 876)
(defconst my-elite-UU 878)
(defconst aofe-civ 1)
#end-if

#load-if-defined SPANISH-CIV
(defconst wonder-dark-villagers 33)
(defconst mush-strength 100)

(defconst castle-drop-uu-amount 26)
(defconst uu-food-buffer 110)
(defconst late-game-scout-amount 50)
(defconst upgraded-scout-amount 50)
(defconst hit-and-run-unit conquistador-line)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy knight-boom)
#load-if-defined REGICIDE
(defconst regicide-strategy castle-drop)
#else
(defconst regicide-strategy krush)
#end-if
(defconst rf-strategy castle-drop)
(defconst backup-strategy castle-drop)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy knight-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER skirmishers)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 0)
(defconst DTW-ADVANCED-CAVALRY 2)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 5)
(defconst castle-sling-priority2 1)
(defconst landing-priority 6)
(defconst dm-UU-type 8)
(defconst dm-water-plan 3)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 1)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type cavalry-cannon-class)
(defconst stone-for-castle-time 2040)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 2)
(defconst late-game-villagers 88)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 1)
(defconst trash-war-villager-limit 120)
(defconst preferred-knight-count 27)
(defconst gv-drush-rush 0)
(defconst gv-wall-castle-push 1)
(defconst gv-castle-sling-civ 0)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 43)
(defconst castle-drop-wood-gp 42)
(defconst castle-drop-gold-gp 11)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 120)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 120)

(defconst escrow-UU-soldier 10000)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 10000)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 0)
(defconst escrow-UU-resource2-count 0)

(defconst siege-targeting-default-value 2)
(defconst siege-targeting-treb-value 3)
(defconst special-raid-unit conquistador-line)
(defconst mounted-archery-class archery-cannon-class)
(defconst build-speed-tech ri-loom)
#else
(defconst siege-targeting-default-value 0)
(defconst siege-targeting-treb-value 1)
(defconst mounted-archery-class cavalry-archer-class)
(defconst build-speed-tech ri-stonecutting)
#load-if-defined TURKISH-CIV
(defconst special-raid-unit janissary-line)
#else
(defconst special-raid-unit cobra-car)
#end-if
#end-if

#load-if-defined TEUTONIC-CIV
(defconst wonder-dark-villagers 33)
(defconst mush-strength 100)

(defconst castle-drop-uu-amount 25)
(defconst uu-food-buffer 135)
(defconst late-game-scout-amount 0)
#load-if-defined UP-2-PLAYER-GAME
(defconst upgraded-scout-amount 10)
#else
(defconst upgraded-scout-amount 0)
#end-if
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy knight-boom)
(defconst regicide-strategy krush)
(defconst rf-strategy krush)
(defconst backup-strategy krush)
(defconst aggressive-strategy knight-rush)
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archers)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 9)
(defconst DTW-ADVANCED-CAVALRY 2)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 1)
(defconst castle-sling-priority2 1)
(defconst landing-priority 8)
(defconst dm-UU-type 7)
(defconst dm-water-plan 3)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 1)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 1)
(defconst UU-type infantry-class)
(defconst stone-for-castle-time 2100)
(defconst nothing-number-fc-villagers 25)
(defconst nothing-number-dark-farms 14)
(defconst range-for-UU 0)
(defconst stable-for-UU 0)
(defconst late-game-villagers 88)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 1)
(defconst trash-war-villager-limit 120)
(defconst preferred-knight-count 27)
(defconst gv-drush-rush 0)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 0)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 44)
(defconst castle-drop-wood-gp 43)
(defconst castle-drop-gold-gp 9)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 140)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 70)

(defconst escrow-UU-soldier 30)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 10)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1200)
(defconst escrow-UU-resource2-count 600)

(defconst dock-farm-wood 190)
(defconst fish-farm-wood 115)
(defconst raid-capable-UU 0)
#else
(defconst dock-farm-wood 210)
(defconst fish-farm-wood 135)
(defconst raid-capable-UU 1)
#end-if

#load-if-defined TURKISH-CIV
(defconst wonder-dark-villagers 33)
(defconst mush-strength 5)

(defconst castle-drop-uu-amount 30)
(defconst uu-food-buffer 105)
(defconst late-game-scout-amount 100)
(defconst upgraded-scout-amount 100)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy turkish-bombardment)
(defconst regicide-strategy castle-drop)
(defconst rf-strategy castle-drop)
(defconst backup-strategy castle-drop)
#load-if-not-defined ARENA-MAP
#load-if-not-defined UP-POCKET-POSITION
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy knight-rush)
#end-if
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
#load-if-defined UP-ALLY-IN-GAME
(defconst FLUSH-DEFENCE-ARCHER pure-archers)
#else
(defconst FLUSH-DEFENCE-ARCHER archers)
#end-if
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 5)
(defconst DTW-ADVANCED-CAVALRY 11)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 8)
(defconst castle-sling-priority2 2)
(defconst landing-priority 12)
(defconst dm-UU-type 8)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type archery-cannon-class)
(defconst stone-for-castle-time 1860)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 0)
(defconst late-game-villagers 88)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 4)
(defconst trash-war-villager-limit 120)
(defconst preferred-knight-count 20)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 1)
(defconst gv-castle-sling-civ 0)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 43)
(defconst castle-drop-wood-gp 42)
(defconst castle-drop-gold-gp 11)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 120)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 110)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 12)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 850)
(defconst escrow-UU-resource2-count 750)

(defconst barrackses-vs-knights 1)
(defconst extra-barracks-number 1)
(defconst boom-type hand-cannoneer)
(defconst boom-chat "I'll boom and train gunpowder units.")
#load-if-defined ALL-TECHS-ENABLED
(defconst pikeman-status research-available)
#else
(defconst pikeman-status research-unavailable)
#end-if
#load-if-defined FEUDAL-AGE-END
(defconst feudal-extra-skirms 1)
#else
(defconst feudal-extra-skirms 0)
#end-if
(defconst castles-to-disable-support-archers 1)
#else
#load-if-defined HUN-CIV
(defconst castles-to-disable-support-archers 0)
#else
(defconst castles-to-disable-support-archers 10000)
#end-if
(defconst feudal-extra-skirms 1)
(defconst barrackses-vs-knights 2)
(defconst pikeman-status research-available)
#load-if-defined UP-ALLY-IN-GAME
(defconst extra-barracks-number 1)
#else
(defconst extra-barracks-number 3)
#end-if
#load-if-defined AZTEC-CIV
(defconst boom-type champion); Lies
(defconst boom-chat "I'll boom and train eagles.")
#else
#load-if-defined MAYAN-CIV
(defconst boom-type champion)
(defconst boom-chat "I'll boom and train eagles.")
#else
#load-if-defined CELTIC-CIV
(defconst boom-type paladin); More lies
(defconst boom-chat "I'll boom and train scorpions.")
#else
#load-if-defined PERSIAN-CIV
(defconst boom-type my-unique-unit)
(defconst boom-chat "I'll boom and train elephants.")
#else
#load-if-defined HUN-CIV
(defconst boom-type paladin)
(defconst boom-chat "I'll boom and train knights.")
#else
#load-if-defined FRANKISH-CIV
(defconst boom-type paladin)
(defconst boom-chat "I'll boom and train knights.")
#else
#load-if-defined TEUTONIC-CIV
(defconst boom-type paladin)
(defconst boom-chat "I'll boom and train knights.")
#else
#load-if-defined SPANISH-CIV
(defconst boom-type paladin)
(defconst boom-chat "I'll boom and train knights.")
#else
#load-if-defined VIKING-CIV
(defconst boom-type champion)
(defconst boom-chat "I'll boom and train swordsmen.")
#else
#load-if-defined INDIAN-CIV
(defconst boom-type paladin)
(defconst boom-chat "I'll boom and train camels.")
#else
#load-if-defined KHMER-CIV
(defconst boom-type paladin)
(defconst boom-chat "I'll boom and train elephants.")
#else
#load-if-defined MALAY-CIV
(defconst boom-type paladin)
(defconst boom-chat "I'll boom and train elephants.")
#else
(defconst boom-type my-unique-unit)
(defconst boom-chat "I'll boom and train unique units.")
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

#load-if-defined VIKING-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 20)

(defconst castle-drop-uu-amount 25)
(defconst uu-food-buffer 115)
(defconst late-game-scout-amount 0)
#load-if-defined UP-2-PLAYER-GAME
(defconst upgraded-scout-amount 10)
#else
(defconst upgraded-scout-amount 0)
#end-if
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy xbow-boom)
(defconst boom-strategy champion-boom)
(defconst regicide-strategy xbow-boom)
(defconst rf-strategy castle-drop)
(defconst backup-strategy xbow-boom)
(defconst aggressive-strategy xbow-rush)
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY 3)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 9)
(defconst castle-sling-priority2 6)
(defconst landing-priority 14)
(defconst dm-UU-type 4)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type infantry-class)
(defconst stone-for-castle-time 2100)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 0)
(defconst late-game-villagers 87)
(defconst gv-max-carts2 41)
(defconst cannons-available 0)
(defconst min-defensive-castles 1)
(defconst trash-war-villager-limit 113)
(defconst preferred-knight-count 14)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 44)
(defconst castle-drop-wood-gp 43)
(defconst castle-drop-gold-gp 9)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 120)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 50)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 10)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1300)
(defconst escrow-UU-resource2-count 550)
(defconst grush-dock-4-time 800)
(defconst grush-dock-5-time 1010)
(defconst grush-dock-6-time 1160)
(defconst grush-dock-7-time 1380)
(defconst default-FC-type gv-2-villagers)
(defconst gv-anti-axes 1)
(defconst dock-check-time1 195)
(defconst dock-check-time2 270)
(defconst fires-available 0)
#else
(defconst fires-available 1)
#load-if-defined AZTEC-CIV
(defconst gv-anti-axes 1)
#else
(defconst gv-anti-axes 0)
#end-if
#load-if-defined UP-VIKING-CIV-ALLY
#load-if-defined JAPANESE-CIV
(defconst dock-check-time1 180)
(defconst dock-check-time2 250)
#else
#load-if-defined PERSIAN-CIV
(defconst dock-check-time1 180)
(defconst dock-check-time2 260)
#else
(defconst dock-check-time1 195)
(defconst dock-check-time2 275)
#end-if
#end-if
#else
#load-if-defined JAPANESE-CIV
(defconst dock-check-time1 190)
(defconst dock-check-time2 260)
#else
#load-if-defined PERSIAN-CIV
(defconst dock-check-time1 190)
(defconst dock-check-time2 275)
#else
(defconst dock-check-time1 220)
(defconst dock-check-time2 290)
#end-if
#end-if
#end-if
(defconst grush-dock-4-time 870)
(defconst grush-dock-5-time 1080)
(defconst grush-dock-6-time 1260)
(defconst grush-dock-7-time 1470)
(defconst default-FC-type gv-wheelbarrow)
#end-if

#load-if-defined BERBERS-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 60)

(defconst castle-drop-uu-amount 25)
(defconst uu-food-buffer 0)
(defconst late-game-scout-amount 50)
(defconst upgraded-scout-amount 50)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy uu-boom)
(defconst regicide-strategy castle-drop)
(defconst rf-strategy castle-drop)
(defconst backup-strategy krush)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy krush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY heavy-cannoneers)
(defconst DTW-ADVANCED-CAVALRY heavy-knights)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 5)
(defconst landing-priority 21)
(defconst dm-UU-type archer-type)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 0)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type cavalry-archer-class)
(defconst stone-for-castle-time 1800)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 2)
(defconst stable-for-UU 2)
(defconst late-game-villagers 89)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 3)
(defconst trash-war-villager-limit 110)
(defconst preferred-knight-count 20)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 1)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 38)
(defconst castle-drop-wood-gp 47)
(defconst castle-drop-gold-gp 11)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 40)
(defconst castle-drop-wood-gp-points 100)
(defconst castle-drop-gold-gp-points 90)

(defconst escrow-UU-soldier 20)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 12)
(defconst escrow-UU-resource1 wood)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1000)
(defconst escrow-UU-resource2-count 500)

(defconst my-UU camel-archer)
(defconst my-elite-UU elite-camel-archer)
(defconst aofe-civ 1)
#end-if

#load-if-defined BURMESE-CIV
(defconst wonder-dark-villagers 31)
(defconst mush-strength 100)

(defconst castle-drop-uu-amount 17)
(defconst uu-food-buffer 0)
(defconst late-game-scout-amount 50)
(defconst upgraded-scout-amount 50)
(defconst hit-and-run-unit arambai); Fails to count elite

(defconst ffa-strategy xbow-boom)
(defconst boom-strategy xbow-boom)
(defconst regicide-strategy xbow-boom)
(defconst rf-strategy castle-drop)
(defconst backup-strategy xbow-boom)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY heavy-swordsmen)
(defconst DTW-ADVANCED-ARCHERY 0)
(defconst DTW-ADVANCED-CAVALRY heavy-elephants)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 5)
(defconst landing-priority 21)
(defconst dm-UU-type archer-type)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 0)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 1)
(defconst SO-in-tech-tree 0)
(defconst UU-type cavalry-cannon-class)
(defconst stone-for-castle-time 1800)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 0)
(defconst late-game-villagers 89)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 3)
(defconst trash-war-villager-limit 110)
(defconst preferred-knight-count 20)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 1)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 38)
(defconst castle-drop-wood-gp 47)
(defconst castle-drop-gold-gp 11)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 40)
(defconst castle-drop-wood-gp-points 100)
(defconst castle-drop-gold-gp-points 90)

(defconst escrow-UU-soldier 20)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 12)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1100)
(defconst escrow-UU-resource2-count 675)

(defconst my-UU arambai)
(defconst my-elite-UU elite-arambai)
(defconst aofe-civ 1)

(defconst elephant-ut ri-howdah)
(defconst heavy-cavalry-upgrade ri-elite-battle-elephant)
(defconst heavy-cavalry-strategy heavy-elephants)
(defconst heavy-cavalry-unit elite-battle-elephant)
#else
#load-if-defined KHMER-CIV
(defconst elephant-ut ri-tusk-swords)
(defconst heavy-cavalry-upgrade ri-elite-battle-elephant)
(defconst heavy-cavalry-strategy heavy-elephants)
(defconst heavy-cavalry-unit elite-battle-elephant)
#else
#load-if-defined VIETNAMESE-CIV
(defconst elephant-ut ri-chatras)
(defconst heavy-cavalry-upgrade ri-elite-battle-elephant)
(defconst heavy-cavalry-strategy heavy-elephants)
(defconst heavy-cavalry-unit elite-battle-elephant)
#else
(defconst elephant-ut ri-loom)
#load-if-defined MALAY-CIV
(defconst heavy-cavalry-upgrade ri-elite-battle-elephant)
(defconst heavy-cavalry-strategy heavy-elephants)
(defconst heavy-cavalry-unit elite-battle-elephant)
#else
(defconst heavy-cavalry-strategy heavy-knights)
#load-if-defined INDIAN-CIV
(defconst heavy-cavalry-upgrade ri-imperial-camel)
(defconst heavy-cavalry-unit imperial-camel)
#else
(defconst heavy-cavalry-upgrade ri-paladin)
(defconst heavy-cavalry-unit knight-line)
#end-if
#end-if
#end-if
#end-if
#end-if

#load-if-defined ETHIOPIAN-CIV
(defconst wonder-dark-villagers 31)
(defconst mush-strength 30)

(defconst castle-drop-uu-amount 25)
(defconst uu-food-buffer 100)
(defconst late-game-scout-amount 0)
(defconst upgraded-scout-amount 17)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy xbow-boom)
(defconst boom-strategy xbow-boom)
(defconst regicide-strategy xbow-boom)
(defconst rf-strategy xbow-boom)
(defconst backup-strategy xbow-boom)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY heavy-cannoneers)
(defconst DTW-ADVANCED-CAVALRY heavy-knights)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 5)
(defconst landing-priority 21)
(defconst dm-UU-type infantry-type)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 1)
(defconst UU-type infantry-class)
(defconst stone-for-castle-time 1800)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 2)
(defconst stable-for-UU 2)
(defconst late-game-villagers 89)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 3)
(defconst trash-war-villager-limit 110)
(defconst preferred-knight-count 12)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 1)

(defconst castle-drop-food-gp 43)
(defconst castle-drop-wood-gp 41)
(defconst castle-drop-gold-gp 12)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 120)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 75)

(defconst escrow-UU-soldier 20)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 12)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1200)
(defconst escrow-UU-resource2-count 550)

(defconst my-UU shotel-warrior)
(defconst my-elite-UU elite-shotel-warrior)
(defconst aofe-civ 1)
#end-if

#load-if-defined KHMER-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 30)

(defconst castle-drop-uu-amount 14)
(defconst uu-food-buffer 150)
(defconst late-game-scout-amount 50)
(defconst upgraded-scout-amount 50)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy xbow-boom)
(defconst boom-strategy xbow-boom)
(defconst regicide-strategy xbow-boom)
(defconst rf-strategy castle-drop)
(defconst backup-strategy xbow-boom)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY heavy-cannoneers)
(defconst DTW-ADVANCED-CAVALRY heavy-elephants)
(defconst DTW-CASTLE 0)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 5)
(defconst landing-priority 21)
(defconst dm-UU-type useless-type)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 1)
(defconst SO-in-tech-tree 0)
(defconst UU-type cavalry-cannon-class)
(defconst stone-for-castle-time 2100)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 2)
(defconst late-game-villagers 89)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 1)
(defconst trash-war-villager-limit 110)
(defconst preferred-knight-count 20)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 43)
(defconst castle-drop-wood-gp 42)
(defconst castle-drop-gold-gp 11)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 140)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 110)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 12)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1000)
(defconst escrow-UU-resource2-count 500)

(defconst my-UU ballista-elephant)
(defconst my-elite-UU elite-ballista-elephant)
(defconst aofe-civ 1)

(defconst up-building-count 0)
(defconst gv-2-villager-FC-wood 0)
#else
(defconst up-building-count 1)
(defconst gv-2-villager-FC-wood 250)
#end-if

#load-if-defined MALAY-CIV
(defconst wonder-dark-villagers 35)
(defconst mush-strength 60)

(defconst castle-drop-uu-amount 35)
(defconst uu-food-buffer 75)
(defconst late-game-scout-amount 0)
(defconst upgraded-scout-amount 0)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy xbow-boom)
(defconst boom-strategy xbow-boom)
(defconst regicide-strategy xbow-boom)
(defconst rf-strategy castle-drop)
(defconst backup-strategy xbow-boom)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY heavy-archers)
(defconst DTW-ADVANCED-CAVALRY heavy-elephants)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 5)
(defconst landing-priority 21)
(defconst dm-UU-type infantry-type)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 1)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 1)
(defconst SO-in-tech-tree 0)
(defconst UU-type infantry-class)
(defconst stone-for-castle-time 1800)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 0)
(defconst late-game-villagers 89)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 3)
(defconst trash-war-villager-limit 110)
(defconst preferred-knight-count 12)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 0)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 1)

(defconst castle-drop-food-gp 43)
(defconst castle-drop-wood-gp 41)
(defconst castle-drop-gold-gp 12)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 120)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 50)

(defconst escrow-UU-soldier 20)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 12)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 900)
(defconst escrow-UU-resource2-count 600)

(defconst my-UU karambit-warrior)
(defconst my-elite-UU elite-karambit-warrior)
(defconst aofe-civ 1)

(defconst barracks-support-time 20)
(defconst uu-resource-level1 1)
(defconst uu-resource-level2 2)
(defconst fc-farms1 8)
(defconst fc-farms2 10)
(defconst ele-food-buffer 124)
#else
(defconst uu-resource-level1 2)
(defconst uu-resource-level2 3)
(defconst barracks-support-time 75)
(defconst fc-farms1 5)
(defconst fc-farms2 6)
(defconst ele-food-buffer 160)
#end-if

#load-if-defined MALIAN-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 80)

(defconst castle-drop-uu-amount 25)
(defconst uu-food-buffer 0)
(defconst late-game-scout-amount 50)
(defconst upgraded-scout-amount 50)
(defconst hit-and-run-unit gbeto)

(defconst ffa-strategy castle-drop)
(defconst boom-strategy uu-boom)
(defconst regicide-strategy knight-boom)
(defconst rf-strategy castle-drop)
(defconst backup-strategy krush)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY heavy-swordsmen)
(defconst DTW-ADVANCED-ARCHERY heavy-cannoneers)
(defconst DTW-ADVANCED-CAVALRY heavy-knights)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 5)
(defconst landing-priority 21)
(defconst dm-UU-type infantry-type)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 0)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type infantry-class)
(defconst stone-for-castle-time 1800)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 0)
(defconst late-game-villagers 87)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 1)
(defconst trash-war-villager-limit 110)
(defconst preferred-knight-count 20)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 1)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 38)
(defconst castle-drop-wood-gp 47)
(defconst castle-drop-gold-gp 11)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 120)
(defconst castle-drop-wood-gp-points 60)
(defconst castle-drop-gold-gp-points 75)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 12)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 900)
(defconst escrow-UU-resource2-count 600)

(defconst my-UU gbeto)
(defconst my-elite-UU elite-gbeto)
(defconst aofe-civ 1)
#end-if

#load-if-defined PORTUGUESE-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 60)

(defconst castle-drop-uu-amount 17)
(defconst uu-food-buffer 0)
(defconst late-game-scout-amount 30)
(defconst upgraded-scout-amount 30)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy xbow-boom)
(defconst boom-strategy xbow-boom)
(defconst regicide-strategy xbow-boom)
(defconst rf-strategy castle-drop)
(defconst backup-strategy xbow-boom)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY heavy-swordsmen)
(defconst DTW-ADVANCED-ARCHERY heavy-cannoneers)
(defconst DTW-ADVANCED-CAVALRY 0)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 5)
(defconst landing-priority 21)
(defconst dm-UU-type gunpowder-type)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 0)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 0)
(defconst SO-in-tech-tree 0)
(defconst UU-type archery-class)
(defconst stone-for-castle-time 2100)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 0)
(defconst stable-for-UU 0)
(defconst late-game-villagers 87)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 1)
(defconst trash-war-villager-limit 110)
(defconst preferred-knight-count 20)
(defconst gv-drush-rush 1)
(defconst gv-wall-castle-push 1)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 38)
(defconst castle-drop-wood-gp 47)
(defconst castle-drop-gold-gp 11)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 40)
(defconst castle-drop-wood-gp-points 120)
(defconst castle-drop-gold-gp-points 80)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 12)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1200)
(defconst escrow-UU-resource2-count 500)

(defconst my-UU organ-gun)
(defconst my-elite-UU elite-organ-gun)
(defconst aofe-civ 1)
#end-if

#load-if-defined VIETNAMESE-CIV
(defconst wonder-dark-villagers 32)
(defconst mush-strength 30)

(defconst castle-drop-uu-amount 30)
(defconst uu-food-buffer 0)
(defconst late-game-scout-amount 20)
(defconst upgraded-scout-amount 30)
(defconst hit-and-run-unit cobra-car)

(defconst ffa-strategy xbow-boom)
(defconst boom-strategy xbow-boom)
(defconst regicide-strategy castle-drop)
(defconst rf-strategy castle-drop)
(defconst backup-strategy xbow-boom)
#load-if-not-defined ARENA-MAP
(defconst aggressive-strategy xbow-rush)
#else
(defconst aggressive-strategy castle-push)
#end-if
(defconst FLUSH-DEFENCE-MAA 0)
(defconst FLUSH-DEFENCE-ARCHER archer-skirm)
(defconst DTW-ADVANCED-INFANTRY 0)
(defconst DTW-ADVANCED-ARCHERY heavy-archers)
(defconst DTW-ADVANCED-CAVALRY heavy-elephants)
(defconst DTW-CASTLE 2)
(defconst castle-sling-priority 14)
(defconst castle-sling-priority2 5)
(defconst landing-priority 21)
(defconst dm-UU-type archer-type)
(defconst dm-water-plan 1)
(defconst dm-food-costing-UU 0)
(defconst dm-pala-in-tech-tree 0)
(defconst elephants-available 1)
(defconst SO-in-tech-tree 0)
(defconst UU-type archery-class)
(defconst stone-for-castle-time 1800)
(defconst nothing-number-fc-villagers 26)
(defconst nothing-number-dark-farms 13)
(defconst range-for-UU 2)
(defconst stable-for-UU 0)
(defconst late-game-villagers 88)
(defconst gv-max-carts2 43)
(defconst cannons-available 1)
(defconst min-defensive-castles 3)
(defconst trash-war-villager-limit 110)
(defconst preferred-knight-count 20)
(defconst gv-drush-rush 0)
(defconst gv-wall-castle-push 1)
(defconst gv-castle-sling-civ 1)
(defconst gv-extra-piks-vs-catas 0)

(defconst castle-drop-food-gp 38)
(defconst castle-drop-wood-gp 47)
(defconst castle-drop-gold-gp 11)
(defconst castle-drop-stone-gp 4)

(defconst castle-drop-food-gp-points 40)
(defconst castle-drop-wood-gp-points 120)
(defconst castle-drop-gold-gp-points 80)

(defconst escrow-UU-soldier 25)
(defconst escrow-UU-pop 10000)
(defconst escrow-UU-count 12)
(defconst escrow-UU-resource1 food)
(defconst escrow-UU-resource2 gold)
(defconst escrow-UU-resource1-count 1000)
(defconst escrow-UU-resource2-count 750)

(defconst my-UU rattan-archer)
(defconst my-elite-UU elite-rattan-archer)
(defconst aofe-civ 1)
#end-if

#load-if-not-defined INCAN-CIV
#load-if-not-defined INDIAN-CIV
#load-if-not-defined ITALIAN-CIV
#load-if-not-defined MAGYAR-CIV
#load-if-not-defined SLAVIC-CIV

#load-if-not-defined BERBERS-CIV
#load-if-not-defined BURMESE-CIV
#load-if-not-defined ETHIOPIAN-CIV
#load-if-not-defined KHMER-CIV
#load-if-not-defined MALAY-CIV
#load-if-not-defined MALIAN-CIV
#load-if-not-defined PORTUGUESE-CIV
#load-if-not-defined VIETNAMESE-CIV
(defconst my-UU my-unique-unit-line)
(defconst my-elite-UU my-unique-unit-line)
(defconst aofe-civ 0)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

#end-if
#end-if
#end-if
#end-if
#end-if

; ============= SOME ADAPTION TO MAP

#load-if-defined TINY-MAP
(defconst gv-preferred-trade-distance 115)
(defconst min-distance-to-center 30)
(defconst low-stone-mine-amount 10)
(defconst huge-stone-mine-amount 30)
(defconst high-fish-amount 35); To detect (hope) whether the map is water-heavy or not
(defconst very-high-fish-amount 44)
(defconst average-fish-amount 18)
(defconst dtw-blind-attack-time 900); 70 years left - values are correct for maps classified as land maps if there aren't any huns in the game

(defconst max-wolves-and-jaguars 14)
(defconst max-combined-wj 7)

(defconst max-center-distance1 30)
(defconst preferred-player-number 2)
(defconst relics-to-be-found 2)
(defconst monastery-relics 0)
#else
(defconst monastery-relics 1)
#load-if-defined SMALL-MAP
(defconst relics-to-be-found 2)
#else
#load-if-defined MEDIUM-MAP
(defconst relics-to-be-found 1)
#else
(defconst relics-to-be-found 0)
#end-if
#end-if
#end-if

#load-if-defined SMALL-MAP
(defconst gv-preferred-trade-distance 139)
(defconst min-distance-to-center 36)
(defconst low-stone-mine-amount 15)
(defconst huge-stone-mine-amount 45)
(defconst high-fish-amount 50)
(defconst very-high-fish-amount 63)
(defconst average-fish-amount 25)
(defconst dtw-blind-attack-time 850); 80 years left

(defconst max-wolves-and-jaguars 21)
(defconst max-combined-wj 10)

(defconst max-center-distance1 34)
(defconst preferred-player-number 3)
(defconst migration-lerp-percent 15)
#end-if
#load-if-defined MEDIUM-MAP
(defconst gv-preferred-trade-distance 163)
(defconst min-distance-to-center 42)
(defconst low-stone-mine-amount 20)
(defconst huge-stone-mine-amount 60)
(defconst high-fish-amount 60)
(defconst very-high-fish-amount 85)
(defconst average-fish-amount 30)
(defconst dtw-blind-attack-time 800); 90 years left

(defconst max-center-distance1 38)
(defconst preferred-player-number 4)
(defconst max-wolves-and-jaguars 28)
(defconst max-combined-wj 14)
#end-if
#load-if-defined NORMAL-MAP
(defconst gv-preferred-trade-distance 195)
(defconst min-distance-to-center 50)
(defconst low-stone-mine-amount 30)
(defconst huge-stone-mine-amount 90)
(defconst high-fish-amount 90)
(defconst average-fish-amount 45)
(defconst very-high-fish-amount 120)
(defconst dtw-blind-attack-time 1250); 100 years left

(defconst max-center-distance1 42)
(defconst preferred-player-number 6)
(defconst max-wolves-and-jaguars 42)
(defconst max-combined-wj 21)
#end-if
#load-if-defined LARGE-MAP
(defconst gv-preferred-trade-distance 215)
(defconst min-distance-to-center 55)
(defconst low-stone-mine-amount 40)
(defconst huge-stone-mine-amount 120)
(defconst high-fish-amount 120)
(defconst very-high-fish-amount 146)
(defconst average-fish-amount 60)
(defconst dtw-blind-attack-time 1450); 110 years left

(defconst max-center-distance1 46)
(defconst preferred-player-number 8)
(defconst max-wolves-and-jaguars 56)
(defconst max-combined-wj 28)

(defconst cut-length 140)
#else
#load-if-defined GIANT-MAP
(defconst cut-length 160)
#else
(defconst cut-length 120)
#end-if
#end-if

#load-if-defined GIANT-MAP
(defconst gv-preferred-trade-distance 235)
(defconst min-distance-to-center 60)
(defconst low-stone-mine-amount 50)
(defconst huge-stone-mine-amount 150)
(defconst high-fish-amount 150)
(defconst very-high-fish-amount 173)
(defconst average-fish-amount 75)
(defconst dtw-blind-attack-time 1650); 120 years left

(defconst max-center-distance1 50)
(defconst preferred-player-number 8)
(defconst max-wolves-and-jaguars 70)
(defconst max-combined-wj 35)
#end-if

#load-if-not-defined DIFFICULTY-HARDEST

#load-if-not-defined REGICIDE
(defconst relative-gt-900 900)
(defconst relative-gt-1200 1200)
(defconst relative-gt-1500 1500)
(defconst relative-gt-1800 1800)
(defconst relative-gt-2100 2100)
(defconst relative-gt-2500 2500)
(defconst relative-gt-3000 3000)
(defconst relative-gt-3600 3600)
(defconst relative-gt-4500 4500)

(defconst relative-gt-multiplier 1)
(defconst relative-gt-divider 1)
#else
(defconst relative-gt-900 700)
(defconst relative-gt-1200 950)
(defconst relative-gt-1500 1150)
(defconst relative-gt-1800 1400)
(defconst relative-gt-2100 1700)
(defconst relative-gt-2500 2000)
(defconst relative-gt-3000 2400)
(defconst relative-gt-3600 3000)
(defconst relative-gt-4500 4000)

(defconst relative-gt-multiplier 4)
(defconst relative-gt-divider 5)
#end-if
#else
#load-if-not-defined REGICIDE
(defconst relative-gt-900 500)
(defconst relative-gt-1200 800)
(defconst relative-gt-1500 1100)
(defconst relative-gt-1800 1400)
(defconst relative-gt-2100 1700)
(defconst relative-gt-2500 2100)
(defconst relative-gt-3000 2500)
(defconst relative-gt-3600 3000)
(defconst relative-gt-4500 4000)

(defconst relative-gt-multiplier 4)
(defconst relative-gt-divider 5)
#else
(defconst relative-gt-900 300)
(defconst relative-gt-1200 650)
(defconst relative-gt-1500 850)
(defconst relative-gt-1800 1000)
(defconst relative-gt-2100 1300)
(defconst relative-gt-2500 1600)
(defconst relative-gt-3000 1900)
(defconst relative-gt-3600 2400)
(defconst relative-gt-4500 3600)

(defconst relative-gt-multiplier 2)
(defconst relative-gt-divider 3)
#end-if

#end-if

#load-if-not-defined UP-MICHI-STYLE
(defconst extra-gold-to-buy-castle 8000)
(defconst tech-for-castle ri-loom)
#load-if-defined MIGRATION-MAP
(defconst extra-market-time 2400)
#else
(defconst extra-market-time 2000)
#end-if
(defconst extra-market-pop 145)
(defconst defensive-technology-time 3000)
(defconst high-monks 8)
(defconst uu-block-strategy gothic-boom)
(defconst limited-buying-time 420) 
#load-if-not-defined WONDER-RACE
#load-if-not-defined UP-POCKET-POSITION
(defconst deer-luring-stop-time1 780)
(defconst deer-luring-stop-time2 840)
#else
(defconst deer-luring-stop-time1 960)
(defconst deer-luring-stop-time2 1020)
#end-if
#else
(defconst deer-luring-stop-time1 1100)
(defconst deer-luring-stop-time2 1160)
#end-if
(defconst gv-michi-style 0)
(defconst max-circle-scouting-walls 0)
#else
(defconst extra-gold-to-buy-castle 20000)
(defconst extra-market-time 1560); 1740
(defconst extra-market-pop 130)
(defconst defensive-technology-time 2300)
(defconst deer-luring-stop-time1 1300)
(defconst deer-luring-stop-time2 1360)
(defconst gv-michi-style 1)
(defconst tech-for-castle feudal-age)
(defconst high-monks 23)
(defconst uu-block-strategy michi-boom)
(defconst limited-buying-time 900) 
(defconst max-circle-scouting-walls 1)
#end-if

#load-if-defined YUCATAN-MAP
(defconst land-map-style 712)
(defconst mixed-map-style 713)
(defconst gv-yucatan 1)
(defconst galley-number1 2)
#else
(defconst land-map-style 998)
(defconst mixed-map-style 1000)
(defconst gv-yucatan 0)
(defconst galley-number1 35)
#end-if
(defconst islands-map-landing-style 1999)
(defconst islands-map-water-style 2001)
(defconst wood-exhaustion 2002)

#load-if-not-defined POPULATION-CAP-EXTENDED
(defconst min-full-pop-current-age-time 60)

#load-if-defined POPULATION-CAP-25
(defconst absolute-villager-cap 24)
(defconst gv-preferred-TC-number 1)
#load-if-defined DEATH-MATCH
(defconst imperial-villager-cap 12)
#else
#load-if-not-defined DARK-AGE-END
#load-if-not-defined FEUDAL-AGE-END
#load-if-not-defined TURBO-RANDOM-MAP
(defconst imperial-villager-cap 16)
#else
(defconst imperial-villager-cap 12)
#end-if
#else
(defconst imperial-villager-cap 12)
#end-if
#else
(defconst imperial-villager-cap 12)
#end-if
#end-if
(defconst almost-full-pop 20)
(defconst full-pop 25)
(defconst pop-to-full-pop-attack 24)
(defconst pop-to-stop-full-pop-attack 20)
(defconst gv-max-carts 2)
(defconst max-ti-carts 1)
(defconst medium-army-rams 3)
(defconst large-army-rams 3)
(defconst max-cannons 2)
(defconst min-army-to-land 1)

(defconst max-lumbercamp-renew-time 1000)
(defconst anti-landing-style land-map-style)
(defconst dm-max-TC-builders 1)
(defconst max-castle-builders 3)
#else
(defconst dm-max-TC-builders 4)
(defconst max-castle-builders 5)
#load-if-defined POPULATION-CAP-50
(defconst max-lumbercamp-renew-time 700)
(defconst anti-landing-style land-map-style)
(defconst min-army-to-land 2)
#else
(defconst max-lumbercamp-renew-time 320)
(defconst anti-landing-style mixed-map-style)
(defconst min-army-to-land 3)
#end-if
#end-if

#load-if-defined POPULATION-CAP-50
(defconst absolute-villager-cap 45)
(defconst gv-preferred-TC-number 2)
#load-if-defined DEATH-MATCH
(defconst imperial-villager-cap 23)
#else
(defconst imperial-villager-cap 32)
#end-if
(defconst almost-full-pop 40)
(defconst full-pop 50)
(defconst pop-to-full-pop-attack 47)
(defconst pop-to-stop-full-pop-attack 44)
(defconst gv-max-carts 5)
(defconst max-ti-carts 3)
(defconst medium-army-rams 3)
(defconst large-army-rams 4)
(defconst max-cannons 3)
#end-if

#load-if-defined POPULATION-CAP-75
#load-if-defined DEATH-MATCH
(defconst imperial-villager-cap 35)
#else
(defconst imperial-villager-cap 45)
#end-if
(defconst absolute-villager-cap 60)
(defconst gv-preferred-TC-number 2)
(defconst almost-full-pop 65)
(defconst full-pop 75)
(defconst pop-to-full-pop-attack 70)
(defconst pop-to-stop-full-pop-attack 65)
(defconst gv-max-carts 7)
(defconst max-ti-carts 5)
(defconst medium-army-rams 4)
(defconst large-army-rams 4)
(defconst max-cannons 4)
#end-if

#load-if-defined POPULATION-CAP-100
(defconst almost-full-pop 85)
(defconst pop-to-full-pop-attack 95)
(defconst pop-to-stop-full-pop-attack 85)
(defconst gv-max-carts 13)
(defconst max-ti-carts 10)
(defconst medium-army-rams 4)
(defconst large-army-rams 5)
(defconst max-cannons 5)
#load-if-defined DEATH-MATCH
(defconst imperial-villager-cap 50)
#else
(defconst imperial-villager-cap 60)
#end-if
(defconst absolute-villager-cap 75)
(defconst gv-preferred-TC-number 3)
(defconst full-pop 100)
#end-if

#load-if-defined POPULATION-CAP-125
(defconst almost-full-pop 110)
(defconst pop-to-full-pop-attack 117)
(defconst pop-to-stop-full-pop-attack 105)
(defconst gv-max-carts 15)
(defconst max-ti-carts 12)
(defconst medium-army-rams 4)
(defconst large-army-rams 6)
(defconst max-cannons 6)
(defconst imperial-villager-cap 70)
(defconst absolute-villager-cap 90)
(defconst gv-preferred-TC-number 3)
(defconst full-pop 125)
#end-if

#load-if-defined POPULATION-CAP-150
(defconst almost-full-pop 135)
(defconst pop-to-full-pop-attack 141)
(defconst pop-to-stop-full-pop-attack 126)
(defconst gv-max-carts 28)
(defconst max-ti-carts 22)
(defconst medium-army-rams 5)
(defconst large-army-rams 7)
(defconst max-cannons 7)
(defconst imperial-villager-cap 80)
(defconst absolute-villager-cap 110)
(defconst gv-preferred-TC-number 4)
(defconst full-pop 150)
#end-if

#load-if-defined POPULATION-CAP-175
(defconst almost-full-pop 155)
(defconst pop-to-full-pop-attack 165)
(defconst pop-to-stop-full-pop-attack 150)
(defconst gv-max-carts 35)
(defconst max-ti-carts 26)
(defconst medium-army-rams 6)
(defconst large-army-rams 8)
(defconst max-cannons 9)
(defconst imperial-villager-cap 100)
(defconst absolute-villager-cap 120)
(defconst gv-preferred-TC-number 4)
(defconst full-pop 175)
#end-if

#load-if-defined POPULATION-CAP-200
(defconst almost-full-pop 180)
(defconst pop-to-full-pop-attack 188)
(defconst pop-to-stop-full-pop-attack 173)
(defconst gv-max-carts 43)
(defconst max-ti-carts 31)
(defconst medium-army-rams 7)
(defconst large-army-rams 9)
(defconst max-cannons 12)
(defconst imperial-villager-cap 1000)
(defconst absolute-villager-cap 1000)
(defconst gv-preferred-TC-number 4)
(defconst full-pop 200)
#end-if
#else
(defconst dm-max-TC-builders 4)
(defconst max-castle-builders 5)
(defconst max-lumbercamp-renew-time 340)
(defconst anti-landing-style mixed-map-style)
(defconst imperial-villager-cap 1000)
(defconst absolute-villager-cap 1000)
(defconst min-full-pop-current-age-time 360)
(defconst gv-preferred-TC-number 4)
#load-if-defined POPULATION-CAP-225
(defconst almost-full-pop 200)
(defconst pop-to-full-pop-attack 208)
(defconst pop-to-stop-full-pop-attack 190)
(defconst gv-max-carts 50)
(defconst max-ti-carts 35)
(defconst medium-army-rams 8)
(defconst large-army-rams 16)
(defconst max-cannons 14)
(defconst full-pop 225)
#end-if
#load-if-defined POPULATION-CAP-250
(defconst almost-full-pop 225)
(defconst pop-to-full-pop-attack 233)
(defconst pop-to-stop-full-pop-attack 205)
(defconst gv-max-carts 55)
(defconst max-ti-carts 40)
(defconst medium-army-rams 8)
(defconst large-army-rams 20)
(defconst max-cannons 16)
(defconst full-pop 250)
#end-if
#end-if

#load-if-defined ISLANDS-MAP
(defconst preferred-TC-number 1)
(defconst decent-TC-number 1)
(defconst lumber-villagers1 40)
(defconst lumber-villagers2 60)
(defconst monastery-villagers1 50)
(defconst gv-islands 1)
#else
(defconst preferred-TC-number gv-preferred-TC-number)
(defconst decent-TC-number 3)
(defconst lumber-villagers1 80)
(defconst lumber-villagers2 110)
(defconst monastery-villagers1 73)
(defconst gv-islands 0)
#end-if

#load-if-defined POPULATION-CAP-EXTENDED
(defconst min-army-to-land 3)
#load-if-not-defined POPULATION-CAP-225
#load-if-not-defined POPULATION-CAP-250; Unknown pop cap that is >250, play it as 275
(defconst full-pop 275)
(defconst almost-full-pop 265)
#load-if-defined POPULATION-CAP-275
(defconst pop-to-full-pop-attack 260)
(defconst pop-to-stop-full-pop-attack 225)
#else
(defconst pop-to-full-pop-attack 275)
(defconst pop-to-stop-full-pop-attack 245)
#end-if
(defconst gv-max-carts 65)
(defconst max-ti-carts 40)
(defconst medium-army-rams 8)
(defconst large-army-rams 20)
(defconst max-cannons 20)
#end-if
#end-if
#end-if

#load-if-defined POPULATION-CAP-200
(defconst relative-2-units 2)
(defconst relative-3-units 3)
(defconst relative-4-units 4)
(defconst relative-5-units 5)
(defconst relative-6-units 6)
(defconst relative-10-units 10)
(defconst relatively-high-pop 160)
#load-if-defined POPULATION-CAP-EXTENDED
(defconst max-carts gv-max-carts)
(defconst very-high-pop pop-to-full-pop-attack)
(defconst trash-war-villager-limit-pop 175)
#else
(defconst max-carts gv-max-carts2)
(defconst trash-war-villager-limit-pop 155)
#end-if
#else
(defconst relative-2-units 1)
(defconst relative-3-units 1)
(defconst relative-4-units 2)
(defconst relative-5-units 2)
(defconst relative-6-units 2)
(defconst relative-10-units 2)
(defconst relatively-high-pop pop-to-stop-full-pop-attack)
(defconst max-carts gv-max-carts)
(defconst trash-war-villager-limit-pop 10000)
#end-if

#load-if-defined UP-2-PLAYER-GAME
(defconst gv-2-player-game 1)
(defconst early-ram-TCs 1)
#load-if-defined UP-AZTEC-CIV-ENEMY
(defconst mush-resistance 100)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 1)
(defconst gv-meso-civ-enemy 1)
#else
#load-if-defined UP-INCAN-CIV-ENEMY
(defconst gv-meso-civ-enemy 1)
#else
#load-if-defined UP-MAYAN-CIV-ENEMY
(defconst gv-meso-civ-enemy 1)
#else
(defconst gv-meso-civ-enemy 0)
#end-if
#end-if
#end-if
#load-if-defined UP-BRITON-CIV-ENEMY
(defconst mush-resistance 70)
(defconst enemy-atonement-value 0)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-BYZANTINE-CIV-ENEMY
(defconst mush-resistance 80)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-CELTIC-CIV-ENEMY
(defconst mush-resistance 60)
(defconst enemy-atonement-value 0)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-CHINESE-CIV-ENEMY
(defconst mush-resistance 30)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-FRANKISH-CIV-ENEMY
(defconst mush-resistance 40)
(defconst enemy-atonement-value 0)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-GOTHIC-CIV-ENEMY
(defconst mush-resistance 10)
(defconst enemy-atonement-value 0)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-HUN-CIV-ENEMY
(defconst mush-resistance 90)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-INCAN-CIV-ENEMY
(defconst mush-resistance 80)
(defconst enemy-atonement-value 0)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 1)
#end-if
#load-if-defined UP-INDIAN-CIV-ENEMY
(defconst mush-resistance 5)
(defconst enemy-atonement-value 0)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-ITALIAN-CIV-ENEMY
(defconst mush-resistance 60)
(defconst enemy-atonement-value 0)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-JAPANESE-CIV-ENEMY
(defconst mush-resistance 5)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-KOREAN-CIV-ENEMY
(defconst mush-resistance 5)
(defconst enemy-atonement-value 0)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-MAGYAR-CIV-ENEMY
(defconst mush-resistance 90)
(defconst enemy-atonement-value 0)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-MAYAN-CIV-ENEMY
(defconst mush-resistance 100)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 1)
#end-if
#load-if-defined UP-MONGOL-CIV-ENEMY
(defconst mush-resistance 80)
(defconst enemy-atonement-value 0)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-PERSIAN-CIV-ENEMY
(defconst mush-resistance 5)
(defconst enemy-atonement-value 0)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-SARACEN-CIV-ENEMY
(defconst mush-resistance 80)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-SLAVIC-CIV-ENEMY
(defconst mush-resistance 5)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-SPANISH-CIV-ENEMY
(defconst mush-resistance 60)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-TURKISH-CIV-ENEMY
(defconst mush-resistance 90)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-TEUTONIC-CIV-ENEMY
(defconst mush-resistance 100)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 1)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-VIKING-CIV-ENEMY
(defconst mush-resistance 80)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-BERBERS-CIV-ENEMY
(defconst mush-resistance 90)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-BURMESE-CIV-ENEMY
(defconst mush-resistance 5)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-ETHIOPIAN-CIV-ENEMY
(defconst mush-resistance 70)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-KHMER-CIV-ENEMY
(defconst mush-resistance 5)
(defconst enemy-atonement-value 0)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-MALAY-CIV-ENEMY
(defconst mush-resistance 60)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-MALIAN-CIV-ENEMY
(defconst mush-resistance 50)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 1)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-PORTUGUESE-CIV-ENEMY
(defconst mush-resistance 60)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-VIETNAMESE-CIV-ENEMY
(defconst mush-resistance 30)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 1)
(defconst dm-archer-threat-likelihood 1)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 1)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#load-if-defined UP-ALLY-IN-GAME
(defconst mush-resistance 100)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
#end-if
#else
(defconst gv-2-player-game 0)
(defconst early-ram-TCs 2)
(defconst mush-resistance 0)
(defconst enemy-atonement-value 1)
(defconst dm-cavalry-threat-likelihood 0)
(defconst dm-infantry-threat-likelihood 0)
(defconst dm-archer-threat-likelihood 0)
(defconst dm-anti-archer-threat-likelihood 0)
(defconst dm-gunpowder-threat-likelihood 0)
(defconst dm-eagle-threat-likelihood 0)
(defconst gv-meso-civ-enemy 0)
#end-if

#load-if-not-defined UP-HUMAN-IN-GAME
(defconst min-enemy-sling-pop 23)
(defconst max-enemy-sling-age feudal-age)
(defconst min-sling-attack-army 6)
(defconst max-enemy-sling-army 1)
(defconst min-sling-target-pop 10)
(defconst min-sling-continuous-attack-army 5)
(defconst max-sling-ranges 1)
(defconst civilian-defense-value 1)
(defconst dm-high-scouts 10)
(defconst chat-recipient every-ally)
(defconst chance-for-wonder 25)
(defconst gv-241-taunt "241")
(defconst enemy-flush-civilians 27)
(defconst enemy-dock-flush-civilians 30)
(defconst taunt-sender1 any-computer)
(defconst taunt-sender2 this-any-computer)
(defconst closed-wood-percentage 45)
#else
(defconst min-enemy-sling-pop 60)
(defconst max-enemy-sling-age castle-age)
(defconst min-sling-attack-army 11)
(defconst max-enemy-sling-army 5)
(defconst min-sling-target-pop 35)
(defconst min-sling-continuous-attack-army 9)
(defconst max-sling-ranges 1000)
(defconst civilian-defense-value 1)
(defconst dm-high-scouts 8)
(defconst chat-recipient my-player-number)
(defconst chance-for-wonder 60)
(defconst gv-241-taunt "-")
(defconst enemy-flush-civilians 26)
(defconst enemy-dock-flush-civilians 29)
#load-if-not-defined WONDER-RACE
(defconst taunt-sender1 any-human-ally)
(defconst taunt-sender2 this-any-human-ally)
#else
(defconst taunt-sender1 any-computer-ally)
(defconst taunt-sender2 this-any-computer-ally)
#end-if
(defconst closed-wood-percentage 35)
#end-if

(defconst wood-to-be-seen 30)
#load-if-defined UP-ALLY-IN-GAME
(defconst blind-attack-gold 400)
(defconst extra-wood-to-be-seen 30)
(defconst relocate-building market)
#load-if-defined DEATH-MATCH
(defconst rescouting-start-time 310)
#else
#load-if-not-defined POCKET-POSITION
(defconst rescouting-start-time 1600)
#else
(defconst rescouting-start-time 1900)
#end-if
#end-if
(defconst DTW-TC-number 3)
(defconst DTW-villagers1 19)
#else
#load-if-defined GOLD-RUSH
(defconst blind-attack-gold 400)
#else
(defconst blind-attack-gold 700)
#end-if
(defconst relocate-building mill)
(defconst extra-wood-to-be-seen 0)
#load-if-defined DEATH-MATCH
(defconst rescouting-start-time 180)
#else
(defconst rescouting-start-time 1500)
#end-if
(defconst DTW-TC-number 1)
(defconst DTW-villagers1 13)
#end-if

#load-if-not-defined DEFEND-WONDER
(defconst gv-defend-wonder 0)
(defconst wonder-owner any-human-ally)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defconst zero-value 0); > 0 blacksmith
(defconst one-value 1); < 1 blacksmith
#else
(defconst zero-value -1); > -1 blacksmith -> always true since we don't need one
(defconst one-value 0)
#end-if
#else
(defconst gv-defend-wonder 1)
(defconst wonder-owner any-ally)
(defconst zero-value -1)
(defconst one-value 0)
#end-if

#load-if-not-defined DIFFICULTY-HARDEST
(defconst max-queue-villagers 25)
(defconst flush-deer-lure-time 530)
(defconst hardest-and-multiple-players 0)
#load-if-defined LOW-RESOURCES-START
#load-if-defined PERSIAN-CIV
(defconst no-sheep-mill-time 30)
#else
(defconst no-sheep-mill-time 30);15
#end-if
#else
(defconst no-sheep-mill-time 60)
#end-if
#else
(defconst max-queue-villagers 21)
(defconst no-sheep-mill-time 60)
(defconst flush-deer-lure-time 430)
#load-if-defined UP-2-PLAYER-GAME
(defconst hardest-and-multiple-players 0)
#else
(defconst hardest-and-multiple-players 1); Counts 1-player-game as well but whatever
#end-if
#end-if

#load-if-defined DEATH-MATCH
(defconst time-to-allow-blind-attack 60)
(defconst time-to-allow-villager-deleting 1500)
(defconst time-to-allow-retargeting 600)
(defconst time-to-trade 300)
(defconst food-to-delete-75-extra-vill 4500)
(defconst wood-to-delete-75-extra-vill 4500)
(defconst gold-to-delete-75-extra-vill 3500)
(defconst food-to-delete-100-extra-vill 2000)
(defconst wood-to-delete-100-extra-vill 1700)
(defconst gold-to-delete-100-extra-vill 1700)
(defconst camp-raid-time 1800)
(defconst rule-jump-time 900)
(defconst default-food-drop-distance 0)
(defconst gv-death-match 1)
(defconst repatrol-time 90)
(defconst michi-TCs 8)
(defconst min-scout-time 70)
(defconst lumber-backup-time 360)
(defconst auto-sling-time 600)
(defconst ally-help-time 700)
(defconst max-ally-help-time 700)
(defconst trade-time 0)
(defconst max-ts 39)
#else
(defconst time-to-allow-blind-attack 1200)
(defconst time-to-allow-villager-deleting 2700)
(defconst time-to-allow-retargeting 1500)
(defconst time-to-trade 1400)
#load-if-defined UP-ALLY-IN-GAME
(defconst food-to-delete-75-extra-vill 3500)
(defconst wood-to-delete-75-extra-vill 3500)
(defconst gold-to-delete-75-extra-vill 2500)
(defconst food-to-delete-100-extra-vill 2000)
(defconst wood-to-delete-100-extra-vill 2000)
(defconst gold-to-delete-100-extra-vill 1700)
#else
(defconst food-to-delete-75-extra-vill 6000)
(defconst wood-to-delete-75-extra-vill 6000)
(defconst gold-to-delete-75-extra-vill 4500)
(defconst food-to-delete-100-extra-vill 4000)
(defconst wood-to-delete-100-extra-vill 4000)
(defconst gold-to-delete-100-extra-vill 3000)
#end-if
(defconst camp-raid-time 2700)
(defconst rule-jump-time 2100)
(defconst default-food-drop-distance 20)
(defconst gv-death-match 0)
(defconst repatrol-time 7)
(defconst michi-TCs 5)
(defconst min-scout-time 0)
(defconst lumber-backup-time 240)
(defconst auto-sling-time 1800)
(defconst ally-help-time 2400)
(defconst max-ally-help-time 2800)
(defconst trade-time 1800)
(defconst max-ts 37)
#end-if

#load-if-defined DEFEND-WONDER
(defconst anti-wall-tsa-time 300)
(defconst wonder-outpost-pop 60)
(defconst mixed-map-navy-time 300)
(defconst backup-lumber-time 90)
#else
#load-if-not-defined REGICIDE
(defconst anti-wall-tsa-time 1300)
#else
(defconst anti-wall-tsa-time 1200)
#end-if
(defconst wonder-outpost-pop 150)
(defconst mixed-map-navy-time 1200)
(defconst backup-lumber-time 360)
#end-if

#load-if-defined UP-POCKET-POSITION
(defconst load-chance 70)
(defconst gv-pocket-position 1)
(defconst estimated-enemy-distance1 130)
(defconst estimated-enemy-distance2 140)
(defconst highland-dock-scout-time 70)
(defconst base-sheep-scouting-time 205)
#load-if-defined FEUDAL-AGE-END
(defconst gv-pocket-value FLANK)
#else
(defconst gv-pocket-value POCKET)
#end-if
(defconst gv-scouting-type scout-mirror)
#else
(defconst load-chance 45)
(defconst gv-pocket-position 0)
(defconst gv-pocket-value FLANK)
(defconst highland-dock-scout-time 50)
(defconst base-sheep-scouting-time 145)
(defconst estimated-enemy-distance1 100)
(defconst estimated-enemy-distance2 100)
#load-if-defined UP-ALLY-IN-GAME
(defconst gv-scouting-type scout-flank)
#else
(defconst gv-scouting-type scout-opposite)
#end-if
#end-if

#load-if-defined REVEAL-NORMAL
(defconst gv-explored-map 0)
#else
(defconst gv-explored-map 1)
#end-if

#load-if-defined GOLD-RUSH-MAP
(defconst max-map-wood-percentage 16)
(defconst gv-scouting-type2 scout-center)
(defconst gv-default-mcamp-max-distance 13)
#else
(defconst gv-scouting-type2 scout-corner)
#load-if-defined ARENA-MAP
(defconst max-map-wood-percentage 200)
(defconst gv-default-mcamp-max-distance 17)
#else
(defconst max-map-wood-percentage 16)
(defconst gv-default-mcamp-max-distance 20)
#end-if
#end-if

#load-if-not-defined TURBO-RANDOM-MAP
#load-if-not-defined DIFFICULTY-HARDEST
#load-if-defined HIGH-RESOURCES-START
(defconst barracks-villagers 14)
#end-if
#load-if-defined MEDIUM-RESOURCES-START
(defconst barracks-villagers 18)
#end-if
#load-if-not-defined HIGH-RESOURCES-START
#load-if-not-defined MEDIUM-RESOURCES-START
(defconst barracks-villagers 21)
#end-if
#end-if
#else
(defconst barracks-villagers 14)
#end-if
#else
(defconst barracks-villagers 14)
#end-if

(defconst landing-chat "Enable landing")
(defconst mill-chat "Mill")
(defconst lumber-camp-chat "Lumber camp")
(defconst TC-chat "Town center")
(defconst castle-chat "Castle!")
(defconst sell-wood-chat "Sell wood")
(defconst sell-food-chat "Sell food")
(defconst buy-wood-chat "Buy wood")
(defconst TSA-on-chat "Attack now (TSA)")
(defconst TSA-off-chat "Stop TSA")
(defconst water-map-chat "Water map - enable docking")
(defconst heavy-water-map-chat "Water map - enable docking")
(defconst more-navy-chat "I'll build more navy.")
(defconst less-navy-chat "I'll build less navy.")
(defconst target-player-chat "My new target is player %d.")
(defconst chat-177 "177")
(defconst sling-found-chat1 "1Trying to kill the boomer/sling: player %d")
(defconst food-200-chat "Give 200 food to ally")
(defconst wood-200-chat "Give 200 wood to ally")
(defconst gold-200-chat "Give 200 gold to ally")
(defconst stone-200-chat "Give 200 stone to ally")
(defconst focus-chat "My focus player is %d.")
(defconst target-chat "My target player is %d.")
(defconst new-TC-chat "No town center - build new!")
(defconst placement-failure-chat "Placement failure - new attempt")
(defconst one-stable-chat "I'll go 1 stable.")
(defconst add-stable-chat "Adding more stables.")
(defconst weak-villager-found-chat "Weak villager found")
(defconst aggressive-chat "1Go aggressive")
(defconst food-d "Food: %d")
(defconst wood-d "Wood: %d")
(defconst gold-d "Gold: %d")
(defconst stone-d "Stone: %d")

#load-if-defined DARK-AGE-START
(defconst gv-starting-age dark-age)
(defconst real-starting-age gv-dark)
(defconst gv-pre-age 0)
#load-if-defined FORTRESS-MAP
(defconst regicide-gold-villagers 14)
#else
(defconst regicide-gold-villagers 11)
#end-if
#else
(defconst regicide-gold-villagers 13)
#end-if
#load-if-defined FEUDAL-AGE-START
(defconst gv-starting-age feudal-age)
(defconst real-starting-age gv-feudal)
(defconst gv-pre-age gv-dark-up)
#end-if
#load-if-defined CASTLE-AGE-START
(defconst gv-starting-age castle-age)
(defconst real-starting-age gv-castle)
(defconst gv-pre-age gv-feudal-up)
#end-if
#load-if-defined IMPERIAL-AGE-START
(defconst gv-starting-age imperial-age)
(defconst real-starting-age gv-imperial)
(defconst gv-pre-age gv-castle-up)
#end-if
#load-if-defined POST-IMPERIAL-AGE-START
(defconst gv-starting-age imperial-age)
(defconst real-starting-age gv-imperial)
(defconst gv-pre-age gv-castle-up)
#end-if

#load-if-not-defined MEDIUM-RESOURCES-START
#load-if-not-defined HIGH-RESOURCES-START
#load-if-defined TURBO-RANDOM-MAP
(defconst initial-flush-villagers 7)
(defconst initial-FC-villagers 7)
(defconst extra-flush-upgrade-time 800)
#else
(defconst initial-flush-villagers 12)
(defconst initial-FC-villagers 14)
(defconst extra-flush-upgrade-time 1700)
#end-if
(defconst feudal-flush-up-villagers 1000); Use normal values
(defconst feudal-FC-up-villagers 1000)
#end-if
#end-if

#load-if-defined MEDIUM-RESOURCES-START
#load-if-defined TURBO-RANDOM-MAP
(defconst initial-flush-villagers 3)
(defconst initial-FC-villagers 3)
(defconst feudal-flush-up-villagers 12)
(defconst feudal-FC-up-villagers 13)
(defconst extra-flush-upgrade-time 600)
#else
(defconst initial-flush-villagers 6)
(defconst initial-FC-villagers 9)
(defconst feudal-flush-up-villagers 26)
(defconst feudal-FC-up-villagers 22)
(defconst extra-flush-upgrade-time 1500)
#end-if
#end-if

#load-if-defined HIGH-RESOURCES-START
#load-if-defined TURBO-RANDOM-MAP
(defconst initial-flush-villagers 3)
(defconst initial-FC-villagers 3)
(defconst feudal-flush-up-villagers 10)
(defconst feudal-FC-up-villagers 11)
(defconst extra-flush-upgrade-time 500)
#else
(defconst initial-flush-villagers 6)
(defconst initial-FC-villagers 8)
(defconst feudal-flush-up-villagers 15)
(defconst feudal-FC-up-villagers 20)
(defconst extra-flush-upgrade-time 1200)
#end-if
#end-if

#load-if-not-defined AZTEC-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined TURKISH-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined HUN-CIV
(defconst rules-to-be-jumped 177)
#else
(defconst rules-to-be-jumped 180)
#end-if
#else
(defconst rules-to-be-jumped 178)
#end-if
#else
(defconst rules-to-be-jumped 181)
#end-if
#else
(defconst rules-to-be-jumped 157)
#end-if
#else
(defconst rules-to-be-jumped 140)
#end-if
#else
(defconst rules-to-be-jumped 136)
#end-if
#else
(defconst rules-to-be-jumped 138)
#end-if

#load-if-defined GOTHIC-CIV
(defconst pop-space-for-trade 198)
#else
(defconst pop-space-for-trade 188)
#end-if

#load-if-not-defined UP-GAME-WK
(defconst gv-aofe-game 0)
#else
(defconst gv-aofe-game 1)
#end-if

#load-if-defined ARABIA-MAP
#load-if-not-defined BERBERS-CIV
(defconst gv-max-loomless-boar-distance 22)
#else
(defconst gv-max-loomless-boar-distance 30)
#end-if
(defconst gv-new-scouting-style 1)
(defconst gv-early-raid-enabled 1)
#else
#load-if-defined FORTRESS-MAP
(defconst gv-max-loomless-boar-distance 23)
#else
#load-if-defined ARENA-MAP
#load-if-not-defined BERBERS-CIV
(defconst gv-max-loomless-boar-distance 23)
#else
(defconst gv-max-loomless-boar-distance 30)
#end-if
#else
#load-if-not-defined BERBERS-CIV
(defconst gv-max-loomless-boar-distance 17)
#else
(defconst gv-max-loomless-boar-distance 23)
#end-if
#end-if
#end-if
#load-if-defined GHOST-LAKE-MAP
(defconst gv-new-scouting-style 1)
(defconst gv-early-raid-enabled 1)
#else
#load-if-defined OASIS-MAP
(defconst gv-new-scouting-style 1)
(defconst gv-early-raid-enabled 0)
#else
#load-if-defined GOLD-RUSH-MAP
(defconst gv-new-scouting-style 1)
(defconst gv-early-raid-enabled 1)
#else
#load-if-defined MONGOLIA-MAP
(defconst gv-new-scouting-style 1)
(defconst gv-early-raid-enabled 1)
#else
(defconst gv-new-scouting-style 0)
(defconst gv-early-raid-enabled 0)
#end-if
#end-if
#end-if
#end-if
#end-if

#load-if-defined ISLANDS-MAP
(defconst min-boar-distance 1)
(defconst max-boar-distance 0)
(defconst gv-fortress 0)
(defconst boar-wait-time 80)
#else
#load-if-defined FORTRESS-MAP
(defconst min-boar-distance -1)
(defconst gv-fortress 1)
(defconst boar-wait-time 80)
#else
(defconst min-boar-distance 36)
(defconst gv-fortress 0)
(defconst boar-wait-time 30)
#end-if
(defconst max-boar-distance 130)
#end-if

#load-if-defined MIGRATION-MAP
(defconst gv-migration 1)
(defconst min-migration-progress 0)
(defconst proximity1 1100)
(defconst lost-TC-builders 8)
(defconst fish-building1 blacksmith)
(defconst fish-number1 18)
(defconst normal-sheep-number 6)
(defconst TCs-for-up-monastery 1)
(defconst primary-up-building university)
(defconst gl-primary-up-build-priority gl-university-build-priority)
(defconst secondary-up-building siege-workshop)
(defconst navy-TCs 1)
(defconst ally-pop-to-run 50000); Never
(defconst castle-sling-priority3 landing-priority)
(defconst islands-sling-stop-time 3600)
#load-if-defined UP-POCKET-POSITION
(defconst dock-number1 2)
#else
(defconst dock-number1 1)
#end-if
#else
(defconst proximity1 700)
(defconst gv-migration 0)
(defconst min-migration-progress -1)
(defconst dock-number1 1)
(defconst lost-TC-builders 100)
(defconst fish-building1 mill)
(defconst fish-number1 12)
(defconst normal-sheep-number 8)
#load-if-defined ISLANDS-MAP
(defconst TCs-for-up-monastery 1)
(defconst primary-up-building university)
(defconst gl-primary-up-build-priority gl-university-build-priority)
#else
(defconst TCs-for-up-monastery 3)
#load-if-defined TEAM-ISLANDS-MAP
(defconst primary-up-building university)
(defconst gl-primary-up-build-priority gl-university-build-priority)
#else
#load-if-defined ARCHIPELAGO-MAP
(defconst primary-up-building university)
(defconst gl-primary-up-build-priority gl-university-build-priority)
#else
(defconst primary-up-building siege-workshop)
(defconst gl-primary-up-build-priority gl-workshop-build-priority)
#end-if
#end-if
#end-if
(defconst secondary-up-building university)
(defconst ally-pop-to-run 50)
(defconst castle-sling-priority3 castle-sling-priority2)
(defconst islands-sling-stop-time 2200)
#load-if-defined ISLANDS-MAP
(defconst navy-TCs 1)
#else
(defconst navy-TCs 2)
#end-if
#end-if

#load-if-defined REGICIDE
(defconst boar-search-time 180)
(defconst sheep-search-time 180)
(defconst min-search-time 120)
(defconst gv-regicide 1)
(defconst enemy-army1 1000)
(defconst gv-king-time11 40)
(defconst gv-king-time12 45)
(defconst gv-king-time21 80)
(defconst gv-king-time22 85)
(defconst gv-king-tiles1 30)
(defconst gv-king-tiles2 -30)
#load-if-defined DARK-AGE-START
(defconst early-food-villagers 15)
#else
(defconst early-food-villagers 10)
#end-if
#else
(defconst early-food-villagers 10)
#load-if-defined MIGRATION-MAP
(defconst boar-search-time 60)
#else
(defconst boar-search-time 330)
#end-if
(defconst gv-king-time11 58)
(defconst gv-king-time12 63)
(defconst gv-king-time21 160)
(defconst gv-king-time22 165)
(defconst gv-king-tiles1 45)
(defconst gv-king-tiles2 -45)
(defconst min-search-time 180)
(defconst sheep-search-time 300)
(defconst gv-regicide 0)
(defconst enemy-army1 2)
#end-if

#load-if-defined CUSTOM-MAP
(defconst water-home-exploring-time 300)
#else
(defconst water-home-exploring-time 450)
#end-if

#load-if-defined BLACK-FOREST-MAP
(defconst relative-5-camps 4)
(defconst relative-6-camps 4)
(defconst relative-7-camps 5)
(defconst relative-8-camps 5)
(defconst relative-9-camps 6)
(defconst relative-10-camps 6)
(defconst relative-13-camps 8)
#load-if-defined DEATH-MATCH
(defconst camp-max-50-time 600)
(defconst camp-max-80-time 2400)
(defconst camp-max-100-time 3600)
(defconst camp-max-150-time 6000)
#else
(defconst camp-max-50-time 2400)
(defconst camp-max-80-time 3600)
(defconst camp-max-100-time 6000)
(defconst camp-max-150-time 8000)
#end-if
#else
#load-if-defined DEATH-MATCH
(defconst camp-max-50-time 800)
(defconst camp-max-80-time 1100)
(defconst camp-max-100-time 2000)
(defconst camp-max-150-time 3000)
#else
(defconst camp-max-50-time 2100)
(defconst camp-max-80-time 2400)
(defconst camp-max-100-time 3000)
(defconst camp-max-150-time 4300)
#end-if
(defconst relative-5-camps 5)
(defconst relative-6-camps 6)
(defconst relative-7-camps 7)
(defconst relative-8-camps 8)
(defconst relative-9-camps 9)
(defconst relative-10-camps 10)
(defconst relative-13-camps 13)
#end-if

#load-if-not-defined UP-GROUPED-BY-TEAM
(defconst gv-starting-mill-distance 23)
(defconst gv-grouped-by-team 0)
(defconst gv-grouped-and-ally 0)
(defconst rush-suitability1 AVERAGE)
#else
(defconst gv-starting-mill-distance 10)
(defconst gv-grouped-by-team 1)
#load-if-defined UP-ALLY-IN-GAME
(defconst gv-grouped-and-ally 1)
(defconst rush-suitability1 LOW)
#else
(defconst gv-grouped-and-ally 0)
(defconst rush-suitability1 AVERAGE)
#end-if
#end-if

#load-if-defined UP-TEAM-DISADVANTAGE
(defconst gv-team-disadvantage 1)
#else
(defconst gv-team-disadvantage 0)
#end-if

#load-if-defined ALL-TECHS-ENABLED
(defconst all-techs-enabled 1)
#else
(defconst all-techs-enabled 0)
#end-if

#load-if-not-defined FEUDAL-AGE-END
#load-if-not-defined UP-ALLY-IN-GAME
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined UP-2-PLAYER-GAME
#load-if-not-defined UP-3-PLAYER-GAME
(defconst gv-FFA-like-game 1)
#load-if-not-defined UP-TEAM-DISADVANTAGE
(defconst gv-real-FFA 1)
(defconst gv-handicap 0)
#else
(defconst gv-real-FFA 0)
(defconst gv-handicap 1)
#end-if
#else
(defconst gv-FFA-like-game 0)
(defconst gv-real-FFA 0)
(defconst gv-handicap 0)
#end-if
#else
(defconst gv-FFA-like-game 0)
(defconst gv-real-FFA 0)
(defconst gv-handicap 0)
#end-if
#else
(defconst gv-FFA-like-game 0)
(defconst gv-real-FFA 0)
(defconst gv-handicap 0)
#end-if
#else
(defconst gv-FFA-like-game 0)
(defconst gv-real-FFA 0)
(defconst gv-handicap 0)
#end-if
#else
(defconst gv-FFA-like-game 0)
(defconst gv-real-FFA 0)
(defconst gv-handicap 0)
#end-if

(defconst boar-tiles-to-right 4)
(defconst boar-tiles-to-left -4)

#load-if-defined UP-1-PLAYER-TEAM
(defconst gv-1-player-team 1)
(defconst gv-players-in-team 1)
(defconst TCs-for-monastery 1)
(defconst gv-x-vs-one-challenge 0)
#else
(defconst gv-1-player-team 0)
#load-if-defined POPULATION-CAP-200
(defconst TCs-for-monastery 3)
#else
(defconst TCs-for-monastery 1)
#end-if
#end-if

#load-if-defined UP-2-PLAYER-TEAM
(defconst gv-2-player-team 1)
(defconst gv-players-in-team 2)
(defconst position-required-to-help FLANK)
(defconst min-gold-to-reduce-trash 1500)
#load-if-defined UP-3-PLAYER-GAME
(defconst gv-x-vs-one-challenge 1)
#else
(defconst gv-x-vs-one-challenge 0)
#end-if
#else
(defconst gv-2-player-team 0)
(defconst position-required-to-help POCKET)
(defconst min-gold-to-reduce-trash 800)
#end-if

#load-if-defined UP-3-PLAYER-TEAM
(defconst gv-3-player-team 1)
(defconst gv-players-in-team 3)
#load-if-defined UP-4-PLAYER-GAME
(defconst gv-x-vs-one-challenge 1)
#else
(defconst gv-x-vs-one-challenge 0)
#end-if
#else
(defconst gv-3-player-team 0)
#end-if

#load-if-defined UP-4-PLAYER-TEAM
(defconst gv-4-player-team 1)
(defconst gv-players-in-team 4)
#load-if-defined UP-5-PLAYER-GAME
(defconst gv-x-vs-one-challenge 1)
#else
(defconst gv-x-vs-one-challenge 0)
#end-if
#else
(defconst gv-4-player-team 0)
#end-if

#load-if-defined UP-5-PLAYER-TEAM
(defconst gv-5-player-team 1)
(defconst gv-players-in-team 5)
#load-if-defined UP-8-PLAYER-GAME
(defconst gv-x-vs-one-challenge 0)
#else
(defconst gv-x-vs-one-challenge 1)
#end-if
#else
(defconst gv-5-player-team 0)
#end-if

#load-if-defined UP-6-PLAYER-TEAM
(defconst gv-6-player-team 1)
(defconst gv-players-in-team 6)
(defconst gv-x-vs-one-challenge 1)
#else
(defconst gv-6-player-team 0)
#end-if

#load-if-defined UP-7-PLAYER-TEAM
(defconst gv-7-player-team 1)
(defconst gv-players-in-team 7)
(defconst gv-x-vs-one-challenge 1)
#else
(defconst gv-7-player-team 0)
#end-if

#load-if-defined UP-8-PLAYER-TEAM
(defconst gv-players-in-team 8)
(defconst gv-x-vs-one-challenge 0)
#end-if

#load-if-defined DIFFICULTY-EASIEST
(defconst difficulty-cart-cap 5)
(defconst difficulty-villager-cap 40)
(defconst relative-100-villagers 40)
(defconst feudal-up-villagers 22)
(defconst gv-high-difficulty 0)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst difficulty-cart-cap 10)
(defconst difficulty-villager-cap 65)
(defconst relative-100-villagers 65)
(defconst feudal-up-villagers 25)
(defconst gv-high-difficulty 0)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst difficulty-cart-cap 20)
(defconst difficulty-villager-cap 80)
(defconst relative-100-villagers 80)
(defconst feudal-up-villagers 1000)
(defconst gv-high-difficulty 0)
#else
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
(defconst difficulty-cart-cap 1000)
(defconst difficulty-villager-cap 1000)
(defconst relative-100-villagers 100)
(defconst feudal-up-villagers 1000)
(defconst gv-high-difficulty 1)
#end-if
#end-if
#end-if

#load-if-defined UP-1-PLAYER-GAME
(defconst large-number-forage 12)
(defconst large-number-boar 3)
(defconst large-number-deer 7)
(defconst huge-number-deer 9)
(defconst large-number-relics 10)
(defconst super-pocket-distance 0)
(defconst total-players 1)
#end-if
#load-if-defined UP-2-PLAYER-GAME
(defconst large-number-forage 23)
(defconst large-number-boar 6)
(defconst large-number-deer 13)
(defconst huge-number-deer 17)
(defconst large-number-relics 15)
(defconst super-pocket-distance 0)
(defconst total-players 2)
#end-if
#load-if-defined UP-3-PLAYER-GAME
(defconst large-number-forage 35)
(defconst large-number-boar 9)
(defconst large-number-deer 20)
(defconst huge-number-deer 26)
(defconst large-number-relics 20)
(defconst super-pocket-distance 0)
(defconst total-players 3)
#end-if
#load-if-defined UP-4-PLAYER-GAME
(defconst large-number-forage 47)
(defconst large-number-boar 11)
(defconst large-number-deer 27)
(defconst huge-number-deer 35)
(defconst large-number-relics 23)
(defconst super-pocket-distance 0)
(defconst total-players 4)
#end-if
#load-if-defined UP-5-PLAYER-GAME
(defconst large-number-forage 59)
(defconst large-number-boar 14)
(defconst large-number-deer 34)
(defconst huge-number-deer 44)
(defconst large-number-relics 26)
(defconst super-pocket-distance 0)
(defconst total-players 5)
#end-if
#load-if-defined UP-6-PLAYER-GAME
(defconst large-number-forage 71)
(defconst large-number-boar 17)
(defconst large-number-deer 41)
(defconst huge-number-deer 52)
(defconst large-number-relics 29)
(defconst super-pocket-distance 50)
(defconst total-players 6)
#end-if
#load-if-defined UP-7-PLAYER-GAME
(defconst large-number-forage 83)
(defconst large-number-boar 20)
(defconst large-number-deer 48)
(defconst huge-number-deer 61)
(defconst large-number-relics 32)
(defconst super-pocket-distance 80)
(defconst total-players 7)
#end-if
#load-if-defined UP-8-PLAYER-GAME
(defconst large-number-forage 94)
(defconst large-number-boar 22)
(defconst large-number-deer 54)
(defconst huge-number-deer 69)
(defconst large-number-relics 35)
#load-if-defined MIGRATION-MAP
(defconst super-pocket-distance 107); Larger base map size, but doesn't matter on normal islands
#else
#load-if-defined FORTRESS-MAP
(defconst super-pocket-distance 107)
#else
(defconst super-pocket-distance 100)
#end-if
#end-if
(defconst total-players 8)
#end-if

#load-if-defined UP-MULTIPLAYER-GAME
(defconst gv-multiplayer-game 1)
(defconst dm-placement-style place-control); place-normal
(defconst low-villager-hp 23)
(defconst low-villager-hp2 17)
#load-if-defined CHINESE-CIV
(defconst dm-starting-zone-size 7)
#else
(defconst dm-starting-zone-size 5)
#end-if
#else
(defconst gv-multiplayer-game 0)
(defconst dm-placement-style place-control)
(defconst low-villager-hp 20)
(defconst low-villager-hp2 14)
#load-if-defined CHINESE-CIV
(defconst dm-starting-zone-size 5)
#else
(defconst dm-starting-zone-size 5)
#end-if
#end-if

#load-if-defined DARK-AGE-END
(defconst gv-maximum-age dark-age)
#end-if
#load-if-defined FEUDAL-AGE-END
(defconst gv-maximum-age feudal-age)
(defconst gv-current-age-for-mail gv-feudal)
(defconst gv-late-villager-age gv-feudal)
(defconst late-age feudal-age)
(defconst villager-tech ri-wheel-barrow)
(defconst gv-tech-for-armor ri-bloodlines)
(defconst tribute-tech ri-coinage)
(defconst gv-tribute-inefficiency 25)
(defconst max-flush-food1 600000)
(defconst max-flush-food2 600000)
(defconst trade-TCs 1)
(defconst tower-building watch-tower)
(defconst gv-threat-level -1)
#else
(defconst gv-current-age-for-mail gv-feudal-up)
(defconst gv-late-villager-age gv-castle)
(defconst late-age castle-age)
(defconst villager-tech ri-hand-cart)
(defconst gv-tech-for-armor feudal-age)
(defconst tribute-tech ri-banking)
(defconst gv-tribute-inefficiency 10)
#load-if-defined ITALIAN-CIV
(defconst max-flush-food1 620)
#else
(defconst max-flush-food1 700)
#end-if
#load-if-defined UP-MICHI-STYLE
(defconst max-flush-food2 0)
#else
#load-if-defined ITALIAN-CIV
(defconst max-flush-food2 550)
#else
(defconst max-flush-food2 630)
#end-if
#end-if
(defconst trade-TCs 3)
(defconst tower-building bombard-tower)
(defconst gv-threat-level -3)
#end-if
#load-if-defined CASTLE-AGE-END
(defconst gv-maximum-age castle-age)
(defconst last-militia-up ri-long-swordsman)
(defconst research-pending-stage research-unavailable)
#else
#load-if-defined MALAY-CIV
(defconst last-militia-up ri-two-handed-swordsman)
#else
(defconst last-militia-up ri-champion)
#end-if
(defconst research-pending-stage research-pending)
#end-if
#load-if-defined IMPERIAL-AGE-END
(defconst gv-maximum-age imperial-age)
#end-if

#load-if-defined TURBO-RANDOM-MAP
(defconst gv-turborandom 1)
(defconst gv-6-villager-food 3)
(defconst gv-7-villager-food 3)
(defconst gv-9-villager-food 3)
(defconst gv-8-villager-lumber 4)
(defconst gv-11-villager-lumber 4)
(defconst long-home-exploration-time 300)
#else
(defconst gv-turborandom 0)
#load-if-defined BRITON-CIV
(defconst gv-6-villager-food 5)
(defconst gv-7-villager-food 6)
#else
#load-if-defined CHINESE-CIV
(defconst gv-6-villager-food 7)
(defconst gv-7-villager-food 8)
#else
(defconst gv-6-villager-food 6)
(defconst gv-7-villager-food 7)
#end-if
#end-if
(defconst gv-9-villager-food 9)
(defconst gv-8-villager-lumber 8)
(defconst gv-11-villager-lumber 11)
(defconst long-home-exploration-time 390)
#end-if

#load-if-defined WONDER-RACE
(defconst gv-wonder-race 1)
(defconst deer-search-distance 255)
#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined IMPERIAL-AGE-START
(defconst camp-search-time 500)
#else
(defconst camp-search-time 0)
#end-if
#else
(defconst camp-search-time 0)
#end-if
#else
(defconst camp-search-time 500)
(defconst gv-wonder-race 0)
(defconst deer-search-distance 33)
#end-if

#load-if-defined UP-SCENARIO-GAME
(defconst gv-scenario 1)
#else
(defconst gv-scenario 0)
#end-if

#load-if-defined KING-OF-THE-HILL
(defconst gv-forced-defence 1)
(defconst victory-building 826); monument
(defconst outpost-distance 3)
#else
#load-if-defined DEFEND-WONDER
(defconst gv-forced-defence 1)
#else
(defconst gv-forced-defence 0)
#end-if
(defconst victory-building wonder)
(defconst outpost-distance 4)
#end-if

#load-if-defined VICTORY-RELICS
(defconst gv-relic-victory 1)
(defconst monastery-time 0)
#else
(defconst gv-relic-victory 0)
(defconst monastery-time 2400)
#end-if

#load-if-defined TEAM-TOGETHER
(defconst gv-team-together 1)
#else
(defconst gv-team-together 0)
#end-if

#load-if-defined UP-MULTIPLE-ENEMIES
(defconst gv-multiple-enemies 1)
#else
(defconst gv-multiple-enemies 0)
#end-if

#load-if-not-defined NOMAD-MAP
#load-if-defined UP-NOMAD-RESOURCES
(defconst gv-nomad-style 1)
#else
(defconst gv-nomad-style 0)
#end-if
#else
(defconst gv-nomad-style 1)
#end-if

#load-if-defined BALTIC-MAP
(defconst gv-baltic-style 1)
#else
#load-if-defined MEDITERRANEAN-MAP
(defconst gv-baltic-style 1)
#else
#load-if-defined CRATER-LAKE-MAP
(defconst gv-baltic-style 1)
#else
(defconst gv-baltic-style 0)
#end-if
#end-if
#end-if

#load-if-defined ARCHIPELAGO-MAP
(defconst gv-fish-map 1)
(defconst grush-chance 80)
#else
#load-if-defined COASTAL-MAP
(defconst gv-fish-map 1)
#load-if-defined UP-1-PLAYER-TEAM
(defconst grush-chance 25)
#else
#load-if-defined UP-2-PLAYER-TEAM
(defconst grush-chance 25)
#else
(defconst grush-chance 75)
#end-if
#end-if
#else
#load-if-defined CONTINENTAL-MAP
(defconst gv-fish-map 1)
#load-if-defined UP-1-PLAYER-TEAM
(defconst grush-chance 25)
#else
#load-if-defined UP-2-PLAYER-TEAM
(defconst grush-chance 50)
#else
(defconst grush-chance 100)
#end-if
#end-if
#else
#load-if-defined RIVERS-MAP
(defconst gv-fish-map 1)
(defconst grush-chance 25); Controlled by other means
#else
(defconst grush-chance 25)
(defconst gv-fish-map gv-baltic-style)
#end-if
#end-if
#end-if
#end-if

#load-if-defined OASIS-MAP
(defconst gv-oasis-style-map 1)
(defconst drush-chance 100)
#else
(defconst gv-oasis-style-map gv-baltic-style)
(defconst drush-chance 50)
#end-if

#load-if-defined RIVERS-MAP
(defconst gv-rivers-style 1)
(defconst gv-rivers-salt-avoidance -10000); Rivers
#else
(defconst gv-rivers-salt-avoidance 0); Salt marsh
#load-if-defined HIGHLAND-MAP
(defconst gv-rivers-style 1)
#else
(defconst gv-rivers-style 0)
#end-if
#end-if

#load-if-not-defined DEFEND-WONDER
#load-if-not-defined DEATH-MATCH
#load-if-not-defined HIGH-RESOURCES-START
(defconst TC-builders 4)
(defconst castle-builders 5)
(defconst market-builders 2)
#else
(defconst TC-builders 1)
(defconst castle-builders 1)
(defconst market-builders 2)
#end-if
#else
(defconst TC-builders 1)
(defconst castle-builders 1)
(defconst market-builders 1)
#end-if
#else
(defconst TC-builders 1)
(defconst castle-builders 1)
(defconst market-builders 1)
#end-if

(load "Barbarian\DMConstants")

; ========== PERSONALITY

(load-random 
14 "Barbarian\Strategies\Personality\Set01"
14 "Barbarian\Strategies\Personality\Set02"
14 "Barbarian\Strategies\Personality\Set03"
14 "Barbarian\Strategies\Personality\Set04"
14 "Barbarian\Strategies\Personality\Set05"
15 "Barbarian\Strategies\Personality\Set06"
15 "Barbarian\Strategies\Personality\Set07"
)

; ========== IMPORTANT LOOPS

(defrule
	(true)
=>
	(up-modify-goal gl-flag c:max 0)
	(up-get-fact unit-type-count villager gl-my-villager-count)
	(up-get-fact unit-type-count-total villager gl-my-villager-count-total)
	(up-get-fact unit-type-count-total my-UU gl-my-UU-count-total)
	(up-get-fact unit-type-count-total trade-cart gl-trade-unit-count-total)
	(up-get-fact unit-type-count-total trade-cog temporary-goal)
	(up-modify-goal gl-trade-unit-count-total g:+ temporary-goal)
	(up-get-victory-data winning-player victory-type victory-time)
	(up-modify-goal victory-time c:/ 2)
	(up-get-target-fact player-distance 0 gl-target-player-distance)
	(up-get-target-fact military-population 0 gl-toughest-fought-enemy-military)
	(up-get-fact unit-type-count eagle-warrior-line gl-eagle-warrior-count)
	(up-get-fact unit-type-count fire-ship-line gl-fire-ship-count-total)
	(up-get-fact unit-type-count demolition-ship-line gl-demolition-ship-count-total)
)

(defrule
	(game-time < 2110)
	(goal temporary-goal2 78455)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(goal gl-strategy-class basic-class)
		(up-compare-goal gl-strategy-type >= FC))
	(up-compare-goal temporary-goal7 g:== temporary-goal8)
	(up-compare-goal gl-TC-lost != YES)
	(game-time > 0)
=>
	(up-modify-sn sn-food-gatherer-percentage g:= temporary-goal3)
	(up-modify-sn sn-wood-gatherer-percentage g:= temporary-goal4)
	(set-goal temporary-goal2 0)
)

(defrule
	(true)
=>
	(set-goal gl-TC-build-priority -1)
	(set-goal gl-barracks-build-priority -1)
	(set-goal gl-range-build-priority -1)
	(set-goal gl-stable-build-priority -1)
	(set-goal gl-workshop-build-priority -1)
	(set-goal gl-monastery-build-priority -1)
	(set-goal gl-market-build-priority -1)
	(set-goal gl-university-build-priority -1)
	(set-goal gl-blacksmith-build-priority -1)
	(set-goal gl-house-build-priority -1)
	(set-goal gl-dock-build-priority -1)
	(up-get-fact unit-type-count-total eagle-warrior-line gl-eagle-warrior-count-total)
	(up-get-fact unit-type-count-total heavy-eagle-warrior temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal gl-eagle-warrior-count-total g:+ temporary-goal)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= gl-my-flank1)
	(up-get-focus-fact military-population 0 gl-pair-player-military)
	(up-find-player enemy find-closest temporary-goal2)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
	(up-get-focus-fact military-population 0 gl-closest-enemy-military)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(set-strategic-number sn-villager-deleting 0)
	(set-strategic-number sn-farm-block 0)
	(set-goal gl-enable-pikemen 3)
	(set-goal gl-enable-skirmishers 3)
	(set-goal gl-enable-camels 3)
	(up-modify-flag gl-flag c:- farm-dropped)
	(up-modify-flag gl-flag c:- pikeman-upgrade-notice)
	(up-modify-goal gl-ship-timer c:- 1)
)

(defrule
	(or	(population < 100)
		(up-timer-status 9 != timer-running))
	(building-type-count town-center > 0)
=>
	(up-full-reset-search)
	(up-find-local c: town-center c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-id gl-main-tc-id)
	(up-get-point position-object gl-position-self-x)
)

(defrule
	(goal gl-target-player-distance 0)
=>
	(set-goal gl-target-player-distance 65535)
)

(defrule
	(research-completed my-unique-unit-upgrade)
=>
	(up-get-fact unit-type-count-total my-elite-UU gl-my-UU-count-total)
)

(defrule
	(true)
=>
	(up-get-fact population 0 gl-population)
	(up-get-fact unit-type-count-total infantry-class temporary-goal2)
	(up-get-fact unit-type-count infantry-class temporary-goal3)
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(up-get-fact unit-type-count-total archery-class temporary-goal2)
	(up-get-fact unit-type-count archery-class temporary-goal3)
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(up-get-fact unit-type-count-total cavalry-class temporary-goal2)
	(up-get-fact unit-type-count cavalry-class temporary-goal3)
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(up-get-fact unit-type-count-total warship-class temporary-goal2)
	(up-get-fact unit-type-count warship-class temporary-goal3)
)

(defrule
	(true)
=>
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(up-get-fact unit-type-count-total scorpion-class temporary-goal2)
	(up-get-fact unit-type-count scorpion-class temporary-goal3)
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(up-get-fact unit-type-count-total cavalry-archer-class temporary-goal2)
	(up-get-fact unit-type-count cavalry-archer-class temporary-goal3)
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(up-get-fact unit-type-count-total siege-weapon-class temporary-goal2)
	(up-get-fact unit-type-count siege-weapon-class temporary-goal3)
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(set-goal gl-farming 0)
)

(defrule
	(true)
=>
	(up-get-fact unit-type-count-total monastery-class temporary-goal2)
	(up-get-fact unit-type-count monastery-class temporary-goal3)
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(up-get-fact unit-type-count-total packed-trebuchet-class temporary-goal2)
	(up-get-fact unit-type-count packed-trebuchet-class temporary-goal3)
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(up-get-fact unit-type-count-total villager-class temporary-goal2)
	(up-get-fact unit-type-count villager-class temporary-goal3)
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(up-get-fact unit-type-count-total trade-cart temporary-goal2)
	(up-get-fact unit-type-count trade-cart temporary-goal3)
	(up-get-fact unit-type-count skirmisher-line gl-skirmisher-count-total)
)

(defrule
	(true)
=>
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(up-get-fact unit-type-count-total archery-cannon-class temporary-goal2)
	(up-get-fact unit-type-count archery-cannon-class temporary-goal3)
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(up-get-fact unit-type-count-total cavalry-cannon-class temporary-goal2)
	(up-get-fact unit-type-count cavalry-cannon-class temporary-goal3)
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(up-get-fact unit-type-count-total scout-cavalry-class temporary-goal2)
	(up-get-fact unit-type-count scout-cavalry-class temporary-goal3)
	(up-modify-goal gl-population g:+ temporary-goal2)
	(up-modify-goal gl-population g:- temporary-goal3)
	(up-get-fact enemy-units-in-town 0 gl-enemy-units-in-town)
)

#load-if-defined UP-GAME-WK
(defrule
	(true)
=>
	(up-get-fact unit-type-count-total battle-elephant gl-battle-elephant-count-total)
	(up-get-fact unit-type-count-total elite-battle-elephant temporary-goal)
;	(up-modify-goal temporary-goal c:max 0); If not load-if'd
	(up-modify-goal gl-battle-elephant-count-total g:+ temporary-goal)
	(up-get-fact unit-type-count-total imperial-skirmisher temporary-goal)
	(up-modify-goal gl-skirmisher-count-total g:+ temporary-goal)
	(up-get-fact unit-type-count-total heavy-eagle-warrior temporary-goal)
;	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal gl-eagle-warrior-count g:+ temporary-goal)
	(up-get-fact unit-type-count-total aofe-fire-ship temporary-goal)
;	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal gl-fire-ship-count-total g:+ temporary-goal)
	(up-get-fact unit-type-count-total aofe-demolition-ship temporary-goal)
	(up-modify-goal gl-demolition-ship-count-total g:+ temporary-goal)
)
#end-if

; ========== RESIGNING

(load "Barbarian/Resigning")

; ========== ATTEMPT REBUILDING BEHIND ALLIES

#load-if-not-defined WONDER-RACE
(defrule
	(or	(building-type-count town-center == 0)
		(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
			(or	(military-population g:>= gl-toughest-fought-enemy-military)
				(or	(nor	(up-compare-const gv-FFA-like-game == 1)
						(player-in-game any-ally))
					(or	(up-compare-goal TSA >= 1)
						(up-timer-status 38 == timer-running)))))); This includes feudal, should it?
=>
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal gl-town-center-placed < placed-to-ally)
	(up-pending-objects c: town-center < 1)
	(or	(players-military-population any-ally > 10)
		(up-compare-const gv-FFA-like-game == 1))
	(or	(population < 50)
		(and	(players-population focus-player > 85)
			(building-type-count castle == 0)))
	(population < 70)
	(stone-amount >= 100)
	(unit-type-count villager-wood > 1)
	(up-compare-goal gl-my-villager-count > 4)
	(up-compare-goal gl-enemy-units-in-town > 15)
=>
	(up-modify-escrow wood c:max 275)
)

(defrule
	(up-compare-goal gl-town-center-placed < placed-to-ally)
	(goal TSA 0)
	(population < 60)
	(or	(population < 40)
		(players-population focus-player > 75))
	(players-military-population any-ally > 10)
	(can-build-with-escrow town-center)
	(up-compare-goal gl-enemy-units-in-town > 10)
=>
	(release-escrow wood)
	(set-strategic-number sn-placement-zone-size 40)
	(set-strategic-number sn-town-center-placement 0)
	(up-set-placement-data this-any-ally -1 c: -30)
	(up-build place-control 0 c: town-center)
	(set-goal gl-town-center-placed safe-TC)
	(enable-timer 10 3)
)

(defrule
	(up-compare-const gv-FFA-like-game == 1)
	(up-compare-goal gl-town-center-placed < placed-to-ally)
	(goal TSA 0)
	(population < 60)
	(players-population focus-player > 75)
	(up-compare-goal gl-enemy-units-in-town > 10)
	(can-build-with-escrow town-center)
=>
	(release-escrow wood)
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 50)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: -100)
	(set-strategic-number sn-town-center-placement 0)
	(up-build place-control 0 c: town-center)
	(set-goal gl-town-center-placed safe-TC)
	(enable-timer 10 3)
)

(defrule
	(goal gl-town-center-placed safe-TC)
	(population < 60)
	(up-pending-objects c: town-center < 1)
	(building-type-count town-center == 1)
	(up-compare-goal gl-enemy-units-in-town < 5)
=>
	(up-copy-point gl-point-x gl-position-self-x)
)

(defrule
	(up-compare-const gv-1-player-team == 1)
	(strategic-number sn-town-center-start == 1)
	(building-type-count-total town-center < 1)
	(can-build-with-escrow town-center)
=>
	(set-strategic-number sn-maximum-town-size 255)
	(up-assign-builders c: town-center-foundation c: lost-TC-builders)
	(up-release-escrow)
	(set-strategic-number sn-placement-to-center 1)
	(set-strategic-number sn-town-center-placement 0)
	(set-strategic-number sn-placement-zone-size 50)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data my-player-number villager-class c: -100)
	(up-build place-control 0 c: town-center)
	(enable-timer 10 3)
	(set-goal gl-town-center-placed placed-to-ally)
)

(defrule
	(goal gl-town-center-placed safe-TC)
	(population < 60)
	(not	(up-pending-placement c: town-center))
	(up-pending-objects c: town-center < 1)
	(building-type-count town-center == 1)
	(or	(and	(up-compare-goal threat-time > 10000)
			(population < 20))
		(up-point-distance gl-point-x gl-position-self-x > 35))
	(up-compare-goal gl-enemy-units-in-town < 5)
=>
	(set-goal gl-town-center-placed placed-to-ally); This results in deleting old camps etc.
	(set-goal gl-TC-lost YES)
	(set-goal gl-strategy default)
	(chat-to-allies "Attempting switching the town.")
)

(defrule
	(strategic-number sn-town-center-start == 0)
	(building-type-count-total town-center < 1)
	(can-build town-center)
	(game-time >= 20)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 1)
)

(defrule
	(strategic-number sn-town-center-start == 0)
	(building-type-count-total town-center < 1)
	(can-build town-center)
	(game-time >= 20)
=>
	(set-strategic-number sn-placement-zone-size 5)
	(up-modify-sn sn-placement-zone-size g:+ 484)
;	(up-chat-data-to-all "Zone: %d" s: sn-placement-zone-size)
	(up-modify-goal 484 c:+ 10)
;	(up-set-target-point gl-point-x)
	(up-set-placement-data my-player-number lumber-camp c: 0)
	(up-modify-sn sn-town-center-placement g:= gl-nomad-TC-placement-style)
	(up-build place-control 0 c: town-center)
	(chat-to-player my-player-number new-TC-chat)
	(enable-timer 10 3)
)

(defrule
	(building-type-count-total town-center < 1)
	(can-build-with-escrow town-center)
	(players-military-population any-ally > 10)
=>
	(set-strategic-number sn-maximum-town-size 255)
	(up-assign-builders c: town-center-foundation c: lost-TC-builders)
	(release-escrow wood)
	(release-escrow stone)
	(set-strategic-number sn-placement-to-center 1)
	(set-strategic-number sn-town-center-placement 0)
	(set-strategic-number sn-placement-zone-size 50)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data this-any-ally -1 c: -30)
	(up-build place-control 0 c: town-center)
	(enable-timer 10 3)
	(set-goal gl-town-center-placed placed-to-ally)
)

(defrule
	(strategic-number sn-town-center-start == 1)
	(building-type-count-total town-center < 1)
	(can-build-with-escrow town-center)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage stone 0)
	(release-escrow wood)
	(release-escrow stone)
	(up-modify-sn sn-lumber-camp-max-distance g:= gl-my-town-size)
	(set-strategic-number sn-town-center-placement lumber-camp)
	(up-build place-normal 0 c: town-center)
	(chat-to-player my-player-number new-TC-chat)
	(enable-timer 10 5)
)

(defrule
	(game-time > 600)
	(not	(player-valid any-ally))
	(strategic-number sn-town-center-start == 1)
	(building-type-count-total town-center == 0)
	(up-compare-goal gl-strategy != default)
=>
	(set-goal gl-strategy default)
	(set-goal gl-strategy-type default)
	(set-goal gl-TC-lost YES)
	(set-goal gl-fixed-eco-balancing YES)
	(set-goal gl-required-current-age-time 60000)
	(enable-timer 1 0)
)

(defrule
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-my-villager-count > 0)
	(or	(building-type-count-total town-center < 1)
		(and	(unit-type-count trade-cart > 15)
			(and	(wood-amount >= town-center-wood)
				(and	(game-time > 2400)
					(and	(up-compare-goal gl-my-villager-count < 70)
						(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion))))))
	(building-type-count-total town-center < preferred-TC-number)
	(stone-amount < 100)
;	(can-buy-commodity stone)
=>
	(buy-commodity stone)
)

(defrule
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-my-villager-count > 20)
	(or	(up-compare-goal gl-my-villager-count < 80)
		(building-type-count-total town-center < 2))
	(wood-amount >= town-center-wood)
	(or	(gold-amount > 1000)
		(up-compare-goal gl-gathered-relics > 5))
	(dropsite-min-distance stone == -1)
	(building-type-count-total town-center < preferred-TC-number)
	(stone-amount < 100)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
)

(defrule
	(up-compare-goal gl-my-villager-count < 10)
	(or	(building-type-count town-center == 0)
		(goal gl-my-villager-count-total 0))
	(unit-type-count monk > 0)
	(up-compare-goal threat-time > 10000)
	(up-timer-status 26 != timer-running)
=>
	(up-full-reset-search)
	(up-find-remote c: villager-class c: 10)
	(up-find-local c: monk c: 240)
	(up-target-objects 0 action-default -1 -1)
	(enable-timer 26 10)
)

(defrule
	(building-type-count mining-camp > 0)
	(or	(unit-type-count trade-cart > 0); Camps might block trade
		(not	(player-in-game any-computer-enemy))); Have evil camp buffer against AIs
	(goal gl-strategy default)
	(game-time > 2400)
	(cc-players-unit-type-count 0 gold-mine == 0)
	(cc-players-unit-type-count 0 stone-mine == 0)
	(unit-type-count villager-gold == 0); Let them drop resources
	(unit-type-count villager-stone == 0)
=>
	(up-delete-objects c: mining-camp c: 32767)
	(disable-self)
)

(defrule
	(or	(and	(building-type-count town-center > 0)
			(not	(goal gl-TC-lost YES)))
		(goal gl-current-age gv-dark))
=>
	(up-jump-rule 24)
)

(defrule
	(game-time > 1200)
	(up-compare-goal SLING >= 1)
	(up-compare-goal SLING <= 3)
	(building-type-count-total town-center == 0)
=>
	(chat-to-allies "97")
	(acknowledge-taunt my-player-number 95)
	(set-goal gl-slinging 1002)
	(set-goal SLING 0)
	(disable-self)
)

(defrule
	(building-type-count-total town-center < 1)
	(wood-amount < town-center-wood)
	(can-buy-commodity wood)
=>
	(buy-commodity wood)
)

(defrule
	(up-timer-status 10 != timer-running)
	(up-timer-status 42 != timer-running)
	(players-building-type-count any-ally town-center > 0)
	(players-population any-ally > ally-pop-to-run)
	(building-type-count-total town-center == 0)
	(goal gl-town-center-placed placed-to-ally)
	(up-pending-placement c: town-center)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-get-player-fact this-any-ally player-number 0 temporary-goal2)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
	(up-full-reset-search)
	(up-find-remote c: town-center c: 1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-filter-exclude -1 actionid-attack orderid-build -1)
	(up-set-target-object search-remote c: 0)
)

(defrule
	(up-timer-status 10 != timer-running)
	(up-timer-status 42 != timer-running)
	(players-building-type-count any-ally town-center > 0)
	(players-population any-ally > ally-pop-to-run)
	(building-type-count-total town-center == 0)
	(goal gl-town-center-placed placed-to-ally)
	(up-pending-placement c: town-center)
=>
	(up-get-point position-object gl-point-x)
	(up-lerp-tiles gl-point-x gl-position-center-x c: -30)
	(up-set-target-point gl-point-x)
	(up-modify-goal temporary-goal g:= gl-my-villager-count)
	(up-modify-goal temporary-goal c:/ 2)
	(up-find-local c: villager-class g: temporary-goal)
	(up-get-search-state gl-local-total)
	(up-target-point 0 action-move -1 -1)
	(enable-timer 42 20)
)

(defrule
	(goal gl-TC-lost YES)
	(building-type-count town-center > 0)
	(building-type-count lumber-camp == 0)
	(goal gl-town-center-placed placed-to-ally)
=>
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-find-local c: villager-class c: 240)
	(up-target-point 0 action-stop -1 -1)
	(disable-self)
)

(defrule
	(goal gl-TC-lost YES)
	(building-type-count town-center > 0)
	(goal gl-town-center-placed placed-to-ally)
=>
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: 30 c: -1)
	(set-strategic-number sn-placement-zone-size 5)
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-maximum-gold-drop-distance 31)
	(set-strategic-number sn-maximum-wood-drop-distance -1)
	(set-strategic-number sn-maximum-food-drop-distance 25)
	(set-strategic-number sn-maximum-hunt-drop-distance 40)
	(set-strategic-number sn-maximum-stone-drop-distance 30)
	(disable-self)
)

(defrule
	(goal gl-TC-lost YES)
	(building-type-count town-center > 0)
	(goal gl-town-center-placed placed-to-ally)
=>
	(up-find-local c: mill c: 240)
	(up-find-local c: relocate-building c: 240)
	(up-find-local c: lumber-camp c: 240)
	(up-find-local c: farm c: 240)
	(up-find-local c: mining-camp c: 240)
	(up-target-point 0 action-delete -1 -1)
	(disable-self)
)

(defrule
	(goal gl-TC-lost YES)
	(building-type-count town-center == 0)
	(building-type-count-total town-center > 0)
=>
	(set-strategic-number sn-percent-building-cancellation 1)
)

(defrule
	(goal gl-TC-lost YES)
	(building-type-count-total town-center == 0)
;	(or
	(building-type-count farm > 0); Just farms - let villagers drop their food or they can't retask
;		(building-type-count mill > 0))
=>
	(up-delete-objects c: farm c: 32767)
;	(up-delete-objects c: mill c: 32767)
)

(defrule
	(goal gl-TC-lost YES)
	(building-type-count-total town-center == 0)
	(not	(up-pending-placement c: town-center))
	(wood-amount < town-center-wood)
	(or	(and	(dropsite-min-distance wood > 3)
			(dropsite-min-distance wood < 255))
		(building-type-count-total lumber-camp == 0))
	(can-build-with-escrow lumber-camp)
=>
	(release-escrow wood)
	(build lumber-camp)
)

(defrule
	(goal gl-TC-lost YES)
	(building-type-count-total town-center == 0)
	(not	(up-pending-placement c: town-center))
	(current-age-time > 10)
	(stone-amount < 100)
	(dropsite-min-distance stone > 4)
	(dropsite-min-distance stone < 255)
	(can-build-with-escrow mining-camp)
=>
	(release-escrow wood)
	(build mining-camp)
)

(defrule
	(game-time > 600)
	(building-type-count-total town-center < 1)
	(wood-amount >= town-center-wood)
	(stone-amount >= 100)
=>
	(set-goal gl-TC-lost YES)
	(set-goal gl-fixed-eco-balancing YES)
	(set-goal gl-required-current-age-time 60000)
	(enable-timer 7 120)
	(enable-timer 14 120)
)

(defrule
	(game-time > 600)
	(building-type-count-total town-center < 1)
	(wood-amount < town-center-wood)
	(stone-amount < 100)
=>
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-wood-gatherer-percentage 90)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 10)
	(set-goal gl-TC-lost YES)
	(set-goal gl-fixed-eco-balancing YES)
	(set-goal gl-required-current-age-time 60000)
	(enable-timer 7 120)
	(enable-timer 14 120)
)

(defrule
	(game-time > 600)
	(building-type-count-total town-center < 1)
	(wood-amount >= town-center-wood)
	(stone-amount < 100)
=>
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 70)
	(set-goal gl-TC-lost YES)
	(set-goal gl-fixed-eco-balancing YES)
	(set-goal gl-required-current-age-time 60000)
	(enable-timer 7 120)
	(enable-timer 14 120)
)

(defrule
	(game-time > 600)
	(building-type-count-total town-center < 1)
	(wood-amount < town-center-wood)
	(stone-amount >= 100)
=>
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-wood-gatherer-percentage 100)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(set-goal gl-TC-lost YES)
	(set-goal gl-fixed-eco-balancing YES)
	(set-goal gl-required-current-age-time 60000)
	(enable-timer 7 120)
	(enable-timer 14 120)
)

(defrule
	(goal gl-fixed-eco-balancing YES)
	(goal gl-TC-lost YES)
	(building-type-count town-center > 0)
	(up-compare-goal gl-my-villager-count-total < 8)
=>
	(set-strategic-number sn-intelligent-gathering 1)
	(set-strategic-number sn-food-gatherer-percentage 80)
	(set-strategic-number sn-wood-gatherer-percentage 20)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(up-assign-builders c: town-center-foundation c: 4)
	(up-release-escrow)
	(enable-timer 7 120)
	(enable-timer 14 120)
)

(defrule
	(goal gl-fixed-eco-balancing YES)
	(goal gl-TC-lost YES)
	(building-type-count town-center > 0)
	(up-compare-goal gl-my-villager-count-total >= 8)
=>
	(set-strategic-number sn-intelligent-gathering 1)
	(set-strategic-number sn-food-gatherer-percentage 70)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(up-assign-builders c: town-center-foundation c: 4)
	(up-release-escrow)
	(enable-timer 7 60)
	(enable-timer 14 60)
)

(defrule
	(goal gl-fixed-eco-balancing YES)
	(goal gl-TC-lost YES)
	(building-type-count town-center > 0)
	(up-compare-goal gl-my-villager-count-total >= 20)
	(goal gl-current-age gv-feudal)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(up-assign-builders c: town-center-foundation c: 4)
	(enable-timer 7 30)
	(enable-timer 14 30)
)

(defrule
	(game-time > 600)
	(up-compare-const gv-wonder-race == 0)
	(up-compare-const gv-migration == 0)
	(players-current-age any-ally >= feudal-age)
	(building-type-count-total town-center == 0)
	(not	(taunt-detected my-player-number 99))
=>
	(set-goal gl-strategy default)
	(set-goal gl-strategy-type default)
	(set-goal SLING 0)
	(set-goal gl-slinging 1002)
	(set-goal gl-TC-lost YES)
	(set-goal gl-fixed-eco-balancing YES)
	(set-goal gl-required-current-age-time 60000)
	(chat-to-allies "99No TC - help!")
	(enable-timer 1 0)
)

(defrule
	(game-time > 600)
	(players-current-age any-ally >= feudal-age)
	(stone-amount < 100)
	(wood-amount >= town-center-wood)
	(up-compare-goal gl-my-villager-count > 0)
	(up-timer-status 1 != timer-running)
	(building-type-count-total town-center == 0)
=>
	(chat-to-allies "6Any stone for tc?")
	(chat-to-allies "106")
	(chat-to-allies "99")
	(enable-timer 1 44)
)

(defrule
	(game-time > 600)
	(players-current-age any-ally >= feudal-age)
	(wood-amount < town-center-wood)
	(up-compare-goal gl-my-villager-count > 0)
	(up-timer-status 1 != timer-running)
	(building-type-count-total town-center == 0)
=>
	(chat-to-allies "4Any wood for tc?")
	(chat-to-allies "104")
	(chat-to-allies "99")
	(enable-timer 1 44)
)

(defrule
	(game-time > 600)
	(up-compare-goal threat-time > 10000)
	(players-current-age any-ally >= feudal-age)
	(current-age >= castle-age)
	(gold-amount < 100)
	(unit-type-count monk-set < 3)
	(building-type-count monastery > 0)
	(population-headroom > 0)
	(goal gl-my-villager-count 0)
	(up-timer-status 1 != timer-running)
	(building-type-count-total town-center == 0)
=>
	(chat-to-allies "5Any gold for a monk?")
	(chat-to-allies "105")
	(chat-to-allies "98")
	(enable-timer 1 144)
)

(defrule
	(building-type-count-total town-center > 0)
	(up-compare-const gv-migration == 0)
	(taunt-detected my-player-number 99)
	(not	(taunt-detected my-player-number 94))
=>
	(chat-to-allies "98I have tc now")
	(acknowledge-taunt my-player-number 99)
	(acknowledge-taunt my-player-number 98)
)

(defrule
	(goal gl-TC-lost YES)
	(building-type-count town-center > 0)
	(up-compare-goal gl-my-villager-count-total >= 26)
	(or	(up-compare-goal gl-my-villager-count-total >= 30)
		(up-compare-goal gl-current-age >= gv-feudal-up))
=>
	(set-strategic-number sn-intelligent-gathering 1)
	(set-goal gl-TC-lost NO)
	(set-goal gl-fixed-eco-balancing NO)
	(set-goal gl-required-current-age-time gv-wheelbarrow-time)
	(up-assign-builders c: town-center-foundation c: 4)
	(enable-timer 7 10)
	(enable-timer 14 10)
	(set-strategic-number sn-maximum-wood-drop-distance 40)
)

(defrule
	(game-time > 600)
	(building-type-count-total town-center == 0)
	(up-compare-goal gl-my-villager-count > 0)
	(goal gl-TC-lost YES)
=>
	(set-strategic-number sn-intelligent-gathering 0); Better not be too intelligent
	(up-jump-rule 10000)
)
#end-if

; =============== CURRENT AGE

(defrule
	(goal gl-current-age gv-dark-up)
	(current-age == feudal-age)
=>
	(set-goal gl-castle-sling-order castle-sling-priority3)
	(set-goal gl-current-age gv-feudal)
	(set-goal gl-current-age-time-for-farms 125)
	(up-modify-goal gl-current-age-time-for-farms c:- farm-time-substraction); 0 for non-persians
	(set-goal gl-gold-score-last 0)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(current-age == castle-age)
=>
	(set-goal gl-current-age gv-castle)
	(set-goal gl-direction-switch -1)
	(set-goal gl-current-age-time-for-farms 0)
)

(defrule
	(or	(and	(or	(goal gl-current-age gv-castle-up)
				(and	(goal gl-current-age gv-dark)
					(death-match-game)))
			(current-age == imperial-age))
		(and	(current-age == castle-age)
			(and	(or	(population > 130)
					(population >= pop-to-stop-full-pop-attack))
				(up-compare-const gv-maximum-age != imperial-age))))
=>
	(set-goal gl-current-age gv-imperial)
)

(defrule
	(timer-triggered 9)
	(or	(and	(goal gl-current-age gv-dark-up)
			(and	(up-research-status c: feudal-age <= research-available)
				(current-age == dark-age)))
		(and	(goal gl-current-age gv-feudal-up)
			(and	(up-research-status c: castle-age <= research-available)
				(current-age == feudal-age))))
=>
	(up-modify-goal gl-current-age c:- 1)
)

(defrule
	(timer-triggered 9)
	(goal gl-current-age gv-castle-up)
	(current-age == castle-age)
	(up-research-status c: imperial-age <= research-available)
=>
	(up-modify-goal gl-current-age c:- 1)
)

(defrule
	(or	(goal gl-current-age gv-dark)
		(or	(goal gl-current-age gv-feudal)
			(goal gl-current-age gv-castle)))
	(or	(up-research-status c: feudal-age == research-pending)
		(or	(up-research-status c: castle-age == research-pending)
			(up-research-status c: imperial-age == research-pending)))
=>
	(up-modify-goal gl-current-age c:+ 1)
)

(defrule
	(not	(player-in-game any-ally))
	(players-building-type-count every-ally market == 0)
	(unit-type-count trade-cart > 0)
=>
	(up-delete-objects c: trade-cart c: 32767)
)

; =============== INITIALIZING, RETREATING AND TEAM GAMING

(defrule
	(strategic-number sn-town-center-start == 1)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(or	(death-match-game)
		(goal gl-castle-age-style -1))
	(strategic-number sn-wood-found <= 3)
	(game-time > 310)
=>
	(up-jump-rule 34)
)

(defrule
	(strategic-number sn-town-center-start == 0)
	(building-type-count town-center > 0)
=>
	(set-strategic-number sn-town-center-start 1)
)

(defrule
	(up-compare-const gv-death-match == 0)
	(or	(up-compare-goal gl-current-age >= gv-castle-up)
		(game-time > 2340))
=>
	(set-goal gl-castle-age-style -1)
)

(defrule
	(up-compare-const gv-death-match == 0)
	(up-compare-const gv-defend-wonder == 0)
	(game-time > 15)
=>
	(set-strategic-number sn-civ-comparison landing-priority)
	(up-modify-goal temporary-goal2 g:= gl-score-reference)
	(up-modify-goal gl-score-reference s:= sn-focus-player-number)
)

(defrule
	(up-compare-const gv-death-match == 0)
	(up-compare-const gv-defend-wonder == 0)
	(game-time > 15)
	(up-compare-goal gl-score-reference g:!= temporary-goal2)
=>
	(up-get-focus-fact current-score 0 gl-enemy-score-last)
	(set-goal gl-score-difference 0)
	(up-jump-rule 1)
)

(defrule
	(up-compare-const gv-death-match == 0)
	(up-compare-const gv-defend-wonder == 0)
	(game-time > 15)
	(up-compare-goal gl-score-reference g:== temporary-goal2); Same target player as last rule pass
=>
	(up-modify-goal gl-score-difference g:= gl-enemy-score-last)
	(up-get-focus-fact current-score 0 gl-enemy-score-last)
	(up-modify-goal gl-score-difference g:- gl-enemy-score-last)
	(up-modify-goal gl-score-difference c:* -1)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(set-goal gl-camp-raid-time camp-raid-time)
	(set-strategic-number sn-retreating 0)
	(set-goal gl-boar-unit wild-boar)
	(set-goal gl-rescouting-time rescouting-start-time)
	(set-goal gl-current-age gv-dark)
	(set-goal gl-identity Barbarian)
	(set-goal gl-scout-added-to-drush NO)
	(set-goal gl-disable-mining-upgrades NO)
	(set-goal gl-military-percentage2 1000)
	(set-goal gl-military-percentage3 1000)
	(set-strategic-number sn-forest-distance 300)
	(enable-timer 15 1)
	(disable-self)
)

(defrule
	(true)
=>
	(set-strategic-number sn-retreating 0)
	(set-strategic-number sn-livestock-defend-priority 1)
	(set-strategic-number sn-percent-building-cancellation 30)
	(set-strategic-number sn-enable-new-building-system 1)
	(set-strategic-number sn-enable-patrol-attack gv-high-difficulty)
	(set-goal gl-retreat-notice -1)
	(set-goal POSITION gv-pocket-value)
	(set-goal gl-strategy-cooperation enabled)
	(set-goal gl-gathering-inside NO)
	(up-assign-builders c: town-center-foundation c: TC-builders)
	(up-assign-builders c: castle c: castle-builders)
	(up-assign-builders c: market c: market-builders)
	(enable-timer 6 75)
	(enable-wall-placement 2)
	(disable-self)
)

(defrule
	(strategic-number sn-ignore-tower-elevation != 1)
=>
	(set-strategic-number sn-sheep-count 0)
	(set-goal gl-current-sheep-count 0)
	(set-strategic-number sn-ignore-tower-elevation 1)
	(set-strategic-number sn-disable-tower-priority 1)
	(set-goal gl-FC-type default-FC-type)
	(set-strategic-number sn-town-center-start 1)
	(set-strategic-number sn-nomad-style-start 0)
	(set-goal gl-normal-milling 1)
	(set-strategic-number sn-placement-zone-size 3)
	(set-goal gl-escrow-state with-escrow)
	(chat-to-player my-player-number gv-241-taunt)
	(up-assign-builders c: fish-trap c: -1)
)

(defrule
	(strategic-number sn-do-not-scale-for-difficulty-level != 1)
=>
	(set-goal gl-villagers-to-start-boar-hunt 15)
	(set-goal gl-units-required-to-spreading 25)
	(set-goal gl-boats-required-to-spreading 4)
	(set-goal gl-fixed-eco-balancing YES)
	(set-goal gl-TC-lost NO)
	(set-strategic-number sn-do-not-scale-for-difficulty-level 1)
	(set-strategic-number sn-local-targeting-mode 1)
	(set-strategic-number sn-disable-trade-evasion 1)
	(set-goal MILITARY 0)
	(set-goal TSA 0)
	(set-goal gl-scout-unit scout-unit)
	(set-goal gl-patrol-defence patrol-off)
	(set-goal gl-resources-on-map regular)
	(up-assign-builders c: wall-class c: 1)
)

(defrule
	(strategic-number sn-cap-civilian-builders != 200)
=>
	(set-strategic-number sn-cap-civilian-builders 200)
	(set-strategic-number sn-retask-gather-amount 0)
	(set-strategic-number sn-max-retask-gather-amount 0)
	(set-difficulty-parameter ability-to-maintain-distance 0)
	(set-difficulty-parameter ability-to-dodge-missiles 0)
	(set-strategic-number sn-attack-intelligence 1)
	(set-strategic-number sn-intelligent-gathering 1)
	(set-strategic-number sn-food-gatherer-percentage 100)
	(set-strategic-number sn-lumber-camp-escrow 0)
	(set-strategic-number sn-ignore-attack-group-under-attack 0)
	(set-strategic-number sn-sling-control 0)
	(set-goal gl-enemy-strategy NOT-EAGLERUSH)
	(set-goal gl-villager-max-carry normal-carry)
)

(defrule
	(strategic-number sn-initial-exploration-required != 0)
=>
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-builders 0)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(set-strategic-number sn-cap-civilian-gatherers 0)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-camp-max-distance gv-default-mcamp-max-distance)
	(set-strategic-number sn-lumber-camp-max-distance 20)
	(set-strategic-number sn-mining-camp-max-distance gv-default-mcamp-max-distance)
	(set-strategic-number sn-initial-exploration-required 0)
	(set-strategic-number sn-threat-level 0)
	(set-goal 484 0)
	(set-goal 485 0)
)

(defrule
	(strategic-number sn-forage-defend-priority != 1)
=>
	(set-strategic-number sn-focus-player-number 0)
	(set-strategic-number sn-forage-defend-priority 1)
	(set-goal gl-mining-camp-backup 0)
	(set-goal gl-nomad-TC-placement-style lumber-camp)
	(set-goal gl-lured-deer-count 0)
	(up-get-point position-center gl-position-center-x)
	(up-get-point position-map-size gl-point-x)
	(up-modify-goal gl-max-coordinate-value g:= gl-point-x)
	(set-goal gl-food-villagers 0)
	(set-goal gl-wood-villagers 0)
	(set-goal gl-gold-villagers 0)
	(set-goal gl-stone-villagers 0)
	(set-goal gl-sum-villagers 0)
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
)

(defrule
	(up-compare-const gv-multiplayer-game == 1)
	(up-compare-const gv-death-match == 0)
	(up-gaia-type-count c: sheep > 0)
	(up-pending-objects c: house >= 1)
	(building-type-count house < 1)
	(game-time < 20)
	(unit-type-count villager-builder < 3)
	(housing-headroom < 2)
	(food-amount >= 50)
	(strategic-number sn-maximum-food-drop-distance != default-food-drop-distance)
=>
	(up-jump-rule 2)
	(set-strategic-number sn-maximum-food-drop-distance 0)
	(set-strategic-number sn-maximum-hunt-drop-distance 0)
	(set-strategic-number sn-maximum-wood-drop-distance 0)
	(set-strategic-number sn-maximum-gold-drop-distance 0)
	(set-strategic-number sn-maximum-stone-drop-distance 0)
)

(defrule
	(up-compare-const gv-multiplayer-game == 1)
	(building-type-count town-center == 1)
	(building-type-count house < 1)
	(game-time < 20)
	(unit-type-count villager-builder < 2)
	(housing-headroom < 2)
	(food-amount >= 50)
	(strategic-number sn-maximum-food-drop-distance != default-food-drop-distance)
=>
	(up-jump-rule 1)
	(set-strategic-number sn-maximum-food-drop-distance 0)
	(set-strategic-number sn-maximum-hunt-drop-distance 0)
	(set-strategic-number sn-maximum-wood-drop-distance 0)
	(set-strategic-number sn-maximum-gold-drop-distance 0)
	(set-strategic-number sn-maximum-stone-drop-distance 0)
)

(defrule
	(true)
=>
	(set-strategic-number sn-maximum-food-drop-distance default-food-drop-distance)
	(set-strategic-number sn-maximum-hunt-drop-distance 0)
	(set-strategic-number sn-maximum-wood-drop-distance 6)
	(set-strategic-number sn-maximum-gold-drop-distance 6)
	(set-strategic-number sn-maximum-stone-drop-distance 6)
	(set-goal gl-wood-backup 0)
	(up-get-point position-self gl-position-self-x)
	(disable-self)
)

(defrule
	(game-time >= 20)
	(game-time < 40)
	(strategic-number sn-maximum-gold-drop-distance == 0)
=>
	(set-strategic-number sn-maximum-food-drop-distance default-food-drop-distance)
	(set-strategic-number sn-maximum-wood-drop-distance 6)
	(set-strategic-number sn-maximum-gold-drop-distance 6)
	(set-strategic-number sn-maximum-stone-drop-distance 6)
	(disable-self)
)

(defrule
	(true)
=>
	(set-strategic-number sn-allow-new-build-order 1)
	(set-strategic-number sn-preferred-mill-placement 0)
	(set-goal gl-boar-eaten 0)
	(set-goal gl-required-current-age-time gv-wheelbarrow-time)
	(set-goal gl-enemy-sling 10)
	(set-goal gl-castle-sling-order castle-sling-priority)
	(set-goal gl-sling-towers 1)
	(up-set-defense-priority c: wonder c: 30000)
	(up-set-offense-priority c: wonder c: 11)
	(set-strategic-number sn-minimum-boar-lure-group-size 1000)
	(set-strategic-number sn-enable-training-queue gv-high-difficulty)
	(disable-self)
)

(defrule
	(true)
=>
	(set-goal gl-feudal-archery 0)
	(set-goal gl-feudal-infantry 0)
	(set-goal CASTLE 0)
	(set-goal gl-strategy default)
	(set-goal SLING 0)
	(set-goal TC 0)
	(set-goal DOCK 0)
	(set-goal gl-eagles 0)
	(set-goal gl-advanced-archery 0)
	(set-goal gl-advanced-infantry 0)
	(set-goal gl-advanced-cavalry 0)
	(set-goal gl-advanced-trash 0)
	(up-setup-cost-data 1 gl-available-food-amount)
	(disable-self)
)

(defrule
	(strategic-number sn-garrison-rams != 0)
=>
	(set-strategic-number sn-garrison-rams 0)
	(set-strategic-number sn-sentry-distance 12)
	(set-strategic-number sn-sentry-distance-variation 0)
	(set-strategic-number sn-town-center-placement 0)
	(set-strategic-number sn-minimum-water-body-size-for-dock land-map-style)
	(set-strategic-number sn-target-evaluation-in-progress 0)
	(set-strategic-number sn-age-up-castle 0)
	(set-strategic-number sn-unit-spreading 0)
	(set-strategic-number sn-allow-resource-spending 0)
	(set-strategic-number sn-upgrade-eagles 0)
)

(defrule
	(strategic-number sn-consecutive-idle-unit-limit != 0)
=>
	(set-strategic-number sn-target-evaluation-ally-proximity 20)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-strategic-number sn-consecutive-idle-unit-limit 0)
	(set-strategic-number sn-mill-max-distance gv-starting-mill-distance)
	(set-strategic-number sn-zero-priority-distance 144)
	(set-goal gl-unit-spreading NO)
	(set-goal gl-unit-spreading-count 0)
	(set-strategic-number sn-maximum-town-size 9)
	(set-strategic-number sn-blot-size 1)
	(set-strategic-number sn-blot-exploration-map 0)
	(enable-timer 1 0)
)

(defrule
	(true)
=>
	(set-strategic-number sn-preferred-trade-distance gv-preferred-trade-distance)
	(set-goal target-system basic)
	(up-modify-flag gl-flag c:+ target-system-rewriting)
	(set-goal gl-strategy-control 0)
	(set-goal gl-rush-suitability-on-map GOOD)
	(set-goal gl-fixed-target-player NO)
	(set-goal gl-assisting-ally NO)
	(set-goal gl-eternal-drush NO)
	(set-strategic-number sn-disable-builder-assistance 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(disable-self)
)

(defrule
	(strategic-number sn-stone-defend-priority != 1)
=>
	(set-strategic-number sn-percent-enemy-sighted-response 100)
	(set-strategic-number sn-enemy-sighted-response-distance 7)
	(set-strategic-number sn-scale-minimum-attack-group-size 0)
	(set-strategic-number sn-scale-maximum-attack-group-size 0)
	(set-strategic-number sn-group-form-distance 0)
	(set-strategic-number sn-attack-group-gather-spacing 3)
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-gold-defend-priority 1)
	(set-strategic-number sn-stone-defend-priority 1)
	(set-strategic-number sn-heresy-escrow 1)
	(set-strategic-number sn-coop-share-attacking 1)
	(set-strategic-number sn-coop-share-information 1)
	(enable-timer 2 0)
)

(defrule
	(wood-amount >= 50)
	(or	(not	(resource-found food))
		(building-type-count-total mill > 0))
	(or	(civ-selected japanese)
		(wood-amount >= 100))
	(game-time > 50)
	(up-compare-const gv-grouped-by-team == 1)
	(strategic-number sn-mill-max-distance != 20)
=>
	(set-strategic-number sn-mill-max-distance 23)
	(disable-self)
)

(defrule
	(or	(current-age >= castle-age)
		(and	(current-age == feudal-age)
			(or	(and	(building-type-count-total town-center > 1)
					(current-age-time > 120))
				(or	(game-time > 1500)
					(building-type-count-total mill > 0)))))
	(game-time > 300)
=>
	(set-strategic-number sn-mill-max-distance 20)
	(set-strategic-number sn-minimum-boar-lure-group-size 1)
	(enable-timer 5 0)
	(disable-self)
)

(defrule
	(true)
=>
	(set-strategic-number sn-maximum-fish-boat-drop-distance 20)
	(set-goal gl-castle-placed NO)
	(up-set-offense-priority c: town-center-foundation c: 11)
	(up-set-defense-priority c: town-center-foundation c: 10000); Always target TCs under construction with high priority
	(set-goal gl-town-center-placed NO)
	(set-goal gl-controlled-forward-castle NO)
	(set-strategic-number sn-object-repair-level 20483)
	(set-strategic-number sn-allow-civilian-defense 2)
	(set-goal gl-my-maximum-town-size 9)
	(disable-self)
)

(defrule
	(or	(goal gl-map-wood-percentage -1)
		(up-compare-goal gl-map-wood-percentage > 100))
	(cc-players-unit-type-count 0 tree g:< gl-map-wood-percentage)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(goal gl-map-wood-percentage -1)
		(up-compare-goal gl-map-wood-percentage > 100))
=>
	(up-modify-goal gl-map-wood-percentage c:+ 202)
	(up-jump-rule -2)
)

(defrule
	(or	(goal gl-map-wood-percentage -1)
		(up-compare-goal gl-map-wood-percentage > 100))
=>
	(up-modify-goal gl-map-wood-percentage g:/ gl-max-coordinate-value)
	(up-modify-goal gl-map-wood-percentage c:* 100)
	(up-modify-goal gl-map-wood-percentage g:/ gl-max-coordinate-value)
	(up-modify-goal gl-map-wood-percentage c:max 0)
	(up-modify-goal gl-map-wood-percentage c:min 100)
)

(defrule
	(nor	(map-type arabia)
		(map-type oasis))
	(player-in-game any-human)
	(up-compare-goal gl-map-wood-percentage >= closed-wood-percentage)
=>
	(up-modify-goal gl-rush-suitability-on-map c:min LOW)
	(disable-self)
)

(defrule
	(game-time < 10)
	(up-compare-const gv-death-match == 0)
	(cc-players-unit-type-count 0 gold-mine == 0)
=>
	(set-goal gl-nothing-style-map YES)
	(set-goal gl-rush-suitability-on-map AVERAGE)
	(set-goal gl-strategy-type controlled-flush)
	(set-strategic-number sn-strategy-lock 1)
)

(defrule
	(game-time > 0)
	(game-time < 10)
	(up-compare-const gv-death-match == 0)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(cc-players-unit-type-count 0 relic >= large-number-relics)
	(unit-type-count monk-set > 0)
	(building-type-count monastery > 0)
=>
	(set-goal gl-nothing-style-map -1)
	(set-goal gl-strategy monk-mango-push)
	(set-goal gl-rush-suitability-on-map LOW)
	(set-goal gl-strategy-type FC)
	(set-strategic-number sn-strategy-lock 1)
)

(defrule
	(game-time > 0)
	(game-time < 10)
	(goal POSITION POCKET)
	(up-compare-const gv-death-match == 0)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(cc-players-unit-type-count 0 relic >= large-number-relics)
	(unit-type-count monk-set > 0)
	(building-type-count monastery > 0)
=>
	(set-goal gl-nothing-style-map -1)
	(set-goal gl-strategy regicide-strategy)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal gl-strategy-type FC2)
	(set-strategic-number sn-strategy-lock 1)
)

(defrule
	(cc-players-unit-type-count 0 javelina > 0)
=>
	(set-goal gl-boar-unit javelina)
	(disable-self)
)

(defrule
	(strategic-number sn-wood-found > 3)
=>
	(up-modify-sn sn-wood-found c:- 1)
)

(defrule
	(or	(civ-selected aztec)
		(or	(civ-selected mayan)
			(and	(game-time < 10)
				(and	(not	(can-train villager))
					(can-research ri-loom)))))
	(not	(death-match-game))
=>
	(up-assign-builders c: house c: 2)
	(disable-self)
)

(defrule
	(or	(game-time > 45)
		(civ-selected chinese))
	(game-time > 10)
	(not	(death-match-game))
=>
	(up-assign-builders c: house c: 1)
	(disable-self)
)

(defrule
	(research-completed ri-wheel-barrow)
=>
	(set-goal gl-villager-max-carry wheel-carry)
	(disable-self)
)

(defrule
	(research-completed ri-hand-cart)
=>
	(set-goal gl-villager-max-carry cart-carry)
	(disable-self)
)

#load-if-not-defined WONDER-RACE

#load-if-not-defined ARABIA-MAP
#load-if-not-defined ARENA-MAP
#load-if-not-defined BLACK-FOREST-MAP
#load-if-not-defined GHOST-LAKE-MAP
#load-if-not-defined GOLD-RUSH-MAP
#load-if-not-defined MONGOLIA-MAP
#load-if-not-defined OASIS-MAP

#load-if-not-defined FORTRESS-MAP
#load-if-not-defined HIGHLAND-MAP
#load-if-not-defined YUCATAN-MAP
(defrule
	(goal gl-current-age gv-dark)
	(building-type-count town-center > 0)
	(or 	(cc-players-unit-type-count 0 deep-fish > 20)
		(or	(and	(cc-players-unit-type-count 0 shore-fish > 25)
				(wall-completed-percentage 2 == 100)); Islands
			(and	(cc-players-unit-type-count 0 deep-fish > 9)
				(cc-players-unit-type-count 0 shore-fish > 9))))
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock mixed-map-style)
	(set-strategic-number sn-home-exploration-time water-home-exploring-time)
	(chat-to-player my-player-number water-map-chat)
	(set-goal DOCK 1)
	(disable-self)
)
#else
#load-if-defined UP-HUMAN-IN-GAME
(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(building-type-count town-center > 0)
=>
	(set-goal gl-heavy-water-map YES)
	(disable-self)
)
#end-if
#end-if
#else
(defrule
	(goal gl-current-age gv-dark)
	(building-type-count town-center > 0)
	(or 	(cc-players-unit-type-count 0 deep-fish > 0)
		(cc-players-unit-type-count 0 shore-fish > 0))
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock mixed-map-style)
	(set-strategic-number sn-home-exploration-time water-home-exploring-time)
	(chat-to-player my-player-number water-map-chat)
	(set-goal DOCK 1)
	(set-goal gl-heavy-water-map YES)
	(chat-to-player my-player-number heavy-water-map-chat)
	(disable-self)
)
#end-if

#end-if

#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(or 	(cc-players-unit-type-count 0 deep-fish > high-fish-amount)
		(or	(cc-players-unit-type-count 0 shore-fish > high-fish-amount)
			(and	(cc-players-unit-type-count 0 deep-fish > average-fish-amount)
				(cc-players-unit-type-count 0 shore-fish > average-fish-amount))))
=>
	(set-goal gl-heavy-water-map YES)
	(chat-to-player my-player-number heavy-water-map-chat)
	(disable-self)
)
#end-if

#load-if-not-defined TEAMS-LOCKED
(defrule
	(or	(players-stance any-computer-ally neutral)
		(or	(players-stance any-computer-ally enemy)
			(or	(players-stance any-human-ally neutral)
				(players-stance any-human-ally enemy))))
	(timer-triggered 43)
=>
	(chat-to-player-using-id this-any-computer-ally betrayed-chat-id)
	(chat-to-player-using-id this-any-human-ally betrayed-chat-id)
	(set-stance this-any-computer-ally enemy)
	(set-stance this-any-human-ally enemy)
)

(defrule
	(or	(players-stance any-computer-ally neutral)
		(or	(players-stance any-computer-ally enemy)
			(or	(players-stance any-human-ally neutral)
				(players-stance any-human-ally enemy))))
	(up-timer-status 43 != timer-running)
=>
	(enable-timer 43 10)
)
#end-if

#load-if-not-defined FEUDAL-AGE-END
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined UP-2-PLAYER-GAME
#load-if-not-defined UP-3-PLAYER-GAME
#load-if-not-defined UP-ALLY-IN-GAME
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
=>
	(set-goal POSITION POCKET)
	(disable-self)
)
#end-if
#end-if
#end-if
#end-if
#end-if


(defrule
	(strategic-number sn-allow-adjacent-dropsites != 1)
	(nor	(up-pending-placement c: mill)
		(up-pending-placement c: mining-camp))
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
)

(defrule
	(goal gl-fixed-target-player YES)
	(or	(and	(players-building-count target-player == 0)
			(and	(players-building-type-count target-player gate == 0)
				(and	(players-building-type-count target-player stone-wall-line == 0)
					(and	(players-building-type-count target-player palisade-wall == 0)
						(players-building-count any-enemy > 0)))))
		(not	(player-valid target-player)))
=>
	(set-goal gl-fixed-target-player NO)
	(set-goal gl-flexible-target-fix -1)
)

#load-if-defined VICTORY-STANDARD
(defrule
	(strategic-number sn-special-attack-influence3 != 20001)
	(players-building-type-count any-enemy wonder > 0)
=>
	(up-get-player-fact this-any-enemy player-number 0 temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(set-goal gl-fixed-target-player YES)
	(set-strategic-number sn-safe-town-size 43)
	(set-strategic-number sn-special-attack-type3 1)
	(set-strategic-number sn-special-attack-influence3 20001)
	(enable-timer 23 6000)
)

(defrule
	(strategic-number sn-special-attack-influence3 == 20001)
	(or	(players-building-type-count target-player wonder == 0)
		(or	(up-timer-status 23 != timer-running)
			(goal gl-fixed-target-player NO)))
=>
	(set-strategic-number sn-special-attack-influence3 20000)
)

(defrule
	(goal gl-fixed-target-player YES)
	(players-building-type-count any-enemy wonder > 0)
	(players-building-count any-enemy > 0)
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-get-target-fact military-population 0 gl-toughest-fought-enemy-military)
)

(defrule
	(goal gl-fixed-target-player YES)
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(players-building-type-count any-enemy wonder > 0)
	(players-building-count any-enemy > 0)
	(strategic-number sn-disable-attack-groups == 1)
=>
	(set-strategic-number sn-disable-attack-groups 0)
)

(defrule
	(goal gl-fixed-target-player YES)
	(up-compare-goal victory-time >= 0)
	(up-compare-goal victory-time < 750)
	(goal target-system siege)
	(or	(and	(up-building-type-in-town c: wonder == 0)
			(players-building-type-count target-player wonder > 0))
		(and	(enemy-captured-relics)
			(up-building-type-in-town c: monastery == 0)))
=>
	(set-strategic-number sn-maximum-town-size 254)
)

(defrule
	(enemy-captured-relics)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= winning-player)
)

(defrule
	(enemy-captured-relics)
	(not	(stance-toward focus-player ally))
=>
	(up-modify-sn sn-target-player-number g:= winning-player)
	(set-goal gl-fixed-target-player YES)
	(set-strategic-number sn-safe-town-size 43)
	(enable-timer 23 300)
	(up-jump-rule 1)
)

(defrule
	(enemy-captured-relics)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)
#end-if

(defrule
	(goal gl-fixed-target-player NO)
	(or	(players-building-count any-enemy > 0)
		(or	(players-building-type-count any-enemy gate > 0)
			(or	(players-building-type-count any-enemy stone-wall-line > 0)
				(players-building-type-count any-enemy palisade-wall > 0))))
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(set-goal temporary-goal2 0)
)

(defrule
	(or	(game-time > 2100)
		(and	(map-type migration)
			(and	(game-time < 1400)
				(and	(or	(game-time < 1100)
						(or	(players-building-type-count target-player lumber-camp > 0)
							(players-building-type-count target-player mining-camp > 0)))
					(goal POSITION FLANK)))))
=>
	(up-jump-rule 8)
)

(defrule
	(goal gl-fixed-target-player NO)
	(players-building-type-count target-player dock == 0)
	(game-time < 2100)
	(or	(goal gl-strategy grush)
		(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
			(goal gl-islands-style YES)))
	(players-building-type-count any-enemy dock > 0)
	(or	(up-compare-goal TSA >= 1)
		(goal MILITARY 2))
=>
	(set-goal temporary-goal2 1)
	(set-goal temporary-goal6 300)
	(set-strategic-number sn-focus-player-number 1)
)

(defrule
	(goal gl-fixed-target-player NO)
	(up-compare-goal temporary-goal2 >= 1)
	(stance-toward focus-player enemy)
	(players-building-type-count focus-player dock > 0)
=>
	(up-full-reset-search)
	(up-find-remote c: dock c: 1)
)

(defrule
	(goal gl-fixed-target-player NO)
	(up-compare-goal temporary-goal2 >= 1)
	(stance-toward focus-player enemy)
	(players-building-type-count focus-player dock > 0)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal5)
)

(defrule
	(goal gl-fixed-target-player NO)
	(up-compare-goal temporary-goal2 >= 1)
	(stance-toward focus-player enemy)
	(players-building-type-count focus-player dock > 0)
	(up-compare-goal temporary-goal5 g:< temporary-goal6)
	(up-set-target-object search-remote c: 0)
=>
	(up-modify-goal temporary-goal7 s:= sn-focus-player-number)
	(up-reset-search 0 0 0 1)
	(up-find-remote c: dock c: 1)
	(set-goal temporary-goal2 2)
	(up-jump-rule -2)
)

(defrule
	(goal gl-fixed-target-player NO)
	(players-building-type-count any-enemy dock > 0)
	(up-compare-goal temporary-goal2 >= 1)
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -4)
)

(defrule
	(goal gl-fixed-target-player NO)
	(players-building-type-count any-enemy dock > 0)
	(nand	(goal POSITION FLANK)
		(and	(up-compare-goal temporary-goal5 > 120)
			(and	(game-time < 1600)
				(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style))))
	(goal temporary-goal2 2)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal7)
	(up-get-focus-fact military-population 0 temporary-goal3)
	(up-get-target-fact military-population 0 temporary-goal4)
	(up-modify-sn sn-target-player-number s:= sn-focus-player-number)
	(set-goal temporary-goal2 3)
)

(defrule
	(goal gl-fixed-target-player NO)
	(players-building-type-count any-enemy dock > 0)
	(goal temporary-goal2 3)
	(up-compare-goal temporary-goal3 g:> temporary-goal4)
=>
	(up-jump-rule 1)
)

(defrule
	(goal gl-fixed-target-player NO)
	(players-building-type-count any-enemy dock > 0)
	(up-compare-goal temporary-goal2 >= 1)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(goal gl-fixed-target-player NO)
	(or	(nor	(up-projectile-detected projectile-castle < 15000)
			(or	(up-projectile-detected projectile-bombard-tower < 15000)
				(and	(up-projectile-detected projectile-watch-tower < 15000)
					(game-time < 2100))))
		(up-compare-goal target-system != siege))
=>
	(set-strategic-number sn-safe-town-size 45)
)

(defrule
	(goal gl-fixed-target-player NO)
	(goal target-system siege)
	(or	(up-projectile-detected projectile-castle < 15000)
		(or	(up-projectile-detected projectile-bombard-tower < 15000)
			(and	(up-projectile-detected projectile-watch-tower < 15000)
				(up-building-type-in-town c: watch-tower == 0))))
	(up-building-type-in-town c: bombard-tower == 0)
	(up-building-type-in-town c: castle == 0)
	(strategic-number sn-maximum-town-size s:> sn-safe-town-size)
=>
	(up-modify-sn sn-safe-town-size c:+ 5)
)

#load-if-defined UP-ALLY-IN-GAME
#load-if-not-defined UP-TEAM-DISADVANTAGE
#load-if-defined UP-MULTIPLE-ENEMIES
(defrule
	(goal gl-fixed-target-player NO)
	(game-time > time-to-allow-retargeting); 600 in DM, otherwise 1500
	(or	(players-building-type-count target-player town-center == 0)
		(players-population target-player < 20))
	(players-population target-player < 30)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(players-population any-enemy >= 40)
	(players-building-count any-enemy > 0)
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-find-next-player enemy find-closest temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
)

(defrule
	(goal gl-fixed-target-player NO)
	(game-time > time-to-allow-retargeting); 600 in DM, otherwise 1500
	(or	(players-building-type-count target-player town-center == 0)
		(players-population target-player < 20))
	(players-population target-player < 30)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(players-population any-enemy >= 40)
	(players-building-count any-enemy > 0)
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-find-next-player enemy find-closest temporary-goal)
	(up-find-next-player enemy find-closest temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
)
#end-if
#end-if
#end-if

#load-if-not-defined DEATH-MATCH

#load-if-defined UP-POCKET-POSITION
#load-if-not-defined OASIS-MAP
(defrule
	(or	(game-time >= 2400)
		(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
			(or	(goal gl-fixed-target-player YES)
				(or	(players-building-type-count any-enemy bombard-tower > 0)
					(game-time g:< gl-pocket-target-time)))))
=>
	(up-jump-rule 17)
)

(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-get-fact population 0 temporary-goal6)
	(up-modify-sn sn-focus-player-number g:= gl-my-flank1)
	(up-get-focus-fact population 0 temporary-goal7)
	(up-get-focus-fact allied-goal gl-enemy-units-in-town temporary-goal8)
	(up-modify-goal gl-remote-last g:= gl-pair-player-military)
	(up-modify-goal gl-remote-last g:%/ gl-closest-enemy-military)
	(up-modify-goal temporary-goal7 g:- temporary-goal6)
	(up-modify-sn sn-focus-player-number g:= gl-enemy-pocket)
	(up-get-fact civilian-population 0 gl-remote-total)
	(up-get-focus-fact civilian-population 0 temporary-goal5)
	(up-modify-goal gl-remote-total g:- temporary-goal5)
)

(defrule
	(game-time > 1560)
	(goal gl-safe-in-town YES)
	(unit-type-count cavalry-class > 16)
	(up-compare-goal gl-military-percentage < 50)
	(up-compare-goal gl-military-percentage3 > 160)
	(up-research-status c: ri-chain-barding >= research-pending)
	(up-compare-goal temporary-goal8 < 5)
	(up-compare-goal gl-enemy-pocket > 0)
	(up-compare-goal gl-remote-last > 80)
	(up-compare-goal gl-remote-last < 120); Flanks probably just going to camp
	(up-compare-goal gl-pair-player-military > 40)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(game-time > 1440)
	(unit-type-count cavalry-class > 13)
	(up-compare-goal gl-military-percentage3 > 160)
	(up-research-status c: ri-chain-barding >= research-pending)
	(up-compare-goal temporary-goal8 < 5)
	(up-compare-goal gl-enemy-pocket > 0)
	(or	(up-compare-goal gl-military-percentage > 50)
		(up-compare-goal gl-military-percentage3 > 200))
	(up-compare-goal gl-remote-last > 80)
	(or	(up-compare-goal gl-pair-player-military > 25)
		(up-compare-goal gl-remote-last > 160))
=>
	(set-goal temporary-goal 1)
)

(defrule
	(or	(and	(goal gl-strategy-control gv-2-TC-knights)
			(and	(up-compare-goal temporary-goal5 > 5)
				(goal gl-strategy knight-rush)))
		(up-compare-goal temporary-goal7 > 25))
	(up-compare-goal gl-enemy-pocket > 0)
	(up-compare-goal gl-military-percentage > 80)
	(up-compare-goal gl-pair-player-military g:> gl-closest-enemy-military)
	(players-population target-player < 80)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(up-compare-goal gl-enemy-pocket > 0)
	(up-compare-goal gl-military-percentage > 150)
	(players-population target-player < 80)
	(up-research-status c: ri-chain-barding >= research-pending)
	(or	(players-military-population target-player < 10)
		(up-compare-goal gl-pair-player-military > 30))
	(players-military-population target-player < 18)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(goal temporary-goal 1)
	(game-time > 1140)
	(or	(goal gl-strategy krush)
		(goal gl-strategy knight-rush))
	(unit-type-count cavalry-class > 13)
	(strategic-number sn-target-player-number g:!= gl-enemy-pocket)
	(up-compare-goal gl-military-percentage3 > 130)
	(up-compare-goal gl-pair-player-military > 10)
	(players-population focus-player > 60)
	(players-building-type-count focus-player castle == 0)
	(players-building-type-count focus-player watch-tower < 3)
	(players-current-age focus-player <= castle-age)
=>
	(set-goal temporary-goal 2)
)

(defrule
	(goal TSA 0)
	(goal gl-super-pocket YES)
	(unit-type-count cavalry-class > 15)
	(up-research-status c: ri-chain-barding >= research-pending)
	(strategic-number sn-target-player-number g:!= gl-enemy-pocket)
	(up-compare-goal gl-military-percentage3 > 130)
	(or	(up-compare-goal gl-military-percentage3 > 140)
		(unit-type-count cavalry-class > 20))
	(players-building-type-count focus-player castle == 0)
	(players-building-type-count focus-player watch-tower < 3)
	(players-current-age focus-player <= castle-age)
=>
	(set-goal temporary-goal 2)
	(up-modify-sn sn-threat-level c:min -2)
)

(defrule
	(or	(goal gl-strategy krush)
		(goal gl-strategy knight-rush))
	(unit-type-count cavalry-class > 17)
	(up-research-status c: ri-chain-barding >= research-pending)
	(up-compare-goal gl-remote-total < -10); Enemy pocket booming
	(strategic-number sn-target-player-number g:!= gl-enemy-pocket)
	(up-compare-goal gl-military-percentage3 > 130)
	(or	(up-compare-goal gl-military-percentage3 > 140)
		(unit-type-count cavalry-class > 24))
	(players-building-type-count focus-player castle == 0)
	(players-building-type-count focus-player watch-tower < 3)
	(players-current-age focus-player <= castle-age)
=>
	(set-goal temporary-goal 2)
	(up-modify-sn sn-threat-level c:min -2)
)

(defrule
	(goal temporary-goal 2)
	(up-compare-goal gl-patrol-defence != patrol-on)
	(up-compare-goal gl-defending-ally != YES)
	(players-building-count focus-player > 0)
=>
	(up-get-fact game-time 0 gl-pocket-target-time)
	(up-modify-goal gl-pocket-target-time c:+ 210)
	(up-modify-sn sn-target-player-number s:= sn-focus-player-number)
	(set-goal gl-fixed-target-player YES)
	(set-goal gl-retargeting to-pocket)
	(chat-to-allies "Retargeting to enemy pocket.")
	(enable-timer 23 360)
	(enable-timer 15 6)
	(enable-timer 7 0)
	(up-jump-rule 1)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)
#end-if
#end-if

(defrule
	(or	(up-compare-goal gl-current-age >= gv-feudal-up)
		(up-compare-goal gl-target-player-distance < 30))
=>
	(up-jump-rule 6)
)

(defrule
	(goal gl-current-age gv-feudal)
	(goal POSITION POCKET)
	(goal gl-strategy scrush)
	(up-compare-goal gl-enemy-pocket > 0)
=>
	(up-modify-sn sn-target-player-number g:= gl-enemy-pocket)
	(set-goal gl-fixed-target-player YES)
	(enable-timer 23 90)
)

(defrule
	(goal gl-fixed-target-player NO)
	(goal gl-current-age gv-feudal)
	(goal POSITION POCKET)
	(goal gl-strategy scrush)
	(or	(not	(player-valid target-player))
		(players-building-count target-player == 0))
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(set-goal gl-fixed-target-player YES)
	(enable-timer 23 180)
)

(defrule
	(goal gl-fixed-target-player NO)
	(goal gl-current-age gv-feudal)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(goal gl-rush-suitability-on-map GOOD)
	(up-timer-status 7 != timer-disabled)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-full-reset-search)
	(up-find-remote c: castle c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(goal gl-fixed-target-player NO)
	(goal gl-current-age gv-feudal)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(goal gl-rush-suitability-on-map GOOD)
	(up-timer-status 7 != timer-disabled)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(or	(up-compare-goal gl-enemy-tower-count > 1)
		(goal gl-remote-last 1))
	(up-projectile-detected projectile-fortification < 1500000)
=>
	(up-modify-goal temporary-goal3 s:= sn-focus-player-number)
	(up-find-player enemy find-closest temporary-goal)
	(up-find-next-player enemy find-closest temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-get-focus-fact player-distance 0 temporary-goal2)
	(up-modify-sn sn-focus-player-number g:= temporary-goal3)
)

(defrule
	(goal gl-fixed-target-player NO)
	(goal gl-current-age gv-feudal)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(goal gl-rush-suitability-on-map GOOD)
	(up-timer-status 7 != timer-disabled)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(or	(up-compare-goal gl-enemy-tower-count > 1)
		(goal gl-remote-last 1))
	(up-projectile-detected projectile-fortification < 1500000)
	(up-compare-goal temporary-goal2 < 120); 2nd closest isn't super far/on other side
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(set-goal gl-fixed-target-player YES)
	(enable-timer 23 180)
)

(defrule
	(goal gl-fixed-target-player NO)
	(goal gl-current-age gv-feudal)
	(goal POSITION POCKET)
	(goal gl-strategy scrush)
	(or	(up-compare-goal gl-enemy-tower-count > 1)
		(players-building-type-count target-player castle > 0))
	(up-projectile-detected projectile-fortification < 1500000)
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(set-goal gl-fixed-target-player YES)
	(enable-timer 23 180)
)

(defrule
	(or	(strategic-number sn-maximum-town-size >= 254)
		(goal gl-fixed-target-player NO))
	(or	(and	(players-population target-player < 30)
			(and	(players-building-type-count target-player town-center == 0)
				(players-population any-enemy >= 40)))
		(not	(player-in-game target-player)))
	(players-building-count any-enemy > 0)
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-find-next-player enemy find-closest temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
)

(defrule
	(goal gl-fixed-target-player NO)
	(or	(players-population target-player < 20)
		(and	(goal gl-islands-style YES)
			(and	(players-building-type-count target-player dock == 0)
				(players-building-type-count any-enemy dock > 0))))
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(players-unit-type-count target-player galley-line < 4)
	(players-building-count any-enemy > 0)
	(players-population any-enemy >= 40)
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-find-next-player enemy find-closest temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
)

(defrule
	(true)
=>
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 0)
)

(defrule
	(goal gl-fixed-target-player NO)
	(players-population target-player < 50)
	(population > 140)
	(or	(goal gl-strategy eew-strategy)
		(or	(up-compare-goal SLING > 0)
			(population > 170)))
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(players-building-count any-enemy > 0)
	(players-population any-enemy >= 70)
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-goal temporary-goal6 g:= temporary-goal)
	(set-goal temporary-goal3 1)
)

(defrule
	(goal temporary-goal3 1)
	(up-compare-goal temporary-goal4 < 50)
	(up-compare-goal temporary-goal2 < 7)
=>
	(up-find-next-player enemy find-closest temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
;	(up-chat-data-to-all "Find-n: %d" s: sn-target-player-number)
	(set-goal temporary-goal3 2)
)

(defrule
	(goal temporary-goal3 2)
	(or	(players-population target-player < 50)
		(and	(players-building-count target-player == 0)
			(and	(players-building-type-count target-player palisade-wall == 0)
				(players-building-type-count target-player stone-wall == 0))))
	(up-compare-goal temporary-goal2 < 7)
=>
	(set-goal temporary-goal3 1)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-get-focus-fact population 0 temporary-goal4)
	(up-modify-sn sn-focus-player-number g:= temporary-goal6)
	(up-modify-sn sn-target-player-number g:= temporary-goal6)
;	(up-chat-data-to-all "Improper -> reset to %d" g: temporary-goal6)
	(up-jump-rule -2)
)
#else
(defrule
	(game-time > 900)
	(goal gl-fixed-target-player NO)
	(or	(and	(players-population target-player < 30)
			(and	(players-building-type-count target-player town-center == 0)
				(players-population any-enemy >= 40)))
		(not	(player-in-game target-player)))
	(players-building-count any-enemy > 0)
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-find-next-player enemy find-closest temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
)

(defrule
	(game-time > 600)
	(goal gl-fixed-target-player NO)
	(or	(players-population target-player < 20)
		(and	(goal gl-islands-style YES)
			(and	(players-building-type-count target-player dock == 0)
				(players-building-type-count any-enemy dock > 0))))
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(players-building-count any-enemy > 0)
	(players-population any-enemy >= 40)
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-find-next-player enemy find-closest temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
)
#end-if

(defrule
	(true)
=>
	(up-get-threat-data threat-time threat-player threat-source threat-target)
	(up-find-player enemy find-attacker gl-enemy-attacker)
	(set-goal gl-strategy-class basic-class)
	(up-get-fact resource-amount amount-relics gl-gathered-relics)
	(set-goal gl-safe-to-assist-ally NO)
	(set-strategic-number sn-free-siege-targeting siege-targeting-treb-value); Trebs shoot units; spanish cannon galleons will target units too
	(up-get-fact soldier-count 0 gl-retreat-notice2)
	(up-modify-goal gl-retreat-notice2 c:/ 4)
	(up-modify-goal gl-retreat-notice2 c:min 10)
	(set-goal gl-unit-selection-block 0)
	(set-strategic-number sn-pre-mill-fishers 2)
	(set-goal temporary-goal2 gv-fish-map)
	(up-modify-goal temporary-goal3 s:= sn-minimum-water-body-size-for-dock)
	(up-modify-goal temporary-goal3 c:z/ 1500)
	(up-modify-goal temporary-goal2 g:max temporary-goal3)
)

(defrule
	(goal gl-current-age gv-dark)
	(unit-type-count sheep > 0)
	(or	(unit-type-count sheep > 1)
		(or	(dropsite-min-distance boar-hunting < 8)
			(dropsite-min-distance deer-hunting < 9)))
	(unit-type-count villager-forager == 0)
=>
	(set-strategic-number sn-pre-mill-fishers 4)
	(up-modify-goal temporary-goal g:= gl-strategy-type)
	(up-modify-goal temporary-goal c:z/ 2)
	(up-modify-goal temporary-goal c:min 1)
	(up-modify-goal temporary-goal c:* 2)
	(up-modify-goal temporary-goal2 c:* 3)
	(up-modify-goal temporary-goal g:* temporary-goal2)
	(up-modify-sn sn-pre-mill-fishers g:+ temporary-goal)
)

(defrule
	(up-compare-goal gl-strategy != default)
	(up-compare-goal gl-strategy != CA-boom)
	(up-compare-goal gl-strategy != xbow-boom)
	(up-compare-goal gl-strategy != ew-boom)
	(up-compare-goal gl-strategy != castle-drop)
	(up-compare-goal gl-strategy != krush)
	(up-compare-goal gl-strategy != eles)
	(up-compare-goal gl-strategy != michi-boom)
	(up-compare-const gv-death-match == 0)
=>
	(set-goal gl-strategy-class special-class)
)

(defrule
	(or	(and	(goal gl-strategy-class basic-class)
			(up-compare-goal gl-current-age >= gv-feudal-up))
		(goal gl-strategy sling))
=>
	(set-goal gl-strategy-type default)
)

(defrule
	(up-timer-status 15 == timer-running)
=>
	(up-jump-rule 38)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-goal temporary-goal5 0)
)

(defrule
	(game-time < 3000)
=>
	(up-find-player enemy find-closest temporary-goal2)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
	(up-get-point position-focus gl-point-x)
	(up-set-target-point gl-point-x)
	(set-strategic-number sn-focus-player-number 1)
	(set-strategic-number sn-barbarian-count 1)
	(set-goal temporary-goal4 20)
	(set-goal temporary-goal7 0)
	(set-goal gl-enemy-pocket-civ -1)
	(up-reset-filters)
)

(defrule
	(game-time < 3000)
	(goal temporary-goal4 20)
	(strategic-number sn-focus-player-number != my-player-number)
	(stance-toward focus-player ally)
	(up-allied-goal focus-player gl-identity == Barbarian)
=>
	(up-modify-sn sn-barbarian-count c:+ 1)
)

(defrule
	(game-time < 3000)
	(or	(up-compare-goal temporary-goal2 s:!= sn-focus-player-number)
		(up-compare-const gv-x-vs-one-challenge == 1))
	(stance-toward focus-player enemy)
=>
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 g: temporary-goal4)
	(up-find-remote c: building-class c: 1)
	(up-find-remote c: wall-class c: 1)
	(up-get-focus-fact unit-type-count knight-line temporary-goal3)
	(up-get-focus-fact building-type-count stable temporary-goal6)
	(up-modify-goal temporary-goal6 c:min 1)
	(set-goal temporary-goal5 1)
	(up-get-focus-fact military-population 0 gl-local-last)
	(up-modify-goal gl-local-last c:max 1)
)

(defrule
	(goal temporary-goal5 1)
	(goal temporary-goal7 0)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-fact military-population 0 gl-military-percentage2)
	(up-modify-goal temporary-goal3 c:- 2)
	(up-modify-goal temporary-goal3 c:min 1)
	(up-modify-goal temporary-goal3 c:max 0)
	(up-modify-goal temporary-goal3 g:max temporary-goal6)
	(up-modify-goal temporary-goal3 c:+ 2)
	(up-modify-goal gl-military-percentage3 g:= gl-military-percentage2)
	(up-modify-goal gl-military-percentage3 g:%/ gl-local-last)
	(up-modify-goal gl-local-last g:* temporary-goal3)
	(up-modify-goal gl-local-last c:/ 3)
	(up-modify-goal gl-military-percentage2 g:%/ gl-local-last)
	(up-modify-goal gl-enemy-pocket s:= sn-focus-player-number)
	(up-jump-rule 4)
)

(defrule
	(goal temporary-goal5 1)
	(goal temporary-goal7 1)
	(players-building-count focus-player == 0)
=>
	(up-get-fact military-population 0 gl-military-percentage2)
	(up-modify-goal temporary-goal3 c:- 2)
	(up-modify-goal temporary-goal3 c:min 1)
	(up-modify-goal temporary-goal3 c:max 0)
	(up-modify-goal temporary-goal3 g:max temporary-goal6)
	(up-modify-goal temporary-goal3 c:+ 2)
	(up-modify-goal gl-military-percentage3 g:= gl-military-percentage2)
	(up-modify-goal gl-military-percentage3 g:%/ gl-local-last)
	(up-modify-goal gl-local-last g:* temporary-goal3)
	(up-modify-goal gl-local-last c:/ 3)
	(up-modify-goal gl-military-percentage2 g:%/ gl-local-last)
	(up-modify-goal gl-enemy-pocket s:= sn-focus-player-number)
	(up-jump-rule 3)
)

(defrule
	(game-time < 3000)
	(players-building-count any-enemy > 0)
	(goal temporary-goal4 100)
=>
	(set-strategic-number sn-focus-player-number 1)
	(set-goal temporary-goal7 1)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(up-jump-rule -4)
)

(defrule
	(game-time < 3000)
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(set-goal temporary-goal5 0)
	(up-jump-rule -6)
)

(defrule
	(game-time < 3000)
	(not	(player-valid focus-player))
	(goal temporary-goal7 0)
	(up-compare-goal temporary-goal4 < 100)
=>
	(set-strategic-number sn-focus-player-number 1)
	(up-modify-goal temporary-goal4 c:+ 5)
	(set-goal temporary-goal5 0)
	(up-jump-rule -6)
)

(defrule
	(game-time < 3000)
	(up-compare-goal gl-enemy-pocket > 0)
=>
	(up-modify-sn sn-focus-player-number g:= gl-enemy-pocket)
	(up-get-focus-fact civilization 0 gl-enemy-pocket-civ)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-full-reset-search)
	(up-find-remote c: castle c: 8)
	(up-get-search-state gl-local-total)
	(up-modify-sn sn-enemy-castle-count g:= gl-remote-last)
	(up-find-remote c: watch-tower c: 8)
	(up-get-search-state gl-local-total)
	(set-goal temporary-goal3 0)
	(set-goal gl-enemy-tower-distance 300)
	(set-goal gl-enemy-castle-distance 300)
	(up-modify-goal gl-enemy-tower-count g:= gl-remote-last)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(up-set-target-object search-remote g: temporary-goal3)
	(up-object-data object-data-class == tower-class)
=>
	(up-get-point position-object gl-point-x)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal4)
	(up-modify-goal gl-enemy-tower-distance g:min temporary-goal4)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-jump-rule -1)
)

(defrule
	(up-set-target-object search-remote g: temporary-goal3)
	(up-object-data object-data-type == castle)
=>
	(up-get-point position-object gl-point-x)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal4)
	(up-modify-goal gl-enemy-castle-distance g:min temporary-goal4)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-jump-rule -2)
)

(defrule
	(up-compare-goal threat-player >= 1)
	(strategic-number sn-target-player-number g:!= threat-player)
	(strategic-number sn-target-player-number s:== sn-focus-player-number)
=>
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= threat-player)
)

(defrule
	(up-compare-goal threat-player >= 1)
	(strategic-number sn-focus-player-number g:== threat-player)
	(up-compare-goal temporary-goal2 s:== sn-target-player-number)
	(or	(stance-toward focus-player ally)
		(strategic-number sn-focus-player-number == my-player-number))
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)

(defrule
	(strategic-number sn-focus-player-number > 0)
=>
	(up-get-focus-fact unit-type-count knight-line gl-enemy-cavalry-count)
	(up-get-focus-fact unit-type-count scout-cavalry-line temporary-goal6)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal6)
	(up-get-focus-fact unit-type-count camel-line gl-enemy-camelry-count)
	(up-modify-goal gl-enemy-cavalry-count g:+ gl-enemy-camelry-count)
	(up-get-focus-fact unit-type-count tarkan-line temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count mameluke-line gl-enemy-mameluke-count)
	(up-modify-goal gl-enemy-cavalry-count g:+ gl-enemy-mameluke-count)
	(up-modify-goal gl-enemy-camelry-count g:+ gl-enemy-mameluke-count)
	(up-get-focus-fact unit-type-count war-elephant-line temporary-goal)
	(up-modify-goal gl-enemy-elephant-count g:= temporary-goal)
	(up-modify-goal temporary-goal c:* 3)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(set-goal temporary-goal7 0)
)

(defrule
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-get-target-fact unit-type-count scout-cavalry-line temporary-goal7)
	(up-modify-goal temporary-goal7 c:- 1); Avoid detecting 1+1 starting scouts as scout rush
	(up-modify-goal temporary-goal7 c:max 0)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal7)
	(up-get-target-fact unit-type-count knight-line temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count camel-line temporary-goal4)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal4)
	(up-get-target-fact unit-type-count tarkan-line temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count mameluke-line temporary-goal8)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal8)
	(up-get-target-fact unit-type-count war-elephant-line temporary-goal9)
	(up-modify-goal temporary-goal9 c:* 3)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal9)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(strategic-number sn-focus-player-number > 0)
=>
	(up-get-focus-fact unit-type-count boyar temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count elite-boyar temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count magyar-huszar temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count elite-magyar-huszar temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count battle-elephant temporary-goal12)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal12)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal12)
	(up-get-focus-fact unit-type-count elite-battle-elephant temporary-goal13)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal13)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal13)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-get-target-fact unit-type-count boyar temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count elite-boyar temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count magyar-huszar temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count elite-magyar-huszar temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count battle-elephant temporary-goal10)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal10)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal10)
	(up-get-target-fact unit-type-count elite-battle-elephant temporary-goal11)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal11)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal11)
)

(defrule
	(strategic-number sn-focus-player-number > 0)
=>
	(up-get-focus-fact unit-type-count archer-line gl-enemy-archery-count)
	(up-get-focus-fact unit-type-count skirmisher-line gl-enemy-skirmisher-count)
	(up-get-focus-fact unit-type-count chu-ko-nu-line temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count longbowman-line temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count cavalry-archer-line temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count war-wagon-line temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count plumed-archer-line temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count mangudai-line temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
)

(defrule
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-get-target-fact unit-type-count archer-line temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count skirmisher-line temporary-goal)
	(up-modify-goal gl-enemy-skirmisher-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count chu-ko-nu-line temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count longbowman-line temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count cavalry-archer-line temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count war-wagon-line temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count plumed-archer-line temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count mangudai-line temporary-goal5)
)

(defrule
	(strategic-number sn-focus-player-number > 0)
=>
	(up-get-focus-fact unit-type-count spearman-line gl-enemy-spearman-count)
	(up-modify-goal gl-enemy-archer-count g:= gl-enemy-archery-count)
	(up-modify-goal gl-enemy-archery-count g:+ gl-enemy-skirmisher-count)
	(up-get-focus-fact unit-type-count scorpion-line gl-enemy-scorpion-count)
	(up-get-focus-fact unit-type-count cataphract-line gl-enemy-cataphract-count)
	(up-get-focus-fact unit-type-count mangonel-line gl-enemy-onager-count)
	(up-get-focus-fact unit-type-count elite-eagle-warrior gl-enemy-eew-count)
	(up-get-target-fact building-type-count stone-wall-line gl-enemy-wall-count-total)
)

(defrule
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-modify-goal gl-enemy-camelry-count g:+ temporary-goal4); Camel-count
	(up-modify-goal gl-enemy-camelry-count g:+ temporary-goal8); Mameluke-count
	(up-modify-goal gl-enemy-mameluke-count g:+ temporary-goal8)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal5); Mangudai-count
	(up-modify-goal gl-enemy-archer-count g:+ temporary-goal5)
	(up-get-target-fact unit-type-count scorpion-line temporary-goal)
	(up-modify-goal gl-enemy-scorpion-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count spearman-line temporary-goal)
	(up-modify-goal gl-enemy-spearman-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count cataphract-line temporary-goal)
	(up-modify-goal gl-enemy-cataphract-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count mangonel-line temporary-goal)
	(up-modify-goal gl-enemy-onager-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count elite-eagle-warrior temporary-goal)
	(up-modify-goal gl-enemy-eew-count g:+ temporary-goal)
)

(defrule
	(strategic-number sn-focus-player-number > 0)
=>
	(up-get-focus-fact unit-type-count militiaman-line gl-enemy-infantry-count)
	(up-get-focus-fact unit-type-count jaguar-man-line temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count throwing-axeman-line temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count woad-raider-line temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count teutonic-knight-line temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count berserk-line temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count samurai-line temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-target-fact building-type-count gate temporary-goal)
	(up-modify-goal gl-enemy-wall-count-total g:+ temporary-goal)
)

(defrule
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-get-target-fact unit-type-count militiaman-line temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count jaguar-man-line temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count throwing-axeman-line temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count woad-raider-line temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count teutonic-knight-line temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count berserk-line temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count samurai-line temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
)

(defrule
	(strategic-number sn-focus-player-number > 0)
=>
	(up-get-focus-fact unit-type-count eagle-warrior-line gl-enemy-eagle-count)
	(up-get-focus-fact unit-type-count heavy-eagle-warrior temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal gl-enemy-eagle-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count huskarl-line gl-enemy-huskarl-count)
	(up-get-focus-fact unit-type-count hand-cannoneer gl-enemy-gunpowder-count)
	(up-get-focus-fact unit-type-count conquistador-line temporary-goal)
	(up-modify-goal gl-enemy-gunpowder-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count janissary-line temporary-goal)
	(up-modify-goal gl-enemy-gunpowder-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-heavy-cavalry-count g:= gl-enemy-cavalry-count)
	(up-modify-goal gl-enemy-heavy-cavalry-count g:- temporary-goal6)
	(up-modify-goal gl-enemy-heavy-cavalry-count g:- temporary-goal7)
	(up-get-target-fact building-type-count palisade-wall temporary-goal)
	(up-modify-goal gl-enemy-wall-count-total g:+ temporary-goal)
)

(defrule
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-get-target-fact unit-type-count eagle-warrior-line temporary-goal)
	(up-modify-goal gl-enemy-eagle-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count heavy-eagle-warrior temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal gl-enemy-eagle-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count huskarl-line temporary-goal)
	(up-modify-goal gl-enemy-huskarl-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count hand-cannoneer temporary-goal)
	(up-modify-goal gl-enemy-gunpowder-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count conquistador-line temporary-goal)
	(up-modify-goal gl-enemy-gunpowder-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count janissary-line temporary-goal)
	(up-modify-goal gl-enemy-gunpowder-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-elephant-count g:+ temporary-goal9)
)


(defrule
	(up-compare-const gv-aofe-game == 1)
	(strategic-number sn-focus-player-number > 0)
=>
	(up-get-focus-fact unit-type-count genoese-crossbowman temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count elite-genoese-crossbowman temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count genitour temporary-goal)
	(up-modify-goal gl-enemy-skirmisher-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count elite-genitour temporary-goal)
	(up-modify-goal gl-enemy-skirmisher-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count camel-archer temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count elite-camel-archer temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count arambai temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-get-target-fact unit-type-count genoese-crossbowman temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count elite-genoese-crossbowman temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count genitour temporary-goal)
	(up-modify-goal gl-enemy-skirmisher-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count elite-genitour temporary-goal)
	(up-modify-goal gl-enemy-skirmisher-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count camel-archer temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count elite-camel-archer temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count arambai temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(strategic-number sn-focus-player-number > 0)
=>
	(up-get-focus-fact unit-type-count elite-arambai temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count rattan-archer temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count elite-rattan-archer temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count shotel-warrior temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count elite-shotel-warrior temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count kamayuk temporary-goal2)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal2)
	(up-get-focus-fact unit-type-count elite-kamayuk temporary-goal3)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal3)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-get-target-fact unit-type-count elite-arambai temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count rattan-archer temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count elite-rattan-archer temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count shotel-warrior temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count elite-shotel-warrior temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count kamayuk temporary-goal4)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal4)
	(up-get-target-fact unit-type-count elite-kamayuk temporary-goal5)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal5)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(strategic-number sn-focus-player-number > 0)
=>
	(up-modify-goal gl-enemy-spearman-count g:+ temporary-goal2)
	(up-modify-goal gl-enemy-spearman-count g:+ temporary-goal3)
	(up-get-focus-fact unit-type-count karambit-warrior temporary-goal)
	(up-modify-goal temporary-goal c:/ 2)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count elite-karambit-warrior temporary-goal)
	(up-modify-goal temporary-goal c:/ 2)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count gbeto temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count elite-gbeto temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count imperial-camel temporary-goal2)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal2)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-modify-goal gl-enemy-spearman-count g:+ temporary-goal4)
	(up-modify-goal gl-enemy-spearman-count g:+ temporary-goal5)
	(up-get-target-fact unit-type-count karambit-warrior temporary-goal)
	(up-modify-goal temporary-goal c:/ 2)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count elite-karambit-warrior temporary-goal)
	(up-modify-goal temporary-goal c:/ 2)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count gbeto temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count elite-gbeto temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count imperial-camel temporary-goal3)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal3)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(strategic-number sn-focus-player-number > 0)
=>
	(up-modify-goal gl-enemy-camelry-count g:+ temporary-goal2)
	(up-modify-goal gl-enemy-heavy-cavalry-count g:+ temporary-goal2)
	(up-get-focus-fact unit-type-count slinger temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count imperial-skirmisher temporary-goal)
	(up-modify-goal gl-enemy-skirmisher-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count condottiero temporary-goal)
	(up-modify-goal gl-enemy-infantry-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-elephant-count g:+ temporary-goal12)
	(up-modify-goal gl-enemy-elephant-count g:+ temporary-goal13)
	(up-get-focus-fact unit-type-count stable-tarkan temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-heavy-cavalry-count g:+ temporary-goal)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(strategic-number sn-focus-player-number > 0)
=>
	(up-get-focus-fact unit-type-count stable-elite-tarkan temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-heavy-cavalry-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count ballista-elephant temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-archer-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count elite-ballista-elephant temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-archer-count g:+ temporary-goal)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-modify-goal gl-enemy-camelry-count g:+ temporary-goal3)
	(up-modify-goal gl-enemy-heavy-cavalry-count g:+ temporary-goal3)
	(up-get-target-fact unit-type-count slinger temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count imperial-skirmisher temporary-goal)
	(up-modify-goal gl-enemy-skirmisher-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-elephant-count g:+ temporary-goal10)
	(up-modify-goal gl-enemy-elephant-count g:+ temporary-goal11)
	(up-get-target-fact unit-type-count stable-tarkan temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-heavy-cavalry-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count stable-elite-tarkan temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-heavy-cavalry-count g:+ temporary-goal)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-get-target-fact unit-type-count ballista-elephant temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-archer-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count elite-ballista-elephant temporary-goal)
	(up-modify-goal gl-enemy-cavalry-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-archery-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-archer-count g:+ temporary-goal)
)

(defrule
	(up-compare-goal threat-player >= 1)
	(strategic-number sn-target-player-number g:!= threat-player)
	(strategic-number sn-target-player-number g:== temporary-goal2)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)

;

(defrule
	(game-time > 30)
=>
	(up-delete-distant-farms c: 60); We've probably run and there are bugged leftover farms -> delete
	(set-goal gl-safe-in-town YES)
	(set-goal gl-town-under-attack 0)
)

(defrule
	(or	(goal gl-patrol-defence patrol-on)
		(or	(and	(goal TSA 0)
				(up-compare-goal gl-enemy-units-in-town > 4))
			(or	(goal gl-defending-ally YES)
				(and	(goal gl-fixed-target-player YES)
					(and	(goal TSA 1)
						(up-compare-goal gl-retargeting != YES))))))
=>
	(set-goal gl-safe-in-town NO)
)

(defrule
	(game-time > 30)
	(idle-farm-count > 0)
	(nand	(strategic-number sn-defer-dropsite-update == 1)
		(or	(up-pending-objects c: mill > 0)
			(up-pending-objects c: town-center > 0)))
	(strategic-number sn-maximum-food-drop-distance >= 10)
=>
	(up-delete-distant-farms s: sn-maximum-food-drop-distance)
)

(defrule
	(game-time < 1400)
	(building-type-count town-center > 0)
=>
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 33)
	(up-find-local c: sheep c: 240)
	(up-get-search-state gl-local-total)
	(up-modify-goal gl-sheep-count-last g:= gl-current-sheep-count)
	(up-modify-goal gl-current-sheep-count g:= gl-local-total)
	(up-modify-goal temporary-goal2 g:= gl-current-sheep-count)
	(up-modify-goal temporary-goal2 g:- gl-sheep-count-last)
	(up-modify-goal temporary-goal2 c:max 0)
	(up-modify-sn sn-sheep-count g:+ temporary-goal2)
)

(defrule
	(goal gl-assisting-ally NO)
=>
	(up-modify-goal saved-threat-level s:= sn-threat-level)
)

;(defrule
;	(not	(taunt-detected 1 53))
;	(or	(strategic-number sn-focus-player-number < 0)
;		(or	(not	(player-valid focus-player))
;			(or	(strategic-number sn-focus-player-number == my-player-number)
;				(stance-toward focus-player ally))))
;=>
;	(up-chat-data-to-all "!!! FOCUS PLAYER (%d) !!! (2)" s: sn-focus-player-number)
;)

(defrule
	(goal gl-sling-counter-type anti-sling)
	(up-compare-goal gl-enemy-sling >= 1)
	(up-compare-goal gl-enemy-sling <= 8)
=>
	(up-jump-rule 5)
)

(defrule
	(up-compare-goal threat-player >= 1)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= threat-player)
	(up-get-focus-fact military-population 0 temporary-goal2)
	(up-get-target-fact military-population 0 gl-target-soldier-count)
	(up-modify-goal gl-toughest-fought-enemy-military g:max gl-target-soldier-count)
)

(defrule
	(up-timer-status 22 != timer-running)
	(up-compare-goal threat-time < 10000)
	(not	(stance-toward focus-player ally))
	(up-compare-goal temporary-goal g:!= threat-player)
	(up-compare-goal threat-player != my-player-number)
	(up-compare-goal temporary-goal2 g:> gl-toughest-fought-enemy-military)
	(up-compare-goal threat-player >= 1)
=>
	(up-modify-sn sn-focus-player-number g:= threat-player)
	(up-modify-goal gl-toughest-fought-enemy-military g:= temporary-goal2)
	(up-modify-goal gl-enemy-assist g:= threat-player)
	(up-get-player-color focus-player temporary-goal8)
	(up-chat-data-to-player chat-recipient focus-chat g: temporary-goal8)
	(up-chat-data-to-player my-player-number focus-chat g: temporary-goal8)
	(enable-timer 22 30)
)

(defrule
	(up-timer-status 22 == timer-running)
=>
	(up-modify-sn sn-focus-player-number g:= gl-enemy-assist)
	(up-get-focus-fact military-population 0 gl-toughest-fought-enemy-military)
)

(defrule
	(up-timer-status 22 == timer-running)
	(or	(up-compare-goal gl-target-soldier-count g:> gl-toughest-fought-enemy-military)
		(or	(stance-toward focus-player ally)
			(strategic-number sn-focus-player-number == my-player-number)))
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-modify-goal gl-toughest-fought-enemy-military g:= gl-target-soldier-count)
)

(defrule
	(up-compare-goal threat-player >= 1)
	(up-compare-goal gl-target-soldier-count g:== gl-toughest-fought-enemy-military)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(disable-timer 22)
)

(defrule
	(or	(and	(up-timer-status 22 != timer-disabled)
			(and	(goal gl-fixed-target-player YES)
				(and	(players-building-type-count every-enemy wonder == 0)
					(and	(up-compare-goal gl-enemy-sling >= 1)
						(up-compare-goal gl-enemy-sling <= 8)))))
		(timer-triggered 22))
=>
	(disable-timer 22)
)

;(defrule
;	(not	(taunt-detected 1 53))
;	(or	(strategic-number sn-focus-player-number < 0)
;		(or	(not	(player-valid focus-player))
;			(or	(strategic-number sn-focus-player-number == my-player-number)
;				(stance-toward focus-player ally))))
;=>
;	(up-chat-data-to-all "!!! FOCUS PLAYER (%d) !!! (3)" s: sn-focus-player-number)
;)

(defrule
	(up-compare-goal RETREAT != YES)
	(goal gl-early-raid YES)
	(up-compare-goal 391 s:!= sn-target-player-number)
=>
	(set-goal gl-raid-retargeting NO)
	(disable-timer 28)
	(set-goal RETREAT YES)
	(set-goal gl-drush-retreat-point-required 1)
	(set-goal gl-route-control -1)
	(set-goal gl-route-control2 -1)
)

(defrule
	(goal TSA 0)
	(strategic-number sn-target-player-number > 0)
	(up-compare-goal 391 s:!= sn-target-player-number)
	(players-building-count any-enemy > 0)
=>
	(up-modify-goal 391 s:= sn-target-player-number)
	(up-get-player-color target-player temporary-goal8)
	(up-chat-data-to-player every-ally target-chat g: temporary-goal8)
	(up-chat-data-to-player my-player-number target-chat g: temporary-goal8)
	(set-goal gl-raid-target-id -1)
	(set-goal gl-attack-target-id -1)
)

(defrule
	(up-compare-goal TSA >= 1)
	(strategic-number sn-target-player-number > 0)
	(up-compare-goal 391 s:!= sn-target-player-number)
	(players-building-count any-enemy > 0)
=>
	(up-modify-sn sn-maximum-town-size g:= gl-target-player-distance); Reset TSA when switching target since we may have way too high TS to fight efficiently against the new opponent
	(up-modify-sn sn-maximum-town-size c:- 10)
	(up-modify-goal 391 s:= sn-target-player-number)
	(up-get-player-color target-player temporary-goal8)
	(up-chat-data-to-player every-ally target-chat g: temporary-goal8)
	(up-chat-data-to-player my-player-number target-chat g: temporary-goal8)
	(set-goal gl-attack-target-id -1)
)

(defrule
	(true)
=>
	(set-goal gl-attack-in-progress 0)
	(up-get-fact food-amount 0 gl-total-food-amount)
	(set-goal gl-deer-distance 35)
	(up-get-fact military-population 0 gl-military-percentage)
	(up-get-fact soldier-count 0 gl-soldier-percentage)
	(up-modify-goal temporary-goal g:= gl-toughest-fought-enemy-military)
	(up-modify-goal temporary-goal c:max 1)
	(up-modify-goal gl-military-percentage g:%/ temporary-goal)
	(up-modify-goal gl-soldier-percentage g:%/ temporary-goal)
	(up-get-focus-fact military-population 0 temporary-goal2)
	(up-get-target-fact military-population 0 temporary-goal3)
)

(defrule
	(player-valid focus-player); If it isn't, let it bug so the bug can be caught
	(up-compare-goal temporary-goal2 g:< temporary-goal3)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
)

(defrule
	(true)
=>
	(up-get-fact food-amount 0 gl-available-food-amount)
	(up-get-fact escrow-amount food temporary-goal)
	(up-modify-goal gl-available-food-amount g:- temporary-goal)
	(up-get-fact wood-amount 0 gl-available-wood-amount)
	(up-get-fact escrow-amount wood temporary-goal)
	(up-modify-goal gl-available-food-amount g:- temporary-goal)
	(up-get-fact gold-amount 0 gl-available-gold-amount)
	(up-get-fact escrow-amount gold temporary-goal)
	(up-modify-goal gl-available-food-amount g:- temporary-goal)
	(up-modify-flag gl-flag c:- meso-civ-focus)
)

(defrule
	(or	(players-civ focus-player aztec)
		(or	(players-civ focus-player mayan)
			(players-civ focus-player incan)))
=>
	(up-modify-flag gl-flag c:+ meso-civ-focus)
)

(defrule
	(or	(and	(goal MILITARY 2)
			(or	(goal gl-strategy grush)
				(or	(goal gl-strategy war-galley-rush)
					(or	(goal gl-strategy fire-ship-rush)
						(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)))))
		(goal TSA 1))
	(not	(goal gl-attack-in-progress 1)); Goal 392
=>
	(set-goal gl-attack-in-progress 1)
)

(defrule
	(up-timer-status 34 == timer-disabled)
	(players-current-age focus-player < imperial-age)
	(strategic-number sn-threat-level == -4)
	(up-compare-goal saved-threat-level != -4)
=>
	(set-goal saved-threat-level -4)
)

(defrule
	(or	(players-current-age focus-player == imperial-age)
		(or	(players-current-age target-player == imperial-age)
			(goal saved-threat-level -6)))
	(up-compare-goal saved-threat-level < -2)
=>
	(set-goal saved-threat-level -2)
)

(defrule
	(goal gl-assisting-ally YES)
=>
	(set-goal gl-assisting-ally RESET)
	(up-modify-sn sn-threat-level g:= saved-threat-level)
)

#load-if-not-defined DEATH-MATCH
(defrule
	(player-valid any-human-enemy)
	(or	(map-type black-forest)
		(or	(map-type oasis)
			(or	(map-type mongolia)
				(building-type-count wall-class > 0))))
	(game-time < 2400)
	(strategic-number sn-allow-resource-spending < 6)
	(players-building-type-count target-player stone-wall-line > 0)
	(or	(up-compare-goal gl-enemy-onager-count > 0)
		(players-building-type-count target-player castle > 0))
=>
	(up-jump-rule 1)
	(set-strategic-number sn-threat-level 2)
)
#end-if

(defrule
	(or	(or	(and	(players-military-population target-player < 40)
				(military-population > 48))
			(or	(and	(players-military-population target-player < 27)
					(military-population > 34))
				(players-military-population target-player < 20)))
		(or	(up-compare-goal threat-time > 8000)
			(or	(up-compare-goal threat-player s:== sn-target-player-number)
				(strategic-number sn-allow-resource-spending > 5))))
=>
	(set-goal gl-safe-to-assist-ally YES)
)

(defrule
	(or	(not	(goal gl-safe-to-assist-ally YES))
		(strategic-number sn-target-player-number <= 0))
=>
	(up-jump-rule 7)
)

(defrule
	(goal gl-safe-to-assist-ally YES)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(up-get-target-fact current-age 0 temporary-goal2)
	(up-modify-goal temporary-goal4 g:= gl-toughest-fought-enemy-military)
	(up-modify-goal temporary-goal4 c:* 3)
	(up-modify-goal temporary-goal4 c:/ 5)
	(up-modify-goal temporary-goal4 c:+ 3)
)

(defrule
	(player-valid focus-player)
	(stance-toward focus-player ally)
	(strategic-number sn-focus-player-number != my-player-number)
	(up-allied-sn focus-player sn-target-player-number s:== sn-target-player-number)
	(up-allied-goal focus-player 392 == 1)
	(nand	(players-current-age target-player == imperial-age)
		(current-age < imperial-age))
	(goal gl-safe-to-assist-ally YES)
	(strategic-number sn-threat-level > -5); -4
=>
	(set-strategic-number sn-threat-level -4); -3
	(set-goal gl-assisting-ally YES)
)

(defrule
	(game-time < 2000)
	(player-valid focus-player)
	(stance-toward focus-player ally)
	(strategic-number sn-focus-player-number != my-player-number)
	(strategic-number sn-target-player-number g:== temporary-goal)
	(up-allied-sn focus-player sn-target-player-number s:== sn-target-player-number)
	(up-allied-goal focus-player 392 == 1)
	(up-allied-goal focus-player gl-identity == Barbarian)
	(up-allied-goal focus-player POSITION == FLANK)
	(players-current-age target-player <= feudal-age)
	(up-compare-const gv-pocket-position == 1)
	(up-timer-status 34 != timer-disabled); Doubling-request
	(goal gl-safe-to-assist-ally YES)
	(goal TSA 1)
=>
	(set-strategic-number sn-threat-level -6)
	(set-goal gl-assisting-ally YES)
)

(defrule
	(or	(game-time > 2400)
		(or	(up-timer-status 7 == timer-disabled)
			(or	(strategic-number sn-percent-attack-soldiers == 0)
				(or	(players-building-type-count target-player castle > 0)
					(or	(up-players-in-game enemy != 1)
						(or	(up-compare-goal gl-enemy-scorpion-count > 3)
							(or	(up-allied-goal focus-player gl-defending-ally == YES)
								(up-allied-sn focus-player sn-percent-attack-soldiers == 0))))))))
=>
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(goal gl-safe-to-assist-ally YES)
	(strategic-number sn-focus-player-number != my-player-number)
	(player-valid focus-player)
	(stance-toward focus-player ally)
	(soldier-count > 4)
	(soldier-count g:> temporary-goal4)
	(current-age g:>= temporary-goal2)
	(players-current-age focus-player g:>= temporary-goal2)
	(players-military-population focus-player g:> temporary-goal4)
	(players-military-population focus-player > 4)
	(up-allied-goal focus-player gl-identity == Barbarian)
	(up-allied-goal focus-player gl-strategy-aggressiveness-level >= LOW)
	(strategic-number sn-threat-level > -5)
=>
	(set-strategic-number sn-threat-level -4)
	(set-goal gl-assisting-ally YES)
)

(defrule
	(up-compare-goal gl-assisting-ally != YES)
	(goal gl-safe-to-assist-ally YES)
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -5)
)

(defrule
	(goal gl-safe-to-assist-ally YES)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

#load-if-not-defined BLACK-FOREST-MAP
#load-if-not-defined OASIS-MAP
#load-if-defined UP-POCKET-POSITION

(defrule
	(or	(goal gl-assisting-ally YES)
		(or	(death-match-game)
			(or	(goal gl-flexible-target-fix 1)
				(and	(up-compare-goal gl-enemy-sling > 0)
					(up-compare-goal gl-enemy-sling <= 8)))))
	(game-time < 2100)
	(up-compare-goal TSA >= 1)
=>
	(up-modify-goal temporary-goal g:= gl-target-player-distance)
	(up-modify-goal temporary-goal c:- 8)
	(up-modify-sn sn-maximum-town-size g:max temporary-goal)
)

#load-if-not-defined DEATH-MATCH
(defrule
	(up-compare-goal TSA < 1)
	(or	(and	(goal gl-retargeting YES)
			(not	(up-allied-goal any-computer-ally gl-attack-in-progress == 1)))
		(and	(timer-triggered 15)
			(goal gl-retargeting to-pocket)))
=>
	(set-goal gl-fixed-target-player NO)
	(set-goal gl-retargeting NO)
	(set-goal gl-flexible-target-fix -1)
	(disable-timer 23)
)

#load-if-not-defined ARCHIPELAGO-MAP
#load-if-not-defined CUSTOM-MAP
(defrule
	(or	(game-time >= 2200)
		(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
			(or	(goal gl-defending-ally YES)
				(or	(up-compare-goal TSA >= 1)
					(or	(up-compare-goal gl-enemy-units-in-town > 4)
						(or	(up-timer-status 7 == timer-running)
							(or	(goal gl-fixed-target-player YES)
								(goal gl-patrol-defence patrol-on))))))))
=>
	(up-jump-rule 4)
)

(defrule
	(or	(strategic-number sn-threat-level > -4)
		(strategic-number sn-percent-attack-soldiers == 0))
	(goal gl-rush-suitability-on-map GOOD)
	(up-allied-goal any-computer-ally gl-attack-in-progress == 1)
=>
	(up-get-player-fact this-any-computer-ally allied-sn sn-target-player-number temporary-goal)
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-get-focus-fact military-population 0 temporary-goal6)
	(up-modify-goal temporary-goal6 c:* 11)
	(up-modify-goal temporary-goal6 c:/ 10)
	(up-modify-goal temporary-goal6 c:+ 2)
	(up-get-focus-fact population 0 temporary-goal3)
	(set-goal temporary-goal4 10000)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)

(defrule
	(or	(strategic-number sn-threat-level > -4)
		(strategic-number sn-percent-attack-soldiers == 0))
	(goal gl-rush-suitability-on-map GOOD)
	(soldier-count > 17)
	(military-population g:> temporary-goal6)
	(up-allied-goal any-computer-ally gl-attack-in-progress == 1)
=>
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-get-focus-fact building-type-count castle temporary-goal5)
	(up-get-fact population 0 temporary-goal4)
	(up-modify-goal temporary-goal4 c:min 100)
	(up-modify-goal temporary-goal4 c:max 50)
	(up-modify-goal temporary-goal3 c:* 5)
	(up-modify-goal temporary-goal3 c:/ 3)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)

(defrule
	(or	(strategic-number sn-threat-level > -4)
		(strategic-number sn-percent-attack-soldiers == 0))
	(goal temporary-goal5 0)
	(goal gl-rush-suitability-on-map GOOD)
	(up-allied-goal any-computer-ally gl-attack-in-progress == 1)
	(goal gl-super-pocket YES); Just join any ally's attack as super pocket
	(military-population g:> temporary-goal6)
	(up-compare-goal temporary-goal3 g:> temporary-goal4); Enough pop to target
=>
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(set-goal gl-fixed-target-player YES)
	(set-goal gl-retargeting YES)
	(enable-timer 23 360)
	(enable-timer 7 0)
	(up-jump-rule 1)
)

(defrule
	(or	(strategic-number sn-threat-level > -4)
		(strategic-number sn-percent-attack-soldiers == 0))
	(goal temporary-goal5 0)
	(goal gl-rush-suitability-on-map GOOD)
	(up-allied-goal any-computer-ally gl-attack-in-progress == 1)
	(up-compare-goal gl-pair-player-military g:> gl-closest-enemy-military)
	(military-population g:> temporary-goal6)
	(up-compare-goal temporary-goal3 g:> temporary-goal4); Enough pop to target
=>
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(set-goal gl-fixed-target-player YES)
	(set-goal gl-retargeting YES)
	(chat-to-player my-player-number "Trying to assist ally by retargeting")
	(enable-timer 23 360)
	(enable-timer 7 0)
)
#end-if
#end-if

#end-if
#end-if
#end-if
#end-if
(defrule
	(or	(death-match-game)
		(and	(goal gl-strategy default)
			(strategic-number sn-allow-resource-spending > 5)))
	(strategic-number sn-target-player-number > 0)
	(up-compare-goal TSA >= 1)
=>
	(up-modify-goal temporary-goal g:= gl-target-player-distance)
	(up-modify-goal temporary-goal c:- 8)
	(up-modify-sn sn-maximum-town-size g:max temporary-goal)
)

(defrule
	(or	(timer-triggered 23)
		(and	(goal gl-fixed-target-player YES);	(taunt-detected my-player-number 177)
			(up-timer-status 23 != timer-running)))
=>
	(acknowledge-taunt every-ally 231)
	(acknowledge-taunt every-ally 232)
	(acknowledge-taunt every-ally 233)
	(acknowledge-taunt every-ally 234)
	(acknowledge-taunt every-ally 235)
	(acknowledge-taunt every-ally 236)
	(acknowledge-taunt every-ally 237)
	(acknowledge-taunt every-ally 238)
	(set-goal gl-fixed-target-player NO)
	(set-goal gl-flexible-target-fix -1)
)

(defrule
	(or	(timer-triggered 23)
		(or	(and	(taunt-detected my-player-number 177)
				(up-timer-status 23 != timer-running))
			(and	(goal gl-fixed-target-player NO)
				(up-timer-status 23 == timer-running))))
=>
	(acknowledge-taunt my-player-number 177)
	(disable-timer 23)
)

#load-if-not-defined DEATH-MATCH
(defrule
	(or	(game-time >= 2370)
		(or	(up-compare-goal gl-map-wood-percentage > 20)
			(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)))
=>
	(up-jump-rule 26)
)

(defrule
	(or	(and	(up-compare-goal POSITION != POCKET)
			(player-valid 5))
		(or	(game-time <= 1200)
			(or	(strategic-number sn-nomad-style-start == 1)
				(or	(up-compare-goal gl-rush-suitability-on-map != GOOD)
					(or	(up-compare-const gv-FFA-like-game == 1)
						(goal gl-strategy sling))))))
=>
	(up-jump-rule 25)
)

(defrule
	(goal gl-fixed-target-player NO)
	(or	(up-compare-goal gl-enemy-sling <= 0)
		(up-compare-goal gl-enemy-sling > 8))
=>
	(up-find-player enemy find-closest temporary-goal8)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 500)
	(up-get-point position-focus gl-point-x)
)

(defrule
	(goal gl-fixed-target-player NO)
	(or	(up-compare-goal gl-enemy-sling <= 0)
		(up-compare-goal gl-enemy-sling > 8))
	(stance-toward focus-player ally)
	(players-building-count focus-player > 0)
	(goal temporary-goal2 0)
	(up-point-distance gl-position-self-x gl-point-x g:> temporary-goal4)
	(strategic-number sn-focus-player-number != my-player-number)
=>
	(up-get-point-distance gl-position-self-x gl-point-x temporary-goal4)
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-modify-goal temporary-goal6 s:= sn-focus-player-number)
)

(defrule
	(goal gl-fixed-target-player NO)
	(or	(up-compare-goal gl-enemy-sling <= 0)
		(up-compare-goal gl-enemy-sling > 8))
	(stance-toward focus-player enemy)
	(players-building-count focus-player > 0)
	(goal temporary-goal2 1)
	(up-point-distance gl-saved-point-x gl-point-x g:< temporary-goal5)
	(strategic-number sn-focus-player-number != my-player-number)
=>
	(up-get-point-distance gl-point-x gl-saved-point-x temporary-goal5)
	(up-modify-goal temporary-goal3 s:= sn-focus-player-number)
)

(defrule
	(goal gl-fixed-target-player NO)
	(or	(up-compare-goal gl-enemy-sling <= 0)
		(up-compare-goal gl-enemy-sling > 8))
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-get-point position-focus gl-point-x)
	(up-jump-rule -3)
)

(defrule
	(goal gl-fixed-target-player NO)
	(or	(up-compare-goal gl-enemy-sling <= 0)
		(up-compare-goal gl-enemy-sling > 8))
	(goal temporary-goal2 0)
	(not	(player-valid focus-player))
=>
	(set-strategic-number sn-focus-player-number 1)
	(up-get-point position-focus gl-point-x)
	(set-goal temporary-goal2 1)
	(up-jump-rule -4)
)

(defrule
	(goal gl-fixed-target-player NO)
	(or	(up-compare-goal gl-enemy-sling <= 0)
		(up-compare-goal gl-enemy-sling > 8))
=>
	(up-modify-sn sn-focus-player-number g:= gl-my-flank1)
	(up-get-focus-fact allied-goal gl-attack-in-progress gl-local-total)
	(set-strategic-number sn-focus-player-number 1)
	(up-get-focus-fact military-population 0 temporary-goal7)
	(up-modify-goal temporary-goal7 c:* 2)
	(up-modify-goal temporary-goal7 c:max 8)
	(up-get-focus-fact population 0 gl-remote-last)
	(up-get-fact population 0 gl-remote-total)
	(up-modify-goal gl-remote-total c:min 100)
	(up-modify-goal gl-remote-last c:* 5)
	(up-modify-goal gl-remote-last c:/ 3)
)

(defrule
	(or	(strategic-number sn-focus-player-number g:== temporary-goal3)
		(or	(strategic-number sn-focus-player-number g:== temporary-goal8)
			(or	(game-time >= 2000)
				(or	(goal gl-fixed-target-player YES)
					(up-compare-goal threat-time <= 15000)))))
=>
	(up-jump-rule 2)
)

(defrule
	(players-building-type-count focus-player watch-tower < 4)
	(players-building-type-count focus-player castle < 1)
	(players-building-type-count focus-player archery-range == 0)
	(players-current-age focus-player == feudal-age)
	(players-military-population focus-player <= 1)
	(goal gl-enemy-sling 10)
	(players-building-count focus-player > 0)
	(stance-toward focus-player enemy)
	(up-timer-status 7 != timer-disabled)
	(soldier-count >= 6)
	(players-population focus-player >= 30)
=>
	(up-modify-goal gl-enemy-sling s:= sn-focus-player-number)
	(set-goal gl-sling-counter-type anti-sling)
)

(defrule
	(players-building-type-count focus-player watch-tower < 4)
	(players-building-type-count focus-player castle < 1)
	(players-current-age focus-player == castle-age)
	(players-military-population focus-player <= 5)
	(goal gl-enemy-sling 10)
	(players-building-count focus-player > 0)
	(stance-toward focus-player enemy)
	(up-timer-status 7 != timer-disabled)
	(soldier-count >= 11)
	(players-population focus-player >= 45)
	(or	(players-population focus-player >= 60)
		(game-time < 1560))
=>
	(up-modify-goal gl-enemy-sling s:= sn-focus-player-number)
	(set-goal gl-sling-counter-type anti-boom)
)

(defrule
	(goal gl-enemy-sling 10)
	(goal gl-fixed-target-player NO)
	(strategic-number sn-focus-player-number < 8)
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -4)
)

(defrule
	(goal gl-fixed-target-player NO)
	(or	(up-compare-goal gl-enemy-sling <= 0)
		(up-compare-goal gl-enemy-sling > 8))
=>
	(up-modify-sn sn-focus-player-number g:= gl-my-flank1)
	(up-get-focus-fact allied-goal gl-identity temporary-goal2); g7 used above
	(up-get-focus-fact military-population 0 temporary-goal3)
	(up-get-focus-fact allied-sn sn-target-player-number temporary-goal6)
	(up-modify-sn sn-focus-player-number g:= gl-my-flank2)
	(up-get-focus-fact allied-goal gl-identity temporary-goal4)
	(up-get-focus-fact military-population 0 temporary-goal5)
	(up-modify-goal temporary-goal3 g:max temporary-goal5)
	(up-modify-goal temporary-goal3 c:/ 2)
	(up-modify-goal temporary-goal3 c:+ 2)
	(up-get-focus-fact allied-sn sn-target-player-number temporary-goal5)
	(set-strategic-number sn-focus-player-number 1)
)

(defrule
	(or	(players-building-type-count focus-player watch-tower > 1)
		(or	(players-building-type-count focus-player castle > 0)
			(or	(game-time >= 2100)
				(or	(goal gl-defending-ally YES)
					(or	(goal gl-attacking-with-ally YES)
						(or	(goal TSA 1)
							(or	(goal gl-local-total 1); Flank is attacking
								(goal gl-fixed-target-player YES))))))))
=>
	(up-jump-rule 3)
)

(defrule
;	(or	(and	(or	(and	(goal temporary-goal2 Barbarian); We can attempt to double enemy flank instead
;					(up-compare-goal temporary-goal6 s:== sn-target-player-number))
;				(and	(goal temporary-goal4 Barbarian)
;					(up-compare-goal temporary-goal5 s:== sn-target-player-number)))
;			(and	(players-military-population target-player g:< temporary-goal3); Flank has almost enough army to attempt doubling
;				(and	(players-building-type-count target-player castle == 0)
;					(up-compare-goal gl-enemy-tower-count <= 1))))
		(up-compare-goal threat-time <= 10000);)
=>
	(up-jump-rule 2)
)

(defrule
	(up-research-status c: ri-chain-barding >= research-pending)
=>
	(up-modify-goal temporary-goal7 c:* 17)
	(up-modify-goal temporary-goal7 c:/ 20)
)

(defrule
	(players-military-population focus-player < 30)
	(players-building-type-count focus-player stone-wall-line < 5)
	(players-current-age focus-player <= castle-age)
	(or	(goal gl-strategy krush)
		(goal gl-strategy knight-rush))
	(players-building-count focus-player > 0)
	(stance-toward focus-player enemy)
	(unit-type-count knight-line g:> temporary-goal7); More knights than 2x (1.7x if chain barding) knights than enemy has army
	(up-compare-goal gl-remote-last g:> gl-remote-total); Target has >60% of our pop or >60 pop
=>
	(up-modify-sn sn-target-player-number s:= sn-focus-player-number)
	(set-goal gl-fixed-target-player YES)
	(enable-timer 7 0)
	(enable-timer 23 360)
	(set-goal gl-flexible-target-fix 1)
;	(up-chat-data-to-player my-player-number "Try to raid player: %d" s: sn-focus-player-number)
	(enable-timer 15 5)
)

(defrule
	(goal gl-fixed-target-player NO)
	(or	(up-compare-goal gl-enemy-sling <= 0)
		(up-compare-goal gl-enemy-sling > 8))
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-get-focus-fact military-population 0 temporary-goal7)
	(up-modify-goal temporary-goal7 c:* 2)
	(up-modify-goal temporary-goal7 c:max 8)
	(up-get-focus-fact population 0 gl-remote-last)
	(up-get-fact population 0 gl-remote-total)
	(up-modify-goal gl-remote-total c:min 100)
	(up-modify-goal gl-remote-last c:* 5)
	(up-modify-goal gl-remote-last c:/ 3)
	(up-jump-rule -5)
)

(defrule
	(goal gl-fixed-target-player NO)
	(or	(up-compare-goal gl-enemy-sling <= 0)
		(up-compare-goal gl-enemy-sling > 8))
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(up-compare-goal gl-enemy-sling > 0)
	(up-compare-goal gl-enemy-sling <= 8)
=>
	(enable-timer 23 660)
	(up-modify-sn sn-target-player-number g:= gl-enemy-sling)
	(up-modify-sn sn-focus-player-number g:= gl-enemy-sling)
	(set-goal gl-fixed-target-player YES)
	(set-goal gl-assisting-ally YES)
	(up-chat-data-to-player every-ally sling-found-chat1 g: gl-enemy-sling)
	(up-chat-data-to-player my-player-number sling-found-chat1 g: gl-enemy-sling)
	(enable-timer 15 5)
	(disable-self)
)

(defrule
	(goal gl-flexible-target-fix 1)
=>
	(up-get-focus-fact military-population 0 temporary-goal7)
	(up-modify-goal temporary-goal7 c:* 2)
	(up-modify-goal temporary-goal7 c:max 8)
)

(defrule
	(timer-triggered 15)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-modify-goal temporary-goal2 g:= gl-local-total)
	(up-full-reset-search)
	(up-find-remote c: castle c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-get-fact military-population 0 temporary-goal3)
	(up-modify-goal temporary-goal3 c:* 3)
	(up-modify-goal temporary-goal3 c:/ 5)
)

(defrule
	(goal gl-flexible-target-fix 1)
	(timer-triggered 15); Allow tower count to update
	(or	(up-compare-goal gl-enemy-tower-count > 1)
		(or	(goal gl-remote-total 1)
			(or	(players-population target-player < 20)
				(and	(goal TSA 0)
					(or	(soldier-count g:< temporary-goal7); Enemy has more than 1/2 of our army
						(goal temporary-goal2 1)))))); Flank is attacking
=>
	(set-goal gl-fixed-target-player NO)
	(set-goal gl-flexible-target-fix -1)
	(enable-timer 23 0)
)

(defrule
	(goal gl-sling-counter-type anti-sling)
	(up-timer-status 23 == timer-running)
	(timer-triggered 15)
	(up-compare-goal gl-enemy-sling > 0)
	(up-compare-goal gl-enemy-sling <= 8)
	(or	(players-current-age target-player > castle-age)
		(or	(up-compare-goal gl-enemy-tower-count > 3)
			(or	(goal gl-remote-total 1)
				(or	(up-compare-goal temporary-goal3 g:< gl-toughest-fought-enemy-military)
					(players-population target-player <= 13)))))
=>
	(enable-timer 23 0)
	(set-goal gl-enemy-sling 0)
)

(defrule
	(goal gl-sling-counter-type anti-boom)
	(up-timer-status 23 == timer-running)
	(timer-triggered 15)
	(up-compare-goal gl-enemy-sling > 0)
	(up-compare-goal gl-enemy-sling <= 8)
	;(or	(players-current-age target-player > castle-age); Actually just do it, the plan is to hit the boomer anyway
		(or	(up-compare-goal gl-enemy-tower-count > 3)
			(or	(goal gl-remote-total 1)
				(or	(up-compare-goal temporary-goal3 g:< gl-toughest-fought-enemy-military)
					(players-population target-player <= 35))));)
=>
	(enable-timer 23 0)
	(set-goal gl-enemy-sling 0)
)

(defrule
	(up-timer-status 23 == timer-running)
	(up-compare-goal gl-enemy-sling > 0)
	(up-compare-goal gl-enemy-sling <= 8)
	(or	(and	(soldier-count <= 5)
			(goal gl-sling-counter-type anti-sling))
		(and	(soldier-count <= 9)
			(goal gl-sling-counter-type anti-boom)))
=>
	(enable-timer 23 0)
	(set-goal gl-enemy-sling 0)
)


(defrule
	(goal gl-fixed-target-player NO)
	(up-compare-goal gl-enemy-sling > 0)
	(up-compare-goal gl-enemy-sling <= 8)
=>
	(set-goal gl-enemy-sling 0)
)
#end-if

#load-if-defined UP-HUMAN-IN-GAME
(defrule
	(nor	(taunt-detected any-human-ally 231)
		(taunt-detected any-human-ally 232))
	(nor	(taunt-detected any-human-ally 233)
		(taunt-detected any-human-ally 234))
	(nor	(taunt-detected any-human-ally 235)
		(taunt-detected any-human-ally 236))
	(nor	(taunt-detected any-human-ally 237)
		(taunt-detected any-human-ally 238))
=>
	(up-jump-rule 8)
)

(defrule
	(taunt-detected any-human-ally 231)
	(nor	(stance-toward 1 ally)
		(player-number 1))
	(players-building-count 1 > 0)
=>
	(acknowledge-taunt every-ally 231)
	(enable-timer 23 600)
	(set-strategic-number sn-target-player-number 1)
	(set-strategic-number sn-focus-player-number 1)
	(set-strategic-number sn-safe-town-size 45)
	(set-goal gl-fixed-target-player YES)
	(set-goal gl-flexible-target-fix -1)
	(chat-to-player my-player-number chat-177)
	(up-chat-data-to-player every-ally target-player-chat s: sn-target-player-number)
)

(defrule
	(taunt-detected any-human-ally 232)
	(nor	(stance-toward 2 ally)
		(player-number 2))
	(players-building-count 2 > 0)
=>
	(acknowledge-taunt every-ally 232)
	(enable-timer 23 600)
	(set-strategic-number sn-target-player-number 2)
	(set-strategic-number sn-focus-player-number 2)
	(set-strategic-number sn-safe-town-size 45)
	(set-goal gl-fixed-target-player YES)
	(set-goal gl-flexible-target-fix -1)
	(chat-to-player my-player-number chat-177)
	(up-chat-data-to-player every-ally target-player-chat s: sn-target-player-number)
)

(defrule
	(taunt-detected any-human-ally 233)
	(nor	(stance-toward 3 ally)
		(player-number 3))
	(players-building-count 3 > 0)
=>
	(acknowledge-taunt every-ally 233)
	(enable-timer 23 600)
	(set-strategic-number sn-target-player-number 3)
	(set-strategic-number sn-focus-player-number 3)
	(set-strategic-number sn-safe-town-size 45)
	(set-goal gl-fixed-target-player YES)
	(set-goal gl-flexible-target-fix -1)
	(chat-to-player my-player-number chat-177)
	(up-chat-data-to-player every-ally target-player-chat s: sn-target-player-number)
)

(defrule
	(taunt-detected any-human-ally 234)
	(nor	(stance-toward 4 ally)
		(player-number 4))
	(players-building-count 4 > 0)
=>
	(acknowledge-taunt every-ally 234)
	(enable-timer 23 600)
	(set-strategic-number sn-target-player-number 4)
	(set-strategic-number sn-focus-player-number 4)
	(set-strategic-number sn-safe-town-size 45)
	(set-goal gl-fixed-target-player YES)
	(set-goal gl-flexible-target-fix -1)
	(chat-to-player my-player-number chat-177)
	(up-chat-data-to-player every-ally target-player-chat s: sn-target-player-number)
)

(defrule
	(taunt-detected any-human-ally 235)
	(nor	(stance-toward 5 ally)
		(player-number 5))
	(players-building-count 5 > 0)
=>
	(acknowledge-taunt every-ally 235)
	(enable-timer 23 600)
	(set-strategic-number sn-target-player-number 5)
	(set-strategic-number sn-focus-player-number 5)
	(set-strategic-number sn-safe-town-size 45)
	(set-goal gl-fixed-target-player YES)
	(set-goal gl-flexible-target-fix -1)
	(chat-to-player my-player-number chat-177)
	(up-chat-data-to-player every-ally target-player-chat s: sn-target-player-number)
)

(defrule
	(taunt-detected any-human-ally 236)
	(nor	(stance-toward 6 ally)
		(player-number 6))
	(players-building-count 6 > 0)
=>
	(acknowledge-taunt every-ally 236)
	(enable-timer 23 600)
	(set-strategic-number sn-target-player-number 6)
	(set-strategic-number sn-focus-player-number 6)
	(set-strategic-number sn-safe-town-size 45)
	(set-goal gl-fixed-target-player YES)
	(set-goal gl-flexible-target-fix -1)
	(chat-to-player my-player-number chat-177)
	(up-chat-data-to-player every-ally target-player-chat s: sn-target-player-number)
)

(defrule
	(taunt-detected any-human-ally 237)
	(nor	(stance-toward 7 ally)
		(player-number 7))
	(players-building-count 7 > 0)
=>
	(acknowledge-taunt every-ally 237)
	(enable-timer 23 600)
	(set-strategic-number sn-target-player-number 7)
	(set-strategic-number sn-focus-player-number 7)
	(set-strategic-number sn-safe-town-size 45)
	(set-goal gl-fixed-target-player YES)
	(set-goal gl-flexible-target-fix -1)
	(chat-to-player my-player-number chat-177)
	(up-chat-data-to-player every-ally target-player-chat s: sn-target-player-number)
)

(defrule
	(taunt-detected any-human-ally 238)
	(nor	(stance-toward 8 ally)
		(player-number 8))
	(players-building-count 8 > 0)
=>
	(acknowledge-taunt every-ally 238)
	(enable-timer 23 600)
	(set-strategic-number sn-target-player-number 8)
	(set-strategic-number sn-focus-player-number 8)
	(set-strategic-number sn-safe-town-size 45)
	(set-goal gl-fixed-target-player YES)
	(set-goal gl-flexible-target-fix -1)
	(chat-to-player my-player-number chat-177)
	(up-chat-data-to-player every-ally target-player-chat s: sn-target-player-number)
)
#end-if

(defrule
	(goal gl-assisting-ally RESET)
=>
	(up-modify-sn sn-threat-level g:= saved-threat-level)
	(set-goal gl-assisting-ally NO)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal g:= gl-enemy-heavy-cavalry-count)
	(up-modify-goal temporary-goal g:- gl-enemy-camelry-count)
	(up-modify-goal temporary-goal2 g:= gl-enemy-cavalry-count)
	(up-modify-goal temporary-goal2 g:- gl-enemy-camelry-count)
	(up-modify-goal temporary-goal3 g:= temporary-goal2)
	(up-modify-goal temporary-goal3 g:+ gl-enemy-mameluke-count)
	(up-modify-goal temporary-goal4 g:= temporary-goal)
	(up-modify-goal temporary-goal4 g:+ gl-enemy-mameluke-count)
	(up-get-fact unit-type-count-total archer-line temporary-goal5)
	(up-get-fact unit-type-count-total cavalry-archer-line temporary-goal6)
	(up-modify-goal temporary-goal5 g:+ temporary-goal6)
)

#load-if-defined BRITON-CIV
(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(up-compare-goal gl-military-percentage > 70)
		(population >= almost-full-pop))
	(or	(up-compare-goal gl-gold-income-per-minute > 500)
		(up-compare-goal gl-military-percentage > 85))
	(up-compare-const gv-players-in-team >= 2)
	(up-compare-goal temporary-goal < 4)
	(up-compare-goal temporary-goal2 < 10)
	(up-research-status c: last-spearman-up < research-pending)
	(up-compare-goal gl-gold-income-per-minute > 350)
=>
	(set-goal gl-enable-pikemen 0)
)
#end-if
#load-if-defined PERSIAN-CIV
(defrule
	(or	(and	(up-compare-goal gl-military-percentage > 50)
			(or	(up-compare-goal gl-gold-income-per-minute > 500)
				(up-compare-goal gl-military-percentage > 75)))
		(population >= almost-full-pop))
	(building-type-count castle > 2)
	(up-compare-const gv-players-in-team >= 2)
	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(up-compare-goal gl-gold-income-per-minute > 450)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(or	(and	(up-compare-goal gl-military-percentage > 50)
			(or	(up-compare-goal gl-gold-income-per-minute > 500)
				(up-compare-goal gl-military-percentage > 75)))
		(population >= almost-full-pop))
	(building-type-count castle > 2)
	(up-compare-const gv-players-in-team >= 2)
	(up-research-status c: my-unique-unit-upgrade >= research-pending)
=>
	(set-goal gl-enable-camels 0)
)
#end-if

(defrule
	(goal POSITION POCKET)
	(or	(game-time < 2700)
		(up-compare-goal gl-trade-unit-count-total > 20))
	(up-compare-const gv-imperial-pikemen == 0)
	(or	(and	(building-type-count castle > 0)
			(up-compare-goal gl-enemy-units-in-town < 10))
		(or	(up-compare-goal gl-enemy-units-in-town < 5)
			(up-compare-goal TSA >= 1)))
	(up-compare-const gv-players-in-team >= 3)
	(up-compare-goal gl-gold-income-per-minute > 350)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(or	(goal POSITION POCKET)
		(strategic-number sn-allow-resource-spending > 5))
	(or	(unit-type-count-total camel-line > 8)
		(up-compare-const gv-imperial-pikemen == 0))
	(or	(up-compare-goal gl-military-percentage > 75)
		(or	(population >= almost-full-pop)
			(unit-type-count-total camel-line > 12)))
	(up-research-status c: last-spearman-up < research-pending)
	(up-compare-const gv-players-in-team >= 3)
	(up-compare-goal gl-gold-income-per-minute > 300)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(research-completed ri-heavy-camel)
	(population-cap <= 250)
	(or	(up-compare-goal gl-enemy-camelry-count < 7)
		(up-compare-goal gl-advanced-cavalry != heavy-knights))
	(up-compare-goal gl-trade-unit-count-total > 30)
	(up-compare-goal gl-population > 175)
	(up-compare-const gv-players-in-team >= 2)
	(up-compare-goal gl-gold-income-per-minute > 400)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(current-age == imperial-age)
=>
	(up-jump-rule 6)
)

(defrule
	(goal gl-strategy krush)
	(or	(and	(up-compare-goal gl-military-percentage > 130)
			(up-compare-goal gl-military-percentage3 > 130))
		(or	(and	(up-compare-goal gl-enemy-cavalry-count < 8)
				(unit-type-count-total knight-line > 10))
			(and	(up-compare-goal gl-enemy-cavalry-count < 11)
				(unit-type-count-total knight-line > 16))))
=>
	(set-goal gl-enable-camels 0)
)

(defrule
	(goal gl-current-age gv-feudal)
	(up-compare-goal gl-military-percentage > 85)
	(up-compare-goal temporary-goal5 > 20)
	(up-compare-goal gl-enemy-cavalry-count < 9)
	(up-compare-goal gl-gold-income-per-minute > 100)
	(up-compare-goal gl-pair-player-military > 8)
	(up-compare-const gv-players-in-team >= 3)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-military-percentage > 85)
	(up-compare-goal temporary-goal5 > 20)
	(or	(up-compare-goal gl-military-percentage > 125)
		(or	(players-current-age focus-player <= feudal-age)
			(up-compare-goal temporary-goal5 > 30)))
	(or	(up-compare-goal gl-enemy-cavalry-count < 9)
		(up-research-status c: relative-crossbow-upgrade >= research-pending))
	(players-current-age focus-player < imperial-age)
	(up-compare-goal gl-enemy-cavalry-count < 14)
	(up-compare-goal gl-gold-income-per-minute > 100)
	(game-time < 2100)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-military-percentage > 85)
	(up-compare-goal temporary-goal5 > 15)
	(or	(up-compare-goal gl-military-percentage > 130)
		(or	(players-current-age focus-player <= feudal-age)
			(and	(up-compare-goal gl-skirmisher-count-total < 7)
				(up-compare-goal gl-military-percentage > 115))))
	(players-current-age focus-player < imperial-age)
	(up-compare-goal gl-gold-income-per-minute > 150)
	(game-time < 2160)
	(up-compare-const gv-players-in-team >= 3)
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(goal gl-current-age gv-castle)
	(population > 70)
	(or	(and	(research-completed ri-crossbow)
			(unit-type-count-total archer-line > 20))
		(unit-type-count-total cavalry-archer-line > 17))
	(up-compare-goal gl-military-percentage2 > 150)
	(players-current-age focus-player <= castle-age)
	(up-compare-goal gl-enemy-cavalry-count < 11)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(goal gl-current-age gv-castle)
	(players-current-age focus-player <= castle-age)
	(up-research-status c: first-main-ranged-unit-upgrade >= research-pending)
	(unit-type-count-total main-ranged-unit > 23)
	(or	(up-compare-goal gl-enemy-cavalry-count < 8)
		(unit-type-count-total main-ranged-unit > 30))
	(up-compare-goal gl-enemy-cavalry-count < 13)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(goal gl-strategy krush)
	(or	(up-compare-goal gl-enemy-camelry-count < 7)
		(up-compare-goal gl-military-percentage2 > 135))
	(or	(up-compare-goal gl-military-percentage2 > 120)
		(and	(up-compare-goal gl-military-percentage2 > 90)
			(current-age-time < 600)))
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(population > 160)
	(up-compare-goal gl-enemy-cavalry-count < 13)
	(up-compare-goal gl-enemy-cataphract-count < 13)
	(up-research-status c: last-spearman-up < research-pending)
	(or	(current-age == imperial-age)
		(and	(up-research-status c: ri-pikeman < research-pending)
			(up-compare-goal gl-enemy-cavalry-count < 9)))
	(up-compare-goal gl-gold-income-per-minute > 200)
=>
	(set-goal gl-enable-pikemen 0)
)

#load-if-not-defined GOTHIC-CIV
#load-if-not-defined JAPANESE-CIV
(defrule
	(population > 140)
	(unit-type-count-total knight-line > 17)
	(players-unit-type-count every-enemy paladin < 10)
	(up-compare-goal gl-enemy-cavalry-count < 16)
	(up-research-status c: last-spearman-up < research-pending)
	(player-in-game any-ally)
	(or	(and	(current-age == imperial-age)
			(up-research-status c: cavalier > research-pending))
		(and	(up-research-status c: ri-pikeman < research-pending)
			(up-compare-goal gl-enemy-cavalry-count < 16)))
	(up-compare-goal gl-gold-income-per-minute > 400)
=>
	(set-goal gl-enable-pikemen 0)
)
#end-if
#end-if

#load-if-not-defined HUN-CIV
#load-if-not-defined PERSIAN-CIV
(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal temporary-goal3 < 3)
	(up-compare-goal gl-advanced-trash != YES)
	(nand	(or	(civ-selected korean)
			(civ-selected spanish))
		(up-compare-goal CASTLE != 0))
	(goal gl-advanced-cavalry 0)
=>
	(set-goal gl-enable-pikemen 0)
)
#end-if
#end-if

(defrule
	(or	(and	(up-compare-goal gl-enemy-spearman-count < 15)
			(up-compare-goal gl-soldier-percentage > 70))
		(unit-type-count-total camel-line > 9))
	(building-type-count-total stable > 1)
	(unit-available camel)
	(up-compare-goal gl-soldier-percentage > 60)
	(up-research-status c: ri-pikeman < research-pending)
	(up-compare-const gv-players-in-team >= 2)
	(or	(up-compare-goal gl-gold-income-per-minute > 300)
		(gold-amount >= 60))
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(up-compare-goal gl-military-percentage > 50)
	(or	(up-compare-goal gl-military-percentage > 80)
		(up-compare-goal gl-gold-income-per-minute > 500))
	(or	(and	(up-compare-goal gl-military-percentage > 90)
			(up-compare-goal gl-gold-income-per-minute > 600))
		(up-compare-const gv-players-in-team >= 2))
	(up-research-status c: ri-elite-eagle-warrior >= research-pending)
	(up-compare-goal temporary-goal4 < 8)
	(up-compare-goal gl-enemy-cataphract-count < 8)
	(up-research-status c: last-spearman-up < research-pending)
	(up-compare-goal gl-gold-income-per-minute > 300)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(or	(and	(up-compare-goal gl-military-percentage > 125)
			(and	(goal SLING 0)
				(and	(goal gl-current-age gv-castle)
					(goal gl-eew-strategy-type boom))))
		(and	(up-compare-const gv-imperial-pikemen == 0)
			(and	(strategic-number sn-allow-resource-spending > 5)
				(and	(up-compare-goal gl-trade-unit-count-total > 30)
					(up-compare-goal gl-gold-income-per-minute > 600)))))
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(or	(nor	(goal gl-strategy-class basic-class)
			(goal gl-eew-strategy-type boom))
		(and	(unit-available camel)
			(and	(goal gl-strategy krush)
				(and	(goal POSITION POCKET)
					(and	(up-research-status c: ri-pikeman < research-pending)
						(up-compare-goal gl-gold-income-per-minute > 80))))))
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(goal gl-current-age gv-imperial)
	(current-age == imperial-age)
	(goal gl-advanced-cavalry heavy-knights)
	(up-compare-goal gl-gold-income-per-minute > 400)
	(up-research-status c: ri-cavalier >= research-pending)
	(up-research-status c: last-spearman-up < research-pending)
	(up-compare-goal gl-military-percentage > 65)
	(players-current-age focus-player <= castle-age)
	(players-current-age target-player <= castle-age)
	(up-compare-const gv-players-in-team >= 2)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(goal gl-advanced-cavalry heavy-knights)
	(up-compare-goal gl-gold-income-per-minute > 600)
	(up-compare-goal gl-pair-player-military > 30)
	(or	(and	(unit-type-count-total knight-unit > 20)
			(up-research-status c: heavy-cavalry-upgrade >= research-pending))
		(and	(up-compare-goal gl-battle-elephant-count-total > 15)
			(up-research-status c: ri-elite-battle-elephant >= research-pending)))
	(up-research-status c: last-spearman-up < research-pending)
	(up-compare-goal gl-military-percentage > 65)
	(up-compare-const gv-players-in-team >= 2)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(population >= pop-to-stop-full-pop-attack)
	(goal gl-advanced-cavalry heavy-cavalry-strategy)
	(up-compare-goal gl-gold-income-per-minute > 600)
	(or	(up-compare-goal gl-gold-income-per-minute > 750)
		(gold-amount > 1000))
	(up-compare-goal gl-pair-player-military > 30)
	(up-compare-goal gl-trade-unit-count-total > 25)
	(or	(up-compare-goal gl-enemy-camelry-count < 15)
		(up-compare-goal gl-trade-unit-count-total > 35)); We should afford better anti-camelry anyway
	(research-completed heavy-cavalry-upgrade)
	(up-compare-goal gl-military-percentage > 65)
	(up-compare-const gv-players-in-team >= 2)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(or	(unit-type-count-total spearman-line > 5)
		(or	(up-compare-goal gl-enemy-heavy-cavalry-count > 17)
			(and	(up-research-status c: heavy-cavalry-upgrade < research-pending)
				(or	(players-unit-type-count focus-player paladin > 5)
					(players-unit-type-count target-player paladin > 5)))))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(goal gl-advanced-cavalry heavy-knights)
	(up-compare-goal gl-gold-income-per-minute > 400)
	(up-compare-goal gl-pair-player-military > 30)
	(unit-type-count-total knight-line > 20)
	(or	(and	(players-current-age focus-player <= castle-age)
			(players-current-age target-player <= castle-age))
		(and	(up-research-status c: ri-cavalier >= research-pending)
			(up-compare-goal gl-enemy-camelry-count < 10)))
	(up-research-status c: last-spearman-up < research-pending)
	(up-compare-goal gl-military-percentage2 > 65)
	(up-compare-const gv-players-in-team >= 2)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(players-current-age focus-player == imperial-age)
	(up-research-status c: heavy-cavalry-upgrade < research-pending)
	(or	(up-research-status c: ri-cavalier < research-pending)
		(up-compare-goal gl-military-percentage < 100))
=>
	(up-jump-rule 1)
)

(defrule
	(goal POSITION POCKET)
	(or	(goal gl-advanced-cavalry heavy-cavalry-strategy)
		(goal gl-strategy krush))
	(up-compare-goal gl-gold-income-per-minute > 150)
	(or	(up-compare-goal gl-gold-income-per-minute > 300)
		(up-compare-goal gl-military-percentage2 >= 100))
	(up-research-status c: last-spearman-up < research-pending)
	(up-compare-goal gl-military-percentage2 > 75)
	(up-compare-goal gl-enemy-camelry-count < 7)
	(up-compare-goal gl-enemy-heavy-cavalry-count < 13)
	(unit-type-count-total heavy-cavalry-unit > 17)
	(unit-type-count-total spearman-line < 6)
	(up-compare-const gv-players-in-team >= 2)
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(or	(up-compare-const gv-players-in-team >= 2)
		(up-research-status c: last-spearman-up < research-pending))
	(up-compare-const gv-extra-piks-vs-catas == 0)
	(up-compare-goal gl-enemy-cataphract-count > 2)
	(unit-type-count-total elite-cataphract < 10)
	(up-compare-goal gl-enemy-heavy-cavalry-count < 5)
	(or	(up-compare-goal gl-gold-income-per-minute > 350)
		(or	(unit-type-count archer-line > 20)
			(and	(up-compare-const dm-UU-type == archer-type)
				(up-compare-goal gl-my-UU-count-total > 15))))
=>
	(set-goal gl-enable-pikemen 0)
)

(defrule
	(goal gl-strategy default)
	(up-compare-goal gl-trade-unit-count-total > 19)
	(or	(and	(or	(players-unit-type-count focus-player mangudai-line > 10)
				(players-unit-type-count target-player mangudai-line > 10))
			(up-compare-const anti-mangudai-camels == 1))
		(and	(or	(players-unit-type-count focus-player war-wagon-line > 10)
				(players-unit-type-count target-player war-wagon-line > 10))
			(up-compare-const farm-time-substraction == 0)))
=>
	(up-jump-rule 4)
)

(defrule
	(or	(up-compare-goal gl-military-percentage > 65)
		(population >= almost-full-pop))
	(or	(and	(or	(unit-type-count-total spearman-line > 3)
				(up-research-status c: ri-pikeman >= research-pending))
			(goal gl-enable-pikemen 2))
		(or	(goal gl-advanced-cavalry heavy-knights)
			(or	(goal gl-strategy krush)
				(unit-type-count-total knight-line > 4))))
	(up-compare-goal gl-enemy-heavy-cavalry-count < 2)
=>
	(set-goal gl-enable-camels 0)
)

(defrule
	(or	(up-compare-goal gl-military-percentage > 65)
		(population >= almost-full-pop))
	(up-compare-goal CASTLE != 0)
	(or	(civ-selected byzantine)
		(or	(civ-selected persian)
			(civ-selected saracen)))
	(up-compare-goal gl-enemy-cavalry-count > 3)
	(up-compare-goal gl-enemy-heavy-cavalry-count < 2)
=>
	(set-goal gl-enable-camels 0)
)

(defrule
	(nand	(or	(goal gl-advanced-cavalry heavy-knights)
			(goal gl-strategy krush))
		(and	(up-research-status c: ri-pikeman < research-pending)
			(and	(up-research-status c: ri-crossbow < research-pending)
				(goal gl-current-age gv-castle))))
	(up-compare-goal gl-enemy-cavalry-count > 3)
	(up-compare-goal temporary-goal3 < 3); All cavalry we're facing are camels, so no camels are needed
=>
	(set-goal gl-enable-camels 0)
)

(defrule
	(goal gl-advanced-cavalry heavy-knights)
	(or	(population >= almost-full-pop)
		(up-compare-goal gl-military-percentage > 70))
	(up-compare-goal gl-enemy-elephant-count < 5)
	(or	(up-compare-goal gl-military-percentage > 100)
		(or	(up-compare-goal gl-enemy-archer-count > 15)
			(or	(up-compare-goal gl-enemy-scorpion-count > 7)
				(up-compare-goal gl-enemy-gunpowder-count > 15))))
	(up-compare-goal gl-trade-unit-count-total > 30)
	(up-research-status c: ri-paladin >= research-pending)
=>
	(set-goal gl-enable-camels 0)
)

#load-if-defined UP-2-PLAYER-GAME
(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(up-compare-goal temporary-goal < 8)
	(unit-type-count-total camel-line < 7)
	(up-research-status c: ri-heavy-camel < research-pending)
=>
	(set-goal gl-enable-camels 0)
)
#end-if

#load-if-defined KOREAN-CIV
(defrule
	(goal POSITION POCKET)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(up-compare-const gv-maximum-age == imperial-age)
	(building-type-count castle > 0)
	(up-compare-goal gl-gold-income-per-minute > 400)
	(or	(up-compare-goal gl-military-percentage > 65)
		(population >= almost-full-pop))
	(players-current-age focus-player <= castle-age)
	(players-current-age target-player <= castle-age)
	(up-compare-const gv-players-in-team >= 3)
=>
	(set-goal gl-enable-skirmishers 0)
)
#end-if

#load-if-defined MALIAN-CIV
(defrule
	(current-age >= castle-age)
	(research-completed ri-scale-mail)
	(goal gl-advanced-infantry heavy-swordsmen)
	(up-compare-goal gl-military-percentage > 35)
	(players-unit-type-count focus-player slinger < 7)
	(up-compare-goal gl-enemy-gunpowder-count < 8)
	(up-compare-goal gl-enemy-archer-count < 8)
=>
	(set-goal gl-enable-skirmishers 0)
)
#end-if

#load-if-defined UP-2-PLAYER-GAME
(defrule
	(civ-selected aztec)
	(players-unit-type-count focus-player elite-plumed-archer > 5)
=>
	(up-jump-rule 6)
)
#end-if

(defrule
	(or	(research-completed ri-anarchy)
		(or	(unit-type-count elite-eagle-warrior > 8)
			(and	(civ-selected gothic)
				(building-type-count castle > 0))))
	(or	(up-compare-goal gl-trade-unit-count-total > 10)
		(unit-type-count villager-gold > 10))
	(players-unit-type-count focus-player slinger < 7)
	(up-compare-goal gl-enemy-gunpowder-count < 8)
=>
	(set-goal gl-enable-skirmishers 1)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(up-compare-goal gl-eagle-warrior-count > 7)
	(research-completed ri-eagle-warrior)
	(up-compare-goal gl-enemy-archer-count < 30)
	(or	(up-compare-goal gl-enemy-archer-count < 24)
		(research-available ri-elite-skirmisher))
	(up-compare-goal gl-military-percentage > 60)
	(or	(up-compare-goal gl-trade-unit-count-total > 10)
		(unit-type-count villager-gold > 10))
	(players-unit-type-count focus-player slinger < 7)
	(up-compare-goal gl-enemy-gunpowder-count < 8)
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(or	(research-completed ri-anarchy)
		(or	(unit-type-count elite-eagle-warrior > 8)
			(and	(civ-selected gothic)
				(building-type-count castle > 0))))
	(or	(military-population > 32)
		(player-in-game any-ally))
	(or	(up-compare-goal gl-trade-unit-count-total > 10)
		(unit-type-count villager-gold > 10))
	(players-unit-type-count focus-player slinger < 7)
	(up-compare-goal gl-enemy-gunpowder-count < 8)
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(or	(and	(or	(up-compare-goal gl-advanced-cavalry != 0)
				(up-compare-goal gl-eagles != 0))
			(game-time > 2000))
		(goal POSITION POCKET))
	(nand	(gold-amount < 150)
		(food-amount > 1400))
	(up-compare-goal gl-soldier-percentage >= 65)
	(up-compare-goal gl-gold-income-per-minute > 400)
	(up-compare-const gv-players-in-team >= 3)
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(or	(up-compare-goal gl-eagles != 0)
		(and	(up-compare-goal gl-advanced-cavalry != 0)
			(up-compare-goal gl-enemy-spearman-count < 8)))
	(or	(game-time < 2400)
		(player-in-game any-ally))
	(up-compare-goal gl-advanced-archery != elite-skirmishers)
	(up-compare-goal gl-enemy-gunpowder-count < 5)
	(or	(up-compare-goal gl-enemy-archer-count < 5)
		(unit-type-count cavalry-class > 20))
	(up-compare-goal gl-enemy-archer-count < 15)
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(up-compare-goal gl-eagles != 0)
	(goal POSITION POCKET)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(up-compare-goal gl-patrol-defence != patrol-on)
	(nand	(up-compare-goal gl-enemy-units-in-town > 4)
		(goal TSA 0))
	(up-compare-const gv-maximum-age == imperial-age)
	(soldier-count > 30)
	(or	(up-compare-goal gl-trade-unit-count-total > 10)
		(unit-type-count villager-gold > 10))
	(up-compare-goal gl-enemy-gunpowder-count < 8)
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(up-compare-goal gl-advanced-cavalry != 0)
	(soldier-count > 19)
	(goal POSITION POCKET)
	(nand	(gold-amount < 150)
		(food-amount > 1400))
	(or	(and	(up-compare-goal gl-military-percentage > 50)
			(unit-type-count cavalry-class > 19))
		(up-research-status c: ri-elite-skirmisher < research-pending))
	(up-compare-goal gl-gold-income-per-minute > 350)
	(up-compare-const gv-players-in-team >= 3)
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(goal POSITION POCKET)
	(game-time < 2700)
	(population > 150)
	(up-research-status c: ri-elite-skirmisher < research-pending)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(or	(goal gl-current-age gv-castle-up)
		(current-age-time < 300))
	(or	(up-compare-goal gl-gold-income-per-minute > 400)
		(up-compare-goal gl-soldier-percentage >= 75))
	(up-compare-goal gl-gold-income-per-minute > 300)
	(up-compare-const gv-players-in-team >= 3)
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(or	(up-compare-goal gl-advanced-cavalry != 0)
		(up-compare-goal gl-eagles != 0))
	(up-compare-goal gl-trade-unit-count-total > 25)
	(up-research-status c: ri-bracer < research-pending)
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(or	(goal gl-advanced-archery scorpions)
		(research-completed ri-heavy-scorpion))
	(or	(and	(up-compare-goal gl-trade-unit-count-total > 5)
			(up-compare-goal gl-gold-income-per-minute > 350))
		(unit-type-count-total scorpion-line > 10))
	(or	(unit-type-count-total scorpion-line > 3)
		(building-type-count siege-workshop > 2))
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(or	(and	(or	(and	(or	(up-compare-goal gl-trade-unit-count-total >= 20)
						(gold-amount >= min-gold-to-reduce-trash))
					(gold-amount > 100))
				(up-compare-goal gl-trade-unit-count-total >= 25))
			(and	(current-age == gv-maximum-age)
				(up-compare-goal gl-gold-income-per-minute > 500)))
		(or	(gold-amount > 3000)
			(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)))
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(or	(and	(up-compare-const gv-michi-style == 1)
			(and	(player-in-game every-ally)
				(and	(game-time < 2700)
					(or	(up-compare-goal gl-trade-unit-count-total > 10)
						(or	(game-time < 2300)
							(gold-amount > 100))))))
		(up-compare-goal gl-current-age <= gv-feudal))
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(up-compare-goal gl-strategy != default)
	(goal POSITION POCKET)
	(up-compare-goal gl-nothing-style-map != YES)
	(or	(and	(building-type-count-total town-center < 3)
			(building-type-count-total town-center < preferred-TC-number))
		(or	(research-available ri-wheel-barrow)
			(or	(research-available ri-bow-saw)
				(and	(goal gl-strategy ranged-boom-strategy)
					(up-research-status c: ri-bodkin-arrow < research-pending)))))
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-current-age <= gv-castle)
	(soldier-count > 20)
	(up-compare-goal gl-military-percentage > 160)
	(or	(up-compare-goal gl-military-percentage > 190)
		(up-compare-goal gl-enemy-skirmisher-count < 10))
	(or	(up-compare-goal gl-military-percentage2 > 170)
		(up-compare-goal gl-pair-player-military > 17))
	(or	(up-compare-const gv-players-in-team >= 2)
		(up-compare-goal gl-enemy-wall-count-total > 17))
=>
	(up-modify-goal gl-enable-skirmishers c:min 2)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-current-age <= gv-castle)
	(soldier-count > 15)
	(up-compare-goal gl-skirmisher-count-total < 8)
	(up-research-status c: ri-elite-skirmisher < research-pending)
	(up-compare-goal gl-military-percentage > 130)
	(or	(up-compare-goal gl-military-percentage > 150)
		(up-compare-goal gl-enemy-skirmisher-count < 10))
	(or	(up-compare-goal gl-military-percentage > 140)
		(up-compare-goal gl-pair-player-military > 7))
	(or	(up-compare-const gv-players-in-team >= 2)
		(up-compare-goal gl-enemy-wall-count-total > 17))
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(goal gl-advanced-cavalry heavy-knights)
	(research-completed ri-paladin)
	(up-compare-goal gl-trade-unit-count-total > 25)
	(up-compare-goal gl-gold-income-per-minute > 500)
	(up-compare-goal gl-enemy-camelry-count < 7)
	(up-compare-goal gl-population > 182)
	(population-cap <= 250)
	(up-compare-goal gl-enable-pikemen > 0)
=>
	(set-goal gl-enable-pikemen 4)
)

#load-if-defined MAYAN-CIV
(defrule
	(goal SLING 3)
	(goal POSITION POCKET)
=>
	(set-goal gl-enable-skirmishers 0)
)

(defrule
	(goal SLING 3)
	(goal POSITION POCKET)
	(up-compare-goal gl-enemy-heavy-cavalry-count < 40)
	(players-unit-type-count focus-player cavalier < 14)
	(players-unit-type-count focus-player paladin < 5)
=>
	(set-goal gl-enable-pikemen 0)
)
#end-if

(defrule
	(up-compare-goal gl-enable-pikemen != 0)
	(research-available ri-pikeman)
	(unit-type-count-total spearman-line > 5)
=>
	(up-modify-flag gl-flag c:+ pikeman-upgrade-notice)
)

#load-if-not-defined FEUDAL-AGE-END
(defrule
	(game-time > 10)
=>
	(up-jump-rule 4)
)

(defrule
	(up-compare-const gv-maximum-age >= feudal-age)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(building-type-count town-center > 0)
	(wall-completed-percentage 2 == 100)
	(building-type-count wall-class == 0)
	(players-building-type-count every-ally stone-wall-line == 0)
	(players-building-type-count every-ally palisade-wall == 0)
	(or	(player-valid any-human-ally)
		(goal POSITION FLANK))
	(goal gl-rush-suitability-on-map GOOD)
=>
	(set-goal gl-rush-suitability-on-map LOW)
	(set-goal gl-DRUSH NO)
	(chat-to-allies "Closed map detected.")
	(disable-self)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(or	(building-type-count-total town-center > 1)
		(or	(and	(or	(map-type black-forest)
					(and	(map-type oasis)
						(goal POSITION POCKET)))
				(player-valid any-human))
			(building-type-count stone-wall-line > 0)))
=>
	(set-goal gl-rush-suitability-on-map VERY-LOW)
	(set-goal POSITION POCKET)
	(disable-self)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(or	(building-type-count bombard-tower > 0)
		(or	(building-type-count castle > 0)
			(or	(building-type-count watch-tower > 1)
				(or	(building-type-count guard-tower > 1)
					(or	(building-type-count keep > 1)
						(players-building-type-count any-ally stone-wall-line > 0))))))
=>
	(set-goal gl-rush-suitability-on-map VERY-LOW)
	(set-goal POSITION POCKET)
	(disable-self)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(or	(players-building-type-count any-ally palisade-wall > 4)
		(building-type-count palisade-wall > 4))
=>
	(up-modify-goal gl-rush-suitability-on-map c:min rush-suitability1)
	(disable-self)
)

#load-if-defined UP-MICHI-STYLE
(defrule
	(game-time < 35)
=>
	(set-goal gl-disable-mining-upgrades YES)
	(set-goal gl-strategy michi-boom)
	(set-goal gl-strategy-type FC)
	(set-goal gl-strategy-aggressiveness-level VERY-LOW)
	(set-goal gl-rush-suitability-on-map VERY-LOW)
	(set-goal gl-FC-type gv-wheelbarrow)
	(set-goal gl-loomless-boar-hunting YES)
	(set-strategic-number sn-strategy-lock 1)
	(set-strategic-number sn-home-exploration-time 600)
	(set-goal POSITION POCKET)
)
#end-if
#end-if

#load-if-defined DEFEND-WONDER
(defrule
	(or	(strategic-number sn-allow-resource-spending < 6)
		(strategic-number sn-skip-first-mining-camp == 1))
=>
	(set-strategic-number sn-allow-resource-spending 6)
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(load-random 20 "Barbarian\WonderAssault")

#load-if-not-defined GOTHIC-CIV
(defrule
	(or	(civilian-population > 30)
		(or	(starting-resources > low-resources)
			(up-compare-const DTW-TC-number == 1)))
	(or	(civilian-population >= DTW-villagers1)
		(starting-resources == high-resources))
	(civilian-population > 12)
	(strategic-number sn-minimum-water-body-size-for-dock <= islands-map-landing-style)
=>
	(set-goal gl-strategy default)
	(set-goal gl-current-age gv-imperial)
	(set-goal gl-advanced-infantry DTW-ADVANCED-INFANTRY)
	(set-goal gl-advanced-archery DTW-ADVANCED-ARCHERY)
	(set-goal gl-advanced-cavalry DTW-ADVANCED-CAVALRY)
	(set-goal CASTLE DTW-CASTLE)
)
#else
(defrule
	(or	(civilian-population > 30)
		(or	(starting-resources > low-resources)
			(up-compare-const DTW-TC-number == 1)))
	(or	(civilian-population >= DTW-villagers1)
		(starting-resources == high-resources))
	(civilian-population > 12)
	(strategic-number sn-minimum-water-body-size-for-dock <= islands-map-landing-style)
=>
	(set-goal gl-strategy default)
	(set-goal gl-current-age gv-imperial)
)
#end-if

(defrule
	(civilian-population > 30)
	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
=>
	(set-goal DOCK 2)
	(set-goal gl-strategy default)
	(set-goal gl-current-age gv-imperial)
	(disable-self)
)
#end-if

#load-if-not-defined DARK-AGE-END
#load-if-not-defined FEUDAL-END
#load-if-defined DARK-AGE-START
#load-if-not-defined TURBO-RANDOM-MAP
#load-if-defined LOW-RESOURCES-START
#load-if-not-defined UP-POCKET-POSITION
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined ARENA-MAP
(defrule
	(or	(up-compare-goal gl-current-age >= gv-feudal)
		(or	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
			(or	(and	(up-compare-goal gl-target-player-distance > 90)
					(up-players-in-game any >= 3))
				(game-time > 840))))
=>
	(up-jump-rule 7)
)

(defrule
	(game-time > 300)
	(or	(and	(up-compare-goal gl-starting-scout-count < 2)
			(players-military-population any-enemy > 1))
		(player-in-game any-human-enemy))
	(or	(players-current-age focus-player == dark-age)
		(and	(players-military-population focus-player > 1)
			(up-players-in-game enemy >= 2)))
=>
	(set-goal gl-enemy-strategy FLUSH)
	(disable-self)
)

(defrule
	(or	(up-compare-goal gl-score-difference <= -26); -38
		(players-current-age focus-player == feudal-age))
	(players-civilian-population focus-player >= 15)
	(or	(players-civilian-population focus-player <= enemy-flush-civilians)
		(and	(players-civilian-population focus-player <= enemy-dock-flush-civilians)
			(players-building-type-count focus-player dock > 0)))
=>
	(set-goal gl-enemy-strategy FLUSH)
;	(chat-to-player my-player-number "Possible enemy flush detected!")
	(disable-self)
)

(defrule
	(goal SLING 0)
	(population-cap >= 65)
	(goal gl-enemy-strategy FLUSH)
	(players-current-age focus-player <= feudal-age)
	(up-compare-goal gl-enemy-strategy != UP-TO-CASTLE)
	(up-compare-goal gl-strategy-type >= FC)
	(building-type-count-total barracks == 0)
	(players-building-type-count focus-player barracks > 0)
	(up-compare-goal gl-starting-scout-count < 2)
	(building-type-count wall-class < 1)
	(up-compare-goal gl-map-wood-percentage >= closed-wood-percentage)
	(strategic-number sn-strategy-lock == 0)
=>
	(set-goal gl-strategy flush)
	(set-goal POSITION FLANK)
	(up-modify-goal gl-rush-suitability-on-map c:max AVERAGE)
	(set-strategic-number sn-stone-gatherer-percentage 99)
)

(defrule
	(goal SLING 0)
	(population-cap >= 65)
	(goal gl-enemy-strategy FLUSH)
	(players-current-age focus-player <= feudal-age)
	(up-compare-goal gl-enemy-strategy != UP-TO-CASTLE)
	(up-compare-goal gl-strategy-type >= FC)
	(players-military-population focus-player > 1)
	(up-compare-goal gl-starting-scout-count < 2)
	(building-type-count wall-class < 1)
	(up-compare-goal gl-map-wood-percentage >= closed-wood-percentage)
	(strategic-number sn-strategy-lock == 0)
=>
	(set-goal gl-strategy flush)
	(set-goal POSITION FLANK)
	(up-modify-goal gl-rush-suitability-on-map c:max AVERAGE)
	(set-strategic-number sn-stone-gatherer-percentage 99)
)

(defrule
	(food-amount >= 400)
	(or	(and	(strategic-number sn-lumber-camp-max-distance < 22)
			(or	(building-type-count-total lumber-camp > 1)
				(strategic-number sn-lumber-camp-max-distance < 19)))
		(up-compare-goal gl-my-villager-count-total > flush-defense-villagers))
	(strategic-number sn-stone-gatherer-percentage == 99)
	(building-type-count town-center == 1)
	(up-pending-objects c: villager-class > 1)
=>
	(up-modify-flag gl-flag c:+ villager-queue-notice)
)

(defrule
	(up-compare-flag gl-flag == villager-queue-notice)
	(up-pending-objects c: villager-class == 1)
=>
	(up-full-reset-search)
	(up-find-local c: town-center c: 1)
	(up-target-point 0 action-stop -1 -1)
	(up-modify-flag gl-flag c:- villager-queue-notice)
)

(defrule
	(strategic-number sn-stone-gatherer-percentage == 99)
=>
	(set-goal gl-strategy-type basic-flush)
	(set-goal gl-strategy-control 0)
	(set-goal gl-feudal-infantry FLUSH-DEFENCE-MAA)
	(set-goal gl-feudal-archery FLUSH-DEFENCE-ARCHER)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-goal gl-gold-villagers 0)
	(set-goal gl-stone-villagers 0)
	(set-goal gl-strategy-aggressiveness-level HIGH)
;	(chat-to-player my-player-number "1Go for a flush war")
	(set-strategic-number sn-strategy-lock 1)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

#load-if-defined DEFEND-WONDER
(defrule

	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(up-compare-goal MILITARY >= 1)
	(or	(warboat-count > 25)
		(game-time > 600))
	(players-building-type-count any-enemy wonder > 0)
	(strategic-number sn-maximum-town-size < 250)
=>
	(set-strategic-number sn-maximum-town-size 250)
)
#end-if

(defrule
	(or	(up-compare-goal TSA < 1)
		(or	(up-timer-status 42 == timer-running); Retreating to ram/trebuchet so don't increase TS
			(or	(up-timer-status 43 == timer-running)
				(or	(and	(building-type-count stone-wall > 0); 1300 normally, 300 in defend the wonder, 1200 in regicide
						(game-time < anti-wall-tsa-time))
					(strategic-number sn-maximum-town-size >= 254)))))
=>
	(up-jump-rule 9)
)

(defrule
	(enemy-buildings-in-town)
=>
	(up-get-fact building-type-in-town wall-class temporary-goal2)
	(up-get-fact building-type-in-town gate-class temporary-goal)
	(up-modify-goal temporary-goal2 g:+ temporary-goal)
	(up-get-fact building-type-in-town dock temporary-goal3)
	(up-modify-goal temporary-goal2 g:+ temporary-goal3)
	(up-modify-goal temporary-goal5 g:= gl-target-player-distance)
	(up-modify-goal temporary-goal5 c:+ 40)
)

(defrule
	(enemy-buildings-in-town)
	(goal gl-strategy default)
	(strategic-number sn-allow-resource-spending > 5)
	(or	(unit-type-count battering-ram-line > 1)
		(unit-type-count trebuchet-set > 0))
	(up-enemy-villagers-in-town < 10); Attack camps with vills
=>
	(up-get-fact building-type-in-town mill temporary-goal)
	(up-modify-goal temporary-goal2 g:+ temporary-goal)
	(up-get-fact building-type-in-town mining-camp temporary-goal)
	(up-modify-goal temporary-goal2 g:+ temporary-goal)
	(up-get-fact building-type-in-town lumber-camp temporary-goal)
	(up-modify-goal temporary-goal2 g:+ temporary-goal)
)

(defrule
	(enemy-buildings-in-town)
	(or	(unit-type-count battering-ram-line > 1)
		(unit-type-count trebuchet-set > 0))
=>
	(up-get-fact building-type-in-town house temporary-goal4)
	(up-modify-goal temporary-goal2 g:+ temporary-goal4)
	(up-modify-goal temporary-goal3 g:max temporary-goal4)
	(up-get-fact building-type-in-town farm temporary-goal)
	(up-modify-goal temporary-goal2 g:+ temporary-goal)
)

(defrule
	(enemy-buildings-in-town)
	(up-compare-goal temporary-goal2 > 0)
	(up-enemy-buildings-in-town g:<= temporary-goal2)
	(nand	(up-compare-goal temporary-goal3 > 0)
		(and	(players-population target-player > 145)
			(and	(strategic-number sn-maximum-town-size g:> temporary-goal5)
				(up-compare-goal gl-target-navy-count > 4))))
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
=>
	(up-modify-sn sn-maximum-town-size c:+ 2)
)

(defrule
	(goal target-system siege)
	(players-building-type-count target-player town-center > 0)
	(soldier-count > 28)
	(or	(soldier-count > 45)
		(players-military-population focus-player < 10))
	(or	(players-military-population focus-player < 17)
		(soldier-count > 65))
	(players-military-population focus-player < 27)
	(up-building-type-in-town c: town-center == 0)
	(up-building-type-in-town c: castle == 0)
	(up-building-type-in-town c: bombard-tower == 0)
	(strategic-number sn-maximum-town-size < 250)
=>
	(up-modify-sn sn-maximum-town-size c:+ 5)
)

(defrule
	(goal target-system raid)
	(players-building-type-count target-player castle == 0)
	(players-building-type-count target-player bombard-tower == 0)
	(up-compare-goal gl-enemy-tower-count < 5)
	(research-completed ri-scale-barding)
	(or	(unit-type-count archery-class < 7)
		(research-completed ri-leather-archer-armor))
	(soldier-count > 25)
	(players-military-population focus-player < 10)
	(up-compare-goal TSA >= 1)
	(strategic-number sn-maximum-town-size < 250)
=>
	(set-strategic-number sn-maximum-town-size 254)
)

(defrule
	(up-compare-goal TSA >= 1)
	(strategic-number sn-allow-resource-spending > 3)
	(military-population > 40)
	(up-compare-goal gl-soldier-percentage > 200)
=>
	(up-modify-goal temporary-goal g:= gl-target-player-distance)
	(up-modify-goal temporary-goal c:+ 8)
	(up-modify-sn sn-maximum-town-size g:max temporary-goal)
)

(defrule
	(up-compare-goal TSA >= 1)
	(strategic-number sn-allow-resource-spending > 3)
	(military-population > 40)
	(population > pop-to-stop-full-pop-attack)
=>
	(up-modify-goal temporary-goal g:= gl-target-player-distance)
	(up-modify-goal temporary-goal c:+ 16)
	(up-modify-sn sn-maximum-town-size g:max temporary-goal)
)

(defrule
	(up-compare-goal TSA >= 1)
	(strategic-number sn-allow-resource-spending > 3)
	(military-population > 40)
	(unit-type-count battering-ram-line >= 3)
	(up-compare-goal gl-soldier-percentage > 200)
=>
	(up-modify-goal temporary-goal g:= gl-target-player-distance)
	(up-modify-goal temporary-goal c:+ 28)
	(up-modify-sn sn-maximum-town-size g:max temporary-goal)
)

#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined DEATH-MATCH

(defrule
	(game-time >= 1920)
=>
	(up-jump-rule 5)
)

(defrule
	(or	(goal gl-retreat-notice -1)
		(up-compare-goal gl-retreat-notice >= 11))
=>
	(set-goal gl-retreat-notice 2)
)

(defrule
	(goal gl-current-age gv-feudal)
	(goal gl-retreat-notice 2)
	(up-compare-goal gl-enemy-wall-count-total < 3)
	(players-military-population focus-player < 3)
	(unit-type-count skirmisher-line > 9)
	(or	(unit-type-count archer-line < 8)
		(goal gl-feudal-archery skirmishers))
	(up-projectile-target projectile-fortification != warship-class)
	(up-compare-goal gl-enemy-tower-count <= 1)
	(research-completed ri-padded-archer-armor)
=>
	(set-goal gl-retreat-notice 11); Never
)

(defrule
	(goal gl-early-raid DUC-system)
=>
	(set-goal gl-retreat-notice 12); Shut down
)

(defrule
	(goal gl-current-age gv-feudal)
	(up-compare-goal gl-retreat-notice >= 11)
	(up-compare-goal gl-enemy-wall-count-total < 3)
	(players-military-population focus-player < 3)
	(unit-type-count skirmisher-line > 13)
	(players-civilian-population target-player < 40)
	(up-projectile-target projectile-fortification != warship-class)
	(up-compare-goal gl-enemy-tower-count <= 1)
	(research-completed ri-padded-archer-armor)
	(military-population > 22)
=>
	(set-goal gl-retreat-notice 12); Not even from TC
)

(defrule
	(goal gl-retreat-notice 2)
	(or	(soldier-count < 14)
		(and	(current-age <= feudal-age)
			(or	(and	(players-military-population focus-player < 2)
					(players-building-type-count target-player mining-camp > 0))
				(unit-type-count militiaman-line > 4))))
	(soldier-count < 18)
	(unit-type-count scorpion-line < 4)
	(unit-type-count knight-line < 4)
	(unit-type-count infantry-class < 6)
=>
	(set-goal gl-retreat-notice -1)
)

(defrule
	(goal gl-anti-trush YES)
=>
	(up-jump-rule 4)
)

(defrule
	(or	(up-compare-goal TSA >= 1)
		(or	(building-type-count town-center == 0)
			(or	(and	(population >= pop-to-full-pop-attack)
					(current-age == gv-maximum-age))
				(or	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
					(or	(military-population >= 40)
						(or	(unit-type-count knight-line >= 15)
							(unit-type-count huskarl-set >= 15)))))))
=>
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal gl-enemy-tower-distance > 12)
	(up-compare-goal gl-enemy-tower-distance < 40)
	(up-projectile-detected projectile-watch-tower < 10000)
=>
	(up-full-reset-search)
	(up-find-local c: battering-ram-line c: 1)
	(up-find-local c: trebuchet c: 1)
	(up-find-local c: unpacked-trebuchet c: 1)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 13)
	(up-find-remote c: all-units-class c: 1)
	(up-get-search-state gl-local-total)
)

(defrule
	(goal gl-local-total 0)
	(goal gl-remote-total 0)
	(up-compare-goal gl-enemy-tower-distance > 12)
	(up-compare-goal gl-enemy-tower-distance < 40)
	(up-projectile-detected projectile-watch-tower < 10000)
	(military-population < 25)
	(or	(up-compare-goal gl-enemy-tower-count > 1)
		(military-population < 15))
	(unit-type-count infantry-class < 5)
	(unit-type-count cavalry-class < 5)
	(unit-type-count siege-weapon-class < 1)
	(unit-type-count scorpion-class < 5)
=>
	(up-retreat-now)
	(up-set-attack-stance -1 c: defensive)
	(enable-timer 40 10)
)

(defrule
	(goal gl-local-total 0)
	(goal gl-remote-total 0)
	(up-compare-goal gl-enemy-tower-distance > 12)
	(up-compare-goal gl-enemy-castle-distance > 12)
	(or	(up-compare-goal gl-enemy-castle-distance < 36)
		(up-compare-goal gl-enemy-tower-distance < 36))
	(unit-type-count battering-ram-line < 4)
	(up-projectile-detected projectile-fortification < 10000)
	(or	(up-compare-goal gl-enemy-tower-count > 2)
		(up-projectile-detected projectile-castle < 10000))
=>
	(up-retreat-now)
	(up-set-attack-stance -1 c: defensive)
	(enable-timer 40 10)
)

(defrule
	(or	(game-time >= 1920)
		(or	(unit-type-count battering-ram-line > 0)
			(or	(and	(population > 105)
					(military-population > 29))
				(or	(nor	(up-projectile-detected projectile-town-center < 5000)
						(and	(up-compare-goal gl-anti-trush != YES)
							(up-compare-goal gl-target-player-distance >= 25)))
					(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)))))
=>
	(up-jump-rule 15)
)

(defrule
	(or	(goal gl-strategy fi-monk-rush)
		(or	(goal gl-strategy castle-push)
			(or	(and	(goal TSA 0)
					(up-compare-goal gl-attacking-with-ally != YES))
				(and	(not	(up-projectile-detected projectile-castle < 5000))
					(and	(goal gl-retreat-notice 12)
						(up-projectile-target projectile-fortification != warship-class))))))
=>
	(up-jump-rule 14)
)

(defrule
	(true)
=>
	(set-goal temporary-goal 25)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
=>
	(up-modify-goal gl-retreat-notice2 c:min 5)
	(set-goal temporary-goal 34)
)

(defrule
	(or	(unit-type-count militiaman-line > 2)
		(goal gl-DRUSH YES))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-feudal-archery != 0)
	(up-compare-goal gl-drush-waypoint-required < 10)
	(soldier-count < 11)
	(game-time < 1200)
	(up-compare-goal threat-time < 3000)
	(goal threat-source villager-class)
	(up-timer-status 27 != timer-running)
=>
	(up-full-reset-search)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 actionid-explore -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-position-self-x action-move -1 no-attack)
	(set-goal gl-retreat-notice 3)
	(enable-timer 27 10)
	(enable-timer 42 10)
)

(defrule
	(up-research-status c: ri-chain-barding != research-complete)
	(up-research-status c: ri-chain-mail != research-complete)
	(up-projectile-target projectile-town-center != warship-class)
	(up-projectile-detected projectile-town-center < 5000)
	(unit-type-count knight-line < 15)
	(unit-type-count huskarl-set < 8)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-full-reset-search)
	(up-filter-garrison g: gl-retreat-notice2 c: -1)
	(up-find-remote c: town-center c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(up-compare-goal gl-remote-total > 0)
	(up-research-status c: ri-chain-barding != research-complete)
	(up-research-status c: ri-chain-mail != research-complete)
	(up-projectile-target projectile-town-center != warship-class)
	(up-projectile-detected projectile-town-center < 5000)
	(unit-type-count knight-line < 15)
	(unit-type-count huskarl-set < 8)
=>
	(up-jump-rule 3)
)

(defrule
	(up-research-status c: ri-chain-barding != research-complete)
	(up-research-status c: ri-chain-mail != research-complete)
	(up-projectile-target projectile-watch-tower != warship-class)
	(up-projectile-detected projectile-watch-tower < 3000)
	(military-population < 25)
	(unit-type-count knight-line < 15)
	(unit-type-count huskarl-set < 8)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-full-reset-search)
	(up-filter-garrison g: gl-retreat-notice c: -1)
	(up-find-remote c: watch-tower c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(up-compare-goal gl-remote-total > 0)
	(up-projectile-target projectile-watch-tower != building-class)
	(up-projectile-target projectile-watch-tower != wall-class)
	(up-projectile-target projectile-watch-tower != gate-class)
	(up-projectile-target projectile-watch-tower != tower-class)
	(up-projectile-target projectile-watch-tower != warship-class)
	(up-research-status c: ri-chain-barding != research-complete)
	(up-research-status c: ri-chain-mail != research-complete)
	(up-projectile-detected projectile-watch-tower < 3000)
	(military-population g:< temporary-goal)
	(unit-type-count knight-line < 15)
	(unit-type-count huskarl-set < 8)
=>
	(up-jump-rule 1)
)

(defrule
	(true)
=>
	(up-jump-rule 5)
)

(defrule
	(up-compare-goal gl-SCRUSH-CONTROL != SCOUTS-DONE)
=>
	(up-full-reset-search)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 actionid-explore 731 -1)
	(up-find-local c: all-units-class c: 240)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-get-point position-target gl-point-x)
	(up-lerp-tiles gl-point-x gl-position-self-x c: 16)
	(up-target-point gl-point-x action-move -1 no-attack)
	(up-modify-sn sn-maximum-town-size g:= gl-target-player-distance)
	(up-modify-sn sn-maximum-town-size c:- 14)
	(set-goal gl-retreat-notice 0)
)

(defrule
	(up-compare-goal gl-SCRUSH-CONTROL != SCOUTS-DONE)
	(up-compare-goal gl-group-notice > 500)
	(up-compare-goal gl-drush-waypoint-required < 10)
=>
	(up-full-reset-search)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 actionid-explore 731 -1)
	(up-find-local c: all-units-class c: 240)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-lerp-tiles gl-point-x gl-candidate1-point-x g: gl-target-player-distance)
	(up-lerp-tiles gl-point-x gl-position-self-x c: 16)
	(up-target-point gl-point-x action-move -1 no-attack)
	(set-goal gl-retreat-notice 0)
)

(defrule
	(map-size tiny)
	(map-type oasis)
=>
	(up-full-reset-search)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 actionid-explore 731 -1)
	(up-find-local c: all-units-class c: 240)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-get-point position-target gl-saved-point-x)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-lerp-tiles gl-point-x gl-saved-point-x c: 16)
	(up-target-point gl-point-x action-move -1 no-attack)
	(up-modify-sn sn-maximum-town-size g:= gl-target-player-distance)
	(up-modify-sn sn-maximum-town-size c:- 14)
	(set-goal gl-retreat-notice 0)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
=>
	(up-full-reset-search)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 actionid-explore 731 -1)
	(up-find-local c: all-units-class c: 240)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-get-point position-target gl-saved-point-x)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-lerp-tiles gl-point-x gl-saved-point-x c: 16)
	(up-target-point gl-point-x action-move -1 no-attack)
	(up-modify-sn sn-maximum-town-size g:= gl-target-player-distance)
	(up-modify-sn sn-maximum-town-size c:- 14)
	(set-goal gl-retreat-notice 0)
)

(defrule
	(goal gl-fixed-target-player YES)
	(up-compare-goal gl-SCRUSH-CONTROL != SCOUTS-DONE)
=>
	(up-get-point position-target gl-point-x)
	(up-copy-point gl-saved-point-x gl-position-self-x)
	(up-lerp-tiles gl-saved-point-x gl-point-x c: 16)
	(up-target-point gl-saved-point-x action-move -1 no-attack)
)

(defrule
	(goal gl-retreat-notice 0)
	(up-compare-goal TSA < 1)
=>
	(set-strategic-number sn-filter-under-attack 0)
	(up-retreat-now)
	(up-set-attack-stance -1 c: aggressive)
	(set-goal gl-retreat-notice 2)
)

(defrule
	(goal gl-retreat-notice 3)
	(or	(timer-triggered 42)
		(up-compare-goal threat-time > 6000))
=>
	(up-set-attack-stance -1 c: aggressive)
	(set-goal gl-retreat-notice 0)
	(disable-timer 42)
)

(defrule
	(goal gl-retreat-notice 0)
	(up-compare-goal TSA >= 1)
	(nor	(and	(up-projectile-detected projectile-watch-tower < 3000)
			(military-population < 25))
		(up-projectile-detected projectile-town-center < 3000))
=>
	(set-strategic-number sn-filter-under-attack 0)
	(up-reset-unit c: -1)
	(up-set-attack-stance -1 c: aggressive)
	(set-goal gl-retreat-notice 2)
)
#end-if

#load-if-not-defined DARK-AGE-END
#load-if-not-defined FEUDAL-AGE-END
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(up-projectile-detected projectile-castle < 4000)
	(up-projectile-target projectile-castle == warship-class)
	(strategic-number sn-number-attack-groups == 0)
	(population <= almost-full-pop)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-full-reset-search)
	(up-filter-include -1 actionid-attack -1 -1)
	(up-find-remote c: castle c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point-x)
	(up-get-search-state gl-local-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-jump-rule 11)
)

(defrule
	(up-compare-goal TSA >= 1)
	(or	(up-compare-const gv-oasis-style-map == 1)
		(or	(up-compare-goal gl-map-wood-percentage >= max-map-wood-percentage)
			(or	(and	(unit-type-count trebuchet-set == 0)
					(and	(unit-type-count battering-ram-line == 0)
						(up-compare-goal gl-current-age >= gv-castle)))
				(and	(goal gl-retreat-notice 12)
					(up-projectile-target projectile-fortification != warship-class)))))
=>
	(up-jump-rule 17)
)

(defrule
	(or	(and	(or	(goal gl-strategy knight-boom)
				(and	(current-age == gv-maximum-age)
					(and	(strategic-number sn-allow-resource-spending > 5)
						(and	(population >= pop-to-stop-full-pop-attack)
							(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)))))
			(up-compare-goal TSA >= 1))
		(or	(goal gl-arena-forward YES)
			(up-timer-status 38 == timer-running))); We've just started retreating
=>
	(up-jump-rule 12)
)

(defrule
	(up-projectile-detected projectile-castle < 5000)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-full-reset-search)
	(up-filter-include -1 actionid-attack -1 -1)
	(up-find-remote c: castle c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-jump-rule 4)
)

(defrule
	(game-time < 2300)
	(up-projectile-detected projectile-watch-tower < 5000)
	(strategic-number sn-focus-player-number s:== sn-target-player-number)
	(goal TSA 0)
	(current-age == feudal-age)
=>
	(up-full-reset-search)
	(up-filter-include -1 actionid-attack -1 -1)
	(up-find-remote c: watch-tower c: 1)
	(up-find-remote c: sea-tower c: 1)
	(up-get-search-state gl-local-total)
	(up-jump-rule 3)
)

(defrule
	(game-time < 2300)
	(up-projectile-detected projectile-watch-tower < 5000)
	(strategic-number sn-focus-player-number s:== sn-target-player-number)
	(up-research-status c: ri-chain-mail != research-complete)
	(unit-type-count knight-line < 15)
	(unit-type-count huskarl-set < 8)
=>
	(up-full-reset-search)
	(up-filter-include -1 actionid-attack -1 -1)
	(up-find-remote c: sea-tower c: 1)
	(up-filter-garrison c: 2 c: -1)
	(up-find-remote c: watch-tower c: 1)
	(up-get-search-state gl-local-total)
	(up-jump-rule 2)
)

(defrule
	(game-time < 2300)
	(up-projectile-detected projectile-town-center < 5000)
	(strategic-number sn-focus-player-number s:== sn-target-player-number)
	(up-projectile-target projectile-town-center != warship-class)
	(up-research-status c: ri-chain-mail != research-complete)
	(unit-type-count knight-line < 15)
	(unit-type-count huskarl-set < 8)
=>
	(up-full-reset-search)
	(up-filter-include -1 actionid-attack -1 -1)
	(up-find-remote c: town-center c: 1)
	(up-get-search-state gl-local-total)
	(up-jump-rule 1)
)

(defrule
	(true)
=>
	(up-jump-rule 7)
)

(defrule
	(up-compare-goal gl-remote-total >= 1)
=>
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point-x)
	(set-goal gl-remote-last 0)
)

(defrule
	(up-point-distance gl-point-x gl-position-self-x >= 36)
	(up-compare-goal gl-remote-total >= 1)
=>
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 23)
	(up-find-local c: battering-ram-line c: 1)
	(up-find-local c: trebuchet c: 1)
	(up-find-local c: unpacked-trebuchet c: 1)
	(up-find-local c: cannon-galleon-line c: 1)
	(up-get-search-state gl-local-total)
	(set-goal gl-remote-last 1)
)

(defrule
	(goal gl-remote-last 1)
	(up-compare-goal TSA >= 1)
	(goal gl-local-total 0)
	(goal gl-fixed-target-player NO)
	(strategic-number sn-target-player-number g:== threat-player)
=>
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 15)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-lerp-tiles gl-point-x gl-position-self-x c: 18)
	(up-target-point gl-point-x action-move -1 stand-ground)
	(enable-timer 40 5)
)

(defrule
	(goal gl-remote-last 1)
	(goal TSA 0)
	(goal gl-local-total 0)
	(goal gl-fixed-target-player NO)
	(strategic-number sn-target-player-number g:== threat-player)
=>
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 20)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-copy-point gl-temporary-point-x gl-position-self-x)
	(up-get-point position-target gl-saved-point-x)
	(up-lerp-tiles gl-temporary-point-x gl-saved-point-x c: 10)
	(up-target-point gl-temporary-point-x action-move -1 no-attack)
	(enable-timer 40 10)
)

(defrule
	(goal gl-remote-last 1)
	(goal TSA 0)
	(goal gl-local-total 0)
	(goal gl-fixed-target-player NO)
	(building-type-count dock > 0)
	(strategic-number sn-target-player-number g:== threat-player)
=>
	(up-full-reset-search)
	(up-find-local c: dock c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-temporary-point-x)
	(up-set-target-point gl-point-x)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(goal gl-remote-last 1)
	(goal TSA 0)
	(goal gl-local-total 0)
	(goal gl-fixed-target-player NO)
	(building-type-count dock > 0)
	(up-point-distance gl-temporary-point-x gl-point-x > 17)
	(strategic-number sn-target-player-number g:== threat-player)
=>
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 20)
	(up-find-local c: aofe-fire-ship c: 240)
	(up-find-local c: caravel c: 240)
	(up-find-local c: elite-caravel c: 240)
	(up-target-point gl-temporary-point-x action-move -1 no-attack)
	(enable-timer 40 10)
)

(defrule
	(goal gl-remote-last 1)
	(goal TSA 0)
	(goal gl-local-total 0)
	(goal gl-fixed-target-player NO)
	(building-type-count dock > 0)
	(up-point-distance gl-temporary-point-x gl-point-x > 17)
	(strategic-number sn-target-player-number g:== threat-player)
=>
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 20)
	(up-find-local c: galley-line c: 240)
	(up-find-local c: fire-ship-line c: 240)
	(up-find-local c: demolition-ship-line c: 240)
	(up-find-local c: turtle-ship-line c: 240)
	(up-find-local c: cannon-galleon-line c: 240)
	(up-target-point gl-temporary-point-x action-move -1 no-attack)
	(enable-timer 40 10)
)

(defrule
	(true)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(or	(up-projectile-detected projectile-castle < 15000)
		(or	(up-projectile-detected projectile-bombard-tower < 15000)
			(and	(players-building-type-count any-enemy wonder > 0)
				(victory-condition standard))))
=>
	(set-strategic-number sn-free-siege-targeting siege-targeting-default-value); Trebs shoot only buildings
	(set-goal temporary-goal 0)
)

(defrule
	(or	(building-type-count castle > 0)
		(population > 170))
	(or	(building-type-count castle > 1)
		(or	(up-compare-goal gl-military-percentage > 30)
			(or	(building-type-count bombard-tower > 1)
				(players-military-population focus-player < 4))))
=>
	(up-jump-rule 2)
)

(defrule
	(strategic-number sn-disable-villager-garrison != 1)
=>
	(set-strategic-number sn-disable-villager-garrison 1)
)

(defrule
	(true)
=>
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-disable-villager-garrison != 2)
=>
	(set-strategic-number sn-disable-villager-garrison 2)
)

(defrule
	(up-compare-goal gl-attack-stance-switcher != 1)
	(or	(goal temporary-goal 0)
		(or	(unit-type-count unpacked-trebuchet == 0)
			(or	(up-compare-goal gl-target-player-distance >= gv-treb-retreat-distance)
				(or	(up-compare-goal TSA < 1)
					(or	(up-timer-status 42 == timer-running)
						(or	(unit-type-count battering-ram-line > 4)
							(up-projectile-target projectile-fortification == warship-class)))))))
=>
	(up-jump-rule 4)
)

(defrule
	(up-compare-const gv-michi-style != 1)
	(unit-type-count unpacked-trebuchet > 0)
	(up-compare-goal TSA >= 1)
	(up-timer-status 42 != timer-running)
	(up-projectile-target projectile-fortification != building-class)
	(up-projectile-detected projectile-castle < 15000)
=>
	(up-retreat-to unpacked-trebuchet c: mangonel-line)
	(up-retreat-to unpacked-trebuchet c: infantry-class)
	(up-retreat-to unpacked-trebuchet c: archery-class)
	(up-retreat-to unpacked-trebuchet c: archery-cannon-class)
	(up-retreat-to unpacked-trebuchet c: cavalry-class)
	(up-retreat-to unpacked-trebuchet c: cavalry-archer-class)
	(up-retreat-to unpacked-trebuchet c: cavalry-cannon-class)
	(up-retreat-to unpacked-trebuchet c: scorpion-class)
)

(defrule
	(up-compare-const gv-michi-style != 1)
	(unit-type-count unpacked-trebuchet > 0)
	(up-compare-goal TSA >= 1)
	(up-timer-status 42 != timer-running)
	(up-projectile-target projectile-fortification != building-class)
	(up-projectile-detected projectile-castle < 15000)
=>
	(up-set-attack-stance mangonel-line c: defensive)
	(up-set-attack-stance infantry-class c: defensive)
	(up-set-attack-stance archery-class c: defensive)
	(up-set-attack-stance archery-cannon-class c: defensive)
	(up-set-attack-stance cavalry-class c: defensive)
	(up-set-attack-stance cavalry-archer-class c: defensive)
	(up-set-attack-stance cavalry-cannon-class c: defensive)
	(up-set-attack-stance scorpion-class c: defensive)
)

(defrule
	(up-compare-const gv-michi-style != 1)
	(unit-type-count unpacked-trebuchet > 0)
	(up-compare-goal TSA >= 1)
	(up-timer-status 42 != timer-running)
	(up-projectile-target projectile-fortification != building-class)
	(up-projectile-detected projectile-castle < 15000)
=>
	(up-modify-sn sn-maximum-town-size g:= gl-target-player-distance)
	(up-modify-sn sn-maximum-town-size c:- 8)
	(enable-timer 42 26)
;	(chat-to-player my-player-number "Retreat to trebuchet")
	(set-goal gl-attack-stance-switcher 1)
)

(defrule
	(goal gl-attack-stance-switcher 1)
	(or	(unit-type-count unpacked-trebuchet == 0)
		(or	(up-compare-goal gl-target-player-distance >= 120)
			(or	(goal TSA 0)
				(unit-type-count battering-ram-line > 4))))
=>
	(up-set-attack-stance -1 c: aggressive)
	(set-goal gl-attack-stance-switcher 0)
)
#end-if
#end-if

#load-if-not-defined DEATH-MATCH
(defrule
	(game-time < 2400)
	(unit-type-count battering-ram-line < 1)
	(unit-type-count trebuchet-set < 1)
	(unit-type-count paladin < 20)
	(unit-type-count elite-eagle-warrior < 30)
	(population < almost-full-pop)
	(strategic-number sn-retreating == 1)
	(or	(up-projectile-detected projectile-castle < 4000)
		(up-projectile-detected projectile-bombard-tower < 4000))
=>
	(set-goal MILITARY 0)
	(set-goal TSA 0)
	(set-strategic-number sn-maximum-town-size 10)
	(up-update-targets)
	(set-goal gl-enemy-units-in-town 5)
	(enable-timer 1 0)
)

(defrule
	(goal gl-anti-trush YES)
=>
	(up-jump-rule 1)
)

(defrule
	(game-time < 2700)
	(up-compare-goal gl-target-player-distance < 40)
	(up-compare-goal gl-target-player-distance > 15)
	(up-research-status c: ri-chain-barding != research-complete)
	(up-research-status c: ri-chain-mail != research-complete)
	(up-projectile-target projectile-fortification != warship-class)
	(up-projectile-detected projectile-fortification < 3000)
	(goal gl-enemy-units-in-town 0)
	(unit-type-count siege-weapon-class == 0)
	(unit-type-count trebuchet-set == 0)
	(unit-type-count scorpion-line < 3)
	(military-population < 25)
	(unit-type-count infantry-class < 7)
	(unit-type-count cavalry-class < 5)
	(goal TSA 0)
=>
	(up-retreat-now)
)
#end-if
#end-if

(defrule
	(strategic-number sn-retreating != 1)
	(or	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
		(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion))
	(up-compare-goal TSA >= 1)
=>
	(set-strategic-number sn-retreating 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(up-compare-goal gl-water-retreating != YES)
	(up-compare-goal MILITARY >= 1)
=>
	(set-goal gl-water-retreating YES)
)

(defrule
	(strategic-number sn-retreating == 1)
	(up-compare-goal gl-strategy != saracen-heavy-krush)
	(up-compare-goal gl-defending-ally != YES)
	(up-compare-goal gl-attacking-with-ally != YES)
	(goal TSA 0)
	(nand	(goal MILITARY 1)
		(and	(death-match-game)
			(players-building-count every-enemy == 0)))
=>
	(set-strategic-number sn-retreating 0)
	(set-strategic-number sn-unit-spreading2 1)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(enable-timer 50 20)
	(enable-timer 38 45)
)

(defrule
	(timer-triggered 38)
=>
	(set-strategic-number sn-enemy-sighted-response-distance 7)
	(disable-timer 38)
)

(defrule
	(or	(up-compare-goal gl-drush-waypoint-required < 10)
		(or	(and	(or	(up-timer-status 9 == timer-running)
					(up-timer-status 38 == timer-disabled))
				(up-compare-goal gl-retreat-notice != 0))
			(or	(goal gl-early-raid YES)
				(true)))); test for micro
=>
	(up-jump-rule 5)
)

(defrule
	(true)
=>
	(up-get-point-distance gl-candidate1-point-x gl-position-self-x temporary-goal)
	(up-modify-goal temporary-goal2 g:= temporary-goal)
	(up-modify-goal temporary-goal2 c:/ 2)
	(up-modify-goal temporary-goal2 c:min 35)
	(up-modify-goal temporary-goal c:- 5)
	(up-get-point-distance gl-candidate4-point-x gl-candidate1-point-x temporary-goal3)
	(up-modify-goal temporary-goal3 c:* 8)
	(up-modify-goal temporary-goal3 c:/ 5)
	(up-full-reset-search)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 -1 orderid-explore -1)
	(up-find-local c: all-units-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
)

(defrule
	(up-timer-status 38 != timer-disabled)
	(timer-triggered 15)
	(up-set-target-object search-local c: 0)
	(nand	(up-object-data object-data-action == actionid-attack)
		(goal TSA 0))
	(up-point-distance gl-point-x gl-position-self-x g:< temporary-goal)
	(up-point-distance gl-point-x gl-position-self-x g:> temporary-goal2)
=>
	(up-target-point gl-position-self-x action-move -1 -1)
	(up-jump-rule 2)
)

(defrule
	(up-timer-status 38 != timer-disabled)
	(timer-triggered 15)
	(up-set-target-object search-local c: 0)
	(nand	(up-object-data object-data-action == actionid-attack)
		(goal TSA 0))
	(up-point-distance gl-point-x gl-candidate1-point-x < 7)
=>
	(up-target-point gl-candidate3-point-x action-move -1 -1)
	(up-jump-rule 1)
)

(defrule
	(up-set-target-object search-local c: 0)
	(nand	(up-object-data object-data-action == actionid-attack)
		(goal TSA 0))
	(or	(up-point-distance gl-point-x gl-candidate4-point-x g:< temporary-goal3)
		(and	(up-point-distance gl-point-x gl-candidate1-point-x < 7)
			(goal gl-retreat-notice 0)))
=>
	(up-target-point gl-candidate1-point-x action-move -1 -1)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 0 1 0 0)
	(up-find-local c: all-units-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-jump-rule -4)
)

(defrule
	(or	(strategic-number sn-unit-spreading2 == 4)
		(or	(strategic-number sn-unit-spreading2 == 6)
			(and	(goal gl-patrol-defence patrol-on)
				(strategic-number sn-unit-spreading2 > 1))))
=>
	(set-strategic-number sn-unit-spreading2 0)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
)

(defrule
	(goal TSA 0)
	(nand	(goal MILITARY 1)
		(and	(death-match-game)
			(players-building-count every-enemy == 0)))
	(timer-triggered 38)
	(strategic-number sn-unit-spreading2 == 3)
=>
	(set-strategic-number sn-unit-spreading2 4)
	(set-strategic-number sn-task-ungrouped-soldiers 1)
)

(defrule
	(strategic-number sn-unit-spreading2 == 1)
	(or	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
		(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion))
=>
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-explore 731 -1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point 0 action-stop -1 no-attack)
	(enable-timer 40 10)
)

(defrule
	(strategic-number sn-unit-spreading2 == 1)
	(goal gl-defensive-castle-placed YES)
	(building-type-count castle > 0)
	(or	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
		(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion))
=>
	(set-strategic-number sn-filter-under-attack 0)
	(up-retreat-to castle c: -1)
	(set-strategic-number sn-unit-spreading2 5); 4
	(enable-timer 9 3)
)

(defrule
	(goal gl-strategy trush-push)
	(strategic-number sn-unit-spreading2 == 1)
	(building-type-count watch-tower > 0)
=>
	(set-strategic-number sn-filter-under-attack 0)
	(up-retreat-to watch-tower c: -1)
	(set-strategic-number sn-unit-spreading2 4)
)

(defrule
	(strategic-number sn-unit-spreading2 == 1)
	(or	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
		(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion))
=>
	(set-strategic-number sn-filter-under-attack 0)
	(set-strategic-number sn-maximum-town-size 10)
	(up-retreat-now)
	(set-strategic-number sn-unit-spreading2 2)
	(enable-timer 9 3)
)

(defrule
	(or	(strategic-number sn-unit-spreading2 == 2)
		(strategic-number sn-unit-spreading2 == 5))
	(timer-triggered 9)
	(or	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
		(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion))
=>
	(set-strategic-number sn-maximum-town-size 10)
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-move orderid-explore -1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-position-self-x action-move -1 no-attack)
	(up-modify-sn sn-unit-spreading2 c:+ 1)
	(enable-timer 40 4)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(goal MILITARY 0)
	(goal gl-water-retreating YES)
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
=>
	(up-disband-group-type group-type-water-attack)
	(up-reset-unit c: warship-class)
	(up-retreat-to dock c: aofe-fire-ship)
	(up-retreat-to dock c: caravel)
	(up-retreat-to dock c: elite-caravel)
	(up-set-attack-stance warship-class c: no-attack)
	(enable-timer 40 5)
	(set-strategic-number sn-number-boat-attack-groups 0)
	(set-goal gl-water-retreating NO)
)

(defrule
	(goal MILITARY 0)
	(goal gl-water-retreating YES)
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
=>
	(up-disband-group-type group-type-water-attack)
	(up-reset-unit c: warship-class)
	(up-retreat-to dock c: galley-line)
	(up-retreat-to dock c: fire-ship-line)
	(up-retreat-to dock c: demolition-ship-line)
	(up-retreat-to dock c: turtle-ship-line)
	(up-retreat-to dock c: cannon-galleon-line)
	(up-retreat-to dock c: longboat-line)
	(up-set-attack-stance warship-class c: no-attack)
	(enable-timer 40 5)
	(set-strategic-number sn-number-boat-attack-groups 0)
	(set-goal gl-water-retreating NO)
)

; ============= EARLY GAME STUFF

#load-if-defined TURBO-RANDOM-MAP
(defrule
	(goal gl-normal-milling 0)
=>
	(set-goal gl-normal-milling 1)
)
#end-if

(defrule
	(game-time > 300)
	(or	(game-time > 2400)
		(death-match-game))
=>
	(up-jump-rule 182)
)

(defrule
	(up-compare-const gv-death-match == 0)
	(building-type-count town-center == 1)
	(strategic-number sn-nomad-style-start == 0)
	(game-time < 10)
	(up-compare-goal gl-my-villager-count-total < 10)
=>
	(set-goal gl-modern-build-order 1); 1
	(disable-self)
)

(defrule
	(map-type oasis)
	(up-compare-const gv-death-match == 0)
	(goal POSITION FLANK)
	(up-compare-goal gl-DRUSH-CONTROL > 0)
	(player-human target-player)
	(up-compare-const gv-wall-castle-push == 1)
	(goal gl-current-age gv-dark)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(players-military-population target-player < 3)
	(or	(players-building-type-count target-player palisade-wall > 8)
		(players-building-type-count target-player stone-wall > 2))
=>
	(set-goal gl-strategy fc-notice)
	(set-goal gl-strategy-type FC2)
	(set-strategic-number sn-strategy-lock 1)
)

(defrule
	(goal gl-strategy fc-notice)
	(players-military-population target-player >= 3)
	(goal gl-current-age gv-dark)
=>
	(set-goal gl-strategy flush)
	(set-goal gl-strategy-type basic-flush)
	(set-goal gl-feudal-infantry FLUSH-DEFENCE-MAA)
	(set-goal gl-feudal-archery FLUSH-DEFENCE-ARCHER)
)

(defrule
	(goal gl-strategy fc-notice)
	(up-compare-goal gl-current-age >= gv-dark-up)
=>
	(set-goal gl-strategy castle-drop)
)

(defrule
	(players-military-population focus-player < 16)
	(up-compare-goal gl-enemy-skirmisher-count > 4)
	(up-compare-goal gl-enemy-archer-count < 3)
	(current-age == feudal-age)
	(players-current-age focus-player == feudal-age)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
)

(defrule
	(or	(up-compare-goal TSA >= 1)
		(goal gl-patrol-defence patrol-on))
	(players-military-population focus-player < 13)
	(up-compare-goal gl-enemy-skirmisher-count > 4)
	(up-compare-goal gl-enemy-archer-count < 3)
	(current-age == feudal-age)
	(players-current-age focus-player == feudal-age)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-hitpoints > 30)
=>
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
	(up-reset-scouts)
	(up-target-point gl-position-self-x action-move -1 -1)
	(disable-self)
)

(defrule
	(game-time > 15)
	(game-time < 25)
	(current-age == dark-age)
	(population-cap >= 75)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-compare-const gv-grouped-by-team == 1)
	(up-compare-const gv-players-in-team == 2)
	(strategic-number sn-barbarian-count == 2)
	(up-compare-const gv-death-match == 0)
	(up-allied-sn any-computer-ally sn-civ-comparison s:>= sn-civ-comparison)
	(or	(up-allied-sn any-computer-ally sn-civ-comparison s:> sn-civ-comparison)
		(up-allied-goal any-computer-ally gl-strategy-type <= controlled-flush))
=>
	(set-goal gl-strategy mixed-strategy)
	(set-goal POSITION POCKET)
	(set-goal gl-strategy-type FC2)
)

(defrule
	(goal gl-strategy turkish-bombardment)
	(goal gl-strategy-type FC2)
=>
	(set-goal gl-strategy-type FC)
)


(defrule
	(game-time > 30)
=>
	(up-jump-rule 4)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local g: gl-scout-unit c: 1)
	(up-find-local c: villager-class c: 1)
	(up-get-point position-flank gl-point-x)
	(up-copy-point gl-point2-x gl-point-x)
	(up-lerp-tiles gl-point2-x gl-position-self-x c: -8)
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 regicide-strategy)
)

(defrule
	(game-time > 20)
	(game-time < 25)
	(current-age == dark-age)
	(goal POSITION FLANK)
	(population-cap >= 75)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(goal temporary-goal 1)
	(up-set-target-object search-local c: 0)
	(up-path-distance gl-point-x 0 > 210)
	(up-path-distance gl-point2-x 0 > 210)
	(or	(up-path-distance gl-point-x 0 != 65535)
		(up-path-distance gl-point2-x 0 != 65535))
=>
	(set-goal temporary-goal2 boom-strategy)
)

(defrule
	(goal temporary-goal 1)
	(up-set-target-object search-local c: 0)
	(up-path-distance gl-point-x 0 > 150)
	(up-path-distance gl-point2-x 0 > 150)
	(or	(up-path-distance gl-point-x 0 != 65535)
		(up-path-distance gl-point2-x 0 != 65535))
=>
	(up-modify-goal gl-strategy g:= temporary-goal2)
	(set-goal POSITION POCKET)
	(set-goal gl-rush-suitability-on-map LOW)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-DRUSH NO)
	(chat-to-allies "Pathing test: enemy might be inaccessible -> FC")
)

(defrule
	(goal gl-DRUSH YES)
	(strategic-number sn-strategy-lock == 0)
	(up-compare-const gv-maximum-age >= feudal-age)
	(soldier-count == 0)
	(unit-type-count-total militiaman-line == 0)
=>
	(set-goal gl-DRUSH NO)
	(set-goal gl-feudal-infantry 0)
)

(defrule
	(map-type migration)
	(game-time > 90)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(strategic-number sn-barbarian-count >= 4)
	(goal gl-super-pocket YES)
=>
	(set-goal SLING 3)
	(disable-self)
)

(defrule
	(goal POSITION FLANK)
	(or	(goal gl-strategy flush)
		(goal gl-strategy scrush))
	(up-compare-goal gl-current-age <= gv-feudal-up)
	(players-current-age focus-player == feudal-age)
	(up-compare-goal gl-military-percentage < 230)
	(players-unit-type-count any-ally knight-line > 1)
	(up-compare-goal gl-enemy-archer-count < 2)
	(up-compare-goal gl-enemy-skirmisher-count > 9)
	(up-compare-goal gl-enemy-eagle-count < 3)
	(up-compare-goal gl-enemy-cavalry-count < 3)
=>
	(chat-to-allies "My opponent is going full skirms, some knights would help.")
	(disable-self)
)

(defrule
	(or	(up-pending-objects c: town-center < 2)
		(or	(up-timer-status 15 == timer-running)
			(strategic-number sn-percent-building-cancellation >= 93)))
=>
	(up-jump-rule 3)
)

(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: town-center-foundation c: 10)
)


(defrule
	(up-set-target-object search-local g: temporary-goal)
	(up-object-data object-data-tasks-count == 1)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-get-object-data object-data-map-zone-id temporary-goal2)
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-filter-distance c: -1 c: 30)
	(up-find-local c: villager-class c: 30)
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-remove-objects search-local object-data-map-zone-id g:!= temporary-goal2)
	(up-remove-objects search-local object-data-index > 2)
	(up-target-objects 1 action-default -1 -1)
	(up-jump-rule 1)
)

(defrule
	(up-set-target-object search-local g: temporary-goal)
=>
	(up-modify-goal temporary-goal c:+ 1)
	(up-jump-rule -2)
)

(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(up-modify-goal temporary-goal3 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 31)
	(up-find-remote c: wild-boar c: 3)
	(up-find-remote c: javelina c: 3)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal2 g:= gl-remote-total)
	(up-modify-goal temporary-goal2 g:+ gl-boar-eaten)
	(up-modify-sn sn-focus-player-number g:= temporary-goal3)
)

(defrule
	(goal POSITION FLANK)
	(or	(goal gl-strategy flush)
		(goal gl-strategy scrush))
	(game-time < 1800)
	(up-compare-goal gl-current-age <= gv-castle)
	(or	(up-compare-goal gl-current-age <= gv-feudal-up)
		(up-compare-goal gl-military-percentage2 < 200))
	(players-current-age target-player == feudal-age)
	(players-unit-type-count any-ally knight-line > 1)
	(unit-type-count-total spearman-line < 8)
	(unit-type-count-total camel-line < 3)
	(up-compare-goal gl-enemy-heavy-cavalry-count > 4)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(goal temporary-goal 1)
=>
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(up-full-reset-search)
	(up-find-remote c: knight-line c: 1)
	(up-modify-sn sn-focus-player-number g:= threat-player)
	(up-find-remote c: knight-line c: 1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)

(defrule
	(goal temporary-goal 1)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-send-flare gl-point-x)
	(chat-to-allies "Enemy knights here.")
	(disable-self)
)

(defrule
	(or	(up-compare-goal gl-current-age >= gv-dark-up)
		;(up-compare-goal gl-total-food-amount >= dark-up-food))
		(and	(up-compare-goal gl-total-food-amount >= 400)
			(up-compare-goal gl-my-villager-count-total > 20)))
	(goal gl-feudal-infantry men-at-arms)
=>
	(set-goal gl-DRUSH YES)
	(disable-self)
)

(defrule
	(or	(up-compare-goal temporary-goal2 < 2)
		(or	(goal POSITION POCKET)
			(or	(up-compare-const gv-x-vs-one-challenge == 1)
				(or	(strategic-number sn-strategy-lock == 1)
					(or	(game-time > 540)
						(goal gl-front-gold -1))))))
=>
	(up-jump-rule 3)
)

(defrule
	(or	(and	(up-compare-goal gl-front-gold > 0)
			(or	(up-compare-goal gl-target-player-distance >= 90)
				(up-compare-goal temporary-goal2 < 3)))
		(and	(or	(player-human target-player)
				(up-compare-goal gl-target-player-distance >= 90))
			(and	(up-compare-goal temporary-goal2 < 3)
				(player-in-game any-human-enemy)))); gaia is human
=>
	(up-jump-rule 2)
)

(defrule
	(or	(game-time > 540)
		(or	(strategic-number sn-sheep-count < 7)
			(or	(up-compare-goal gl-strategy-type >= FC)
				(or	(up-compare-goal gl-current-age != gv-dark)
					(or	(up-compare-const gv-drush-rush == 0)
						(or	(strategic-number sn-lumber-camp-max-distance > 15)
							(or	(game-time < 120)
								(up-compare-goal gl-rush-suitability-on-map != GOOD))))))))
=>
	(up-jump-rule 1)
)

(defrule
	(goal gl-DRUSH YES)
	(up-compare-const gv-maximum-age >= castle-age)
	(or	(and	(or	(goal gl-boar-stealing -2)
				(goal gl-boar-stealing 2))
			(up-compare-goal temporary-goal2 > 2))
		;(up-compare-goal gl-front-gold <= -2))
		(up-compare-goal gl-front-gold <= -200));not for now
=>
	(set-goal gl-strategy ranged-rush-strategy)
	(set-goal gl-strategy-type FC2)
	(set-strategic-number sn-strategy-lock 1)
	(chat-to-allies "Going drush FC.")
	(disable-self)
)

(defrule
	(up-compare-goal gl-DRUSH != YES); Shared goal
	(or	(up-research-status c: ri-loom < research-pending)
		(or	(civ-selected aztec)
			(civ-selected mayan)))
	(up-compare-goal gl-my-villager-count > 24)
=>
	(set-goal gl-loom-notice YES)
)

(defrule
	(goal gl-panic-xbow-counter 1)
=>
	(set-goal gl-panic-xbow-counter 0)
)

(defrule
	(up-players-in-game enemy == 1)
	(player-in-game any-enemy)
=>
	(up-get-player-fact this-any-enemy player-number 0 temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(disable-self)
)

(defrule
	(up-compare-goal gl-anti-trush-time != -1)
	(game-time g:>= gl-anti-trush-time)
=>
	(set-goal gl-anti-trush-time -1)
)

(defrule
	(game-time > 0)
	(death-match-game)
	(difficulty >= hard)
	(up-compare-const gv-explored-map == 0)
	(up-point-contains gl-enemy-position-x c: town-center)
=>
	(set-goal gl-enemy-position-x -1)
	(set-goal gl-enemy-position-y -1)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal)
	(up-compare-goal gl-current-age <= gv-feudal-up)
	(goal gl-feudal-infantry 0)
	(up-research-status c: ri-man-at-arms == research-pending)
	(unit-type-count-total militiaman-line < 3)
=>
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-train -1 -1)
	(up-find-local c: barracks c: 1)
	(up-target-point 0 action-stop -1 -1)
	(disable-self)
)

(defrule
	(up-compare-goal gl-advanced-cavalry != heavy-knights)
	(up-compare-goal gl-strategy != knight-boom)
	(up-research-status c: ri-cavalier == research-pending)
	(unit-type-count-total knight-line < 10)
=>
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-train -1 -1)
	(up-find-local c: stable c: 240)
	(up-target-point 0 action-stop -1 -1)
	(disable-self)
)

(defrule
	(or	(goal gl-strategy krush)
		(goal gl-strategy knight-rush))
	(up-compare-goal gl-target-player-distance >= 36)
	(up-compare-const gv-maximum-age == imperial-age)
	(up-compare-const dm-pala-in-tech-tree == 1)
	(goal POSITION POCKET)
	(up-compare-goal gl-current-age >= gv-castle)
	(building-type-count town-center > 2)
	(goal gl-rush-suitability-on-map VERY-LOW)
	(players-military-population focus-player < 2)
=>
	(set-goal gl-strategy knight-boom)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal TC 1)
)

(defrule
	(goal gl-current-age gv-dark)
	(goal gl-strategy-type FC2)
	(up-compare-goal gl-gathered-relics > 3)
=>
	(set-goal gl-strategy-type FC)
)

(defrule
	(game-time >= 1500)
=>
	(up-jump-rule 17)
)

(defrule
	(game-time > 4)
	(game-time < 10)
	(strategic-number sn-nomad-style-start == 1)
=>
	(up-full-reset-search)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-id temporary-goal)
	(up-get-point position-object gl-point-x)
	(up-reset-search 0 1 0 0)
)

(defrule
	(game-time > 4)
	(game-time < 10)
	(strategic-number sn-nomad-style-start == 1)
	(up-set-target-by-id g: temporary-goal)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(not	(up-path-distance gl-point-x 0 < 5000))
=>
	(chat-to-all "TRAPPED VILLAGER SAVE PLS")
	(disable-self)
)

(defrule
	(game-time > 4)
	(game-time < 10)
	(strategic-number sn-nomad-style-start == 1)
	(up-set-target-by-id g: temporary-goal)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 0 1 0 0)
	(up-jump-rule -2)
)

(defrule
	(game-time < 1500)
=>
	(up-modify-goal temporary-goal8 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-find-local c: villager-class c: 50)
	(up-find-local c: fishing-ship c: 50)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 5)
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: deer-class c: 240)
	(up-remove-objects search-remote object-data-carry == 0)
	(up-remove-objects search-remote object-data-index > 0)
	(set-goal gl-deer-distance 7)
	(set-goal temporary-goal 0)
	(set-goal 473 0)
)

(defrule
	(game-time < 1500)
	(not	(up-set-target-object search-remote c: 0))
	(up-compare-goal gl-deer-distance < 35)
=>
	(up-filter-distance c: -1 g: gl-deer-distance)
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: deer-class c: 240)
	(up-remove-objects search-remote object-data-carry == 0)
	(up-remove-objects search-remote object-data-index > 0)
	(up-modify-goal gl-deer-distance c:+ 2)
	(up-jump-rule -1)
)

(defrule
	(up-set-target-object search-local g: temporary-goal)
	(or	(up-object-data object-data-target == boar-food)
		(or	(up-object-data object-data-target == deer-food)
			(or	(up-object-data object-data-target == sheep)
				(or	(up-object-data object-data-target == forage-food)
					(or	(up-object-data object-data-target == fish-food)
						(or	(up-object-data object-data-target == farm-food)
							(up-object-data object-data-target == deep-fish-food)))))))
=>
	(up-get-object-data object-data-carry temporary-goal2)
	(up-modify-goal gl-total-food-amount g:+ temporary-goal2)
)

(defrule
	(game-time < 900)
	(up-set-target-object search-local g: temporary-goal)
	(up-object-data object-data-target == boar-food)
=>
	(up-modify-goal 473 c:+ 1)
)

(defrule
	(game-time > 0)
	(game-time < 1500)
	(up-set-target-object search-local g: temporary-goal)
=>
	(up-modify-goal temporary-goal c:+ 1)
	(up-jump-rule -3)
)

(defrule
	(or	(and	(up-compare-goal gl-my-villager-count < 25)
			(or	(up-compare-goal gl-my-villager-count < 22)
				(up-compare-goal gl-strategy-type <= controlled-flush)))
		(or	(game-time > 1080)
			(or	(building-type-count mill != 1)
				(or	(up-pending-objects c: mill > 0)
					(or	(goal gl-trush-tower-order 100)
						(goal gl-trush-tower-order 200))))))
=>
	(up-jump-rule 3)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-filter-include -1 -1 -1 on-mainland)
	(up-filter-distance c: -1 c: 26)
	(up-find-remote c: forage-class c: 20)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 7); 6
	(up-find-local c: mill c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal5 g:= gl-remote-total)
	(up-modify-goal temporary-goal4 g:= gl-remote-total)
	(set-goal temporary-goal3 1)
)

(defrule
	(up-compare-goal temporary-goal5 > 0)
	(goal gl-local-last 1)
=>
	(up-set-target-object search-remote g: temporary-goal3)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-reset-search 1 1 1 0)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-modify-goal temporary-goal5 c:- 1)
	(up-find-local c: mill c: 1)
	(up-get-search-state gl-local-total)
	(up-jump-rule -1)
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(goal gl-local-last 0)
	(building-type-count mill == 1)
	(up-pending-objects c: mill < 1)
	(wood-amount < 160)
=>
	(set-strategic-number sn-farm-block 1)
)

(defrule
	(or	(game-time < 360)
		(or	(goal gl-resources-on-map plenty)
			(or	(game-time > 1080)
				(or	(building-type-count mill != 1)
					(or	(up-pending-objects c: mill > 0)
						(or	(goal gl-trush-tower-order 100)
							(or	(goal gl-trush-tower-order 200)
								(up-compare-goal gl-deer-luring > 0))))))))
=>
	(up-jump-rule 3)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-filter-include -1 -1 -1 on-mainland)
	(up-filter-distance c: -1 c: 24)
	(up-find-remote c: deer c: 20)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 14)
	(up-find-local c: mill c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal5 g:= gl-remote-total)
	(up-modify-goal temporary-goal4 g:= gl-remote-total)
	(set-goal temporary-goal3 1)
)

(defrule
	(up-compare-goal temporary-goal5 > 0)
	(or	(up-compare-goal gl-remote-last < 5)
		(goal gl-local-last 1))
=>
	(up-set-target-object search-remote g: temporary-goal3)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-reset-search 1 1 0 0)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-modify-goal temporary-goal5 c:- 1)
	(up-find-remote c: deer c: 5)
	(up-find-local c: mill c: 1)
	(up-get-search-state gl-local-total)
	(up-jump-rule -1)
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(goal gl-remote-last 5)
	(goal gl-local-last 0)
	(building-type-count mill == 1)
	(up-pending-objects c: mill < 1)
	(wood-amount < 160)
=>
	(set-strategic-number sn-farm-block 2)
)

(defrule
	(game-time < 1500)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal8)
)

(defrule
	(up-compare-goal gl-deer-luring > 0)
	(goal POSITION FLANK)
	(or	(not	(up-set-target-by-id g: 496))
		(and	(up-set-target-by-id g: 496)
			(up-object-data object-data-hitpoints == 0)))
	(game-time > flush-deer-lure-time); 530 if not hardest
	(or	(game-time > 630)
		(up-compare-goal gl-strategy-type <= controlled-flush))
=>
	(set-goal gl-deer-luring -1)
)

(defrule
	(building-type-count wall-class >= max-circle-scouting-walls)
	(nand	(death-match-game)
		(up-compare-const gv-explored-map == 1))
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(building-type-count town-center > 0)
=>
	(up-modify-goal gl-new-scouting-style g:= gv-new-scouting-style)
	(up-modify-goal temporary-goal2 g:= gv-new-scouting-style)
	(up-modify-goal temporary-goal2 c:- 1)
	(up-modify-goal temporary-goal2 c:* -1)
	(up-modify-goal temporary-goal g:= gl-map-wood-percentage)
	(up-modify-goal temporary-goal c:z/ 21)
	(up-modify-goal temporary-goal c:+ 1)
	(up-modify-goal temporary-goal g:* temporary-goal2)
	(up-modify-goal gl-new-scouting-style g:+ temporary-goal)
	(disable-self)
)

(defrule
	(or	(and	(map-type oasis)
			(not	(player-valid 4)))
		(or	(and	(up-gaia-type-count c: deer == 0)
				(or	(game-time > 120)
					(strategic-number sn-lumber-camp-max-distance >= 20)))
			(up-compare-goal gl-early-scout-time > 0)))
=>
	(up-jump-rule 2)
)

(defrule
	(game-time < 100)
	(up-compare-const hardest-and-multiple-players == 0)
	(goal gl-new-scouting-style 1)
	(up-players-in-game any >= preferred-player-number)
	(goal POSITION FLANK)
	(goal gl-rush-suitability-on-map GOOD)
	(strategic-number sn-sheep-count > 5)
	(up-gaia-type-count g: gl-boar-unit > 1)
	(up-compare-const gv-explored-map == 0)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
=>
	(up-get-fact game-time 0 gl-early-scout-time)
	(set-strategic-number sn-home-exploration-time long-home-exploration-time)
	(up-modify-goal gl-early-scout-time c:+ 190)
	(disable-self)
)

(defrule
	(game-time < 170)
	(up-compare-const hardest-and-multiple-players == 0)
	(goal gl-new-scouting-style 1)
	(up-players-in-game any >= preferred-player-number)
	(goal POSITION FLANK)
	(goal gl-rush-suitability-on-map GOOD)
	(strategic-number sn-sheep-count > 7)
	(up-gaia-type-count g: gl-boar-unit > 1)
	(up-compare-const gv-explored-map == 0)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
=>
	(up-get-fact game-time 0 gl-early-scout-time)
	(set-strategic-number sn-home-exploration-time long-home-exploration-time)
	(up-modify-goal gl-early-scout-time c:+ 190)
	(disable-self)
)

(defrule
	(up-compare-const gv-death-match == 0)
	(strategic-number sn-monk-trained == 1)
	(building-type-count monastery > 0)
	(unit-type-count-total monk-set == 0)
	(or	(military-population > 14)
		(up-compare-goal gl-military-percentage >= 80))
	(or	(up-compare-goal threat-time > 30000)
		(up-compare-goal TSA >= 1))
	(up-compare-goal gl-sighted-relic-count > 0)
=>
	(set-strategic-number sn-monk-trained 0)
	(disable-self)
)

(defrule
	(or	(up-compare-goal gl-mining-camp-notice >= 17348)
		(or	(game-time > 1800)
			(or	(and	(building-type-count-total mining-camp < 2)
					(dropsite-min-distance gold < 5))
				(or	(building-type-count mining-camp < 1)
					(death-match-game)))))
=>
	(up-jump-rule 5)
)

(defrule
	(strategic-number sn-gold-gatherer-percentage > 0)
	(dropsite-min-distance gold > 4)
	(can-build mining-camp)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 30)
	(up-find-remote c: gold-mine c: 1)
)

(defrule
	(strategic-number sn-gold-gatherer-percentage > 0)
	(dropsite-min-distance gold > 4)
	(dropsite-min-distance gold < 30)
	(can-build mining-camp)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(set-strategic-number sn-placement-zone-size 5)
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(up-build place-point 0 c: mining-camp)
	(set-goal gl-mining-camp-notice 17349)
	(disable-self)
)

(defrule
	(strategic-number sn-stone-gatherer-percentage > 0)
	(dropsite-min-distance gold < 5)
	(dropsite-min-distance stone > 4)
	(dropsite-min-distance stone < 30)
	(can-build mining-camp)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 30)
	(up-find-remote c: stone-mine c: 1)
)

(defrule
	(strategic-number sn-stone-gatherer-percentage > 0)
	(dropsite-min-distance gold < 5)
	(dropsite-min-distance stone > 4)
	(dropsite-min-distance stone < 30)
	(can-build mining-camp)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(set-strategic-number sn-placement-zone-size 5)
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(up-build place-point 0 c: mining-camp)
	(set-goal gl-mining-camp-notice 17348)
	(disable-self)
)

(defrule
	(or	(and	(dropsite-min-distance stone > 4)
			(and	(dropsite-min-distance stone < 30)
				(and	(dropsite-min-distance gold < 5)
					(strategic-number sn-stone-gatherer-percentage > 0))))
		(and	(dropsite-min-distance gold > 4)
			(strategic-number sn-gold-gatherer-percentage > 0)))
	(or	(up-compare-goal gl-mining-camp-notice >= 17348)
		(can-build mining-camp))
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(up-compare-const gv-regicide == 1)
=>
	(up-modify-sn sn-sheep-count c:+ 4)
	(up-modify-goal gl-boar-eaten c:+ 1)
	(disable-self)
)

(defrule
	(starting-age == feudal-age)
	(building-type-count town-center > 0)
	(up-compare-goal gl-my-villager-count > 6)
	(or	(up-compare-goal gl-my-villager-count > 15)
		(food-amount >= 150))
	(can-research ri-double-bit-axe)
=>
	(research ri-double-bit-axe)
)

#load-if-not-defined WONDER-RACE
(defrule
	(building-type-count town-center > 0)
	(or	(up-research-status c: ri-double-bit-axe >= research-pending)
		(starting-resources != low-resources))
	(or	(and	(starting-age == feudal-age)
			(strategic-number sn-minimum-water-body-size-for-dock == land-map-style))
		(and	(goal gl-strategy flush)
			(or	(and	(building-type-count-total blacksmith > 0)
					(wood-amount > 250))
				(up-compare-goal gl-enemy-wall-count-total > 4))))
;	(can-research ri-horse-collar)
=>
	(research ri-horse-collar)
)
#end-if

(defrule
	(or	(game-time > 420)
		(and	(building-type-count-total mill > 0)
			(or	(and	(or	(dropsite-min-distance food == -1)
						(dropsite-min-distance food s:> sn-maximum-food-drop-distance))
					(dropsite-min-distance deer-hunting <= 17))
				(cc-players-unit-type-count 0 forage-class == 0))))
=>
	(set-strategic-number sn-enable-boar-hunting 1)
	(set-strategic-number sn-maximum-hunt-drop-distance 17)
)

(defrule
	(or	(game-time < 1800)
		(up-compare-goal gl-current-age < gv-feudal))
	(dropsite-min-distance live-boar < 11)
	(strategic-number sn-enable-boar-hunting == 1)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 5)
)

(defrule
	(dropsite-min-distance live-boar > 10)
	(strategic-number sn-maximum-hunt-drop-distance == 5)
	(strategic-number sn-enable-boar-hunting == 1)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 10)
)

(defrule
	(game-time > 420)
	(current-age == dark-age)
	(or	(goal gl-DRUSH YES)
		(strategic-number sn-sheep-count < 6))
	(or	(up-compare-goal gl-strategy-type >= FC)
		(strategic-number sn-sheep-count < 8))
	(strategic-number sn-maximum-hunt-drop-distance == 17)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 24)
)

(defrule
	(or	(unit-type-count dead-miner1 > 0)
		(or	(unit-type-count dead-miner2 > 0)
			(and	(unit-type-count villager-gold < 5)
				(goal threat-target villager-class))))
	(game-time > 1200)
	(goal TSA 0)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(building-type-count-total mining-camp < 3)
	(strategic-number sn-mining-camp-max-distance >= 40)
	(strategic-number sn-gold-gatherer-percentage > 10)
	(up-pending-objects c: mining-camp < 1)
	(can-build mining-camp)
=>
	(build mining-camp)
)

(defrule
	(goal gl-current-age gv-dark)
	(resource-found gold)
	(dropsite-min-distance gold <= 17)
	(game-time > 180)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 18)
	(up-find-remote c: gold-mine c: 1)
	(up-set-target-object search-remote c: 0)
	(disable-self)
)

(defrule
	(goal gl-current-age gv-dark)
	(resource-found gold)
	(dropsite-min-distance gold <= 17)
	(game-time > 180)
=>
	(up-get-point position-object gl-point-x)
	(up-get-point position-mirror gl-saved-point-x); position-target
	(up-get-point-distance gl-point-x gl-saved-point-x temporary-goal2)
	(up-get-point-distance gl-position-self-x gl-saved-point-x gl-front-gold)
	(up-modify-goal gl-front-gold g:- temporary-goal2)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(disable-self)
)

(defrule
	(up-compare-goal gl-current-age-time-for-farms > 100)
	(goal gl-FC-type gv-2-villagers)
=>
	(set-goal gl-current-age-time-for-farms 100)
	(up-modify-goal gl-current-age-time-for-farms c:- farm-time-substraction)
	(disable-self)
)

(defrule
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(goal gl-current-age gv-dark)
	(resource-found food)
	(up-compare-goal gl-boar-eaten > 1)
=>
	(up-modify-sn sn-sheep-count c:+ 1)
	(up-modify-goal gl-lured-deer-count c:+ 1)
	(disable-self)
)

(defrule
	(or	(up-compare-goal gl-strategy-type <= controlled-flush)
		(or	(up-compare-goal gl-lured-deer-count > 4)
			(civ-selected mayan)))
	(resource-found food)
	(up-compare-goal gl-lured-deer-count > 1)
=>
	(up-modify-sn sn-sheep-count c:+ 2)
	(disable-self)
)

(defrule
	(up-compare-goal gl-feudal-archery != skirmishers)
	(up-compare-goal gl-feudal-archery != 0)
	(goal gl-current-age gv-dark)
	(nand	(building-type-count monastery > 0)
		(and	(unit-type-count monk-set > 0)
			(cc-players-unit-type-count 0 relic > 1)))
	(cc-players-unit-type-count 0 gold-mine < large-number-forage)
	(or	(cc-players-unit-type-count 0 gold-mine < large-number-deer)
		(cc-players-unit-type-count 0 relic < 10))
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
=>
	(set-goal gl-feudal-archery skirmishers)
	(set-goal gl-feudal-infantry 0)
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(defrule
	(or	(and	(player-valid 5)
			(and	(or	(up-compare-goal gl-military-percentage > 70)
					(up-compare-goal gl-pair-player-military > 7))
				(or	(up-compare-goal gl-target-player-distance > 90)
					(up-compare-goal gl-military-percentage >= 90))))
		(and	(up-compare-goal gl-military-rating >= 1)
			(up-compare-goal gl-military-percentage >= 60)))
=>
	(up-jump-rule 1)
)

(defrule
	(goal gl-feudal-archery pure-archers)
	(up-compare-const gv-grouped-and-ally == 0)
	(or	(up-compare-const special-raid-unit != janissary-line)
		(up-compare-goal gl-military-percentage < 82))
	(or	(up-compare-goal gl-enemy-skirmisher-count > 1)
		(and	(military-population > 13)
			(and	(or	(up-compare-goal gl-enemy-archery-count > 4)
					(players-building-type-count focus-player archery-range > 0))
				(up-compare-goal gl-military-percentage <= 80))))
=>
	(set-goal gl-feudal-archery archers)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-dark)
	(current-age == dark-age)
	(or	(and	(up-compare-const gv-grouped-by-team == 1)
			(and	(up-players-in-game ally >= 2)
				(up-players-in-game any >= preferred-player-number)))
		(up-compare-goal gl-gathered-relics > 1))
	(up-compare-const special-raid-unit != conquistador-line)
=>
	(set-goal gl-feudal-archery pure-archers)
	(set-goal gl-feudal-infantry 0)
)

(defrule
	(goal gl-feudal-archery skirmishers)
	(goal gl-feudal-infantry 0)
	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
=>
	(set-goal gl-feudal-archery archer-skirm)
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(defrule
	(up-compare-const gv-maximum-age > feudal-age)
	(goal gl-feudal-infantry men-at-arms)
	(or	(goal gl-enemy-strategy TRUSH)
		(and	(goal gl-current-age gv-dark)
			(military-population == 0)))
=>
	(set-goal gl-feudal-archery archer-skirm)
	(set-goal gl-feudal-infantry 0)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(goal gl-feudal-archery archer-skirm)
	(goal gl-feudal-infantry 0)
	(current-age == feudal-age)
	(game-time > 900)
	(players-military-population focus-player < 3)
	(players-building-type-count target-player watch-tower == 0)
	(strategic-number sn-nomad-style-start == 0)
	(players-building-type-count target-player archery-range == 0)
	(up-compare-const special-raid-unit != conquistador-line)
=>
	(set-goal gl-feudal-archery archers)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(goal gl-feudal-archery skirmishers)
	(current-age == feudal-age)
	(up-compare-const special-raid-unit != conquistador-line)
	(or	(and	(map-size tiny)
			(goal gl-enemy-strategy KNIGHT-RUSH))
		(up-compare-goal gl-enemy-heavy-cavalry-count > 0))
=>
	(set-goal gl-feudal-archery archers)
	(set-goal gl-feudal-infantry 0)
	(set-strategic-number sn-skip-first-mining-camp 0)
	(disable-self)
)

(defrule
	(up-compare-flag gl-flag == disabled-luring-scouting)
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(up-modify-flag gl-flag c:- disabled-luring-scouting)
)

(defrule
	(building-type-count-total mining-camp > 0)
	(or	(up-compare-goal gl-current-age >= gv-castle)
		(or	(game-time > 1200)
			(building-type-count-total mining-camp > 1)))
=>
	(up-modify-sn sn-mining-camp-max-distance c:max 27)
)

(defrule
	(game-time > 600)
	(strategic-number sn-number-explore-groups < 4)
	(strategic-number sn-nomad-style-start == 1)
	(players-building-count every-enemy == 0)
	(soldier-count > 1)
=>
	(set-strategic-number sn-number-explore-groups 4)
	(set-strategic-number sn-total-number-explorers 4)
)

(defrule
	(game-time > 600)
	(strategic-number sn-number-explore-groups == 4)
	(strategic-number sn-nomad-style-start == 1)
	(or	(players-building-count any-enemy > 0)
		(and	(up-compare-goal threat-time < 3000)
			(up-compare-goal threat-player >= 1)))
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(up-reset-scouts)
	(set-strategic-number sn-retreating 1)
)

(defrule
	(game-time s:< sn-home-exploration-time)
	(game-time > 285)
	(strategic-number sn-home-exploration-time == 300)
	(soldier-count > 0)
	(or	(and	(up-compare-goal gl-boar-eaten < 2)
			(and	(or	(up-gaia-type-count g: gl-boar-unit < 1)
					(up-compare-goal gl-boar-eaten < 1))
				(up-gaia-type-count g: gl-boar-unit < 2)))
		(or	(dropsite-min-distance gold == -1)
			(dropsite-min-distance stone == -1)))
=>
	(set-strategic-number sn-home-exploration-time long-home-exploration-time)
)

(defrule
	(game-time s:< sn-home-exploration-time)
	(game-time > 285)
	(strategic-number sn-home-exploration-time == 300)
	(soldier-count > 0)
	(or	(and	(up-gaia-type-count c: deer-class < 2)
			(up-compare-goal gl-lured-deer-count < 4))
		(or	(strategic-number sn-sheep-count < 8)
			(goal gl-rush-suitability-on-map VERY-LOW)))
=>
	(set-strategic-number sn-home-exploration-time long-home-exploration-time)
)

(defrule
	(game-time < 1500)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-flank gl-point-x)
	(up-get-point position-object gl-saved-point-x)
	(up-set-target-by-id g: 496)
	(up-get-point position-object gl-temporary-point-x)
)

(defrule
	(or	(or	(game-time <= 410)
			(or	(up-compare-goal gl-deer-luring > 0)
				(game-time s:< sn-home-exploration-time)))
		(or	(up-compare-goal gl-villager-laming > 0)
			(or	(goal gl-early-raid YES)
				(or	(up-compare-goal gl-rush-suitability-on-map != GOOD)
					(up-timer-status 13 == timer-running)))))
=>
	(up-jump-rule 5)
)

(defrule
	(game-time < 1500)
	(up-compare-const gv-pocket-position == 0)
	(up-timer-status 24 != timer-running)
	(strategic-number sn-number-explore-groups > 0)
	(game-time g:> gl-circle-scouting-time)
	(strategic-number sn-nomad-style-start == 1)
	(players-building-count target-player == 0)
	(soldier-count > 0)
=>
	(up-send-scout group-type-land-explore position-mirror)
	(enable-timer 24 110)
)

(defrule
	(game-time < 900)
	(game-time g:> gl-circle-scouting-time)
	(player-valid 6)
	(or	(up-compare-const gv-pocket-position == 0)
		(goal gl-DRUSH YES))
	(up-compare-goal gl-target-player-distance > estimated-enemy-distance1)
	(up-timer-status 24 != timer-running)
	(unit-type-count scout-unit > 0)
	(strategic-number sn-number-explore-groups > 0)
	(up-point-distance gl-saved-point-x gl-position-self-x > estimated-enemy-distance2)
	(up-point-distance gl-point-x gl-position-self-x < estimated-enemy-distance2)
=>
	(up-target-point gl-point-x action-move -1 no-attack)
	(enable-timer 24 40)
)

(defrule
	(game-time < 1100)
	(up-compare-const gv-pocket-position == 1)
	(up-timer-status 24 != timer-running)
	(strategic-number sn-number-explore-groups > 0)
	(game-time g:> gl-circle-scouting-time)
	(player-valid 6)
	(up-compare-goal gl-target-player-distance < estimated-enemy-distance1)
	(game-time > 510)
	(goal gl-DRUSH YES)
	(players-building-count target-player > 0)
=>
	(up-send-scout group-type-land-explore position-flank)
	(enable-timer 24 70)
)

(defrule
	(game-time < 1100)
	(up-compare-const gv-pocket-position == 0)
	(up-timer-status 24 != timer-running)
	(strategic-number sn-number-explore-groups > 0)
	(game-time g:> gl-circle-scouting-time)
	(player-valid 6)
	(up-compare-goal gl-target-player-distance > 90)
	(game-time > 480)
	(or	(game-time > 600)
		(goal gl-DRUSH YES))
	(or	(players-building-count target-player > 0)
		(up-compare-goal gl-new-scouting-style != 1))
=>
	(up-send-scout group-type-land-explore position-flank)
	(enable-timer 24 80)
)

(defrule
	(game-time < 1200)
	(up-compare-const gv-pocket-position == 1)
	(up-compare-goal gl-enemy-pocket > 0)
	(up-timer-status 24 != timer-running)
	(up-players-in-game enemy >= 3)
	(up-compare-goal gl-target-player-distance > 80)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(not	(up-projectile-detected projectile-fortification < 120000))
	(game-time > 900)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= gl-enemy-pocket)
	(up-send-scout group-type-land-explore position-focus)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(enable-timer 24 80)
)

(defrule
	(up-compare-goal gl-deer-luring > 0)
	(up-set-target-by-id g: 496)
	(up-object-data object-data-hitpoints > 0)
	(up-point-distance gl-temporary-point-x gl-position-self-x < 12); Almost done
	(up-point-distance gl-saved-point-x gl-position-self-x < 18)
=>
	(up-jump-rule 2)
)

(defrule
	(game-time > 90)
	(up-compare-const gv-yucatan == 0)
	(up-compare-goal gl-strategy != wall-boom)
	(up-compare-goal gl-target-player-distance > 90)
	(not	(map-type black-forest))
	(or	(up-compare-goal gl-new-scouting-style != 1)
		(or	(goal gl-strategy forward)
			(goal gl-strategy trush)))
	(goal POSITION FLANK)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style); <= mixed
=>
	(set-goal gl-deer-luring -2)
)

(defrule
	(game-time > 390)
	(game-time s:> sn-home-exploration-time)
	(or	(and	(players-building-type-count target-player lumber-camp == 0)
			(and	(players-building-type-count target-player mill == 0)
				(players-building-type-count target-player mining-camp == 0)))
		(up-compare-goal gl-target-player-distance > 90))
	(goal gl-DRUSH YES)
=>
	(set-goal gl-deer-luring -2)
)

(defrule
	(up-compare-goal gl-current-age <= gv-castle)
	(or	(up-compare-const gv-wonder-race == 1)
		(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))
	(goal gl-deer-luring -2)
	(up-gaia-type-count c: deer-class > 0)
=>
	(set-goal gl-deer-luring -1)
)

#load-if-not-defined WONDER-RACE
(defrule
	(or	(game-time >= 900)
		(or	(up-compare-goal gl-deer-luring > 0)
			(or	(and	(game-time s:< sn-home-exploration-time)
					(game-time g:>= gl-early-scout-time))
				(or	(up-compare-goal gl-interfered-scout > 0)
					(or	(up-compare-goal gl-boar-stealing > 0)
						(or	(up-compare-goal gl-villager-laming > 0)
							(strategic-number sn-number-explore-groups == 0)))))))
=>
	(up-jump-rule 7)
)

(defrule
	(or	(up-compare-goal gl-new-scouting-style != 1)
		(or	(up-timer-status 13 == timer-running)
			(or	(game-time < min-scout-time)
				(or	(and	(up-compare-const gv-pocket-position == 0)
						(or	(players-building-count every-enemy > 0)
							(and	(players-building-count any-enemy > 0)
								(up-compare-goal gl-target-player-distance < 90))))
					(up-compare-goal gl-scout-point-counter >= 200)))))
=>
	(up-jump-rule 6)
)

#load-if-not-defined UP-ALLY-IN-GAME
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-object-point-x)
	(up-get-point position-object gl-point-x)
	(up-cross-tiles gl-object-point-x gl-position-center-x c: 5)
	(up-get-point-distance gl-position-self-x gl-point-x temporary-goal)
	(up-copy-point gl-point-x gl-position-self-x)
	(set-goal gl-scout-movement-tiles -1)
	(disable-self)
)
#else
(defrule
	(true)
=>
	(up-modify-goal temporary-goal3 s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= gl-my-flank1)
	(up-get-point position-focus gl-point-x)
	(up-copy-point gl-object-point-x gl-point-x)
	(up-cross-tiles gl-object-point-x gl-position-center-x c: 15)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-modify-sn sn-focus-player-number g:= temporary-goal3)
	(set-goal gl-scout-movement-tiles -1)
	(disable-self)
)
#end-if

(defrule
	(goal gl-scout-movement-tiles -1)
	(or	(and	(or	(up-compare-const gv-pocket-position == 1)
				(not	(player-valid any-ally)))
			(up-point-distance gl-point-x gl-object-point-x g:< temporary-goal))
		(and	(up-compare-const gv-pocket-position == 0)
			(and	(player-valid any-ally)
				(up-point-distance gl-point-x gl-object-point-x g:>= temporary-goal))))
=>
	(set-goal gl-scout-movement-tiles -15)
	(disable-self)
)

(defrule
	(goal gl-scout-movement-tiles -1)
=>
	(set-goal gl-scout-movement-tiles 15)
	(disable-self)
)

(defrule
	(up-compare-goal gl-early-raid != YES)
	(unit-type-count scout-unit > 0)
	(up-timer-status 24 != timer-running)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-object-point-x)
	(up-get-point position-center gl-point-x)
	(up-get-point position-center gl-saved-point-x)
	(up-cross-tiles gl-object-point-x gl-point-x g: gl-scout-movement-tiles)
	(up-add-point gl-saved-point-x gl-object-point-x c: -1)
	(up-modify-goal temporary-goal g:= gl-position-center-x)
)

(defrule
	(game-time g:> gl-circle-scouting-time)
	(timer-triggered 46)
	(up-compare-goal gl-early-raid != YES)
	(unit-type-count scout-unit > 0)
	(up-timer-status 24 != timer-running)
=>
	(up-modify-goal temporary-goal c:- 35)
	(up-modify-goal gl-saved-point-x g:* temporary-goal)
	(up-modify-goal gl-saved-point-y g:* temporary-goal)
	(up-get-point-distance gl-point-x gl-object-point-x temporary-goal2)
	(up-modify-goal gl-saved-point-x g:/ temporary-goal2)
	(up-modify-goal gl-saved-point-y g:/ temporary-goal2)
	(up-add-point gl-point-x gl-saved-point-x c: -1)
	(up-lerp-tiles gl-point-x gl-position-self-x c: 15)
	(up-target-point gl-point-x action-move -1 no-attack)
	(disable-timer 46)
	(enable-timer 24 30)
)

(defrule
	(game-time g:> gl-circle-scouting-time)
	(up-compare-goal gl-early-raid != YES)
	(unit-type-count scout-unit > 0)
	(up-compare-goal gl-dodging-TC < 0)
	(up-timer-status 24 != timer-running)
=>
	(up-modify-goal temporary-goal c:- 16)
	(up-modify-goal gl-saved-point-x g:* temporary-goal)
	(up-modify-goal gl-saved-point-y g:* temporary-goal)
	(up-get-point-distance gl-point-x gl-object-point-x temporary-goal2)
	(up-modify-goal gl-saved-point-x g:/ temporary-goal2)
	(up-modify-goal gl-saved-point-y g:/ temporary-goal2)
	(up-add-point gl-point-x gl-saved-point-x c: -1)
	(up-target-point gl-point-x action-move -1 no-attack)
	(enable-timer 24 10)
)

(defrule
	(or	(up-compare-goal gl-villager-laming > 0)
		(or	(up-compare-goal gl-boar-stealing > 0)
			(or	(game-time g:< gl-circle-scouting-time)
				(and	(up-compare-goal gl-deer-luring > 0)
					(game-time < deer-luring-stop-time2)))))
=>
	(up-jump-rule 4)
)

(defrule
	(game-time < 900)
	(game-time s:> sn-home-exploration-time)
	(up-timer-status 13 != timer-running)
	(up-compare-goal gl-early-raid != YES)
	(game-time g:> gl-circle-scouting-time)
	(unit-type-count scout-unit > 0)
	(up-compare-goal gl-dodging-TC < 0)
	(up-timer-status 24 != timer-running)
	(strategic-number sn-number-explore-groups > 0)
	(goal POSITION FLANK)
	(goal gl-rush-suitability-on-map GOOD)
	(players-building-count target-player > 0)
=>
	(up-send-scout group-type-land-explore position-target)
	(enable-timer 24 80)
)

(defrule
	(game-time < 1200)
	(game-time >= 900)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-compare-goal gl-early-raid != YES)
	(up-timer-status 24 != timer-running)
	(players-building-count target-player > 0)
	(goal POSITION FLANK)
	(or	(and	(research-completed ri-fletching)
			(up-compare-goal gl-military-percentage > 50))
		(goal gl-DRUSH YES))
=>
	(up-send-scout group-type-land-explore position-target)
	(enable-timer 24 70)
)

(defrule
	(game-time < 1500)
	(game-time >= 900)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-compare-goal gl-early-raid != YES)
	(up-timer-status 24 != timer-running)
	(players-building-count target-player > 0)
	(players-building-type-count target-player watch-tower < 3)
	(players-building-type-count target-player barracks < 2)
	(players-building-type-count target-player archery-range < 1)
	(players-building-type-count target-player market < 1)
	(players-building-type-count target-player stable < 1)
	(players-building-type-count target-player castle < 1)
	(players-building-type-count target-player monastery < 2)
	(players-building-type-count target-player siege-workshop < 1)
=>
	(up-send-scout group-type-land-explore position-target)
	(enable-timer 24 80)
)

(defrule
	(game-time < 2700)
	(game-time >= 900)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(players-military-population focus-player > 30)
	(players-unit-type-count focus-player monk < 5)
	(up-compare-goal gl-enemy-infantry-count < 5)
	(up-compare-goal gl-enemy-archery-count < 5)
	(up-compare-goal gl-enemy-cavalry-count < 5)
	(up-compare-goal gl-enemy-eagle-count < 5)
	(up-compare-goal gl-enemy-huskarl-count < 3)
	(up-compare-goal gl-enemy-cataphract-count < 3)
	(up-compare-goal gl-enemy-scorpion-count < 3)
	(up-compare-goal gl-target-navy-count < 5)
	(up-timer-status 24 != timer-running)
=>
	(up-send-scout group-type-land-explore position-target); Enemy army composition unidentified - try to find out
	(enable-timer 24 80)
)
#end-if

(defrule
	(or	(goal gl-enemy-strategy KNIGHT-RUSH)
		(or	(up-compare-goal gl-enemy-cavalry-count > 1)
			(players-building-type-count focus-player stable > 0)))
	(goal gl-feudal-archery archer-skirm)
=>
	(set-goal gl-feudal-archery archers)
)

(defrule
	(up-compare-const gv-maximum-age >= castle-age)
	(unit-type-count-total militiaman-line > 2)
	(or	(unit-type-count-total militiaman-line > 4)
		(game-time > 900))
	(up-compare-goal gl-enemy-eagle-count < 2)
	(up-compare-goal gl-enemy-strategy != EAGLERUSH)
	(goal gl-feudal-infantry men-at-arms)
=>
	(set-goal gl-feudal-infantry 0)
	(set-goal gl-feudal-archery archer-skirm)
)

(defrule
	(up-compare-goal gl-enemy-archer-count > 0)
	(players-current-age focus-player >= castle-age)
	(or	(up-compare-goal gl-enemy-archery-count > 2)
		(players-unit-type-count focus-player crossbowman > 0))
	(goal gl-feudal-infantry men-at-arms)
=>
	(set-goal gl-feudal-infantry 0)
	(set-goal gl-feudal-archery archer-skirm)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(game-time > 600)
	(strategic-number sn-retreating == 1)
	(up-timer-status 26 != timer-disabled)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
=>
	(up-full-reset-search)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 -1 orderid-explore -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point 0 action-stop -1 aggressive)
	(disable-self)
)

(defrule
	(building-type-count mining-camp > 4)
	(dropsite-min-distance stone < 30)
	(dropsite-min-distance stone s:> sn-maximum-stone-drop-distance)
	(building-type-count-total town-center < preferred-TC-number)
	(stone-amount < 100)
	(strategic-number sn-stone-gatherer-percentage > 3)
=>
	(set-strategic-number sn-maximum-stone-drop-distance 30)
)

(defrule
	(or	(dropsite-min-distance stone s:> sn-maximum-stone-drop-distance)
		(dropsite-min-distance gold s:> sn-maximum-gold-drop-distance))
	(strategic-number sn-mining-camp-max-distance < 150)
=>
	(up-modify-goal temporary-goal4 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(set-goal temporary-goal3 7339)
)

(defrule
	(goal temporary-goal3 7339)
	(strategic-number sn-mining-camp-max-distance < 150)
=>
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 s: sn-mining-camp-max-distance)
	(up-find-remote c: gold-mine c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal2 g:= gl-remote-last)
	(up-find-remote c: stone-mine c: 1)
	(up-get-search-state gl-local-total)
)

(defrule
	(goal temporary-goal3 7339)
	(or	(game-time > 720)
		(and	(up-compare-goal gl-current-age >= gv-dark-up)
			(game-time >= camp-search-time)))
	(goal temporary-goal2 0)
	(dropsite-min-distance gold >= 0)
	(dropsite-min-distance gold < 255)
	(strategic-number sn-mining-camp-max-distance < 150)
=>
	(up-modify-sn sn-mining-camp-max-distance c:+ 5)
;	(up-chat-data-to-player my-player-number "Trying to locate camps further, camp-max %d (gold)" s: sn-mining-camp-max-distance)
	(up-jump-rule -2)
)

(defrule
	(goal temporary-goal3 7339)
	(or	(and	(or	(game-time > 900)
				(strategic-number sn-nomad-style-start == 0))
			(strategic-number sn-stone-gatherer-percentage > 0))
		(up-compare-goal gl-current-age >= gv-feudal-up))
	(game-time >= camp-search-time)
	(goal gl-remote-last 0)
	(dropsite-min-distance stone >= 0)
	(dropsite-min-distance stone < 255)
	(strategic-number sn-mining-camp-max-distance < 150)
=>
	(up-modify-sn sn-mining-camp-max-distance c:+ 5)
;	(up-chat-data-to-player my-player-number "Trying to locate camps further, camp-max %d (stone)" s: sn-mining-camp-max-distance)
	(up-jump-rule -3)
)

(defrule
	(goal temporary-goal3 7339)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal4)
	(set-goal temporary-goal3 0)
)

(defrule
	(goal MILITARY 0)
	(town-under-attack)
	(up-compare-goal gl-enemy-units-in-town > 10)
=>
	(set-goal gl-town-under-attack 1)
)

(defrule
	(or	(up-compare-const gv-turborandom == 1)
		(or	(up-compare-const gv-regicide == 1)
			(or	(starting-resources != low-resources)
				(or	(difficulty != hard)
					(starting-age != dark-age)))))
=>
	(set-goal gl-uncommon-settings YES)
	(disable-self)
)

(defrule
	(goal gl-current-age gv-feudal)
	(current-age == feudal-age)
	(gold-amount < 200)
	(gold-amount > 180)
	(up-compare-goal gl-strategy-type >= FC)
	(current-age-time > 72)
=>
	(up-drop-resources gold c: 5)
)

(defrule
	(timer-triggered 6)
	(current-age-time < 180)
	(current-age == castle-age)
	(stone-amount < 650)
	(stone-amount > 615)
=>
	(up-drop-resources stone c: 6)
	(enable-timer 6 5)
)

(defrule
	(game-time > 900)
	(strategic-number sn-maximum-food-drop-distance >= 0)
	(strategic-number sn-maximum-food-drop-distance < 10)
=>
	(set-strategic-number sn-maximum-food-drop-distance 10)
)

(defrule
	(game-time > 900)
	(building-type-count-total farm > 10)
	(strategic-number sn-maximum-food-drop-distance >= 0)
	(strategic-number sn-maximum-food-drop-distance < 14)
=>
	(set-strategic-number sn-maximum-food-drop-distance 14)
)

(defrule
	(game-time > 1500)
	(building-type-count-total mill < 3)
	(building-type-count-total farm > 15)
	(strategic-number sn-maximum-food-drop-distance >= 0)
	(strategic-number sn-maximum-food-drop-distance < 18)
=>
	(set-strategic-number sn-maximum-food-drop-distance 18)
)

(defrule
	(up-pending-objects c: house < 1)
	(up-pending-placement c: house)
	(building-type-count town-center > 0)
	(population-headroom > 4)
	(housing-headroom < 1)
	(strategic-number sn-maximum-town-size < 20)
	(goal gl-current-age gv-dark)
=>
	(up-modify-sn sn-maximum-town-size c:+ 1)
)

(defrule
	(game-time > 90)
	(up-compare-const gv-wonder-race == 0)
	(strategic-number sn-nomad-style-start == 1)
	(building-type-count-total town-center > 0)
=>
	(up-full-reset-search)
	(up-filter-include -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-send-flare gl-point-x)
	(chat-to-allies nomad-tc-up-chat); Lies, it flares a villager
	(disable-self)
)

(defrule
	(game-time > 300)
	(current-age == castle-age)
	(up-compare-goal gl-current-age >= gv-castle)
	(goal SLING 3)
	(goal gl-strategy turkish-fast-imp)
	(up-compare-goal gl-rush-suitability-on-map >= AVERAGE)
	(building-type-count-total monastery < 2)
	(can-build monastery)
=>
	(build monastery)
)

(defrule
	(game-time > 1300)
	(game-time < 1800)
	(goal gl-strategy ranged-boom-strategy)
	(building-type-count town-center == 3)
	(building-type-count-total farm > 16)
	(goal POSITION POCKET)
	(goal gl-rush-suitability-on-map VERY-LOW)
	(strategic-number sn-stone-gatherer-percentage < 4)
=>
	(set-strategic-number sn-stone-gatherer-percentage 4)
)

(defrule
	(or	(strategic-number sn-nomad-style-start == 0)
		(building-type-count-total mill > 0))
	(dropsite-min-distance deer-hunting < 8)
	(up-compare-goal gl-my-villager-count-total > 15)
=>
	(set-goal gl-close-deer YES)
	(disable-self)
)

(defrule
	(or	(goal gl-strategy castle-drop)
		(goal gl-strategy gothic-boom))
	(game-time > 600)
	(current-age == castle-age)
	(or	(dropsite-min-distance stone > 3)
		(dropsite-min-distance stone == -1))
	(building-type-count-total castle == 0)
	(current-age-time < 40)
	(stone-amount < 201)
=>
	(set-goal gl-strategy scorpion-boom)
	(set-goal gl-strategy-type FC)
	(set-goal gl-strategy-aggressiveness-level VERY-LOW)
)

(defrule
	(game-time < 10)
	(building-type-count town-center <= 1)
	(up-compare-const gv-grouped-by-team == 0)
	(not	(map-type migration))
	(or	(cc-players-unit-type-count 0 forage-class >= large-number-forage)
		(cc-players-unit-type-count 0 deer >= huge-number-deer))
	(or	(cc-players-unit-type-count 0 wild-boar >= large-number-boar)
		(cc-players-unit-type-count 0 javelina >= large-number-boar))
	(cc-players-unit-type-count 0 deer >= large-number-deer)
=>
	(set-goal gl-resources-on-map plenty)
	(disable-self)
)

(defrule
	(up-compare-goal SLING != 0)
=>
	(up-jump-rule 2)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(or	(goal gl-strategy castle-drop)
		(or	(goal gl-strategy gothic-boom)
			(or	(goal gl-strategy mongol-boom)
				(or	(goal gl-strategy knight-boom)
					(or	(goal gl-eew-strategy-type boom)
						(or	(goal gl-strategy michi-boom)
							(goal gl-strategy ranged-rush-strategy)))))))
=>
	(set-goal gl-disable-mining-upgrades YES)
	(disable-self)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(or	(goal gl-strategy ranged-boom-strategy)
		(or	(goal gl-strategy krush)
			(or	(goal gl-strategy knight-rush)
				(or	(goal gl-strategy castle-sling)
					(or	(goal gl-strategy scorpion-boom)
						(goal gl-strategy ew-boom))))))
=>
	(set-goal gl-disable-mining-upgrades YES)
	(disable-self)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(goal gl-strategy-type FI2)
=>
	(set-goal gl-disable-mining-upgrades disable-stone)
	(disable-self)
)

(defrule
	(stone-amount <= 100)
	(or	(building-type-count-total town-center == 1)
		(or	(stone-amount == 0)
			(and	(goal TC 1)
				(stone-amount < 100))))
	(building-type-count-total town-center < 3)
	(or	(goal gl-strategy knight-rush)
		(goal gl-strategy ranged-rush-strategy))
	(game-time > 1300)
;	(strategic-number sn-stone-gatherer-percentage < 5)
=>
	(set-strategic-number sn-stone-gatherer-percentage 5)
)

(defrule
	(or	(stone-amount >= 200)
		(building-type-count-total town-center > 1))
	(or	(stone-amount >= 100)
		(building-type-count-total town-center > 2))
	(or	(goal gl-strategy knight-rush)
		(goal gl-strategy ranged-rush-strategy))
	(game-time > 1300)
	(strategic-number sn-stone-gatherer-percentage == 5)
=>
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(up-retask-gatherers stone c: 6)
)

(defrule
	(game-time < 60)
	(goal TSA 0)
	(goal gl-current-age gv-dark)
	(goal gl-nothing-style-map YES)
	(up-compare-goal gl-strategy != nothing-FC-boom)
=>
	(set-goal gl-strategy nothing-FC-boom)
	(set-goal gl-strategy-type controlled-flush); Right...
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal gl-required-current-age-time 60000)
	(set-strategic-number sn-strategy-lock 1)
	(set-strategic-number sn-maximum-town-size 17)
)

(defrule
	(game-time < 10)
	(building-type-count-total castle > 0)
=>
	(set-goal gl-start-with-castle YES)
	(disable-self)
)

#load-if-not-defined WONDER-RACE
(defrule
	(or	(and	(goal gl-feudal-upgrade-order 2)
			(food-amount >= 900))
		(and	(game-time > 1500)
			(up-compare-const gv-maximum-age == feudal-age)))
	(or	(wood-amount >= 125)
		(or	(up-research-status c: ri-wheel-barrow >= research-pending)
			(up-compare-goal gl-FC-type >= gv-2-villagers)))
	(up-compare-goal gl-disable-mining-upgrades != YES)
	(goal gl-current-age gv-feudal)
	(can-research ri-gold-mining)
=>
	(research ri-gold-mining)
)

(defrule
	(goal gl-feudal-upgrade-order 1)
	(or	(wood-amount >= 125)
		(or	(up-research-status c: ri-wheel-barrow >= research-pending)
			(up-compare-goal gl-FC-type >= gv-2-villagers)))
	(food-amount >= 875)
	(nand	(goal gl-strategy saracen-heavy-krush)
		(building-type-count-total town-center == 1))
	(or	(can-research ri-horse-collar)
		(research-completed ri-horse-collar)); Franks
=>
	(research ri-horse-collar)
	(set-goal gl-feudal-upgrade-order 2)
)
#else
(defrule
	(or	(and	(goal gl-feudal-upgrade-order 1)
			(food-amount >= 900))
		(and	(game-time > 1500)
			(up-compare-const gv-maximum-age == feudal-age)))
	(or	(wood-amount >= 125)
		(or	(up-research-status c: ri-wheel-barrow >= research-pending)
			(up-compare-goal gl-FC-type >= gv-2-villagers)))
	(up-compare-goal gl-disable-mining-upgrades != YES)
	(goal gl-current-age gv-feudal)
	(can-research ri-gold-mining)
=>
	(research ri-gold-mining)
)
#end-if

(defrule
	(goal gl-current-age gv-feudal)
	(or	(wood-amount >= 100)
		(or	(up-research-status c: ri-wheel-barrow >= research-pending)
			(up-compare-goal gl-FC-type >= gv-2-villagers)))
	(food-amount >= 900)
	(building-type-count-total blacksmith > 0)
	(or	(building-type-count-total market > 0)
		(or	(building-type-count-total archery-range > 0)
			(building-type-count-total stable > 0)))
	(can-research ri-double-bit-axe)
=>
	(research ri-double-bit-axe)
	(set-goal gl-feudal-upgrade-order 1)
)

(defrule
	(strategic-number sn-sheep-count < 5)
	(or	(and	(game-time > 120)
			(or	(up-gaia-type-count g: gl-boar-unit < 1)
				(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)))
		(and	(up-timer-status 13 != timer-running)
			(or	(game-time > 40)
				(and	(civ-selected chinese)
					(game-time > 20)))))
=>
	(set-goal gl-normal-milling 1)
)

(defrule
	(goal gl-normal-milling 1)
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(building-type-count town-center == 1)
	(strategic-number sn-sheep-count > 3)
	(or	(up-gaia-type-count g: gl-boar-unit > 0)
		(or	(up-compare-goal gl-boar-food > 100)
			(or	(game-time < 120)
				(and	(strategic-number sn-sheep-count > 5)
					(map-type migration)))))
=>
	(set-goal gl-normal-milling 0)
)

(defrule
	(goal gl-normal-milling 1)
	(soldier-count > 0)
	(strategic-number sn-nomad-style-start == 0)
	(building-type-count town-center == 1)
	(building-type-count-total mill == 0)
	(game-time <= 100)
	(or	(strategic-number sn-sheep-count > 3)
		(or	(up-compare-const gv-michi-style == 1)
			(and	(game-time < 10)
				(up-timer-status 13 == timer-running))))
	(starting-age == dark-age)
=>
	(set-goal gl-normal-milling 0)
)

(defrule
	(map-type nomad)
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(up-compare-const gv-wonder-race == 0)
	(dropsite-min-distance wood < 6)
	(building-type-count-total dock == 0)
	(strategic-number sn-town-center-start == 1)
	(building-type-count town-center == 1)
=>
	(set-goal gl-normal-milling 2)
	(disable-self)
)

(defrule
	(goal gl-normal-milling 2)
	(or	(dropsite-min-distance wood >= 6)
		(or	(and	(building-type-count dock > 0)
				(unit-type-count-total fishing-ship > 1))
			(and	(wood-amount > 200)
				(up-pending-placement c: dock))))
=>
	(set-goal gl-normal-milling 1)
	(disable-self)
)

(defrule
	(goal gl-strategy grush)
	(building-type-count-total mill == 0)
	(building-type-count-total lumber-camp > 0)
	(unit-type-count-total fishing-ship > 2)
	(goal gl-current-age gv-dark-up)
=>
	(set-goal gl-normal-milling 3)
	(disable-self)
)

(defrule
	(goal gl-strategy grush)
	(building-type-count-total mill == 0)
	(building-type-count-total lumber-camp > 0)
	(strategic-number sn-sheep-count > 7)
	(up-compare-goal gl-boar-eaten > 1)
	(or	(and	(up-compare-goal gl-lured-deer-count > 1)
			(or	(up-compare-goal gl-deer-luring >= 1)
				(up-compare-goal gl-lured-deer-count > 2)))
		(and	(strategic-number sn-sheep-count > 10)
			(unit-type-count sheep > 3)))
=>
	(set-goal gl-normal-milling 3)
	(disable-self)
)

(defrule
	(goal gl-strategy grush)
	(building-type-count-total mill == 0)
	(building-type-count-total lumber-camp > 0)
	(food-amount > 300)
	(civ-selected mongol)
	(unit-type-count villager-food > 5)
	(strategic-number sn-sheep-count > 5)
	(up-compare-goal gl-boar-eaten > 1)
	(up-compare-goal gl-lured-deer-count > 2)
	(or	(up-compare-goal gl-deer-luring >= 1)
		(up-compare-goal gl-lured-deer-count > 3))
=>
	(set-goal gl-normal-milling 3)
	(disable-self)
)

(defrule
	(goal gl-normal-milling 3)
	(or	(current-age >= feudal-age)
		(unit-type-count villager-forager > 7))
	(or	(and	(game-time > 720)
			(or	(food-amount < 50)
				(unit-type-count-total fishing-ship < 4)))
		(or	(up-compare-goal gl-current-age >= gv-feudal-up)
			(or	(game-time > 870)
				(unit-type-count villager-forager > 7))))
=>
	(set-goal gl-normal-milling 1)
)

(defrule
	(or	(and	(soldier-count == 0)
			(game-time < 10))
		(and	(goal gl-normal-milling 3)
			(or	(building-type-count-total lumber-camp == 0)
				(or	(up-compare-goal gl-strategy != grush)
					(and	(goal gl-current-age gv-dark)
						(and	(up-compare-goal gl-total-food-amount < 500)
							(unit-type-count villager-food < 5)))))))
=>
	(set-goal gl-normal-milling 1)
)

(defrule
	(strategic-number sn-nomad-style-start == 0)
	(building-type-count town-center == 1)
	(building-type-count-total mill == 0)
	(game-time < 60)
	(or	(and	(or	(strategic-number sn-sheep-count > 1)
				(and	(civ-selected chinese)
					(game-time < 20)))
			(game-time < 30))
		(goal gl-modern-build-order 100))
	(starting-age == dark-age)
=>
	(set-goal gl-normal-milling 0)
)

(defrule
	(strategic-number sn-nomad-style-start == 0)
	(building-type-count town-center >= 1)
	(building-type-count-total mill == 0)
	(or	(and	(game-time < 120)
			(or	(dropsite-min-distance wood > 6)
				(dropsite-min-distance wood == -1)))
		(up-compare-goal gl-wood-backup >= 7))
	(starting-age == dark-age)
=>
	(set-goal gl-normal-milling 0)
)

(defrule
	(game-time < 10)
	(building-type-count town-center == 1)
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
=>
	(set-goal gl-normal-milling 0)
	(disable-self)
)

(defrule
	(goal gl-normal-milling 0)
	(game-time < 60)
	(up-compare-goal gl-boar-stealing <= -1)
	(strategic-number sn-sheep-count >= 2)
	(building-type-count-total mill == 0)
	(unit-type-count villager-forager > 0)
	(dropsite-min-distance food < 4)
	(up-set-target-by-id g: 451)
	(up-object-data object-data-class == sheep)
=>
	(up-full-reset-search)
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-target != forage-food)
	(up-remove-objects search-local object-data-carry g:< gl-villager-max-carry)
)

(defrule
	(goal gl-normal-milling 0)
	(game-time < 60)
	(up-compare-goal gl-boar-stealing <= -1)
	(strategic-number sn-sheep-count >= 2)
	(building-type-count-total mill == 0)
	(unit-type-count villager-forager > 0)
	(dropsite-min-distance food < 4)
	(up-set-target-by-id g: 451)
	(up-object-data object-data-class == sheep)
=>
	(up-set-target-by-id g: gl-main-tc-id)
	(up-target-objects 1 action-garrison -1 -1)
	(set-strategic-number sn-tc-control-time 7)
	(set-goal gl-TC-garrisoning early-retask-stage1)
)

(defrule
	(dropsite-min-distance boar-hunting <= 33)
	(up-compare-goal gl-boar-stealing <= -1)
=>
	(up-modify-goal gl-villagers-to-start-boar-hunt c:min 13)
)

(defrule
	(dropsite-min-distance boar-hunting <= 33)
	(goal gl-boar-stealing -1)
	(or	(and	(game-time > 105)
			(or	(and	(strategic-number sn-sheep-count < 4)
					(building-type-count mill == 0))
				(and	(unit-type-count sheep < 2)
					(and	(up-compare-goal gl-my-villager-count >= gv-10-boar-villagers)
						(game-time > game-time-for-early-boar)))))
		(up-compare-goal gl-target-player-distance <= 20))
=>
	(up-modify-goal gl-villagers-to-start-boar-hunt c:min 8)
)

(defrule
	(dropsite-min-distance boar-hunting <= 33)
	(goal gl-boar-stealing -1)
	(goal gl-modern-build-order 100)
	(up-compare-goal gl-food-villagers > gv-6-villager-food)
=>
	(up-modify-goal gl-villagers-to-start-boar-hunt c:min 8)
)

(defrule
	(dropsite-min-distance boar-hunting <= 33)
	(or	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
		(or	(and	(game-time > 165)
				(strategic-number sn-sheep-count < 5))
			(or	(and	(civ-selected mongol)
					(goal gl-strategy trush))
				(and	(unit-type-count villager-shepherd > 5)
					(up-compare-goal gl-food-villagers > 6)))))
	(up-compare-goal gl-boar-stealing <= -1)
=>
	(up-modify-goal gl-villagers-to-start-boar-hunt c:min 10); 9
)

(defrule
	(dropsite-min-distance boar-hunting <= 33)
	(nand	(civ-selected mongol)
		(goal gl-strategy trush))
	(up-compare-goal gl-target-player-distance > 20)
	(or	(and	(research-available ri-loom)
			(dropsite-min-distance boar-hunting > gv-max-loomless-boar-distance))
		(or	(unit-type-count villager-forager > 1)
			(unit-type-count-total villager-food < 7)))
	(up-compare-goal gl-my-villager-count g:< gl-villagers-to-start-boar-hunt)
	(unit-type-count villager-shepherd < 7)
	(strategic-number sn-sheep-count > 5)
=>
	(up-modify-goal gl-villagers-to-start-boar-hunt c:max 11)
)

(defrule
	(dropsite-min-distance boar-hunting <= 33)
	(goal gl-strategy scrush)
	(goal POSITION POCKET)
	(game-time > 180)
	(up-compare-goal gl-boar-stealing <= -1)
=>
	(up-modify-goal gl-villagers-to-start-boar-hunt c:min 12)
)

(defrule
	(dropsite-min-distance boar-hunting <= 33)
	(or	(and	(strategic-number sn-sheep-count < 7)
			(and	(game-time > 155)
				(or	(game-time > 190)
					(and	(civ-selected briton)
						(building-type-count-total mill == 0)))))
		(and	(dropsite-min-distance live-boar < gv-max-loomless-boar-distance)
			(unit-type-count villager-shepherd > 6)))
	(up-compare-goal gl-boar-stealing <= -1)
=>
	(up-modify-goal gl-villagers-to-start-boar-hunt c:min gv-11-boar-villagers); >10 for brits
)

(defrule
	(up-compare-goal gl-strategy != forward)
	(up-compare-goal gl-my-villager-count-total g:>= gl-villagers-to-start-boar-hunt)
	(dropsite-min-distance live-boar < gv-max-loomless-boar-distance)
	(strategic-number sn-nomad-style-start == 0)
	(cc-players-unit-type-count 0 wolf < max-wolves-and-jaguars)
	(cc-players-unit-type-count 0 jaguar < max-wolves-and-jaguars)
	(up-compare-goal gl-target-player-distance >= 26)
	(up-compare-goal gl-loomless-boar-hunting != YES)
	(up-compare-const gv-x-vs-one-challenge == 0)
	(research-available ri-loom)
=>
	(set-goal gl-loomless-boar-hunting YES)
;	(chat-to-player my-player-number "Enable loomless boar hunting")
	(disable-self)
)

(defrule
	(goal gl-loomless-boar-hunting YES)
	(or	(and	(up-compare-goal gl-my-villager-count-total g:>= gl-villagers-to-start-boar-hunt)
			(and	(dropsite-min-distance live-boar >= gv-max-loomless-boar-distance)
				(and	(dropsite-min-distance live-boar <= 33)
					(goal gl-current-age gv-dark))))
		(current-age >= castle-age))
	(up-compare-goal gl-strategy != michi-boom)
	(up-compare-goal gl-boar-stealing <= -1); Scout will lure it near TC anyway
	(or	(up-compare-goal gl-boar-food < 330); To have enough time to research loom
		(game-time > 360))
=>
	(set-goal gl-loomless-boar-hunting NO)
;	(chat-to-player my-player-number "Disable loomless boar hunting")
)

(defrule
	(goal gl-loomless-boar-hunting YES)
	(up-compare-const gv-aofe-game == 1)
	(or	(cc-players-unit-type-count 0 rhino > 0)
		(cc-players-unit-type-count 0 elephant > 0)); elephants not detected, unitid 900-999
=>
	(set-goal gl-loomless-boar-hunting NO)
)

(defrule
	(or	(up-compare-goal gl-my-villager-count-total >= imperial-villager-cap)
		(or	(and	(goal gl-strategy trush-push)
				(goal gl-current-age gv-feudal))
			(and	(goal gl-rush-suitability-on-map GOOD)
				(and	(up-compare-goal gl-my-villager-count-total > 27)
					(or	(player-in-game any-human-enemy)
						(goal POSITION FLANK))))))
	(can-research ri-loom)
=>
	(research ri-loom)
	(enable-timer 2 21)
)

(defrule
	(or	(and	(goal gl-strategy michi-boom)
			(current-age <= feudal-age))
		(and	(civilian-population < 14)
			(and	(goal gl-current-age gv-dark)
				(and	(game-time < 300)
					(up-compare-goal gl-total-food-amount >= 50)))))
	(nand	(up-compare-goal gl-my-villager-count-total g:>= gl-villagers-to-start-boar-hunt)
		(up-compare-goal gl-loomless-boar-hunting != YES))
=>
	(up-jump-rule 2)
)

(defrule
	(players-military-population focus-player < 2)
	(goal gl-rush-suitability-on-map VERY-LOW)
	(current-age == feudal-age)
	(or	(and	(can-research ri-wheel-barrow)
			(goal gl-FC-type gv-wheelbarrow))
		(or	(can-research castle-age)
			(goal gl-FC-type gv-2-villagers)))
	(goal gl-loomless-boar-hunting YES)
	(up-compare-goal gl-strategy-type >= FC)
=>
	(up-jump-rule 1)
)

#load-if-not-defined WONDER-RACE
(defrule
	(or	(and	(or	(up-compare-goal gl-my-villager-count-total g:>= gl-villagers-to-start-boar-hunt)
				(current-age >= castle-age))
			(or	(up-compare-goal gl-loomless-boar-hunting != YES)
				(up-compare-goal gl-current-age >= gv-castle-up)))
		(and	(goal gl-current-age gv-feudal)
			(or	(up-compare-goal gl-strategy-type <= controlled-flush)
				(up-compare-goal gl-FC-type >= gv-2-villagers))))
	(can-research ri-loom)
=>
	(research ri-loom)
	(enable-timer 2 21)
)
#else
(defrule
	(goal gl-current-age gv-dark)
	(or	(and	(up-compare-goal gl-my-villager-count-total g:>= gl-villagers-to-start-boar-hunt)
			(up-compare-goal gl-loomless-boar-hunting != YES))
		(not	(can-train villager)))
	(can-research ri-loom)
=>
	(research ri-loom)
	(enable-timer 2 21)
)
#end-if

(defrule
	(goal gl-normal-milling 0)
	(or	(building-type-count-total lumber-camp > 0)
		(and	(strategic-number sn-boars-on-map == NONE)
			(up-compare-goal gl-wood-backup <= 3)))
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood <= 6)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
=>
	(set-goal gl-normal-milling 1)
)

(defrule
	(up-compare-goal gl-normal-milling != 1)
	(or	(unit-type-count-total sheep > 0)
		(unit-type-count villager-hunter > 0))
	(building-type-count town-center > 0)
	(strategic-number sn-percent-civilian-explorers > 0)
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(set-strategic-number sn-cap-civilian-gatherers 200)
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-target-evaluation-ally-proximity 50)
	(set-strategic-number sn-minimum-civilian-explorers 0)
)

(defrule
	(game-time < 10)
	(cc-players-unit-type-count 0 forage-class == 0)
=>
	(set-strategic-number sn-preferred-mill-placement 1)
	(disable-self)
)

#load-if-not-defined UP-NOMAD-RESOURCES
#load-if-not-defined NOMAD-MAP
(defrule
	(strategic-number sn-boars-on-map != NONE)
	(dropsite-min-distance boar-hunting < 27)
	(dropsite-min-distance boar-hunting >= 0)
	(or	(dropsite-min-distance food >= 10)
		(and	(strategic-number sn-nomad-style-start == 0)
			(and	(up-compare-goal gl-normal-milling != 1)
				(strategic-number sn-sheep-count < 5))))
	(game-time > 120)
	(or	(game-time > 480)
		(strategic-number sn-nomad-style-start == 0))
=>
	(up-modify-goal gl-villagers-to-start-boar-hunt c:min 6)
)
#else
(defrule
	(strategic-number sn-boars-on-map != NONE)
	(dropsite-min-distance boar-hunting < 27)
	(dropsite-min-distance boar-hunting >= 0)
	(or	(unit-type-count villager-food == 0)
		(dropsite-min-distance food >= 10))
	(game-time > 300)
=>
	(up-modify-goal gl-villagers-to-start-boar-hunt c:min 6)
)
#end-if
#else
(defrule
	(strategic-number sn-boars-on-map != NONE)
	(dropsite-min-distance boar-hunting < 27)
	(dropsite-min-distance boar-hunting >= 0)
	(or	(unit-type-count villager-food == 0)
		(dropsite-min-distance food >= 10))
	(game-time > 300)
=>
	(up-modify-goal gl-villagers-to-start-boar-hunt c:min 6)
)
#end-if

(defrule
	(dropsite-min-distance boar-hunting < 27)
	(or	(and	(or	(dropsite-min-distance food > 10)
				(dropsite-min-distance food == -1))
			(and	(dropsite-min-distance deer-hunting > 10)
				(game-time > 300)))
		(or	(up-compare-goal gl-target-player-distance < 20)
			(and	(up-point-distance gl-position-center-x gl-position-self-x < 20)
				(strategic-number sn-nomad-style-start == 0))))
=>
	(up-modify-goal gl-villagers-to-start-boar-hunt c:min 3)
)

(defrule
	(or	(strategic-number sn-allow-new-build-order == 1)
		(and	(not	(goal gl-strategy grush))
			(strategic-number sn-allow-new-build-order == -2)))
	(not	(goal DOCK 0))
=>
	(set-strategic-number sn-allow-new-build-order 2)
)

(defrule
	(strategic-number sn-allow-new-build-order == 2)
	(goal DOCK 0)
=>
	(set-strategic-number sn-allow-new-build-order 1)
)

(defrule
	(current-age == castle-age)
=>
	(set-strategic-number sn-preferred-mill-placement 2)
	(disable-self)
)

(defrule
	(or	(up-compare-goal gl-my-villager-count-total >= 28)
		(up-compare-goal gl-current-age >= gv-feudal-up))
	(or	(starting-resources == high-resources)
		(up-compare-const gv-defend-wonder == 1))
=>
	(up-assign-builders c: town-center-foundation c: dm-max-TC-builders)
	(up-assign-builders c: castle c: max-castle-builders)
	(disable-self)
)

(defrule
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(goal gl-current-age gv-feudal)
	(up-compare-goal gl-my-villager-count-total < 30)
	(up-compare-goal gl-my-villager-count-total < imperial-villager-cap)
	(current-age-time < 140)
	(nand	(research-available ri-loom)
		(players-military-population focus-player > 1))
	(game-time < 840)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(game-time < 1700)
	(game-time > 1000)
	(soldier-count > 15)
	(soldier-count g:>= gl-toughest-fought-enemy-military)
	(up-compare-goal gl-soldier-percentage <= 200); We don't have massive lead
	(players-military-population focus-player > 4)
	(goal TSA 0)
	(player-human focus-player)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(goal POSITION FLANK)
	(goal gl-rush-suitability-on-map GOOD)
	(up-research-status c: ri-wheel-barrow >= research-pending)
	(up-research-status c: ri-fletching >= research-pending)
	(food-amount < 650)
	(up-compare-const gv-multiple-enemies == 0)
=>
	(research ri-town-watch)
)

(defrule
	(up-compare-const gv-wonder-race == 0)
	(or	(and	(current-age >= late-age)
			(or	(up-compare-goal gl-my-villager-count-total > 35)
				(up-compare-goal gl-strategy-aggressiveness-level < HIGH)))
		(or	(goal gl-nothing-style-map YES)
			(population >= imperial-villager-cap))); +hardest
	(nand	(goal gl-strategy ranged-rush-strategy)
		(research-available ri-bodkin-arrow))
	(up-compare-goal gl-my-villager-count-total > 19)
	(can-research ri-wheel-barrow)
=>
	(research ri-wheel-barrow)
)

#load-if-not-defined WONDER-RACE
(defrule
	(or	(research-completed ri-hand-cart)
		(or	(and	(current-age-time < 5)
				(goal gl-strategy default))
			(or	(research-available ri-bow-saw)
				(and	(goal gl-current-age gv-castle)
					(and	(gold-amount > high-castle-gold)
						(and	(civilian-population > 80)
							(game-time < 2400)))))))
=>
	(up-jump-rule 6)
)

(defrule
	(research-available ri-wheel-barrow)
	(up-compare-goal gl-my-villager-count-total > 60)
=>
	(up-modify-escrow food c:max 175)
	(up-modify-escrow wood c:max 50)
	(up-add-research-cost c: ri-wheel-barrow c: -1)
)

(defrule
	(up-compare-goal gl-my-villager-count-total > 50)
	(can-research-with-escrow ri-wheel-barrow)
=>
	(release-escrow wood)
	(release-escrow food)
	(research ri-wheel-barrow)
)

(defrule
	(or	(and	(research-available imperial-age)
			(and	(food-amount > 700)
				(gold-amount > 600)))
		(and	(goal gl-strategy uu-boom)
			(up-compare-const scout-unit == eagle-warrior-line)))
=>
	(up-jump-rule 3)
)

(defrule
	(food-amount > 230)
	(or	(up-compare-goal gl-my-villager-count-total > 70)
		(food-amount >= 300))
	(building-type-count-total town-center > 1)
	(or	(building-type-count-total town-center > 2)
		(up-compare-goal gl-my-villager-count-total > 85))
	(research-available ri-hand-cart)
	(up-compare-goal gl-my-villager-count-total > 60)
=>
	(up-modify-escrow food c:max 300)
	(up-modify-escrow wood c:max 200)
	(up-add-research-cost c: ri-hand-cart c: -1)
	(up-jump-rule 1)
)

(defrule
	(food-amount > 370)
	(up-compare-goal gl-my-villager-count-total > 54)
	(goal gl-strategy knight-rush)
	(building-type-count-total town-center == 2)
	(goal TC -1)
	(research-available ri-hand-cart)
=>
	(up-modify-escrow food c:max 300)
	(up-modify-escrow wood c:max 200)
	(up-add-research-cost c: ri-hand-cart c: -1)
)

(defrule
	(or	(and	(up-compare-goal gl-my-villager-count-total > 45)
			(nand	(up-compare-goal gl-my-villager-count-total < 60)
				(goal gl-strategy michi-boom)))
		(or	(up-compare-goal gl-my-villager-count-total >= difficulty-villager-cap)
			(up-compare-goal gl-my-villager-count-total >= imperial-villager-cap)))
	(can-research-with-escrow ri-hand-cart)
=>
	(release-escrow wood)
	(release-escrow food)
	(research ri-hand-cart)
)

#end-if

; ============== RULES

(defrule
	(or	(and	(game-time > 2400)
			(strategic-number sn-cap-civilian-explorers == 0))
		(up-compare-goal gl-boar-stealing > 0))
=>
	(up-jump-rule 14)
)

(defrule
	(or	(map-type scandanavia)
		(or	(map-type continental)
			(or	(map-type rivers)
				(or	(map-type highland)
					(or	(map-type coastal)
						(up-compare-const gv-baltic-style == 1))))))
	(building-type-count-total dock == 0)
=>
	(up-jump-rule 1)
)

(defrule
	(soldier-count > 0)
	(game-time s:> sn-home-exploration-time)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(nand	(game-time < 320)
		(and	(goal gl-DRUSH NO)
			(and	(up-compare-goal gl-strategy-aggressiveness-level <= LOW)
				(goal POSITION POCKET)))); We don't have to scout for ally flank to find its opponent
=>
	(up-send-scout group-type-land-explore gv-scouting-type); Flank for flanks, mirror for pockets
	(disable-self)
)

(defrule
	(game-time < 310)
	(soldier-count > 0)
	(building-type-count-total dock == 0)
	(game-time > dock-check-time1)
	(up-compare-const gv-baltic-style == 1)
	(or	(game-time > dock-check-time2)
		(building-type-count-total mill == 0))
	(up-gaia-type-count c: shore-fish < 3)
=>
	(set-strategic-number sn-home-exploration-time 360)
	(enable-timer 13 60)
	(enable-timer 50 60)
	(disable-self)
)

(defrule
	(game-time < 310)
	(soldier-count > 0)
	(building-type-count-total dock == 0)
	(game-time > dock-check-time1)
	(up-compare-const gv-baltic-style == 1)
	(or	(game-time > dock-check-time2)
		(building-type-count-total mill == 0))
	(up-gaia-type-count c: shore-fish < 3)
=>
	(up-copy-point gl-point-x gl-position-center-x)
	(up-lerp-tiles gl-point-x gl-position-self-x c: 25)
	(up-set-target-point gl-point-x)
	(up-send-scout group-type-land-explore position-point)
	(disable-self)
)

(defrule
	(game-time < 310)
	(soldier-count > 0)
	(building-type-count-total dock == 0)
	(game-time > dock-check-time1)
	(map-type highland)
	(or	(game-time > dock-check-time2)
		(building-type-count-total mill == 0))
	(up-gaia-type-count c: shore-fish < 3)
=>
	(set-strategic-number sn-home-exploration-time 360)
	(up-send-scout group-type-land-explore position-mirror)
	(enable-timer 13 highland-dock-scout-time); 50s for flanks, 70s for pockets
	(enable-timer 50 highland-dock-scout-time)
	(disable-self)
)

(defrule
	(game-time < 310)
	(building-type-count-total dock == 0)
	(game-time > dock-check-time1)
	(or	(map-type continental)
		(map-type rivers))
	(strategic-number sn-dock-placement-mode == -1)
	(or	(game-time > dock-check-time2)
		(building-type-count-total mill == 0))
=>
	(set-strategic-number sn-home-exploration-time 360)
	(up-send-scout group-type-land-explore scout-border)
	(enable-timer 13 55)
	(enable-timer 50 55)
	(disable-self)
)

(defrule
	(game-time < 310)
	(soldier-count > 0)
	(building-type-count-total dock == 0)
	(game-time > dock-check-time1)
	(map-type coastal)
	(or	(game-time > dock-check-time2)
		(building-type-count-total mill == 0))
=>
	(set-strategic-number sn-home-exploration-time 360)
	(up-send-scout group-type-land-explore scout-corner)
	(enable-timer 13 55)
	(enable-timer 50 55)
	(disable-self)
)

(defrule
	(game-time < 310)
	(soldier-count > 0)
	(building-type-count-total dock == 0)
	(game-time > dock-check-time1)
	(map-type scandanavia)
	(or	(game-time > dock-check-time2)
		(building-type-count-total mill == 0))
=>
	(set-goal temporary-goal7 82346)
	(up-get-point position-border gl-saved-point-x)
	(up-get-point position-corner gl-temporary-point-x)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-set-target-point gl-saved-point-x)
	(disable-self)
)

(defrule
	(goal temporary-goal7 82346)
	(up-point-distance gl-point-x gl-saved-point-x > 0)
	(nor	(up-point-terrain gl-point-x == terrain-water-beach)
		(up-point-terrain gl-point-x == terrain-ice-beach))
=>
	(up-lerp-tiles gl-point-x gl-saved-point-x c: 1)
	(up-jump-rule -1)
)

(defrule
	(goal temporary-goal7 82346)
	(nor	(up-point-terrain gl-point-x == terrain-water-beach)
		(up-point-terrain gl-point-x == terrain-ice-beach))
=>
	(up-add-point gl-temporary-point-x gl-position-self-x c: 1)
	(up-add-point gl-temporary-point-x gl-saved-point-x c: -1)
	(up-copy-point gl-saved-point-x gl-temporary-point-x)
	(up-set-target-point gl-saved-point-x)
)

(defrule
	(goal temporary-goal7 82346)
=>
	(set-strategic-number sn-home-exploration-time 360)
	(up-send-scout group-type-land-explore position-point)
	(enable-timer 13 60)
	(enable-timer 50 60)
	(disable-self)
)

(defrule
	(goal temporary-goal7 82346)
=>
	(set-goal temporary-goal7 0)
)

(defrule
	(or	(game-time > 1400)
		(and	(death-match-game)
			(and	(player-in-game any-ally)
				(players-building-count every-enemy > 0))))
	(strategic-number sn-number-explore-groups > 0)
	(game-time > 200)
	(or	(players-building-count any-enemy > 0)
		(up-compare-const gv-michi-style == 1))
=>
	(enable-timer 24 120); Give scout time
	(up-send-scout group-type-land-explore gv-scouting-type2)
	(disable-self)
)

(defrule
	(warboat-count > 0)
	(strategic-number sn-number-boat-explore-groups > 0)
=>
	(up-send-scout group-type-water-explore gv-scouting-type)
	(disable-self)
)

#load-if-not-defined DEATH-MATCH
(defrule
	(or	(and	(strategic-number sn-lumber-camp-max-distance >= 27)
			(game-time >= 3000))
		(and	(up-compare-const gv-wonder-race == 1)
			(and	(up-compare-goal gl-current-age >= gv-feudal-up)
				(building-type-count-total lumber-camp > 2))))
=>
	(up-jump-rule 3)
)

(defrule
	(game-time > backup-lumber-time); 90 in defend the wonder, otherwise 360
	(strategic-number sn-maximum-wood-drop-distance < 19)
	(or	(and	(unit-type-count villager-wood == 0)
			(building-type-count-total lumber-camp == 0))
		(and	(dropsite-min-distance wood > 4)
			(wood-amount < 100)))
	(or	(strategic-number sn-defer-dropsite-update == 0)
		(up-pending-objects c: lumber-camp < 1))
	(strategic-number sn-lumber-camp-max-distance < 27)
=>
	(set-strategic-number sn-lumber-camp-max-distance 30)
	(set-strategic-number sn-maximum-wood-drop-distance 19)
;	(chat-to-player my-player-number "Try to save the day with high wood drop distance")
)

(defrule
	(game-time > backup-lumber-time)
	(strategic-number sn-maximum-wood-drop-distance < 19)
	(or	(and	(unit-type-count villager-wood == 0)
			(building-type-count-total lumber-camp == 0))
		(and	(dropsite-min-distance wood > 4)
			(wood-amount < 100)))
	(or	(strategic-number sn-defer-dropsite-update == 0)
		(up-pending-objects c: lumber-camp < 1))
	(strategic-number sn-lumber-camp-max-distance >= 27)
=>
	(up-modify-sn sn-lumber-camp-max-distance c:max 37)
	(set-strategic-number sn-maximum-wood-drop-distance 19)
;	(chat-to-player my-player-number "Try to save the day with high wood drop distance")
)

(defrule
	(game-time < 3000)
	(dropsite-min-distance wood < 4)
	(strategic-number sn-maximum-wood-drop-distance == 19)
=>
	(set-strategic-number sn-maximum-wood-drop-distance 6)
)

(defrule
	(strategic-number sn-town-center-start == 1)
	(unit-type-count villager-wood > 0)
	(dropsite-min-distance food >= 0)
	(nand	(strategic-number sn-sheep-count == 0)
		(and	(dropsite-min-distance hunting s:>= sn-maximum-hunt-drop-distance)
			(up-gaia-type-count c: forage-class < 2)))
	(or	(dropsite-min-distance food < 4)
		(resource-found food))
	(dropsite-min-distance food s:<= sn-maximum-food-drop-distance)
	(strategic-number sn-food-gatherer-percentage == 100)
=>
	(up-jump-rule 3)
)

(defrule
	(game-time < 600)
	(game-time > 23)
	(unit-type-count villager-wood > 0)
	(up-idle-unit-count idle-type-villager > 0)
	(up-compare-goal gl-boar-hunting-stage <= 1)
	(strategic-number sn-maximum-wood-drop-distance < 250)
	(building-type-count town-center > 0)
	(building-type-count lumber-camp == 0)
	(or	(up-compare-goal gl-wood-backup < 3)
		(up-compare-goal gl-wood-backup >= 7))
	(up-compare-goal gl-wood-backup < 10)
=>
	(up-modify-goal gl-wood-backup c:+ 1)
	(up-jump-rule 2)
)

(defrule
	(game-time < 600)
	(game-time > 23)
	(up-idle-unit-count idle-type-villager == 0)
	(up-compare-goal gl-wood-backup > 0)
	(or	(up-compare-goal gl-wood-backup < 3)
		(up-compare-goal gl-wood-backup > 7))
=>
	(up-modify-goal gl-wood-backup c:- 1)
)

(defrule
	(game-time < 600)
	(game-time > 23)
	(unit-type-count villager-wood > 0)
	(up-idle-unit-count idle-type-villager > 0)
	(up-compare-goal gl-boar-hunting-stage <= 1)
	(strategic-number sn-maximum-wood-drop-distance < 250)
	(building-type-count town-center > 0)
	(building-type-count lumber-camp == 0)
=>
	(set-goal gl-wood-backup 7)
	(up-modify-sn sn-maximum-wood-drop-distance c:+ 7)
)
#end-if

(defrule
	(strategic-number sn-maximum-wood-drop-distance < 250)
	(strategic-number sn-maximum-wood-drop-distance > 0)
	(or	(and	(dropsite-min-distance wood > 4)
			(dropsite-min-distance wood s:> sn-maximum-wood-drop-distance))
		(and	(strategic-number sn-maximum-wood-drop-distance < 9)
			(and	(up-compare-goal gl-current-age < gv-castle)
				(building-type-count-total town-center > 1))))
	(dropsite-min-distance wood < 255)
=>
	(up-modify-sn sn-maximum-wood-drop-distance c:+ 5)
)

(defrule
	(game-time > 240)
	(building-type-count town-center > 0)
	(or	(strategic-number sn-defer-dropsite-update == 0)
		(up-pending-objects c: lumber-camp < 1))
	(resource-found wood)
	(dropsite-min-distance wood > 4)
	(dropsite-min-distance wood < 255)
	(wood-amount < 100)
=>
	(up-modify-escrow wood c:max 100)
	(set-strategic-number sn-lumber-camp-escrow 1)
)

(defrule
	(up-timer-status 8 != timer-triggered)
=>
	(set-strategic-number sn-lumber-time 0)
)

(defrule
	(timer-triggered 8)
	(strategic-number sn-lumber-time == 0)
	(resource-found wood)
	(cc-players-unit-type-count 0 tree > 200)
	(dropsite-min-distance wood > -1)
	(dropsite-min-distance wood < 255)
	(up-compare-goal gl-my-villager-count > 40)
	(not	(up-pending-placement c: lumber-camp))
=>
	(up-get-fact game-time 0 temporary-goal)
	(up-modify-sn sn-lumber-time g:= temporary-goal)
	(up-modify-sn sn-lumber-time c:+ 40)
)

(defrule
	(timer-triggered 8)
	(strategic-number sn-lumber-time > 0)
	(game-time s:>= sn-lumber-time)
	(resource-found wood)
	(cc-players-unit-type-count 0 tree > 200)
	(dropsite-min-distance wood > -1)
	(dropsite-min-distance wood < 255)
	(wood-amount < 100)
=>
	(up-modify-escrow wood c:max 100)
	(set-strategic-number sn-lumber-camp-escrow 1)
)

(defrule
	(strategic-number sn-lumber-time == 0)
	(strategic-number sn-lumber-camp-escrow == 1)
	(or	(and	(dropsite-min-distance wood < 5)
			(or	(dropsite-min-distance wood == -1)
				(strategic-number sn-lumber-time == 0)))
		(dropsite-min-distance wood == 255))
=>
	(set-escrow-percentage wood 0)
	(release-escrow wood)
	(set-strategic-number sn-lumber-camp-escrow 0)
)

(defrule
	(timer-triggered 8)
	(game-time s:>= sn-lumber-time)
	(resource-found wood)
	(strategic-number sn-lumber-camp-escrow == 1)
	(dropsite-min-distance wood > -1)
	(dropsite-min-distance wood < 255)
	(can-build-with-escrow lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(release-escrow wood)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(set-strategic-number sn-lumber-time 0)
	(set-strategic-number sn-lumber-camp-escrow 0)
	(build lumber-camp)
	(enable-timer 8 70)
)

(defrule
	(game-time > lumber-backup-time)
	(or	(up-pending-objects c: lumber-camp < 1)
		(and	(building-type-count-total lumber-camp < 20)
			(strategic-number sn-defer-dropsite-update == 0)))
	(dropsite-min-distance wood > 4)
	(dropsite-min-distance wood < 255)
	(can-build-with-escrow lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-escrow-percentage wood 0)
	(release-escrow wood)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(set-strategic-number sn-lumber-time 0)
	(set-strategic-number sn-lumber-camp-escrow 0)
	(build lumber-camp)
)

#load-if-not-defined DEATH-MATCH
#load-if-not-defined UP-SCENARIO-GAME
(defrule
	(or	(game-time > 600)
		(goal gl-nothing-style-map YES))
	(strategic-number sn-percent-civilian-explorers == 0)
	(or	(and	(building-type-count-total mill > 0)
			(game-time > 1200))
		(goal gl-nothing-style-map YES))
=>
	(up-jump-rule 12)
)

(defrule
	(building-type-count-total town-center > 0)
	(up-gaia-type-count c: forage-class == 0)
	(game-time == 0)
	(up-gaia-type-count c: livestock-class > 0)
	(dropsite-min-distance food > 20); Probably not our sheep we see/it's really far -> search for better anyway
	(cc-players-unit-type-count 0 livestock-class > 0)
=>
	(set-strategic-number sn-cap-civilian-explorers 100)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-number-explore-groups 5)
	(set-strategic-number sn-total-number-explorers 5)
	(set-strategic-number sn-target-evaluation-ally-proximity 100)
	(enable-timer 37 40)
	(disable-self)
)

(defrule
	(goal gl-modern-build-order 100)
	(up-gaia-type-count c: livestock-class > 0)
=>
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-sheep-count == 0)
	(or	(up-gaia-type-count c: livestock-class == 0)
		(up-compare-goal gl-sheep-distance > 12))
	(building-type-count town-center > 0)
	(building-type-count-total mill == 0)
	(cc-players-unit-type-count 0 livestock-class > 0)
	(game-time < 30)
=>
	(set-strategic-number sn-cap-civilian-explorers 100)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-number-explore-groups 5)
	(set-strategic-number sn-total-number-explorers 5)
	(set-strategic-number sn-minimum-civilian-explorers 6)
	(set-strategic-number sn-target-evaluation-ally-proximity 50)
	(enable-timer 37 5)
	(up-jump-rule 9)
)

(defrule
	(building-type-count-total town-center > 0)
	(up-gaia-type-count c: forage-class == 0)
	(building-type-count-total mill == 0)
	(wood-amount >= 100)
	(up-gaia-type-count c: livestock-class == 0)
	(cc-players-unit-type-count 0 livestock-class > 0)
	(or	(dropsite-min-distance food == -1)
		(dropsite-min-distance food > 7))
=>
	(set-strategic-number sn-cap-civilian-explorers 100)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-number-explore-groups 5)
	(set-strategic-number sn-total-number-explorers 5)
	(set-strategic-number sn-target-evaluation-ally-proximity 100)
	(enable-timer 37 40)
	(disable-self)
)

(defrule
	(game-time > 7)
	(building-type-count-total town-center > 0)
	(or	(resource-found food)
		(unit-type-count-total sheep > 0))
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(set-strategic-number sn-cap-civilian-gatherers 200)
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-target-evaluation-ally-proximity 100)
	(disable-timer 37)
	(disable-self)
)

(defrule
	(game-time > 7)
	(building-type-count-total town-center > 0)
	(strategic-number sn-sheep-count > 0)
	(dropsite-min-distance deer-hunting < 22)
	(strategic-number sn-target-evaluation-ally-proximity == 100)
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(set-strategic-number sn-cap-civilian-gatherers 200)
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-explorers 0)
	(disable-timer 37)
	(disable-self)
)

(defrule
	(dropsite-min-distance deer-hunting >= 22)
	(building-type-count-total town-center > 0)
	(building-type-count-total mill == 0)
	(wood-amount >= 100)
	(strategic-number sn-target-evaluation-ally-proximity != 100)
	(cc-players-unit-type-count 0 livestock-class > 0)
	(up-gaia-type-count c: livestock-class == 0)
	(not	(resource-found food))
=>
	(set-strategic-number sn-cap-civilian-explorers 100)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-number-explore-groups 5)
	(set-strategic-number sn-total-number-explorers 5)
	(set-strategic-number sn-target-evaluation-ally-proximity 100)
	(enable-timer 37 40)
	(disable-self)
)

(defrule
	(or	(building-type-count-total mill > 0)
		(or	(unit-type-count-total sheep > 0)
			(or	(and	(dropsite-min-distance food >= 0)
					(dropsite-min-distance food < 5))
				(timer-triggered 37))))
	(strategic-number sn-target-evaluation-ally-proximity == 100)
=>
	(set-strategic-number sn-target-evaluation-ally-proximity 50)
	(disable-timer 37)
)

(defrule
	(or	(current-age != dark-age)
		(strategic-number sn-nomad-style-start == 1))
=>
	(up-jump-rule 1)
)

(defrule
	(goal gl-normal-milling 1)
	(up-compare-goal gl-my-villager-count-total > 7)
	(building-type-count-total mill == 0)
	(wood-amount >= 100)
	(cc-players-unit-type-count 0 forage-class > 0)
	(game-time > 200)
=>
	(set-strategic-number sn-cap-civilian-explorers 100)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-number-explore-groups 5)
	(set-strategic-number sn-total-number-explorers 5)
	(set-strategic-number sn-minimum-civilian-explorers 6)
	(set-strategic-number sn-target-evaluation-ally-proximity 80)
	(enable-timer 37 40)
	(disable-self)
)

(defrule
	(building-type-count-total mill > 0)
	(strategic-number sn-target-evaluation-ally-proximity < 9999)
	(strategic-number sn-target-evaluation-ally-proximity != 20)
	(strategic-number sn-target-evaluation-ally-proximity != 30)
	(strategic-number sn-target-evaluation-ally-proximity != 40)
	(strategic-number sn-target-evaluation-ally-proximity != 50)
	(or	(strategic-number sn-target-evaluation-ally-proximity == 80)
		(game-time > 420))
=>
	(set-strategic-number sn-target-evaluation-ally-proximity 50)
	(set-strategic-number sn-minimum-civilian-explorers 0)
)

(defrule
	(strategic-number sn-target-evaluation-ally-proximity == 50)
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(set-strategic-number sn-cap-civilian-gatherers 200)
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-target-evaluation-ally-proximity 20)
)
#end-if
#end-if

(defrule
	(goal gl-unit-spreading YES)
=>
	(set-goal gl-unit-spreading NO)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
)

(defrule
	(up-timer-status 50 != timer-running)
	(up-compare-goal gl-early-raid != YES)
	(or	(goal TSA 0)
		(and	(up-compare-const gv-michi-style == 1)
			(players-building-count every-enemy == 0)))
	(military-population g:> gl-units-required-to-spreading)
	(up-compare-goal gl-unit-spreading-count < 3)
	(goal gl-unit-spreading NO)
=>
	(set-goal gl-unit-spreading YES)
	(up-modify-goal gl-unit-spreading-count c:+ 1)
	(up-modify-goal gl-units-required-to-spreading c:+ 15)
	(set-strategic-number sn-task-ungrouped-soldiers 1)
)

(defrule
	(goal TSA 0)
	(warboat-count g:> gl-boats-required-to-spreading)
	(up-compare-goal gl-unit-spreading-count < 7)
	(goal gl-unit-spreading NO)
=>
	(set-goal gl-unit-spreading YES)
	(up-modify-goal gl-unit-spreading-count c:+ 1)
	(up-modify-goal gl-boats-required-to-spreading c:+ 8)
	(set-strategic-number sn-task-ungrouped-soldiers 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(warboat-count > 6)
	(up-timer-status 38 != timer-running)
	(strategic-number sn-enemy-sighted-response-distance != 27)
=>
	(set-strategic-number sn-percent-enemy-sighted-response 100)
	(set-strategic-number sn-enemy-sighted-response-distance 27)
)

(defrule
	(goal TSA 0)
	(up-projectile-detected projectile-fortification < 30000)
	(strategic-number sn-enemy-sighted-response-distance > 0)
=>
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(enable-timer 38 30)
)

(defrule
	(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
		(or	(goal MILITARY 0)
			(or	(and	(hold-koh-ruin)
					(game-time > 2300))
				(players-military-population any-enemy > 34))))
=>
	(up-jump-rule 4)
)

(defrule
	(or	(population > almost-full-pop)
		(soldier-count > 80))
	(population > 180)
	(players-building-type-count target-player castle == 0)
	(strategic-number sn-allow-resource-spending > 5)
	(or	(unit-type-count-total battering-ram-line > 2)
		(unit-type-count-total trebuchet-set > 0))
	(players-military-population every-enemy < 5)
=>
	(set-strategic-number sn-number-explore-groups 10)
	(set-strategic-number sn-total-number-explorers 10)
	(set-strategic-number sn-task-ungrouped-soldiers 1)
	(set-strategic-number sn-maximum-town-size 254)
	(set-strategic-number sn-disable-attack-groups 0)
)

(defrule
	(gold-amount > 1200)
	(population > 190)
	(players-building-type-count target-player castle == 0)
	(players-population any-ally > 180)
	(unit-type-count-total battering-ram-line > 5)
	(not	(player-in-game every-enemy))
	(players-military-population every-enemy < 25)
=>
	(set-strategic-number sn-number-explore-groups 10)
	(set-strategic-number sn-total-number-explorers 10)
	(set-strategic-number sn-task-ungrouped-soldiers 1)
	(set-strategic-number sn-maximum-town-size 254)
	(set-strategic-number sn-disable-attack-groups 0)
)

(defrule
	(goal MILITARY 1)
	(soldier-count > 60)
	(or	(unit-type-count-total battering-ram-line > 2)
		(unit-type-count-total trebuchet-set > 0))
	(current-age == imperial-age)
	(strategic-number sn-allow-resource-spending > 5)
	(players-current-age target-player <= castle-age)
	(players-current-age focus-player <= castle-age)
	(players-military-population target-player < 35)
	(players-military-population focus-player < 35)
	(strategic-number sn-maximum-town-size < 255)
=>
	(set-strategic-number sn-maximum-town-size 255)
)

(defrule
	(goal MILITARY 1)
	(soldier-count > 60)
	(or	(unit-type-count-total battering-ram-line > 2)
		(unit-type-count-total trebuchet-set > 0))
	(players-military-population target-player < 10)
	(players-military-population focus-player < 10)
	(strategic-number sn-maximum-town-size < 255)
=>
	(set-strategic-number sn-maximum-town-size 255)
)

(defrule
	(up-compare-const gv-death-match == 0)
	(or	(up-compare-goal gl-current-age >= gv-feudal-up)
		(game-time > 1200))
=>
	(set-strategic-number sn-maximum-wood-drop-distance 13)
	(set-strategic-number sn-maximum-hunt-drop-distance 14)
	(set-strategic-number sn-minimum-boar-hunt-group-size 6)
	(set-strategic-number sn-monk-trained 0)
	(disable-self)
)

(defrule
	(not	(death-match-game))
	(game-time > 900)
	(or	(game-time > 1500)
		(unit-type-count villager-wood < 10))
	(game-time < 3000)
	(strategic-number sn-maximum-wood-drop-distance < 20)
	(strategic-number sn-maximum-wood-drop-distance >= 0)
	(goal gl-TC-lost NO)
=>
	(set-strategic-number sn-maximum-gold-drop-distance 12)
	(set-strategic-number sn-maximum-wood-drop-distance 20)
	(set-strategic-number sn-maximum-food-drop-distance 14)
	(set-strategic-number sn-maximum-hunt-drop-distance 17)
	(set-strategic-number sn-maximum-stone-drop-distance 12)
)

#load-if-defined TINY-MAP
(defrule
	(not	(death-match-game))
	(game-time > 3000)
	(goal gl-TC-lost NO)
=>
	(set-strategic-number sn-maximum-gold-drop-distance 15)
	(set-strategic-number sn-maximum-wood-drop-distance 20)
	(set-strategic-number sn-maximum-food-drop-distance 17)
	(set-strategic-number sn-maximum-hunt-drop-distance 27)
	(set-strategic-number sn-maximum-stone-drop-distance 15)
	(set-strategic-number sn-allow-civilian-defense 1)
	(disable-self)
)

(defrule
	(game-time > 3000)
	(or	(game-time > 4200)
		(death-match-game))
	(goal gl-TC-lost NO)
=>
	(set-strategic-number sn-maximum-gold-drop-distance 25)
	(set-strategic-number sn-maximum-wood-drop-distance 40)
	(set-strategic-number sn-maximum-food-drop-distance 18)
	(set-strategic-number sn-maximum-hunt-drop-distance 40)
	(set-strategic-number sn-maximum-stone-drop-distance 25)
	(disable-self)
)
#else
(defrule
	(not	(death-match-game))
	(game-time > 3600)
	(goal gl-TC-lost NO)
=>
	(set-strategic-number sn-maximum-gold-drop-distance 15)
	(set-strategic-number sn-maximum-wood-drop-distance 20)
	(set-strategic-number sn-maximum-food-drop-distance 17)
	(set-strategic-number sn-maximum-hunt-drop-distance 27)
	(set-strategic-number sn-maximum-stone-drop-distance 15)
	(set-strategic-number sn-allow-civilian-defense 1)
	(disable-self)
)

(defrule
	(game-time > 3300)
	(or	(game-time > 4800)
		(death-match-game))
	(goal gl-TC-lost NO)
=>
	(set-strategic-number sn-maximum-gold-drop-distance 25)
	(set-strategic-number sn-maximum-wood-drop-distance 40)
	(set-strategic-number sn-maximum-food-drop-distance 18)
	(set-strategic-number sn-maximum-hunt-drop-distance 40)
	(set-strategic-number sn-maximum-stone-drop-distance 25)
	(disable-self)
)
#end-if

#load-if-not-defined MIGRATION-MAP
(defrule
	(or	(game-time > 1800)
		(current-age == imperial-age))
=>
	(up-jump-rule 3)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(or	(up-compare-goal gl-current-age >= gv-feudal-up)
		(or	(goal gl-patrol-defence patrol-on)
			(game-time > 1500)))
	(unit-type-count scout-unit < 1)
	(players-building-count every-enemy > 0)
	(players-military-population any-enemy > 1)
=>
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
	(disable-self)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(goal gl-DRUSH YES)
	(goal gl-DRUSH-CONTROL MILITIAS-DONE)
	(unit-type-count scout-unit < 1)
	(players-building-count target-player > 0)
=>
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
	(up-reset-scouts)
	(disable-self)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(or	(up-compare-goal gl-current-age >= gv-feudal-up)
		(or	(goal gl-patrol-defence patrol-on)
			(game-time > 1500)))
	(or	(goal gl-strategy krush)
		(goal gl-strategy knight-rush))
	(unit-type-count scout-unit < 1)
	(players-building-count every-enemy > 0)
	(players-military-population any-enemy > 1)
=>
	(up-reset-scouts)
	(disable-self)
)
#end-if

(defrule
	(up-compare-goal MILITARY < 1)
	(up-compare-goal TSA < 1)
	(game-time > 1700)
	(nand	(map-type migration)
		(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))
	(players-building-count any-enemy > 0)
	(or	(current-age == imperial-age)
		(players-building-count any-enemy > 4))
	(strategic-number sn-number-explore-groups != 0)
=>
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
)

(defrule
	(game-time > 1200)
	(players-building-count every-enemy == 0)
	(strategic-number sn-number-explore-groups < 1)
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
)

(defrule
	(game-time > 1200)
	(or	(up-compare-goal gl-toughest-fought-enemy-military > 14)
		(soldier-count < 35))
	(strategic-number sn-number-explore-groups > 9)
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(up-reset-scouts)
)

(defrule
	(timer-triggered 8)
	(or	(building-type-count-total mining-camp > 0)
		(goal gl-nothing-style-map YES))
	(strategic-number sn-town-center-placement == 0)
=>
	(up-modify-sn sn-lumber-camp-max-distance c:+ 3)
	(up-modify-sn sn-mining-camp-max-distance c:max 40)
	(set-difficulty-parameter ability-to-maintain-distance 90)
	(disable-self)
)

(defrule
	(game-time > 1800)
	(or	(building-type-count-total mining-camp > 5)
		(and	(game-time > 2100)
			(building-type-count-total town-center > 2)))
	(strategic-number sn-defer-dropsite-update == 0)
=>
	(set-strategic-number sn-defer-dropsite-update 1)
)

(defrule
	(game-time > 1380)
	(strategic-number sn-town-center-placement == 0)
=>
	(up-modify-sn sn-lumber-camp-max-distance c:max 27)
)

(defrule
	(or	(game-time > 1740)
		(death-match-game))
	(game-time > 700)
	(strategic-number sn-town-center-placement == 0)
=>
	(up-modify-sn sn-lumber-camp-max-distance c:max 40)
	(up-modify-sn sn-mining-camp-max-distance c:max 40)
)

(defrule
	(strategic-number sn-town-center-placement == 0)
=>
	(up-modify-sn sn-mining-camp-max-distance s:max sn-camp-max-distance)
	(up-modify-sn sn-camp-max-distance s:max sn-mining-camp-max-distance)
)

(defrule
	(map-type gold-rush)
	(or	(game-time > 1600)
		(building-type-count-total town-center > 2))
	(game-time > 600)
	(strategic-number sn-town-center-placement == 0)
	(strategic-number sn-mining-camp-max-distance < 100)
=>
	(up-get-point-distance gl-position-self-x gl-position-center-x temporary-goal)
	(up-modify-sn sn-mining-camp-max-distance g:= temporary-goal)
	(up-modify-sn sn-mining-camp-max-distance c:+ 20)
	(up-chat-data-to-player my-player-number "Trying to locate camps to the middle gold, camp-max %d" s: sn-mining-camp-max-distance)
	(disable-self)
)

(defrule
	(game-time > camp-max-50-time)
	(strategic-number sn-town-center-placement == 0)
=>
	(up-modify-sn sn-lumber-camp-max-distance c:max 50)
	(up-modify-sn sn-mining-camp-max-distance c:max 50)
)

(defrule
	(game-time > camp-max-80-time)
	(strategic-number sn-town-center-placement == 0)
=>
	(up-modify-sn sn-lumber-camp-max-distance c:max 80)
	(up-modify-sn sn-mining-camp-max-distance c:max 80)
)

(defrule
	(game-time > camp-max-100-time)
	(strategic-number sn-town-center-placement == 0)
=>
	(up-modify-sn sn-lumber-camp-max-distance c:max 100)
	(up-modify-sn sn-mining-camp-max-distance c:max 100)
)

(defrule
	(game-time > camp-max-150-time)
	(strategic-number sn-town-center-placement == 0)
=>
	(up-modify-sn sn-lumber-camp-max-distance c:max 150)
	(up-modify-sn sn-mining-camp-max-distance c:max 150)
)

(defrule
	(game-time > 7200)
	(or	(cc-players-unit-type-count 0 tree < 1000)
		(game-time > 14400))
	(strategic-number sn-town-center-placement == 0)
=>
	(up-modify-sn sn-lumber-camp-max-distance c:max 200)
	(up-modify-sn sn-mining-camp-max-distance c:max 200)
)

(defrule
	(game-time > 14400)
	(or	(cc-players-unit-type-count 0 tree < 1000)
		(game-time > 27000))
	(strategic-number sn-town-center-placement == 0)
=>
	(up-modify-sn sn-lumber-camp-max-distance c:max 254)
	(up-modify-sn sn-mining-camp-max-distance c:max 254)
)

(defrule
	(death-match-game)
	(game-time < 1500)
	(strategic-number sn-town-center-placement == 0)
=>
	(up-modify-sn sn-lumber-camp-max-distance c:min 50)
)

#load-if-not-defined DEATH-MATCH
#load-if-not-defined UP-GROUPED-BY-TEAM
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(or	(and	(current-age >= feudal-age)
			(current-age-time > 7))
		(and	(game-time > 700)
			(up-compare-const gv-maximum-age == dark-age)))
=>
	(up-modify-goal gl-my-maximum-town-size c:= basic-town-size)
	(set-goal gl-town-size-increasing-time 130)
	(up-modify-goal gl-town-size-increasing-time c:* relative-gt-multiplier)
	(up-modify-goal gl-town-size-increasing-time c:/ relative-gt-divider)
	(disable-self)
)
#else
(defrule
	(or	(and	(current-age >= feudal-age)
			(current-age-time > 7))
		(and	(game-time > 700)
			(up-compare-const gv-maximum-age == dark-age)))
=>
	(up-modify-goal gl-my-maximum-town-size c:= basic-town-size)
	(set-goal gl-town-size-increasing-time 70)
	(up-modify-goal gl-town-size-increasing-time c:* relative-gt-multiplier)
	(up-modify-goal gl-town-size-increasing-time c:/ relative-gt-divider)
	(disable-self)
)
#end-if

(defrule
	(current-age == feudal-age)
	(current-age-time > 7)
	(game-time < 1200)
	(or	(goal gl-strategy-type FI2)
		(or	(up-compare-goal gl-eew-strategy-type >= fast-imp)
			(or	(goal gl-strategy saracen-heavy-krush)
				(goal gl-strategy turkish-fast-imp))))
=>
	(up-modify-goal gl-town-size-increasing-time c:+ 30)
	(disable-self)
)
#else
(defrule
	(or	(and	(current-age >= feudal-age)
			(current-age-time > 7))
		(and	(game-time > 700)
			(up-compare-const gv-maximum-age == dark-age)))
=>
	(up-modify-goal gl-my-maximum-town-size c:= basic-town-size)
	(set-goal gl-town-size-increasing-time 70)
	(up-modify-goal gl-town-size-increasing-time c:* relative-gt-multiplier)
	(up-modify-goal gl-town-size-increasing-time c:/ relative-gt-divider)
	(disable-self)
)
#end-if
#else
(defrule
	(true)
=>
	(up-modify-goal gl-my-maximum-town-size c:= basic-town-size)
	(set-goal gl-town-size-increasing-time 20)
	(up-modify-goal gl-town-size-increasing-time c:* relative-gt-multiplier)
	(up-modify-goal gl-town-size-increasing-time c:/ relative-gt-divider)
	(disable-self)
)

(defrule
	(game-time > 300)
=>
	(set-goal gl-town-size-increasing-time 80)
	(up-modify-goal gl-town-size-increasing-time c:* relative-gt-multiplier)
	(up-modify-goal gl-town-size-increasing-time c:/ relative-gt-divider)
	(disable-self)
)
#end-if

#load-if-not-defined DARK-AGE-END
(defrule
	(current-age >= feudal-age)
	(current-age-time > 7)
	(game-time g:> gl-game-time-required)
	(or	(up-compare-goal gl-my-maximum-town-size < max-ts)
		(or	(population > 350)
			(and	(map-type migration)
				(up-compare-goal gl-migration-progress >= 4))))
	(up-compare-goal gl-my-maximum-town-size < 41)
=>
	(up-modify-goal gl-my-maximum-town-size c:+ 1)
	(up-modify-goal gl-game-time-required g:+ gl-town-size-increasing-time)
)
#else
(defrule
	(game-time > 700)
	(game-time g:> gl-game-time-required)
	(or	(up-compare-goal gl-my-maximum-town-size < max-ts)
		(population > 350))
	(up-compare-goal gl-my-maximum-town-size < 41)
=>
	(up-modify-goal gl-my-maximum-town-size c:+ 1)
	(up-modify-goal gl-game-time-required g:+ gl-town-size-increasing-time)
)
#end-if

(defrule
	(or	(and	(current-age >= feudal-age)
			(current-age-time > 7))
		(and	(game-time > 700)
			(up-compare-const gv-maximum-age == dark-age)))
	(population < 30)
	(players-military-population any-enemy > 50)
	(players-population any-enemy > 120)
	(population-headroom > 7)
	(up-compare-goal gl-my-maximum-town-size > 15)
=>
	(set-goal gl-my-maximum-town-size 15)
	(set-goal gl-town-size-increasing-time 100)
)

(defrule
	(or	(and	(current-age >= feudal-age)
			(current-age-time > 7))
		(and	(game-time > 700)
			(up-compare-const gv-maximum-age == dark-age)))
	(strategic-number sn-maximum-town-size g:< gl-my-maximum-town-size)
	(nand	(goal gl-eew-strategy-type fast-imp)
		(and	(goal gl-enemy-strategy EAGLERUSH)
			(strategic-number sn-maximum-town-size == 10)))
=>
	(up-modify-sn sn-maximum-town-size g:= gl-my-maximum-town-size)
;	(up-chat-data-to-player my-player-number "TS %d" g: gl-my-maximum-town-size)
)

#load-if-defined KING-OF-THE-HILL
(defrule
	(game-time > 2200)
=>
	(up-jump-rule 4)
	(set-strategic-number sn-disable-defend-groups 1)
	(set-goal TSA 0)
	(up-modify-sn sn-maximum-town-size c:min 40)
)
#else
(load "Barbarian/RaidTheCamps")
#end-if

(defrule
	(true)
=>
	(up-get-fact defender-count 0 temporary-goal)
	(up-get-fact soldier-count 0 temporary-goal2)
	(up-get-fact unit-type-count monastery-class temporary-goal3)
	(up-modify-goal temporary-goal g:+ temporary-goal3)
	(up-modify-goal temporary-goal3 g:= gl-gathering-inside)
	(up-modify-goal temporary-goal3 c:- 13)
	(up-modify-goal temporary-goal3 c:* 100); 0*100 if not gathering any units inside
	(up-modify-goal temporary-goal g:+ temporary-goal3)
	(up-modify-goal temporary-goal c:+ 3)
	(up-modify-goal temporary-goal4 c:= max-carts)
	(up-modify-goal temporary-goal4 c:+ 2)
)

(defrule
	(population >= almost-full-pop)
	(unit-type-count trade-cog > 0)
	(or	(unit-type-count trade-cog > 20)
		(up-compare-goal gl-trade-unit-count-total g:> temporary-goal4))
=>
	(delete-unit trade-cog)
	(up-jump-rule 1)
)

(defrule
	(population >= almost-full-pop)
	(up-compare-goal gl-trade-unit-count-total g:> temporary-goal4)
=>
	(delete-unit trade-cart)
)

(defrule
	(or	(up-timer-status 44 != timer-running)
		(up-compare-goal TSA >= 1))
	(or	(up-compare-const victory-building == wonder)
		(game-time < 2200))
	(goal gl-patrol-defence patrol-off)
	(up-compare-goal temporary-goal g:<= temporary-goal2); Need to task more soldiers to attack
	(enemy-buildings-in-town)
=>
	(set-strategic-number sn-disable-defend-groups 0)
	(up-jump-rule 2)
)

(defrule
	(or	(up-timer-status 44 != timer-running)
		(up-compare-goal TSA >= 1))
	(or	(up-compare-const victory-building == wonder)
		(game-time < 2200))
	(enemy-buildings-in-town)
	(goal gl-patrol-defence patrol-off)
	(or	(up-compare-goal gl-defend-group-notice <= -1)
		(and	(strategic-number sn-disable-defend-groups == 0)
			(goal gl-defend-group-notice 2)))
=>
	(up-modify-goal gl-defend-group-notice c:+ 3)
	(set-strategic-number sn-disable-defend-groups 0)
	(up-jump-rule 1)
)

(defrule
	(enemy-buildings-in-town)
	(up-compare-goal temporary-goal g:> temporary-goal2)
	(up-compare-goal gl-defend-group-notice > -1)
=>
	(up-modify-goal gl-defend-group-notice c:- 1)
	(set-strategic-number sn-disable-defend-groups 1)
)

(defrule
	(game-time < 210)
	(up-compare-goal gl-enemy-units-in-town > 0); Scout attack in non-dark start
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-defending-ally != YES)
	(or	(current-age >= castle-age)
		(up-compare-const gv-maximum-age == dark-age))
	(goal MILITARY 1)
	(strategic-number sn-percent-attack-soldiers != 0)
	(up-compare-goal TSA != 1)
	(players-building-count any-enemy > 0)
=>
	(up-set-attack-stance -1 c: aggressive)
	(set-goal TSA 1)
	(set-goal gl-defend-group-notice 4)
	(set-difficulty-parameter ability-to-maintain-distance 90)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(set-strategic-number sn-disable-defend-groups 0)
	(chat-to-player my-player-number TSA-on-chat)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(up-compare-goal MILITARY != 1)
	(up-compare-goal TSA != 0)
=>
	(up-disband-group-type group-type-land-attack)
)

(defrule
	(up-compare-goal MILITARY != 1)
	(up-compare-goal TSA != 0)
=>
	(set-goal TSA 0)
	(up-disband-group-type group-type-water-attack)
	(set-strategic-number sn-number-attack-groups 0)
	(chat-to-player my-player-number TSA-off-chat)
	(set-goal gl-enemy-units-in-town 0); So that Barbarian doesn't think the enemy is in town while reducing the town size
	(set-strategic-number sn-maximum-town-size 10)
	(up-update-targets)
)

(defrule
	(or	(current-age != feudal-age)
		(and	(goal gl-DRUSH YES)
			(and	(current-age-time < 120)
				(military-population < 6))))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-SCRUSH-CONTROL != SCOUTS-DONE)
	(current-age == feudal-age)
	(strategic-number sn-percent-attack-soldiers != 0)
	(goal MILITARY 1)
	(up-compare-goal TSA != 1)
	(players-building-count any-enemy > 0)
	(not	(town-under-attack))
=>
	(up-set-attack-stance -1 c: aggressive)
	(set-goal TSA 1)
	(set-goal gl-defend-group-notice 4)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(set-strategic-number sn-disable-defend-groups 0)
	(chat-to-player my-player-number TSA-on-chat)
)

(defrule
	(up-timer-status 38 == timer-running)
	(up-compare-goal TSA >= 1)
=>
	(up-reset-unit c: -1)
	(set-strategic-number sn-stance-reset-notice 1)
	(disable-timer 38)
)

(defrule
	(goal TSA 0)
	(building-type-count-total town-center > 0)
	(not	(up-pending-placement c: wonder))
	(or	(strategic-number sn-maximum-town-size > 41)
		(and	(enemy-buildings-in-town)
			(up-compare-goal gl-anti-trush != YES)))
	(strategic-number sn-maximum-town-size g:> gl-my-maximum-town-size)
=>
	(up-modify-sn sn-maximum-town-size g:= gl-my-maximum-town-size)
;	(up-chat-data-to-player my-player-number "TS %d" g: gl-my-maximum-town-size)
)

(defrule
	(up-compare-goal TSA >= 1)
	(not	(enemy-buildings-in-town))
	(strategic-number sn-maximum-town-size >= 253)
=>
	(up-modify-sn sn-safe-town-size s:max sn-maximum-town-size)
)

(defrule
	(goal gl-early-raid DUC-system)
=>
	(up-jump-rule 4)
)

(defrule
	(up-compare-goal TSA >= 1)
	(not	(enemy-buildings-in-town))
	(up-compare-goal gl-defending-ally != YES)
	(nand	(town-under-attack)
		(and	(goal gl-strategy fi-monk-rush)
			(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)))
	(or	(strategic-number sn-maximum-town-size >= 43)
		(up-compare-goal gl-target-player-distance < 43))
	(strategic-number sn-maximum-town-size < 255)
=>
	(up-modify-sn sn-maximum-town-size c:+ 2)
)

(defrule
	(up-compare-goal TSA >= 1)
	(enemy-buildings-in-town)
	(game-time < 1800)
	(up-compare-goal gl-target-player-distance < 45)
	(up-building-type-in-town c: watch-tower > 0)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 44)
	(up-find-remote c: watch-tower c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(or	(goal gl-remote-total 0); The tower isn't up yet
		(up-projectile-detected projectile-watch-tower < 30000))
	(up-building-type-in-town c: watch-tower > 0)
	(up-compare-goal gl-target-player-distance < 45); Knock forward tower down first
	(strategic-number sn-maximum-town-size < 65)
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal TSA >= 1)
	(up-compare-goal gl-defending-ally != YES)
	(game-time < 2100)
	(goal gl-rush-suitability-on-map GOOD)
	(current-age <= castle-age)
	(or	(players-building-type-count target-player lumber-camp > 0)
		(players-building-type-count target-player mining-camp > 0))
	(up-building-type-in-town c: lumber-camp == 0)
	(up-building-type-in-town c: mining-camp == 0)
	(up-building-type-in-town c: castle == 0)
	(unit-type-count battering-ram-line == 0)
	(strategic-number sn-maximum-town-size < 249)
=>
	(up-modify-sn sn-maximum-town-size c:+ 6)
)

(defrule
	(up-compare-goal TSA >= 1)
	(not	(enemy-buildings-in-town))
	(up-compare-goal gl-defending-ally != YES)
	(nand	(town-under-attack)
		(and	(goal gl-strategy fi-monk-rush)
			(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)))
	(strategic-number sn-maximum-town-size < 43)
	(up-compare-goal gl-target-player-distance >= 43)
=>
	(set-strategic-number sn-maximum-town-size 43)
)

#load-if-defined DIFFICULTY-HARDEST
#load-if-not-defined DARK-AGE-END
(defrule
	(or	(up-compare-goal gl-strategy-type <= controlled-flush)
		(game-time > 540))
	(nand	(goal gl-DRUSH YES)
		(game-time < 630))
	(or	(game-time > 460)
		(up-compare-goal gl-my-villager-count-total >= hardest-flush-vills))
	(current-age == dark-age)
	(strategic-number sn-enable-training-queue == 1)
=>
	(set-strategic-number sn-enable-training-queue 0)
)
#end-if
(defrule
	(or	(up-compare-goal gl-strategy-type <= controlled-flush)
		(game-time > 550))
	(or	(game-time > 490)
		(up-compare-goal gl-my-villager-count-total >= hardest-flush-vills))
	(can-research feudal-age)
=>
	(research feudal-age)
	(set-goal gl-current-age gv-dark-up)
	(enable-timer 9 5)
	(set-strategic-number sn-sling-control 0)
)

(load "Barbarian\HardestCheats")
#end-if

#load-if-not-defined DEATH-MATCH
#load-if-not-defined DEFEND-WONDER
#load-if-not-defined KING-OF-THE-HILL
#load-if-not-defined TURBO-RANDOM-MAP
#load-if-not-defined REGICIDE
#load-if-not-defined WONDER-RACE
#load-if-defined MEDIUM-RESOURCES-START
(defrule
	(or	(up-compare-goal gl-my-villager-count-total > 24)
		(up-compare-goal gl-strategy-type <= controlled-flush))
	(up-compare-goal gl-my-villager-count-total > 19)
	(goal gl-current-age gv-dark)
	(strategic-number sn-enable-training-queue == 1)
=>
	(set-strategic-number sn-enable-training-queue 0)
)
#end-if
#load-if-defined HIGH-RESOURCES-START
(defrule
	(or	(up-compare-goal gl-my-villager-count-total > 18)
		(up-compare-goal gl-strategy-type <= controlled-flush))
	(up-compare-goal gl-my-villager-count-total > 13)
	(goal gl-current-age gv-dark)
	(strategic-number sn-enable-training-queue == 1)
=>
	(set-strategic-number sn-enable-training-queue 0)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

#load-if-defined TURBO-RANDOM-MAP
(defrule
	(or	(up-compare-goal gl-my-villager-count-total > 19)
		(or	(and	(starting-resources == medium-resources)
				(up-compare-goal gl-my-villager-count-total > 17))
			(starting-resources == high-resources)))
	(up-compare-goal gl-my-villager-count-total > 15)
	(current-age == dark-age)
	(strategic-number sn-enable-training-queue == 1)
=>
	(set-strategic-number sn-enable-training-queue 0)
)

(defrule
	(or	(up-compare-goal gl-my-villager-count-total > 19)
		(or	(and	(starting-resources == medium-resources)
				(up-compare-goal gl-my-villager-count-total > 17))
			(starting-resources == high-resources)))
	(up-compare-goal gl-my-villager-count-total > 15)
	(can-research feudal-age)
=>
	(research feudal-age)
	(set-goal gl-current-age gv-dark-up)
	(enable-timer 9 5)
	(set-strategic-number sn-sling-control 0)
)
#end-if

;(defrule
;	(not	(taunt-detected 1 53))
;	(or	(strategic-number sn-focus-player-number < 0)
;		(or	(not	(player-valid focus-player))
;			(or	(strategic-number sn-focus-player-number == my-player-number)
;				(stance-toward focus-player ally))))
;=>
;	(up-chat-data-to-all "!!! FOCUS PLAYER (%d) !!! (4)" s: sn-focus-player-number)
;)

; ================ CALCULATED ECO BALANCING

(defrule
	(goal gl-fixed-eco-balancing YES)
	(goal gl-TC-lost NO)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(and	(up-compare-goal gl-current-age >= gv-castle)
			(current-age-time > 5))
		(strategic-number sn-minimum-water-body-size-for-dock != land-map-style))
	(goal gl-strategy default)
=>
	(set-goal gl-fixed-eco-balancing NO)
)

(defrule
	(or	(goal gl-fixed-eco-balancing YES)
		(up-compare-const gv-wonder-race == 1))
	(up-timer-status 3 != timer-disabled)
=>
	(disable-timer 3)
)

(defrule
	(or	(goal gl-fixed-eco-balancing YES)
		(up-timer-status 3 == timer-running))
=>
	(up-jump-rule 120)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-const gv-wonder-race == 0)
	(goal gl-fixed-eco-balancing NO)
	(up-timer-status 3 == timer-disabled)
=>
	(enable-timer 3 2)
;	(chat-to-player my-player-number "1Enable new eco balancing")
)

(defrule
	(timer-triggered 3)
=>
	(set-goal gl-food-gp-points 0)
	(set-goal gl-wood-gp-points 0)
	(set-goal gl-gold-gp-points 0)
	(set-goal gl-gp-points-total 0)
	(set-goal gl-peace-in-town NO)
)

(defrule
	(not	(enemy-buildings-in-town))
	(or	(and	(up-compare-goal threat-time > 10000)
			(and	(up-compare-goal MILITARY != 1)
				(up-compare-goal gl-defending-ally != YES)))
		(or	(and	(goal gl-strategy castle-drop); To keep gatherer percentages stable
				(game-time < 2200))
			(strategic-number sn-allow-resource-spending == 0)))
=>
	(set-goal gl-peace-in-town YES)
)

(defrule
	(goal gl-advanced-infantry pikemen)
=>
	(up-modify-goal gl-food-gp-points c:+ 140)
	(up-modify-goal gl-wood-gp-points c:+ 100)
	(up-modify-goal gl-gold-gp-points c:+ 20)
)

(defrule
	(or	(goal gl-advanced-infantry heavy-swordsmen)
		(goal CASTLE 4))
=>
	(up-modify-goal gl-food-gp-points c:+ 150)
	(up-modify-goal gl-wood-gp-points c:+ 70)
	(up-modify-goal gl-gold-gp-points c:+ 50)
)

(defrule
	(or	(and	(or	(up-compare-goal gl-current-age >= gv-castle-up)
				(game-time > 3000))
			(civ-selected gothic))
		(or	(and	(game-time < 3000)
				(and	(gold-amount > 400)
					(goal gl-current-age gv-castle-up)))
			(and	(up-compare-goal gl-my-villager-count < 30)
				(up-compare-goal gl-my-villager-count < imperial-villager-cap))))
=>
	(up-modify-goal gl-food-gp-points c:+ 60)
)

(defrule
	(or	(goal gl-advanced-archery main-ranged)
		(or	(goal gl-advanced-archery CAs)
			(or	(goal gl-advanced-archery scorpions)
				(or	(research-completed ri-heavy-scorpion)
					(and	(or	(goal gl-advanced-archery light-archers)
							(goal gl-advanced-archery light-CAs))
						(up-compare-goal gl-castle-age-style >= mangonel-push))))))
=>
	(up-modify-goal gl-food-gp-points c:+ 50)
	(up-modify-goal gl-wood-gp-points c:+ 120)
	(up-modify-goal gl-gold-gp-points c:+ 120)
)

(defrule
	(civ-selected korean)
	(goal gl-strategy default)
	(up-compare-goal CASTLE != 0)
=>
	(up-modify-goal gl-food-gp-points c:+ 50)
	(up-modify-goal gl-wood-gp-points c:+ 100)
	(up-modify-goal gl-gold-gp-points c:+ 100)
)

(defrule
	(or	(goal gl-advanced-archery heavy-cannoneers)
		(goal gl-advanced-archery medium-cannoneers))
=>
	(up-modify-goal gl-food-gp-points c:+ 120)
	(up-modify-goal gl-wood-gp-points c:+ 65)
	(up-modify-goal gl-gold-gp-points c:+ 110)
)

(defrule
	(goal gl-advanced-archery light-archers)
	(up-compare-const gv-migration == 0)
	(up-compare-goal gl-castle-age-style < mangonel-push)
	(building-type-count-total town-center < 3)
=>
	(up-modify-goal gl-food-gp-points c:+ 50)
	(up-modify-goal gl-wood-gp-points c:+ 80)
	(up-modify-goal gl-gold-gp-points c:+ 60)
	(up-jump-rule 1)
)

(defrule
	(or	(goal gl-advanced-archery light-cannoneers)
		(and	(goal gl-advanced-archery light-archers)
			(up-compare-goal gl-castle-age-style < mangonel-push)))
=>
	(up-modify-goal gl-food-gp-points c:+ 70)
	(up-modify-goal gl-wood-gp-points c:+ 50)
	(up-modify-goal gl-gold-gp-points c:+ 70)
)

(defrule
	(goal gl-advanced-archery light-CAs)
	(up-compare-goal gl-castle-age-style < mangonel-push)
=>
	(up-modify-goal gl-food-gp-points c:+ 40)
	(up-modify-goal gl-wood-gp-points c:+ 70)
	(up-modify-goal gl-gold-gp-points c:+ 70)
)

(defrule
	(or	(and	(up-compare-goal gl-current-age >= gv-castle-up)
			(and	(or	(up-compare-goal gl-eagles != 0)
					(goal CASTLE 6))
				(or	(and	(research-available my-unique-research)
						(building-type-count castle > 0))
					(up-research-status c: ri-elite-eagle-warrior < research-pending))))
		(and	(up-compare-goal gl-my-villager-count-total < 30)
			(up-compare-goal gl-my-villager-count-total < imperial-villager-cap)))
=>
	(up-modify-goal gl-food-gp-points c:+ 60)
)

(defrule
	(or	(up-compare-goal gl-eagles != 0)
		(or	(goal CASTLE 6)
			(and	(unit-available eagle-warrior)
				(or	(players-unit-type-count focus-player monk > 5)
					(players-unit-type-count focus-player missionary > 5)))))
=>
	(up-modify-goal gl-food-gp-points c:+ 85)
	(up-modify-goal gl-wood-gp-points c:+ 65)
	(up-modify-goal gl-gold-gp-points c:+ 140)
	(up-modify-goal temporary-goal g:= gl-toughest-fought-enemy-military)
	(up-modify-goal temporary-goal c:- 5)
)

(defrule
	(or	(and	(up-compare-goal gl-eagles != 0)
			(or	(building-type-count-total barracks < 4)
				(and	(goal gl-current-age gv-castle)
					(soldier-count g:> temporary-goal))))
		(and	(goal gl-advanced-archery scorpions)
			(and	(building-type-count-total siege-workshop < 4)
				(or	(civilian-population > 100)
					(building-type-count-total siege-workshop < 2)))))
=>
	(up-modify-goal gl-gold-gp-points c:- 45)
)

(defrule
	(or	(and	(up-compare-goal gl-eagles != 0)
			(building-type-count-total barracks < 4))
		(or	(and	(goal gl-advanced-cavalry LC)
				(building-type-count-total stable < 2))
			(and	(building-available stable)
				(and	(building-type-count-total stable < 3)
					(players-unit-type-count focus-player monk >= high-monks)))))
=>
	(up-modify-goal gl-wood-gp-points c:+ 35)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(goal gl-strategy castle-drop)
	(civ-selected persian)
	(nand	(current-age == castle-age)
		(current-age-time < 200))
=>
	(up-modify-goal gl-food-gp-points c:- 40)
	(up-modify-goal gl-gold-gp-points c:- 50)
)

(defrule
	(up-compare-const extra-knights == 1)
	(goal gl-strategy default)
	(goal gl-advanced-infantry 0)
	(goal gl-advanced-archery 0)
	(or	(current-age-time < 300)
		(current-age == castle-age))
	(up-compare-goal gl-current-age >= gv-castle-up)
	(or	(unit-type-count-total knight-line > 4)
		(up-research-status c: ri-cavalier >= research-pending))
	(building-type-count castle == 0)
=>
	(up-modify-goal gl-food-gp-points c:+ 120)
	(up-modify-goal gl-wood-gp-points c:+ 70)
	(up-modify-goal gl-gold-gp-points c:+ 140)
	(up-jump-rule 5)
)

(defrule
	(not	(goal CASTLE 0))
	(nand	(goal gl-strategy krush)
		(building-type-count-total castle < 1))
	(nand	(civ-selected persian)
		(and	(current-age == castle-age)
			(current-age-time < 200)))
=>
	(up-modify-goal gl-food-gp-points c:+ castle-drop-food-gp-points)
	(up-modify-goal gl-wood-gp-points c:+ castle-drop-wood-gp-points)
	(up-modify-goal gl-gold-gp-points c:+ castle-drop-gold-gp-points)
)

(defrule
	(not	(goal CASTLE 0))
	(up-compare-goal gl-strategy != krush)
	(goal gl-current-age gv-castle)
	(food-amount < needed-castle-food)
	(or	(food-amount < 400)
		(gold-amount >= needed-castle-gold))
	(building-type-count-total castle == 0)
=>
	(set-goal temporary-goal castle-drop-gold-gp-points)
	(up-modify-goal temporary-goal c:/ 2)
	(up-modify-goal gl-gold-gp-points g:- temporary-goal)
)

(defrule
	(goal gl-strategy castle-drop)
	(up-compare-const uu-food-buffer > 0)
	(military-population g:> gl-toughest-fought-enemy-military)
	(goal TSA 0)
	(player-human focus-player)
	(goal gl-rush-suitability-on-map VERY-LOW)
	(building-type-count-total castle > 0)
=>
	(set-goal temporary-goal castle-drop-gold-gp-points)
	(up-modify-goal temporary-goal c:/ 2)
	(up-modify-goal gl-gold-gp-points g:- temporary-goal)
)

(defrule
	(not	(goal CASTLE 0))
	(civ-selected persian)
	(current-age == castle-age)
	(current-age-time < 200)
=>
	(up-modify-goal gl-food-gp-points c:+ 120)
	(up-modify-goal gl-wood-gp-points c:+ 140)
	(up-modify-goal gl-gold-gp-points c:+ 10)
)

(defrule
	(goal CASTLE 1)
=>
	(up-modify-goal gl-food-gp-points c:+ 130)
	(up-modify-goal gl-wood-gp-points c:+ 110)
	(up-modify-goal gl-gold-gp-points c:+ 40)
)

(defrule
	(or	(goal gl-advanced-trash YES)
		(goal gl-advanced-archery elite-skirmishers))
=>
	(up-modify-goal gl-food-gp-points c:+ 160)
	(up-modify-goal gl-wood-gp-points c:+ 160)
	(up-modify-goal gl-gold-gp-points c:+ 40)
)

(defrule
	(goal gl-advanced-trash YES)
	(or	(and	(up-compare-goal gl-enemy-archery-count > 10)
			(and	(up-compare-goal gl-enemy-cavalry-count < 5)
				(nand	(up-compare-goal gl-skirmisher-count-total > 40)
					(strategic-number sn-allow-resource-spending > 5))))
		(up-compare-const gv-meso-civ-enemy == 1))
=>
	(up-modify-goal gl-food-gp-points c:- 20)
	(up-modify-goal gl-wood-gp-points c:+ 20)
)

(defrule
	(goal gl-advanced-trash YES)
	(goal CASTLE 0)
	(strategic-number sn-allow-resource-spending > 5)
	(up-compare-goal gl-enemy-cavalry-count < 5)
=>
	(up-modify-goal gl-food-gp-points c:- 15)
	(up-modify-goal gl-wood-gp-points c:+ 15)
)

(defrule
	(goal gl-strategy ranged-boom-strategy)
=>
	(up-modify-goal gl-food-gp-points c:+ 70)
	(up-modify-goal gl-wood-gp-points c:+ 110)
	(up-modify-goal gl-gold-gp-points c:+ 60)
)

(defrule
	(or	(goal gl-advanced-cavalry heavy-knights)
		(or	(goal gl-strategy krush)
			(and	(goal gl-advanced-cavalry heavy-camels)
				(civilian-population < 110))))
	(game-time < 2400)
	(goal gl-current-age gv-castle)
	(civilian-population >= 105)
=>
	(up-modify-goal gl-food-gp-points c:+ 120)
	(up-modify-goal gl-wood-gp-points c:+ 85)
	(up-modify-goal gl-gold-gp-points c:+ 150)
	(up-jump-rule 3)
)

(defrule
	(or	(goal gl-advanced-cavalry heavy-knights)
		(or	(and	(research-completed ri-paladin)
				(nand	(civ-selected persian)
					(and	(goal CASTLE 2)
						(building-type-count castle > 2))))
			(goal gl-strategy krush)))
	(civilian-population >= 105)
=>
	(up-modify-goal gl-food-gp-points c:+ 120)
	(up-modify-goal gl-wood-gp-points c:+ 70)
	(up-modify-goal gl-gold-gp-points c:+ 150)
	(up-jump-rule 2)
)

(defrule
	(or	(goal gl-advanced-cavalry heavy-knights)
		(or	(research-completed ri-paladin)
			(or	(goal gl-strategy krush)
				(and	(goal gl-advanced-cavalry heavy-camels)
					(civilian-population < 110)))))
	(civilian-population >= 70)
=>
	(up-modify-goal gl-food-gp-points c:+ 105)
	(up-modify-goal gl-wood-gp-points c:+ 90)
	(up-modify-goal gl-gold-gp-points c:+ 110)
	(up-jump-rule 1)
)

(defrule
	(or	(goal gl-advanced-cavalry heavy-knights)
		(or	(research-completed ri-paladin)
			(or	(goal gl-strategy krush)
				(and	(goal gl-advanced-cavalry heavy-camels)
					(civilian-population < 110)))))
=>
	(up-modify-goal gl-food-gp-points c:+ 110)
	(up-modify-goal gl-wood-gp-points c:+ 110)
	(up-modify-goal gl-gold-gp-points c:+ 80)
	(up-jump-rule 1)
)

(defrule
	(goal gl-advanced-cavalry heavy-camels)
=>
	(up-modify-goal gl-food-gp-points c:+ 120)
	(up-modify-goal gl-wood-gp-points c:+ 70)
	(up-modify-goal gl-gold-gp-points c:+ 130)
)

(defrule
	(or	(goal gl-advanced-cavalry light-elephants)
		(or	(goal gl-advanced-cavalry heavy-elephants)
			(goal gl-strategy eles)))
	(civilian-population > 100)
=>
	(up-modify-goal gl-food-gp-points c:+ 160)
	(up-modify-goal gl-wood-gp-points c:+ 65)
	(up-modify-goal gl-gold-gp-points c:+ 75)
	(up-jump-rule 2)
)

(defrule
	(or	(goal gl-advanced-cavalry light-elephants)
		(or	(goal gl-advanced-cavalry heavy-elephants)
			(goal gl-strategy eles)))
	(civilian-population > 70)
=>
	(up-modify-goal gl-food-gp-points c:+ 165)
	(up-modify-goal gl-wood-gp-points c:+ 85)
	(up-modify-goal gl-gold-gp-points c:+ 60)
	(up-jump-rule 1)
)

(defrule

	(or	(goal gl-advanced-cavalry light-elephants)
		(or	(goal gl-advanced-cavalry heavy-elephants)
			(goal gl-strategy eles)))
=>
	(up-modify-goal gl-food-gp-points c:+ 120)
	(up-modify-goal gl-wood-gp-points c:+ 105)
	(up-modify-goal gl-gold-gp-points c:+ 50)
)

(defrule
	(goal gl-strategy castle-drop)
	(goal SLING 0)
=>
	(up-modify-goal gl-food-gp-points c:+ 80)
	(up-modify-goal gl-wood-gp-points c:+ 100)
	(up-modify-goal gl-gold-gp-points c:- 40)
)

(defrule
	(goal gl-eagles heavy-eagles)
=>
	(up-modify-goal gl-food-gp-points c:+ 15)
	(up-modify-goal gl-gold-gp-points c:+ 40)
)

(defrule
	(or	(civ-selected japanese)
		(civ-selected viking))
	(up-compare-goal CASTLE != 0)
	(research-available my-unique-unit-upgrade)
=>
	(up-modify-goal gl-gold-gp-points c:+ 35)
)

(defrule
	(or	(and	(strategic-number sn-allow-resource-spending == -1)
			(research-available ri-heresy))
		(goal gl-advanced-monastery monks))
=>
	(up-modify-goal gl-food-gp-points c:+ 40)
	(up-modify-goal gl-wood-gp-points c:+ 40)
	(up-modify-goal gl-gold-gp-points c:+ 135)
)

(defrule
	(or	(and	(goal gl-strategy castle-drop)
			(and	(up-compare-const castle-drop-food-gp-points <= 70)
				(building-type-count-total town-center > 2)))
		(and	(up-compare-goal gl-current-age >= gv-castle-up)
			(and	(up-compare-const extra-food-for-uu == 1)
				(and	(goal gl-advanced-cavalry 0)
					(and	(goal gl-advanced-infantry 0)
						(up-research-status c: my-unique-unit-upgrade < research-pending))))))
=>
	(up-modify-goal gl-food-gp-points c:+ 25)
)

(defrule
	(or	(goal gl-advanced-archery slingers)
		(and	(goal gl-strategy castle-drop)
			(goal SLING 3)))
=>
	(up-modify-goal gl-food-gp-points c:+ 100)
	(up-modify-goal gl-wood-gp-points c:+ 40)
	(up-modify-goal gl-gold-gp-points c:+ 60)
)

(defrule
	(goal gl-advanced-archery 0)
	(goal CASTLE 0)
	(goal gl-advanced-infantry pikemen)
	(up-compare-const gv-michi-style == 1)
=>
	(up-modify-goal gl-wood-gp-points c:+ 20)
	(up-modify-goal gl-gold-gp-points c:+ 60); Get gold for siege
)

(defrule
	(up-compare-goal gl-migration-notice >= min-migration-progress)
	(or	(and	(building-type-count-total town-center < 2)
			(building-type-count-total town-center < preferred-TC-number))
		(or	(and	(goal gl-advanced-cavalry heavy-knights)
				(building-type-count-total stable < 2))
			(and	(civ-selected byzantine)
				(and	(goal gl-current-age gv-castle-up)
					(game-time < 2400)))))
=>
	(up-modify-goal gl-wood-gp-points c:+ 20)
)

(defrule
	(nand	(goal gl-strategy castle-drop)
		(and	(goal SLING 3)
			(civ-selected mayan)))
	(up-compare-goal gl-migration-notice >= min-migration-progress)
	(up-compare-goal gl-nothing-style-map != YES)
	(building-type-count-total town-center < 3)
	(building-type-count-total town-center < preferred-TC-number)
=>
	(up-modify-goal gl-wood-gp-points c:+ 50)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal g:= gl-max-farm-count)
	(up-modify-goal temporary-goal c:- 4)
	(up-get-fact game-time 0 temporary-goal4)
	(up-modify-goal temporary-goal4 c:z/ 1380)
)

(defrule
	(building-type-count-total town-center > 2)
	(or	(and	(goal MILITARY 1)
			(and	(game-time > 1800)
				(and	(building-type-count-total siege-workshop < 1)
					(building-type-count town-center > 2))))
		(and	(building-type-count-total farm g:< temporary-goal)
			(unit-type-count villager-food g:< temporary-goal)))
=>
	(up-modify-goal gl-wood-gp-points c:+ 20)
	(up-jump-rule 1)
)

(defrule
	(or	(and	(food-amount > maximum-castle-queue-food)
			(and	(gold-amount > 350)
				(and	(building-type-count-total castle == 0)
					(building-type-count-total siege-workshop < up-building-count))))
		(and	(civ-selected mayan)
			(and	(up-compare-goal gl-current-age >= gv-castle-up)
				(and	(goal CASTLE 0)
					(up-compare-goal gl-eagles != 0)))))
=>
	(up-modify-goal gl-wood-gp-points c:+ 15)
)

(defrule
	(goal gl-strategy ew-boom)
=>
	(up-modify-goal gl-wood-gp-points c:+ 15)
)

#load-if-defined MIGRATION-MAP
(defrule
	(goal gl-current-age gv-castle)
	(or	(building-type-count-total town-center > 1)
		(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style))
=>
	(up-modify-goal gl-food-gp-points c:+ 80)
	(up-modify-goal gl-wood-gp-points c:+ 30)
	(up-modify-goal gl-gold-gp-points c:+ 40)
)
#else
(defrule
	(goal gl-current-age gv-castle)
	(or
;	(and
	(civilian-population > 90)
;			(or	(goal gl-peace-in-town YES); Test
;				(civilian-population > 105)))
		(population >= almost-full-pop))
	(building-type-count-total town-center > 2)
=>
	(up-modify-goal gl-food-gp-points c:+ 80)
	(up-modify-goal gl-wood-gp-points c:+ 30)
	(up-modify-goal gl-gold-gp-points c:+ 40)
)
#end-if

(defrule
	(game-time < 2700)
	(or	(up-compare-goal gl-enemy-tower-count > 2)
		(or	(and	(unit-type-count-total battering-ram-line < 3)
				(population > 65))
			(up-projectile-detected projectile-castle < 60000)))
	(or	(up-compare-goal gl-enemy-castle-distance < 40)
		(up-compare-goal gl-enemy-tower-distance < 40))
=>
	(up-modify-goal gl-wood-gp-points c:+ 30)
	(up-modify-goal gl-gold-gp-points c:+ 15)
)

(defrule
	(game-time < 2700)
	(or	(up-compare-goal gl-enemy-tower-count > 2)
		(or	(and	(unit-type-count-total battering-ram-line < 3)
				(population > 65))
			(up-projectile-detected projectile-castle < 60000)))
	(or	(up-compare-goal gl-enemy-castle-distance < 33)
		(up-compare-goal gl-enemy-tower-distance < 33))
=>
	(up-modify-goal gl-wood-gp-points c:+ 35)
	(up-modify-goal gl-gold-gp-points c:+ 20)
	(up-jump-rule 2)
)

(defrule
	(or	(goal gl-current-age gv-castle)
		(up-compare-goal gl-enemy-scorpion-count > 6))
	(or	(up-compare-goal gl-enemy-scorpion-count > 4)
		(and	(or	(soldier-count < 15)
				(up-compare-goal gl-enemy-archery-count > 38))
			(up-compare-goal gl-enemy-archery-count > 18)))
=>
	(up-modify-goal gl-wood-gp-points c:+ 30)
	(up-modify-goal gl-gold-gp-points c:+ 20)
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(and	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
			(and	(building-type-count dock > 0)
				(and	(up-compare-goal gl-ship-timer <= 0)
					(goal gl-navy-train-notice YES))))
		(or	(goal gl-panic-xbow-counter YES)
			(up-compare-goal gl-castle-age-style >= mangonel-defence)))
=>
	(up-modify-goal gl-wood-gp-points c:+ 35)
	(up-modify-goal gl-gold-gp-points c:+ 20)
)

(defrule
	(goal gl-strategy default)
	(or	(and	(strategic-number sn-allow-resource-spending > 5)
			(and	(unit-available trebuchet)
				(unit-type-count-total trade-cart > 25)))
		(and	(building-type-count-total barracks < 4)
			(and	(up-compare-goal gl-enemy-cavalry-count > 15)
				(and	(up-compare-goal gl-my-villager-count > 75)
					(up-research-status c: ri-pikeman >= research-pending)))))
=>
	(up-modify-goal gl-wood-gp-points c:+ 20)
)

(defrule
	(or	(building-type-count siege-workshop > 0)
		(game-time > 1800))
	(or	(and	(or	(building-type-count-total siege-workshop < 1)
				(unit-type-count-total battering-ram-line < 3))
			(goal MILITARY 1))
		(and	(population > 170)
			(strategic-number sn-allow-resource-spending > 5)))
	(unit-type-count-total battering-ram-line < 6)
=>
	(up-modify-goal gl-food-gp-points c:+ 10)
	(up-modify-goal gl-wood-gp-points c:+ 30)
	(up-modify-goal gl-gold-gp-points c:+ 15)
)

(defrule
	(goal gl-current-age gv-castle)
	(game-time < 2340)
	(up-compare-goal gl-strategy != krush)
	(goal gl-advanced-cavalry 0)
	(up-research-status c: ri-required-armor-upgrade >= research-pending); Chain barding for non-byz
	(building-type-count stable > 0)
	(strategic-number sn-allow-resource-spending > 1)
	(or	(up-compare-goal gl-my-villager-count-total > 90)
		(or	(up-compare-goal gl-my-villager-count-total >= difficulty-villager-cap)
			(up-compare-goal gl-my-villager-count-total >= imperial-villager-cap)))
=>
	(up-modify-goal gl-food-gp-points c:+ 70)
	(up-modify-goal gl-wood-gp-points c:+ 40)
	(up-modify-goal gl-gold-gp-points c:+ 70)
)

(defrule
	(or	(and	(civ-selected gothic)
			(goal gl-current-age gv-imperial))
		(and	(goal gl-current-age gv-castle)
			(and	(food-amount > maximum-castle-queue-food)
				(and	(current-age-time > 60)
					(strategic-number sn-minimum-water-body-size-for-dock == islands-map-landing-style)))))
=>
	(up-modify-goal gl-gold-gp-points c:+ 20)
)

(defrule
	(current-age >= castle-age)
	(or	(current-age == castle-age)
		(and	(current-age-time < 240)
			(players-unit-type-count focus-player paladin > 9)))
	(building-type-count monastery > 1)
	(or	(players-unit-type-count focus-player cavalier > 3)
		(or	(players-unit-type-count focus-player paladin > 1)
			(up-compare-goal gl-enemy-huskarl-count > 4)))
=>
	(up-modify-goal gl-gold-gp-points c:+ 45)
	(up-jump-rule 1)
)

(defrule
	(goal gl-current-age gv-castle)
	(building-type-count monastery > 0)
	(or	(or	(up-compare-goal gl-enemy-cataphract-count > 1)
			(or	(up-compare-goal gl-enemy-heavy-cavalry-count > 1)
				(up-compare-goal gl-enemy-huskarl-count > 1)))
		(or	(players-unit-type-count focus-player war-wagon-line > 1)
			(up-compare-goal gl-enemy-gunpowder-count > 1)))
=>
	(up-modify-goal gl-gold-gp-points c:+ 30)
)

(defrule
	(goal gl-strategy default)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count castle == 0)
	(civ-selected byzantine)
	(or	(up-compare-goal gl-enemy-infantry-count > 2)
		(and	(up-compare-goal gl-enemy-eagle-count > 2)
			(players-current-age focus-player == castle-age)))
	(or	(unit-type-count-total archer-line < 10)
		(building-type-count-total town-center > 2))
	(unit-type-count-total archer-line < 19)
	(cc-players-unit-type-count 0 gold-mine > 2)
=>
	(up-modify-goal gl-wood-gp-points c:+ 30)
	(up-modify-goal gl-gold-gp-points c:+ 50)
)

(defrule
	(game-time < 2100)
	(goal gl-strategy ranged-boom-strategy)
	(food-amount >= 75)
	(building-type-count-total town-center > 2)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(goal gl-enemy-strategy RANGED-STRATEGY)
		(goal gl-enemy-strategy XBOW-RUSH))
=>
	(up-modify-goal gl-food-gp-points c:+ 40)
	(up-modify-goal gl-wood-gp-points c:+ 60)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(up-compare-const special-raid-unit != janissary-line)
	(or	(and	(civ-selected korean)
			(and	(or	(food-amount > 300)
					(unit-type-count-total trade-cart > 15))
				(strategic-number sn-allow-resource-spending < 6)))
		(up-compare-goal gl-enemy-elephant-count > 4))
=>
	(up-modify-goal gl-food-gp-points c:+ 50)
	(up-modify-goal gl-wood-gp-points c:+ 30)
)

(defrule
	(or	(and	(or	(up-compare-goal gl-enemy-huskarl-count > 1)
				(up-compare-goal gl-enemy-eagle-count > 1))
			(up-research-status c: ri-paladin <= research-available))
		(players-unit-type-count focus-player teutonic-knight-line > 4))
	(unit-available hand-cannoneer)
=>
	(up-modify-goal gl-food-gp-points c:+ 50)
	(up-modify-goal gl-gold-gp-points c:+ 60)
)

(defrule
	(civ-selected saracen)
	(goal gl-advanced-archery 0)
	(or	(up-compare-goal gl-enemy-spearman-count > 6)
		(or	(players-unit-type-count focus-player samurai-line > 4)
			(or	(up-compare-goal gl-enemy-cataphract-count > 4)
				(players-unit-type-count focus-player kamayuk > 5))))
	(unit-available hand-cannoneer)
=>
	(up-modify-goal gl-food-gp-points c:+ 50)
	(up-modify-goal gl-gold-gp-points c:+ 60)
)

(defrule
	(civ-selected mongol)
	(research-completed my-unique-unit-upgrade)
	(unit-type-count trade-cart > 7)
	(building-type-count castle > 0)
	(players-building-type-count any-ally market > 0)
	(or	(wood-amount < 500)
		(food-amount > 500))
	(wood-amount < 1000)
=>
	(up-modify-goal gl-wood-gp-points c:+ 60)
)

(defrule
	(civ-selected korean)
	(up-compare-goal gl-current-age >= gv-castle)
	(game-time > 3000)
	(goal gl-strategy default)
	(or	(dropsite-min-distance gold == -1)
		(dropsite-min-distance gold > 35))
	(goal gl-trade-unit-count-total 0)
=>
	(up-modify-goal gl-food-gp-points c:+ 70)
)

(defrule
	(game-time > 3000)
	(goal gl-strategy default)
	(up-compare-goal gl-gathered-relics < 8)
	(or	(dropsite-min-distance gold == -1)
		(or	(dropsite-min-distance gold > 35)
			(up-gaia-type-count c: gold < 6)))
	(unit-type-count-total trade-cart == 0)
=>
	(up-modify-goal gl-food-gp-points c:/ 2); Trash war rules will get more weight over main unit selection
	(up-modify-goal gl-wood-gp-points c:/ 2)
	(up-modify-goal gl-gold-gp-points c:/ 2)
)

(defrule
	(true)
=>
	(up-get-fact civilian-population 0 temporary-goal)
	(up-modify-goal temporary-goal c:- 50)
	(set-goal temporary-goal2 60)
	(up-modify-goal temporary-goal2 g:- temporary-goal)
	(up-modify-goal temporary-goal2 c:max 0)
	(up-modify-goal temporary-goal2 c:min 60)
	(up-modify-goal gl-food-gp-points g:+ temporary-goal2)
)

(defrule
	(or	(and	(up-compare-goal gl-cutter >= IN-PROGRESS)
			(up-research-status c: ri-siege-onager < research-pending))
		(and	(goal gl-advanced-monastery monks)
			(and	(research-completed ri-elite-eagle-warrior)
				(and	(up-compare-goal gl-enemy-archery-count > 35)
					(goal gl-eagles 0)))))
=>
	(up-modify-goal gl-food-gp-points c:+ 30)
)

(defrule
	(or	(and	(up-compare-goal gl-cutter >= IN-PROGRESS)
			(up-research-status c: ri-siege-onager < research-pending))
		(or	(and	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
				(goal gl-strategy ew-boom))
			(and	(up-compare-goal gl-current-age >= gv-castle-up)
				(and	(goal gl-advanced-cavalry heavy-knights)
					(up-research-status c: ri-paladin < research-pending)))))
=>
	(up-modify-goal gl-food-gp-points c:+ 30)
)

(defrule
	(population-cap >= 75)
	(or	(and	(or	(goal gl-strategy ranged-boom-strategy)
				(or	(goal gl-advanced-archery main-ranged)
					(goal gl-advanced-archery light-CAs)))
			(building-type-count-total town-center > 1))
		(up-compare-goal gl-my-villager-count-total < 28))
	(or	(civilian-population < 90)
		(building-type-count-total town-center > 2))
	(civilian-population < 125)
=>
	(up-modify-goal gl-food-gp-points c:+ 30); Something wood+gold heavy selected -> increase food gathering to get enough food for villagers
)

(defrule
	(or	(goal gl-strategy ranged-boom-strategy)
		(or	(goal gl-advanced-archery main-ranged)
			(goal gl-advanced-archery light-CAs)))
	(building-type-count-total town-center > 2)
	(food-amount < 1300)
	(up-compare-goal gl-my-villager-count-total < imperial-villager-cap)
	(up-compare-goal gl-my-villager-count-total < 100)
	(civilian-population < 110)
=>
	(up-modify-goal gl-food-gp-points c:+ 30)
)

(defrule
	(civ-selected mayan)
	(civilian-population > 80)
	(up-research-status c: ri-elite-eagle-warrior >= research-pending)
	(or	(commodity-selling-price food >= 40)
		(unit-type-count villager-gold < 20))
	(goal gl-trade-unit-count-total 0)
=>
	(up-modify-goal gl-food-gp-points c:+ 30)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(goal gl-advanced-archery main-ranged)
		(goal gl-advanced-archery light-CAs))
	(or	(and	(not	(civ-selected hun))
			(up-research-status c: ri-crossbow < research-pending))
		(up-research-status c: ri-bodkin-arrow < research-pending))
=>
	(up-modify-goal gl-food-gp-points c:+ 15)
)

(defrule
	(goal gl-enable-skirmishers 3)
	(up-compare-goal gl-enable-skirmishers != 2)
	(up-compare-goal gl-trade-unit-count-total < 25)
	(building-type-count-total archery-range > 0)
	(up-compare-goal gl-enemy-archery-count > 10)
=>
	(up-modify-goal gl-food-gp-points c:+ 40)
	(up-modify-goal gl-wood-gp-points c:+ 60)
)

(defrule
	(goal gl-enable-skirmishers 3)
	(up-compare-goal gl-current-age >= gv-castle)
	(game-time > 1800)
	(goal gl-strategy default)
	(up-compare-goal gl-skirmisher-count-total > 4)
	(or	(up-compare-goal gl-enemy-archery-count > 5)
		(and	(game-time > 3000)
			(up-compare-goal gl-trade-unit-count-total < 10)))
	(up-compare-goal gl-trade-unit-count-total < 25)
=>
	(up-modify-goal gl-food-gp-points c:+ 25)
	(up-modify-goal gl-wood-gp-points c:+ 40)
)

(defrule
	(goal gl-advanced-archery main-ranged)
	(goal gl-current-age gv-castle)
	(food-amount < 800)
	(unit-type-count-total main-ranged-unit >= 20)
	(or	(and	(or	(unit-type-count-total main-ranged-unit >= 30)
				(soldier-count >= 55))
			(strategic-number sn-allow-resource-spending < 3))
		(unit-type-count-total main-ranged-unit >= 55))
=>
	(up-modify-goal gl-gold-gp-points c:- 50)
	(up-jump-rule 2)
)

(defrule
	(goal gl-advanced-archery main-ranged)
	(goal gl-current-age gv-castle)
	(food-amount < 650)
	(civilian-population < 100)
	(or	(building-type-count-total siege-workshop == 0)
		(civilian-population < 80))
	(up-compare-goal TSA >= 1)
	(unit-type-count-total archery-class >= 20)
	(or	(players-military-population focus-player < 6)
		(unit-type-count-total archery-class >= 30))
	(players-military-population focus-player < 12)
=>
	(up-modify-goal gl-gold-gp-points c:- 40)
	(up-jump-rule 1)
)

(defrule
	(or	(and	(or	(and	(goal gl-advanced-archery main-ranged)
					(building-type-count-total town-center >= 3))
				(goal gl-advanced-archery light-CAs))
			(up-compare-goal gl-my-villager-count < 85))
		(and	(civ-selected persian)
			(and	(up-compare-goal CASTLE != 0)
				(up-compare-goal gl-trade-unit-count-total > 35))))
=>
	(up-modify-goal gl-gold-gp-points c:- 20)
)

(defrule
	(goal gl-current-age gv-castle)
	(or	(and	(or	(goal gl-strategy krush)
				(goal gl-advanced-cavalry heavy-knights))
			(and	(civilian-population < 105)
				(building-type-count town-center > 2)))
		(and	(goal gl-advanced-archery light-archers)
			(or	(civilian-population > 65)
				(goal gl-advanced-cavalry LC))))
=>
	(up-modify-goal gl-gold-gp-points c:- 50)
)

(defrule
	(goal gl-current-age gv-castle)
	(or	(goal gl-strategy krush)
		(goal gl-advanced-cavalry heavy-knights))
	(civilian-population > 65)
	(civilian-population < 105)
	(food-amount > 550)
	(building-type-count town-center > 2)
=>
	(up-modify-goal gl-gold-gp-points c:+ 25)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(and	(goal gl-advanced-archery main-ranged)
			(and	(unit-type-count archery-class > 20)
				(and	(research-available ri-bodkin-arrow)
					(goal CASTLE 0))))
		(and	(up-research-status c: ri-elite-war-elephant >= research-available)
			(goal gl-advanced-archery scorpions)))
	(goal gl-advanced-cavalry 0)
	(goal gl-advanced-infantry 0)
=>
	(up-modify-goal gl-food-gp-points c:+ 30)
)

(defrule
	(civ-selected portuguese)
=>
	(up-modify-goal gl-gold-gp-points c:* 8)
	(up-modify-goal gl-gold-gp-points c:/ 9)
)

; Trash wars
(defrule
	(game-time > 3000)
	(goal gl-strategy default)
	(or	(dropsite-min-distance gold == -1)
		(dropsite-min-distance gold > 35))
	(goal gl-trade-unit-count-total 0)
	(goal gl-advanced-cavalry LC)
=>
	(up-modify-goal gl-food-gp-points c:+ 580)
	(up-modify-goal gl-wood-gp-points c:+ 180)
)

(defrule
	(or	(up-compare-goal gl-strategy != default)
		(or	(up-compare-goal gl-current-age != gv-imperial)
			(or	(up-compare-goal gl-trade-unit-count-total > 0)
				(goal gl-advanced-cavalry LC))))
=>
	(up-jump-rule 4)
)

(defrule
	(or	(civ-selected celtic)
		(civ-selected mayan))
	(research-completed ri-guilds)
	(up-compare-goal gl-gathered-relics < 5)
	(or	(dropsite-min-distance gold == -1)
		(dropsite-min-distance gold > 35))
=>
	(up-modify-goal gl-food-gp-points c:+ 60); Sell food
)

(defrule
	(current-age-time > 300)
	(up-compare-goal gl-gold-income-per-minute < 300)
	(research-completed ri-light-cavalry)
	(research-completed ri-chain-barding)
	(up-compare-const late-game-scout-amount > 0)
	(strategic-number sn-allow-resource-spending > 2)
=>
	(up-modify-goal gl-food-gp-points c:+ 140)
	(up-modify-goal gl-wood-gp-points c:+ 65)
)

(defrule
	(current-age-time > 300)
	(or	(dropsite-min-distance gold == -1)
		(dropsite-min-distance gold > 35))
	(strategic-number sn-allow-resource-spending > 2)
	(up-compare-const upgraded-scout-amount > 10)
	(research-completed ri-chain-barding)
	(research-completed ri-iron-casting)
	(up-research-status c: ri-blast-furnace != research-available)
	(up-research-status c: ri-plate-barding != research-available)
=>
	(up-modify-goal gl-food-gp-points c:+ 260)
	(up-modify-goal gl-wood-gp-points c:+ 115)
)

(defrule
	(current-age-time > 300)
	(or	(dropsite-min-distance gold == -1)
		(dropsite-min-distance gold > 35))
	(strategic-number sn-allow-resource-spending > 2)
	(up-compare-const upgraded-scout-amount > 25)
	(building-type-count-total stable > 4)
	(research-completed ri-chain-barding)
	(research-completed ri-iron-casting)
	(up-research-status c: ri-blast-furnace != research-available)
	(up-research-status c: ri-plate-barding != research-available)
=>
	(up-modify-goal gl-food-gp-points c:+ 70)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(game-time > 3000)
	(goal gl-strategy default)
	(or	(dropsite-min-distance gold == -1)
		(dropsite-min-distance gold s:> sn-maximum-gold-drop-distance))
	(goal gl-trade-unit-count-total 0)
	(unit-type-count-total spearman-line > 17)
=>
	(up-modify-goal gl-food-gp-points c:+ 280)
	(up-modify-goal gl-wood-gp-points c:+ 180)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(game-time > 3000)
	(goal gl-strategy default)
	(or	(dropsite-min-distance gold == -1)
		(dropsite-min-distance gold > 35))
	(goal gl-trade-unit-count-total 0)
	(unit-type-count-total spearman-line > 35)
=>
	(up-modify-goal gl-food-gp-points c:+ 140)
	(up-modify-goal gl-wood-gp-points c:+ 80)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(game-time > 3000)
	(goal gl-strategy default)
	(or	(dropsite-min-distance gold == -1)
		(dropsite-min-distance gold s:> sn-maximum-gold-drop-distance))
	(goal gl-trade-unit-count-total 0)
	(up-compare-goal gl-skirmisher-count-total > 24)
=>
	(up-modify-goal gl-food-gp-points c:+ 170)
	(up-modify-goal gl-wood-gp-points c:+ 220)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(game-time > 3000)
	(goal gl-strategy default)
	(or	(dropsite-min-distance gold == -1)
		(dropsite-min-distance gold s:> sn-maximum-gold-drop-distance))
	(goal gl-trade-unit-count-total 0)
	(up-compare-goal gl-skirmisher-count-total > 44)
=>
	(up-modify-goal gl-food-gp-points c:+ 100)
	(up-modify-goal gl-wood-gp-points c:+ 140)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(goal gl-enable-camels 3)
	(up-compare-goal gl-strategy != krush)
	(up-research-status c: ri-heavy-camel != research-available)
	(building-type-count stable > 0)
	(up-compare-goal gl-enemy-heavy-cavalry-count > 10)
	(unit-available camel-line)
=>
	(up-modify-goal gl-food-gp-points c:+ 70)
	(up-modify-goal gl-wood-gp-points c:+ 15)
	(up-modify-goal gl-gold-gp-points c:+ 65)
	(up-jump-rule 3)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(goal gl-enable-camels 3)
	(up-compare-goal gl-strategy != krush)
	(up-research-status c: ri-heavy-camel != research-available)
	(building-type-count stable > 0)
	(up-compare-goal gl-enemy-cavalry-count > 2)
	(unit-type-count-total camel-line g:< gl-enemy-cavalry-count)
	(unit-available camel-line)
=>
	(up-modify-goal gl-food-gp-points c:+ 40)
	(up-modify-goal gl-gold-gp-points c:+ 40)
	(up-jump-rule 2)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(goal gl-enable-camels 3)
	(goal gl-strategy default)
	(current-age == imperial-age)
	(food-amount > 104)
	(up-compare-goal gl-trade-unit-count-total > 19)
	(up-compare-const anti-mangudai-camels == 1)
	(or	(players-unit-type-count focus-player mangudai-line > 10)
		(players-unit-type-count target-player mangudai-line > 10))
=>
	(up-modify-goal gl-food-gp-points c:+ 40)
	(up-modify-goal gl-gold-gp-points c:+ 40)
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(goal gl-enable-camels 3)
	(goal gl-strategy default)
	(current-age == imperial-age)
	(food-amount > 104)
	(up-compare-goal gl-trade-unit-count-total > 19)
	(not	(civ-selected persian))
	(or	(players-unit-type-count focus-player war-wagon-line > 10)
		(players-unit-type-count target-player war-wagon-line > 10))
=>
	(up-modify-goal gl-food-gp-points c:+ 40)
	(up-modify-goal gl-gold-gp-points c:+ 40)
)

(defrule
	(or	(players-unit-type-count focus-player monk > 5)
		(players-unit-type-count focus-player missionary > 5))
	(or	(players-unit-type-count focus-player monk >= high-monks)
		(or	(players-unit-type-count focus-player missionary >= high-monks)
			(game-time < 2200)))
	(building-type-count stable > 0)
	(unit-available scout-cavalry-line)
=>
	(up-modify-goal gl-food-gp-points c:+ 190)
	(up-modify-goal gl-wood-gp-points c:+ 30)
)

(defrule
	(or	(goal gl-advanced-archery main-ranged)
		(goal gl-strategy ranged-boom-strategy))
	(up-compare-goal gl-enemy-skirmisher-count > 8)
	(or	(up-compare-goal gl-enemy-skirmisher-count > 15)
		(up-compare-goal gl-enemy-archer-count < 3))
	(unit-type-count trade-cart < 25)
	(up-compare-goal gl-enemy-archer-count < 10)
=>
	(up-modify-goal gl-food-gp-points c:+ 10)
	(up-modify-goal gl-wood-gp-points c:- 10)
)

(defrule
	(or	(up-allied-sn any-computer-ally gl-islands-style != YES); Don't set eco for trade if trading isn't possible
		(player-valid any-human-ally))
	(strategic-number sn-allow-resource-spending >= 0)
	(players-building-type-count any-ally market > 0)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(game-time > 1800)
	(up-compare-goal gl-trade-unit-count-total < 25)
	(or	(wood-amount < 350)
		(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style))
=>
	(up-modify-goal gl-wood-gp-points c:+ 10)
)

(defrule
	(or	(up-allied-sn any-computer-ally gl-islands-style != YES)
		(player-valid any-human-ally))
	(strategic-number sn-allow-resource-spending >= 0)
	(players-building-type-count any-ally market > 0)
	(game-time > 1800)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(up-compare-goal gl-trade-unit-count-total < 25)
=>
	(up-modify-goal gl-wood-gp-points c:+ 40)
	(up-modify-goal gl-gold-gp-points c:+ 25)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(wood-amount < 400)
=>
	(up-modify-goal gl-food-gp-points c:+ 20)
	(up-modify-goal gl-wood-gp-points c:+ 185)
	(up-modify-goal gl-gold-gp-points c:+ 60)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(wood-amount >= 400)
=>
	(up-modify-goal gl-food-gp-points c:+ 30)
	(up-modify-goal gl-wood-gp-points c:+ 150)
	(up-modify-goal gl-gold-gp-points c:+ 50)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(up-compare-goal gl-ship-timer <= 0)
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(building-type-count dock > 0)
=>
	(up-modify-goal gl-wood-gp-points c:+ 40)
	(up-modify-goal gl-gold-gp-points c:+ 20)
)

(defrule
	(goal gl-heavy-water-map YES)
	(goal gl-navy-train-notice YES)
	(strategic-number sn-allow-resource-spending >= 0)
	(up-compare-goal gl-ship-timer <= 0)
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(building-type-count dock > 1)
=>
	(up-modify-goal gl-wood-gp-points c:+ 40)
)

(defrule
	(goal gl-advanced-archery scorpions)
	(nand	(building-type-count barracks < 4)
		(up-compare-goal gl-advanced-infantry != 0))
	(nand	(building-type-count stable < 4)
		(up-compare-goal gl-advanced-cavalry != 0))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(or	(and	(building-type-count barracks < 4)
			(up-compare-goal gl-advanced-infantry != 0))
		(or	(and	(building-type-count stable < 4)
				(up-compare-goal gl-advanced-cavalry != 0))
			(and	(building-type-count archery-range < 4)
				(up-compare-goal gl-advanced-archery != 0))))
	(civilian-population > 90)
	(game-time < 3000)
=>
	(up-modify-goal gl-wood-gp-points c:+ 35)
)

(defrule
	(or	(and	(goal gl-current-age gv-castle)
			(and	(up-compare-goal gl-my-villager-count-total > 90)
				(research-available imperial-age)))
		(and	(up-compare-goal gl-cutter >= IN-PROGRESS)
			(up-research-status c: ri-siege-onager < research-pending)))
=>
	(up-modify-goal gl-food-gp-points c:+ 60)
	(up-modify-goal gl-gold-gp-points c:+ 40)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(strategic-number sn-allow-resource-spending < 6)
	(game-time < 2400)
	(up-compare-const gv-michi-style == 1)
	(wood-amount > 600)
	(food-amount > 600)
	(or	(gold-amount < 500)
		(and	(wood-amount > 1500)
			(food-amount > 1500)))
	(gold-amount < 1200)
=>
	(up-modify-goal gl-gold-gp-points c:+ 60)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(up-compare-goal gl-gathered-relics > 0)
	(or	(up-compare-goal gl-gold-gp-points > 3)
		(up-compare-goal gl-gathered-relics > 4))
=>
	(up-modify-goal temporary-goal g:= gl-gathered-relics)
	(set-goal temporary-goal3 12)
	(up-modify-goal temporary-goal2 g:= gl-my-villager-count)
	(up-modify-goal temporary-goal2 c:/ 20)
	(up-modify-goal temporary-goal2 c:min 10)
	(up-modify-goal temporary-goal3 g:- temporary-goal2)
	(up-modify-goal temporary-goal g:* temporary-goal3)
	(up-modify-goal gl-gold-gp-points g:- temporary-goal)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(and	(up-compare-goal gl-trade-unit-count-total >= 30)
			(and	(up-compare-goal gl-gold-gp-points > 60)
				(up-compare-goal gl-gold-income-per-minute > 500)))
		(and	(goal gl-strategy xbow-boom)
			(and	(or	(research-available ri-crossbow)
					(building-type-count archery-range < 2))
				(gold-amount >= 75))))
=>
	(up-modify-goal gl-gold-gp-points c:- 30)
)

(defrule
	(or	(and	(strategic-number sn-allow-resource-spending >= 0)
			(and	(up-compare-goal gl-trade-unit-count-total >= 40)
				(up-compare-goal gl-gold-income-per-minute > 500)))
		(or	(and	(goal gl-strategy ew-boom)
				(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style))
			(and	(goal gl-strategy krush)
				(building-type-count-total stable < 2))))
	(up-compare-goal gl-gold-gp-points > 60)
=>
	(up-modify-goal gl-gold-gp-points c:- 30)
)

(defrule
	(civ-selected turkish)
	(game-time < 1920)
	(up-compare-goal gl-advanced-archery != light-archers)
	(or	(goal CASTLE 0)
		(building-type-count-total castle == 0))
	(up-compare-goal gl-current-age < gv-castle-up)
	(up-compare-goal gl-gold-gp-points > 65)
=>
	(up-modify-goal gl-gold-gp-points c:- 15)
	(up-modify-goal gl-gold-gp-points c:max 65)
)

(defrule
	(goal gl-advanced-cavalry LC)
=>
	(up-modify-goal gl-food-gp-points c:+ 160)
	(up-modify-goal gl-wood-gp-points c:+ 80)
	(up-modify-goal gl-gold-gp-points c:+ 40)
)

(defrule
	(goal gl-advanced-cavalry LC)
	(building-type-count stable == 0)
=>
	(up-modify-goal gl-food-gp-points c:- 40)
)

(defrule
	(food-amount > 1100)
	(goal gl-current-age gv-castle)
	(up-compare-goal gl-my-villager-count-total > 90)
	(research-available imperial-age)
=>
	(up-modify-goal gl-food-gp-points c:- 20)
)

(defrule
	(game-time < 2300)
;	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
=>
	(up-get-fact unit-type-count-total fishing-ship temporary-goal)
	(up-modify-goal temporary-goal c:min 12)
	(up-modify-goal temporary-goal c:- 3)
	(up-modify-goal temporary-goal c:max 0)
	(set-goal temporary-goal3 12)
	(up-modify-goal temporary-goal2 g:= gl-my-villager-count)
	(up-modify-goal temporary-goal2 c:/ 15)
	(up-modify-goal temporary-goal2 c:min 12)
	(up-modify-goal temporary-goal2 c:max 3)
	(up-modify-goal temporary-goal3 g:- temporary-goal2)
	(up-modify-goal temporary-goal3 g:- temporary-goal4)
	(up-modify-goal temporary-goal3 c:max 0)
	(up-modify-goal temporary-goal g:* temporary-goal3)
	(up-modify-goal gl-food-gp-points g:- temporary-goal)
)

(defrule
	(goal gl-current-age gv-castle)
	(building-type-count-total town-center >= preferred-TC-number)
	(or	(research-available imperial-age)
		(current-age-time > 120))
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
=>
	(up-modify-goal gl-food-gp-points c:max 40)
)

(defrule
	(up-compare-goal gl-enable-pikemen < 2)
	(not	(civ-selected turkish))
=>
	(up-jump-rule 2)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(game-time > 2700)
	(up-compare-goal gl-enemy-cavalry-count > 5)
	(up-compare-goal CASTLE != 1)
	(up-compare-goal gl-advanced-infantry != pikemen)
	(up-research-status c: ri-pikeman >= research-pending)
	(or	(current-age == castle-age)
		(up-research-status c: last-spearman-up >= research-pending))
=>
	(up-modify-goal gl-food-gp-points c:+ 50)
	(up-modify-goal gl-wood-gp-points c:+ 30)
)

#load-if-not-defined TURKISH-CIV
(defrule
	(building-type-count barracks > 0)
	(nand	(unit-available camel)
		(and	(goal gl-strategy krush)
			(and	(goal POSITION POCKET)
				(up-research-status c: ri-pikeman < research-pending))))
	(up-compare-goal gl-enemy-cavalry-count > 5)
	(up-compare-goal CASTLE != 1)
	(up-compare-goal gl-advanced-infantry != pikemen)
	(unit-type-count-total spearman-line < 20)
	(game-time < 2700)
=>
	(up-modify-goal gl-food-gp-points c:+ 60)
	(up-modify-goal gl-wood-gp-points c:+ 40)
)
#else
(defrule
	(goal gl-enable-camels 3)
	(up-compare-goal gl-strategy != krush)
	(building-type-count stable > 0)
	(up-compare-goal gl-enemy-cavalry-count > 5)
	(unit-type-count-total camel-line g:< gl-enemy-cavalry-count)
	(game-time < 2700)
=>
	(up-modify-goal gl-food-gp-points c:+ 45)
	(up-modify-goal gl-wood-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:+ 45)
)
#end-if

; ================ FIXED ECO BALANCING

#load-if-not-defined DEATH-MATCH
(defrule
	(or	(up-compare-goal gl-current-age >= gv-dark-up)
		(or	(building-type-count town-center == 0)
			(strategic-number sn-allow-new-build-order == 5)))
=>
	(up-jump-rule 51)
)

(defrule
	(true)
=>
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal7 0)
)

;

(defrule
	(true)
=>
	(up-modify-goal gl-point-x g:= gl-food-villagers)
	(up-modify-goal gl-point-y g:= gl-wood-villagers)
	(up-modify-goal gl-point2-x g:= gl-gold-villagers)
	(up-modify-goal gl-point2-y g:= gl-stone-villagers)
	(up-modify-goal gl-point3-x g:= gl-sum-villagers)
)

(defrule
	(up-compare-goal gl-sum-villagers g:< gl-my-villager-count)
=>
	(set-goal temporary-goal6 1)
)

(defrule
	(goal gl-DRUSH YES)
	(gold-amount <= 100)
	(not	(civ-selected aztec))
	(up-compare-goal gl-my-villager-count > 16)
	(strategic-number sn-gold-gatherer-percentage == 0)
=>
	(set-strategic-number sn-maximum-gold-drop-distance 24)
	(up-modify-goal gl-gold-villagers c:+ 1)
	(up-modify-goal gl-food-villagers c:- 1)
	(set-goal gl-DRUSH-CONTROL GOLD-NEEDED-FOR-MILITIAS)
	(disable-self)
)

(defrule
	(goal gl-DRUSH-CONTROL GOLD-NEEDED-FOR-MILITIAS)
	(or	(gold-amount == 0)
		(or	(gold-amount == 20)
			(or	(gold-amount == 40)
				(or	(gold-amount == 60)
					(unit-type-count-total militiaman-line > 2)))))
	(building-type-count-total mining-camp == 0)
=>
	(set-strategic-number sn-maximum-gold-drop-distance 6)
	(up-modify-goal gl-gold-villagers c:- 1)
	(up-modify-goal gl-sum-villagers c:- 1)
	(set-goal temporary-goal6 1)
	(disable-self)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(wood-amount < 150)
	(up-compare-goal gl-food-villagers > 17)
	(or	(building-type-count town-center < 2)
		(up-compare-goal gl-food-villagers > 25))
	(up-compare-goal gl-wood-villagers < 18)
	(building-type-count-total dock == 0)
=>
	(up-jump-rule 1)
)

(defrule
	(goal temporary-goal6 1)
	(building-type-count town-center > 1)
	(up-compare-goal gl-wood-villagers > 2)
	(or	(up-compare-goal gl-wood-villagers > 8)
		(up-compare-goal gl-food-villagers < 17))
	(or	(up-compare-goal gl-wood-villagers > 17)
		(up-compare-goal gl-food-villagers < 30))
	(up-compare-goal gl-food-villagers < 55)
=>
	(up-modify-goal gl-food-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-wood-villagers > 3)
	(or	(goal gl-strategy trush)
		(or	(goal gl-nothing-style-map YES)
			(goal gl-strategy forward)))
	(or	(up-compare-goal gl-food-villagers < 14)
		(up-compare-goal gl-wood-villagers > 5))
	(up-compare-goal gl-food-villagers < 26)
=>
	(up-modify-goal gl-food-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(or	(stone-amount >= castle-stone)
		(or	(goal gl-DRUSH YES)
			(or	(building-type-count town-center != 1)
				(not	(resource-found stone)))))
=>
	(up-modify-goal gl-sum-villagers g:- gl-stone-villagers)
	(set-goal gl-stone-villagers 0)
	(up-jump-rule 1)
)

(defrule
	(goal temporary-goal6 1)
	(or	(goal gl-eew-strategy-type fast-imp)
		(or	(goal gl-strategy castle-drop)
			(or	(goal gl-strategy-type FI2)
				(goal gl-strategy castle-push))))
	(building-type-count-total castle == 0)
	(stone-amount < castle-stone)
	(up-compare-goal gl-sum-villagers >= 25)
	(up-compare-goal gl-gold-villagers > 0)
	(up-compare-goal gl-stone-villagers < 3)
=>
	(up-modify-goal gl-stone-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(or	(gold-amount >= 200)
		(building-type-count town-center != 1))
=>
	(up-modify-goal gl-sum-villagers g:- gl-gold-villagers)
	(set-goal gl-gold-villagers 0)
	(up-jump-rule 3)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-DRUSH != YES)
	(resource-found gold)
	(or	(goal gl-strategy castle-push)
		(or	(goal gl-strategy trush-push)
			(goal gl-resources-on-map plenty)))
	(up-compare-goal gl-sum-villagers >= early-gold-villager-number); 23 with mongols on michi, otherwise 24
	(up-compare-goal gl-gold-villagers < 2)
=>
	(up-modify-goal gl-gold-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-sum-villagers >= regicide-gold-villagers)
	(up-compare-goal gl-DRUSH != YES)
	(resource-found gold)
	(or	(and	(up-compare-goal gl-strategy-type >= FC2)
			(up-compare-goal gl-sum-villagers >= 25))
		(and	(up-compare-const gv-regicide == 1)
			(gold-amount < 50)))
	(up-compare-goal gl-gold-villagers < 2)
=>
	(up-modify-goal gl-gold-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(up-compare-goal gl-sum-villagers < 26)
	(current-age == dark-age)
	(gold-amount >= 50)
	(or	(gold-amount >= 70)
		(up-research-status c: ri-loom >= research-pending))
	(up-compare-const gv-regicide == 1)
	(goal gl-gold-villagers 2)
=>
	(set-goal gl-gold-villagers 1)
	(up-modify-goal gl-sum-villagers c:- 1)
	(set-goal temporary-goal6 1)
)

(defrule
	(goal temporary-goal6 1)
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(up-compare-goal gl-food-villagers > 1)
	(starting-resources != low-resources)
	(or	(food-amount > 250)
		(up-compare-goal gl-food-villagers > 7))
	(or	(up-compare-goal gl-wood-villagers < 12)
		(starting-age >= feudal-age))
	(up-compare-goal gl-wood-villagers < 20)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(or	(and	(strategic-number sn-sheep-count > 3)
			(and	(civ-selected persian)
				(and	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
					(up-compare-goal gl-wood-villagers < 2))))
		(and	(up-compare-goal gl-food-villagers > 7)
			(starting-age >= castle-age)))
	(up-compare-goal gl-wood-villagers < 10)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(food-amount >= 360)
	(or	(up-pending-objects c: villager-class > 1)
		(food-amount >= 410))
	(up-compare-goal gl-food-villagers >= 13)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(up-compare-goal gl-sum-villagers < 25)
	(up-compare-goal gl-my-villager-count >= 16)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal gl-DRUSH YES)
	(up-compare-goal gl-DRUSH-CONTROL != MILITIAS-DONE)
=>
	(up-jump-rule 1)
)

(defrule
	(building-type-count town-center == 1)
	(dropsite-min-distance live-boar > 8)
	(food-amount >= 470)
	(or	(up-pending-objects c: villager-class > 1)
		(up-compare-goal gl-total-food-amount >= 500))
	(up-compare-goal gl-food-villagers > 10)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(up-compare-goal gl-my-villager-count >= 18)
=>
	(set-goal gl-food-villagers 8)
	(set-goal gl-wood-villagers 9)
	(set-goal gl-sum-villagers 17)
	(up-modify-goal gl-sum-villagers g:+ gl-gold-villagers)
	(up-modify-goal gl-sum-villagers g:+ gl-stone-villagers)
	(set-goal temporary-goal6 0)
	(disable-self)
)

(defrule
	(or	(goal gl-feudal-archery skirmishers)
		(goal gl-strategy sling))
	(up-compare-goal gl-food-villagers < 13)
=>
	(up-jump-rule 1)
)

(defrule
	(goal temporary-goal6 1)
	(food-amount >= 470)
	(or	(up-pending-objects c: villager-class > 1)
		(up-compare-goal gl-total-food-amount >= 500))
	(nand	(up-compare-goal gl-food-villagers < 13)
		(or	(goal gl-feudal-infantry men-at-arms)
			(goal gl-strategy scrush)))
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(up-compare-goal gl-my-villager-count >= 18)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(strategic-number sn-nomad-style-start == 1)
	(or	(up-compare-const gv-nomad-style == 0)
		(dropsite-min-distance wood > 3))
	(nand	(up-compare-goal gl-food-villagers < 6)
		(civ-selected chinese))
	(or	(up-compare-goal gl-food-villagers > 5)
		(up-compare-goal gl-wood-villagers < 1))
	(up-compare-goal gl-food-villagers > 3)
	(up-compare-goal gl-wood-villagers < 2)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-wood-villagers < 5)
	(civ-selected briton)
	(or	(up-pending-objects c: villager-class > 0)
		(food-amount >= 50))
	(strategic-number sn-sheep-count > 3)
	(or	(up-compare-goal DOCK != 0)
		(and	(goal gl-DRUSH YES)
			(up-compare-goal gl-wood-villagers < 4)))
	(up-compare-goal gl-food-villagers > 6)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-food-villagers >= early-food-villagers); 15 in Regicide, otherwise 10
	(or	(and	(resource-found food)
			(and	(strategic-number sn-sheep-count == 0)
				(up-gaia-type-count g: gl-boar-unit < 3)))
		(and	(strategic-number sn-sheep-count > 0)
			(strategic-number sn-sheep-count < 5)))
	(up-compare-goal gl-wood-villagers < 8)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal gl-DRUSH YES)
	(or	(and	(goal POSITION FLANK)
			(and	(up-compare-goal gl-wood-villagers > 3)
				(nor	(civ-selected chinese)
					(civ-selected mongol))))
		(and	(civ-selected chinese)
			(up-compare-goal gl-food-villagers < 7)))
	(up-compare-goal gl-food-villagers < 12)
=>
	(up-jump-rule 1)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-food-villagers > 5)
	(or	(up-compare-goal gl-food-villagers > 6)
		(up-pending-objects c: villager-class > 0))
	(goal gl-DRUSH YES)
	(or	(up-compare-goal gl-wood-villagers < 4)
		(up-compare-goal gl-food-villagers > 8)); >11
	(or	(up-compare-goal gl-wood-villagers < 5)
		(up-compare-goal gl-food-villagers > 17)); 11
	(up-compare-goal gl-wood-villagers < 7)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-food-villagers >= early-food-villagers); 15 in Regicide, otherwise 10
	(up-gaia-type-count g: gl-boar-unit < 2)
	(up-compare-goal gl-boar-eaten < 2)
	(or	(up-gaia-type-count g: gl-boar-unit < 1)
		(up-compare-goal gl-boar-eaten < 1))
	(up-compare-goal gl-wood-villagers < 6)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal gl-DRUSH YES)
	(nand	(up-compare-goal gl-food-villagers > 11)
		(and	(up-compare-goal gl-strategy-type >= FC)
			(up-compare-goal gl-wood-villagers < 7)))
	(up-compare-goal gl-food-villagers > 9)
	(up-compare-goal gl-food-villagers < 17)
=>
	(up-jump-rule 8)
)

(defrule
	(goal temporary-goal6 1)
	(or	(up-compare-goal gl-strategy-type >= FC)
		(strategic-number sn-sheep-count < 6))
	(up-compare-goal gl-food-villagers >= early-food-villagers); 15 in Regicide, otherwise 10
	(or	(and	(up-gaia-type-count g: gl-boar-unit < 1)
			(up-compare-goal gl-boar-eaten < 1))
		(or	(strategic-number sn-sheep-count < 8)
			(starting-age >= feudal-age)))
	(up-compare-goal gl-wood-villagers < 6)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(or	(up-compare-goal gl-food-villagers < min-food-villagers); 7 for chinese/aztec/maya, 6 for rest
		(and	(or	(and	(up-pending-objects c: villager-class < 1)
					(up-compare-goal gl-total-food-amount < 50))
				(and	(up-compare-goal gl-food-villagers < 7)
					(building-type-count-total mill > 0)))
			(goal DOCK 0)))
	(up-compare-goal gl-food-villagers < gv-9-villager-food)
=>
	(up-modify-goal gl-food-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-pending-objects c: villager-class < 2)
	(or	(and	(up-compare-goal gl-food-villagers < 7)
			(up-compare-goal gl-total-food-amount < 15))
		(and	(building-type-count-total mill > 0)
			(and	(goal DOCK 0)
				(up-compare-goal gl-DRUSH != YES))))
	(up-compare-goal gl-food-villagers < 8)
=>
	(up-modify-goal gl-food-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-wood-villagers < 3)
	(or	(up-compare-goal gl-food-villagers >= gv-7-villager-food)
		(and	(strategic-number sn-sheep-count > 1)
			(nand	(up-compare-goal gl-wood-villagers >= min-wood-for-extra-food)
				(unit-type-count villager-food < min-food-villagers)))); A food villager got tasked to build
	(up-compare-goal gl-food-villagers >= gv-6-villager-food)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal DOCK != 0)
	(up-compare-goal gl-wood-villagers < 4)
	(or	(up-compare-goal gl-food-villagers > 6)
		(and	(strategic-number sn-sheep-count > 1)
			(nand	(up-compare-goal gl-wood-villagers > 0)
				(unit-type-count villager-food < min-food-villagers)))); A food villager got tasked to build
	(up-compare-goal gl-food-villagers > 5)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-food-villagers > 11)
	(or	(up-compare-goal gl-food-villagers > 13)
		(and	(up-compare-goal gl-strategy-type >= FC2)
			(goal gl-resources-on-map regular)))
	(up-compare-goal gl-wood-villagers < early-wood-villagers)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-strategy-type >= FC)
	(up-compare-goal gl-food-villagers > 9)
	(or	(up-compare-goal gl-wood-villagers < 4)
		(or	(up-compare-goal gl-food-villagers > 14)
			(and	(up-compare-goal gl-food-villagers > 12)
				(and	(up-compare-goal gl-wood-villagers < 7)
					(building-type-count-total farm > 0)))))
	(up-compare-goal gl-wood-villagers g:< gl-resources-on-map)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-wood-villagers < 4)
	(up-compare-goal gl-food-villagers > 7)
	(or	(up-compare-goal gl-food-villagers > 9)
		(up-compare-goal gl-strategy-type >= FC2)); Test
	(or	(up-compare-goal gl-food-villagers > 12); 14
		(up-compare-goal gl-strategy-type >= FC)); != scrush
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal DOCK != 0)
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(up-compare-goal gl-food-villagers > 7)
	(wood-amount < 240)
	(or	(map-type migration)
		(or	(up-compare-const gv-fish-map == 1)
			(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)))
	(up-compare-goal gl-strategy-type >= FC)
	(up-compare-goal gl-wood-villagers < 16)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal DOCK != 0)
	(up-compare-goal gl-food-villagers > 6)
	(or	(and	(up-compare-goal gl-wood-villagers < 7)
			(or	(up-compare-goal gl-wood-villagers < 5)
				(building-type-count-total mill > 0)))
		(and	(up-compare-goal gl-strategy-type >= FC)
			(up-compare-goal gl-food-villagers > 9)))
	(up-compare-goal gl-wood-villagers < 12)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(up-compare-goal gl-food-villagers > 12)
	(food-amount > 350)
	(or	(up-compare-goal gl-wood-villagers < 8)
		(building-type-count-total farm > 1))
	(up-compare-goal gl-wood-villagers < 9)
	(building-type-count-total farm > 0)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(or	(up-compare-goal gl-food-villagers < 17)
		(and	(up-compare-goal gl-food-villagers < 19)
			(and	(up-compare-goal gl-wood-villagers > 5)
				(and	(strategic-number sn-sheep-count > 9)
					(or	(up-compare-goal gl-lured-deer-count > 0)
						(up-compare-goal gl-deer-luring >= 1))))))
=>
	(up-modify-goal gl-food-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(up-compare-goal gl-food-villagers < 19)
	(strategic-number sn-sheep-count > 9)
	(or	(up-compare-goal gl-lured-deer-count > 0)
		(up-compare-goal gl-deer-luring >= 1))
	(up-compare-goal gl-wood-villagers > 5)
=>
	(up-modify-goal gl-food-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(goal gl-strategy scrush)
	(goal POSITION POCKET)
	(food-amount >= 450)
	(or	(up-pending-objects c: villager-class > 1)
		(food-amount >= 500))
	(up-compare-goal gl-wood-villagers > 5)
=>
	(up-modify-goal gl-food-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-strategy-type >= FC)
	(up-compare-goal gl-food-villagers > 16)
	(up-compare-goal gl-wood-villagers > 7)
	(or	(up-compare-goal gl-food-villagers < 20)
		(up-compare-goal gl-wood-villagers > 9))
	(food-amount < 500)
	(up-compare-goal gl-food-villagers < 22)
	(building-type-count-total farm > 0)
=>
	(up-modify-goal gl-food-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 1)
=>
	(up-modify-goal gl-wood-villagers c:+ 1)
	(up-modify-goal gl-sum-villagers c:+ 1)
	(set-goal temporary-goal6 0)
)

(defrule
	(goal temporary-goal6 0)
=>
	(up-modify-goal temporary-goal g:= gl-food-villagers)
	(up-modify-goal temporary-goal g:+ gl-wood-villagers)
	(up-modify-goal temporary-goal g:+ gl-gold-villagers)
	(up-modify-goal temporary-goal g:+ gl-stone-villagers)
)

(defrule
	(goal temporary-goal6 0)
=>
	(set-goal temporary-goal6 -1)
	(up-modify-sn sn-food-gatherer-percentage g:= gl-food-villagers)
	(up-modify-sn sn-wood-gatherer-percentage g:= gl-wood-villagers)
	(up-modify-sn sn-gold-gatherer-percentage g:= gl-gold-villagers)
	(up-modify-sn sn-stone-gatherer-percentage g:= gl-stone-villagers)
	(up-modify-sn sn-food-gatherer-percentage g:%/ temporary-goal)
	(up-modify-sn sn-wood-gatherer-percentage g:%/ temporary-goal)
	(up-modify-sn sn-gold-gatherer-percentage g:%/ temporary-goal)
	(up-modify-sn sn-stone-gatherer-percentage g:%/ temporary-goal)
;	(up-chat-data-to-player my-player-number food-d g: gl-food-villagers)
;	(up-chat-data-to-player my-player-number wood-d g: gl-wood-villagers)
)

(defrule
	(dropsite-min-distance hunting == 255)
	(cc-players-unit-type-count 0 deer == 0)
	(cc-players-unit-type-count 0 shore-fish == 0)
	(up-gaia-type-count c: forage-class < 1)
	(cc-players-unit-type-count 0 sheep == 0)
	(unit-type-count villager-shepherd == 0)
	(building-type-count-total farm > 0); No food, only farms -> allow only as much farmers as there are farms to avoid issues in MP
=>
	(up-modify-goal temporary-goal2 g:= gl-my-villager-count)
	(up-modify-goal temporary-goal3 g:= gl-my-villager-count)
	(up-get-fact building-type-count-total farm temporary-goal)
	(up-modify-goal temporary-goal g:min gl-food-villagers)
	(up-modify-goal temporary-goal2 g:- temporary-goal)
	(up-modify-sn sn-food-gatherer-percentage g:= temporary-goal)
	(up-modify-sn sn-wood-gatherer-percentage g:= temporary-goal2)
	(up-modify-sn sn-food-gatherer-percentage g:%/ temporary-goal3)
	(up-modify-sn sn-wood-gatherer-percentage g:%/ temporary-goal3)
)

(defrule
	(goal gl-modern-build-order 100)
	(goal temporary-goal7 1)
=>
	(up-modify-goal gl-object-point-x g:= gl-food-villagers)
	(up-modify-goal gl-object-point-y g:= gl-wood-villagers)
	(up-modify-goal gl-temporary-point-x g:= gl-gold-villagers)
	(up-modify-goal gl-temporary-point-y g:= gl-stone-villagers)
	(up-modify-goal gl-object-point-x g:- gl-point-x)
	(up-modify-goal gl-object-point-y g:- gl-point-y)
	(up-modify-goal gl-temporary-point-x g:- gl-point2-x)
	(up-modify-goal gl-temporary-point-y g:- gl-point2-y)
)

(defrule
	(goal gl-modern-build-order 100)
	(goal temporary-goal7 1)
=>
	(up-modify-goal gl-food-villagers g:= gl-point-x)
	(up-modify-goal gl-wood-villagers g:= gl-point-y)
	(up-modify-goal gl-gold-villagers g:= gl-point2-x)
	(up-modify-goal gl-stone-villagers g:= gl-point2-y)
	(up-modify-goal gl-sum-villagers g:= gl-point3-x)
)

(defrule
	(goal gl-modern-build-order 100)
	(goal temporary-goal6 -1)
	(goal temporary-goal7 0)
	(up-compare-goal gl-sum-villagers g:>= gl-my-villager-count)
=>
	(set-goal temporary-goal6 1)
	(set-goal temporary-goal7 1)
	(up-jump-rule -49)
)

(defrule
	(up-compare-goal gl-sum-villagers g:< gl-my-villager-count)
=>
	(up-jump-rule -50)
)

; 

(defrule
	(up-compare-goal gl-modern-build-order != 100)
=>
	(up-jump-rule 6)
)

(defrule
	(goal gl-modern-build-order 1)
	(goal temporary-goal7 1)
	(goal gl-object-point-x 1)
=>
	(set-goal gl-next-villager-target food)
;	(chat-to-player my-player-number "-> food")
)

(defrule
	(goal temporary-goal7 1)
	(goal gl-object-point-y 1)
=>
	(set-goal gl-next-villager-target wood)
;	(chat-to-player my-player-number "-> wood")
)

(defrule
	(goal temporary-goal7 1)
	(goal gl-temporary-point-x 1)
=>
	(set-goal gl-next-villager-target gold)
;	(chat-to-player my-player-number "-> gold")
)

(defrule
	(goal temporary-goal7 1)
	(goal gl-temporary-point-y 1)
=>
	(set-goal gl-next-villager-target stone)
;	(chat-to-player my-player-number "-> stone")
)

(defrule
	(goal gl-next-villager-target food)
	(up-compare-goal gl-food-villagers <= 6)
=>
;	(set-goal gl-next-villager-target sheep)
	(do-nothing)
)

(defrule
	(goal gl-next-villager-target wood)
	(up-pending-objects c: villager-class > 0)
	(goal gl-lumber-camp-time -1)
=>
	(up-get-fact game-time 0 gl-lumber-camp-time)
	(up-modify-goal gl-lumber-camp-time c:+ 15)
)


#load-if-defined SARACEN-CIV
(defrule
	(up-compare-goal gl-strategy != heavy-krush)
=>
	(up-jump-rule 5)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-skip-first-mining-camp 1)
	(set-goal gl-disable-mining-upgrades YES)
	(set-goal target-system aggressive-raid)
	(up-modify-flag gl-flag c:+ target-system-rewriting)
	(disable-self)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 15)
	(disable-self)
)

(defrule
	(goal RAM 1)
	(strategic-number sn-wood-gatherer-percentage != 30)
=>
	(set-strategic-number sn-food-gatherer-percentage 25)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 20)
)

(defrule
	(up-compare-goal RAM != 0)
	(building-type-count-total stable > 1)
	(building-type-count-total mining-camp > 1)
	(commodity-selling-price stone >= 105)
=>
	(set-strategic-number sn-food-gatherer-percentage 17)
	(set-strategic-number sn-wood-gatherer-percentage 13)
	(set-strategic-number sn-gold-gatherer-percentage 38)
	(set-strategic-number sn-stone-gatherer-percentage 32)
)

(defrule
	(up-compare-goal RAM != 0)
	(building-type-count-total stable > 1)
	(building-type-count-total mining-camp > 1)
	(commodity-selling-price stone < 105)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 15)
	(set-strategic-number sn-gold-gatherer-percentage 40)
	(set-strategic-number sn-stone-gatherer-percentage 15)
)
#end-if

#load-if-defined FRANKISH-CIV
(defrule
	(up-compare-goal gl-strategy != heavy-krush)
=>
	(up-jump-rule 8)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
=>
	(set-strategic-number sn-food-gatherer-percentage 31)
	(set-strategic-number sn-wood-gatherer-percentage 49)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(disable-self)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count-total stable > 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(disable-self)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(goal RAM 0)
		(unit-type-count-total battering-ram-line > 0))
	(building-type-count-total stable > 1)
	(game-time > 1200)
	(game-time < 1800)
	(current-age == castle-age)
	(strategic-number sn-gold-gatherer-percentage != 30)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 30)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(goal RAM 0)
		(unit-type-count-total battering-ram-line > 0))
	(building-type-count-total stable > 1)
	(game-time > 1800)
	(game-time < 2100)
	(building-type-count-total stable < 3)
	(current-age == castle-age)
	(strategic-number sn-gold-gatherer-percentage != 32)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 28)
	(set-strategic-number sn-gold-gatherer-percentage 32)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(goal RAM 0)
		(unit-type-count-total battering-ram-line > 0))
	(building-type-count-total stable > 1)
	(game-time > 1800)
	(game-time < 2100)
	(building-type-count-total stable >= 3)
	(current-age == castle-age)
	(strategic-number sn-gold-gatherer-percentage != 34)
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-gold-gatherer-percentage 34)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(goal RAM 0)
		(unit-type-count-total battering-ram-line > 0))
	(building-type-count-total stable > 1)
	(game-time > 2100)
	(current-age == castle-age)
	(or	(strategic-number sn-gold-gatherer-percentage != 40)
		(strategic-number sn-wood-gatherer-percentage != 22))
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 22)
	(set-strategic-number sn-gold-gatherer-percentage 40)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(goal RAM 0)
		(unit-type-count-total battering-ram-line > 0))
	(building-type-count-total stable > 1)
	(food-amount > 250)
	(gold-amount < 200)
	(current-age == castle-age)
	(or	(strategic-number sn-gold-gatherer-percentage != 45)
		(strategic-number sn-wood-gatherer-percentage != 23))
=>
	(set-strategic-number sn-food-gatherer-percentage 32)
	(set-strategic-number sn-wood-gatherer-percentage 23)
	(set-strategic-number sn-gold-gatherer-percentage 45)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(goal RAM 1)
	(unit-type-count-total battering-ram-line < 1)
	(current-age == castle-age)
	(strategic-number sn-gold-gatherer-percentage != 27)
=>
	(set-strategic-number sn-food-gatherer-percentage 33)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 27)
)
#end-if

(defrule
	(or	(current-age > feudal-age)
		(or	(goal gl-current-age gv-dark)
			(or	(goal gl-fixed-eco-balancing NO)
				(goal gl-TC-lost YES))))
=>
	(up-jump-rule 64)
)

(defrule
	(goal gl-current-age gv-feudal)
	(goal gl-strategy flush)
	(starting-age == feudal-age)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 70)
	(disable-self)
)

(defrule
	(goal gl-current-age gv-dark-up)
	(nor	(goal gl-strategy flush)
		(goal gl-strategy heavy-krush))
	(up-compare-const gv-regicide == 0)
	(strategic-number sn-skip-first-mining-camp != 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 62)
	(disable-self)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-dark-up)
	(goal gl-feudal-infantry 0)
	(up-compare-goal gl-feudal-archery != skirmishers)
	(up-compare-goal gl-feudal-archery != 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 30); 30
	(set-strategic-number sn-wood-gatherer-percentage 63); 70
	(set-strategic-number sn-gold-gatherer-percentage 7)
)

(defrule
	(goal gl-strategy flush)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(goal gl-feudal-infantry 0)
	(goal gl-feudal-archery pure-archers)
=>
	(set-strategic-number sn-food-gatherer-percentage 24)
	(set-strategic-number sn-wood-gatherer-percentage 62)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(goal gl-strategy flush)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-DRUSH-CONTROL >= 0); We did drush
	(goal gl-feudal-infantry 0)
	(goal gl-feudal-archery pure-archers)
=>
	(set-strategic-number sn-food-gatherer-percentage 24)
	(set-strategic-number sn-wood-gatherer-percentage 57)
	(set-strategic-number sn-gold-gatherer-percentage 19)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-dark-up)
	(up-compare-goal gl-DRUSH-CONTROL < 0)
	(goal gl-feudal-infantry 0)
	(or	(civ-selected mongol)
		(and	(up-compare-goal gl-feudal-archery != skirmishers)
			(and	(up-compare-goal gl-feudal-archery != 0)
				(up-compare-goal gl-my-villager-count >= 28))))
=>
	(up-modify-sn sn-food-gatherer-percentage c:- 5)
	(up-modify-sn sn-wood-gatherer-percentage c:+ 5)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-dark-up)
	(goal gl-feudal-infantry 0)
	(up-compare-goal gl-my-villager-count < 25)
	(civ-selected mongol)
=>
	(up-modify-sn sn-food-gatherer-percentage c:- 4)
	(up-modify-sn sn-wood-gatherer-percentage c:+ 4)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-dark-up)
	(goal gl-feudal-infantry 0)
	(up-compare-goal gl-my-villager-count >= 28)
	(up-compare-goal gl-feudal-archery != pure-archers)
	(up-compare-goal gl-feudal-archery != skirmishers)
	(up-compare-goal gl-feudal-archery != 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 59)
	(set-strategic-number sn-gold-gatherer-percentage 11)
)

(defrule
	(goal gl-feudal-archery skirmishers)
	(goal gl-feudal-infantry 0)
	(goal gl-current-age gv-dark-up)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 60)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-skip-first-mining-camp 1)
)

(defrule
	(goal gl-feudal-archery skirmishers)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(or	(and	(current-age == feudal-age)
			(game-time < 1170))
		(wood-amount > 400))
=>
	(set-strategic-number sn-food-gatherer-percentage 43)
	(set-strategic-number sn-wood-gatherer-percentage 57)
)

(defrule
	(goal gl-feudal-archery skirmishers)
	(goal gl-current-age gv-feudal)
	(current-age-time > 60)
	(game-time < 1170)
	(or	(and	(wood-amount >= 200)
			(food-amount <= 100))
		(goal gl-enemy-strategy KNIGHT-RUSH))
	(building-type-count-total archery-range > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 52)
	(set-strategic-number sn-wood-gatherer-percentage 48)
)

(defrule
	(goal gl-feudal-archery skirmishers)
	(goal gl-current-age gv-feudal)
	(or	(game-time >= 1170)
		(or	(up-compare-goal gl-enemy-infantry-count > 0)
			(or	(up-compare-goal gl-enemy-eagle-count > 1)
				(or	(up-compare-goal gl-enemy-cavalry-count > 1)
					(up-compare-goal DOCK != 0)))))
	(building-type-count-total archery-range > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 47)
	(set-strategic-number sn-gold-gatherer-percentage 13)
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(defrule
	(goal gl-strategy flush)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(goal gl-feudal-infantry men-at-arms)
=>
	(set-strategic-number sn-food-gatherer-percentage 42); 42
	(set-strategic-number sn-wood-gatherer-percentage 50); 50
	(set-strategic-number sn-gold-gatherer-percentage 8); 8
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-current-age <= gv-feudal)
	(or	(goal gl-strategy-class basic-class)
		(goal gl-strategy-type FC2))
	(up-compare-goal gl-strategy-type >= FC)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-current-age <= gv-feudal)
	(or	(goal gl-strategy-class basic-class)
		(goal gl-strategy-type FC2))
	(up-compare-goal gl-DRUSH-CONTROL > 0)
	(up-compare-goal gl-strategy-type >= FC)
=>
	(set-strategic-number sn-food-gatherer-percentage 43)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 17)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-current-age <= gv-feudal)
	(or	(up-compare-goal gl-my-villager-count < 29)
		(strategic-number sn-stone-gatherer-percentage > 0))
	(up-compare-const hit-and-run-unit != mangudai-line)
	(or	(up-compare-goal gl-total-food-amount < 500)
		(up-compare-goal gl-my-villager-count < 27))
	(or	(goal gl-strategy-class basic-class)
		(goal gl-strategy-type FC2))
	(up-compare-goal gl-strategy-type >= FC)
=>
	(set-strategic-number sn-food-gatherer-percentage 46)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-current-age <= gv-feudal)
	(up-compare-goal gl-strategy != saracen-heavy-krush)
	(up-compare-goal gl-strategy != eagle-rush)
	(up-compare-goal gl-strategy-type >= FC)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 14)
	(disable-self)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-current-age <= gv-feudal)
	(up-compare-goal gl-total-food-amount > 580)
	(or	(up-compare-goal gl-total-food-amount > 700)
		(up-timer-status 6 == timer-running))
	(or	(up-compare-goal gl-total-food-amount > 740)
		(goal gl-current-age gv-dark-up))
	(or	(goal gl-strategy-class basic-class)
		(goal gl-strategy-type FC2))
	(up-compare-goal gl-strategy-type >= FC)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 49)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-current-age <= gv-feudal)
	(goal POSITION POCKET)
	(map-type migration)
	(unit-type-count-total fishing-ship > 9)
	(up-compare-goal gl-strategy-type >= FC)
=>
	(set-strategic-number sn-food-gatherer-percentage 16)
	(set-strategic-number sn-wood-gatherer-percentage 70)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-current-age <= gv-feudal)
	(gold-amount > 400)
	(up-compare-goal gl-strategy-type >= FC)
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 6)
	(up-modify-sn sn-wood-gatherer-percentage c:+ 7)
	(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-current-age <= gv-feudal)
	(or	(goal gl-strategy castle-drop)
		(goal gl-eew-strategy-type fast-imp))
	(building-type-count-total castle == 0)
	(stone-amount < castle-stone)
=>
	(up-modify-sn sn-stone-gatherer-percentage c:max 10)
)

(defrule
	(up-compare-goal gl-feudal-archery != 0); Skirmishers overwritten below
	(goal gl-feudal-infantry men-at-arms)
	(goal gl-current-age gv-feudal)
	(building-type-count-total archery-range > 0)
;	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 36)
	(set-strategic-number sn-wood-gatherer-percentage 49)
	(set-strategic-number sn-gold-gatherer-percentage 15)
)

(defrule
	(up-compare-goal gl-feudal-archery != 0); Skirmishers overwritten below
	(civilian-population > 70)
	(goal gl-feudal-infantry men-at-arms)
	(goal gl-current-age gv-feudal)
	(building-type-count-total archery-range > 0)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 46)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 12)
)

(defrule
	(goal gl-feudal-archery skirmishers)
	(goal gl-feudal-infantry men-at-arms)
	(goal gl-current-age gv-feudal)
	(or	;(and
			(building-type-count-total archery-range > 0)
	;		(building-type-count-total blacksmith > 0))
		(and	(current-age-time < 100)
			(building-type-count farm > 2)))
=>
	(set-strategic-number sn-food-gatherer-percentage 53)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 7)
)

(defrule
	(goal gl-feudal-archery skirmishers)
	(goal gl-feudal-infantry men-at-arms)
	(goal gl-current-age gv-feudal)
	(up-compare-goal gl-my-villager-count-total > 29)
	(building-type-count-total archery-range > 0)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 46)
	(set-strategic-number sn-wood-gatherer-percentage 49)
	(set-strategic-number sn-gold-gatherer-percentage 5)
)

(defrule
	(goal gl-feudal-archery skirmishers)
	(goal gl-feudal-infantry men-at-arms)
	(or	(game-time > 1200)
		(and	(current-age-time > 180)
			(food-amount > 400)))
	(goal gl-current-age gv-feudal)
	(building-type-count-total archery-range > 0)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 44)
	(set-strategic-number sn-gold-gatherer-percentage 8)
)

(defrule
	(goal gl-feudal-archery archers)
	(goal gl-feudal-infantry 0)
	(goal gl-current-age gv-feudal)
	(building-type-count-total archery-range > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 60)
	(set-strategic-number sn-gold-gatherer-percentage 10)
)

(defrule
	(goal gl-feudal-archery archers)
	(goal gl-feudal-infantry 0)
	(goal gl-current-age gv-feudal)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total archery-range > 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 31)
	(set-strategic-number sn-wood-gatherer-percentage 44)
	(set-strategic-number sn-gold-gatherer-percentage 25)
)

(defrule
	(goal gl-feudal-archery pure-archers)
	(goal gl-feudal-infantry 0)
	(goal gl-current-age gv-feudal); archers, age-time > 240 + blacksmith
	(building-type-count-total archery-range > 0); 1
=>
	(set-strategic-number sn-food-gatherer-percentage 27)
	(set-strategic-number sn-wood-gatherer-percentage 46)
	(set-strategic-number sn-gold-gatherer-percentage 27)
)

(defrule
	(goal gl-feudal-archery pure-archers)
	(goal gl-feudal-infantry 0)
	(goal gl-current-age gv-feudal)
	(up-compare-goal gl-my-villager-count > 30)
	(or	(and	(up-research-status c: ri-wheel-barrow < research-pending)
			(or	(up-research-status c: ri-fletching < research-pending)
				(food-amount < 200)))
		(up-compare-goal gl-military-percentage >= 85))
	(building-type-count-total archery-range > 1)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 33)
	(set-strategic-number sn-wood-gatherer-percentage 43)
	(set-strategic-number sn-gold-gatherer-percentage 24)
)

(defrule
	(goal gl-feudal-archery pure-archers)
	(goal gl-feudal-infantry 0)
	(goal gl-current-age gv-feudal)
	(up-compare-goal gl-military-percentage >= 85)
	(up-compare-goal gl-my-villager-count > 34)
	(or	(up-compare-goal gl-my-villager-count > 37)
		(or	(up-research-status c: ri-wheel-barrow >= research-pending)
			(up-compare-goal gl-military-percentage >= 170)))
	(building-type-count-total archery-range > 1)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 23)
)

(defrule
	(goal gl-feudal-archery pure-archers)
	(goal gl-feudal-infantry 0)
	(goal gl-current-age gv-feudal)
	(up-research-status c: ri-fletching >= research-pending)
	(up-research-status c: ri-wheel-barrow >= research-pending)
	(up-compare-goal gl-military-percentage < 125)
	(or	(up-compare-goal gl-my-villager-count < 45)
		(up-compare-goal gl-military-percentage <= 77))
	(building-type-count-total archery-range > 2)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 31)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 27)
)

(defrule
	(goal gl-feudal-archery pure-archers)
	(goal gl-feudal-infantry 0)
	(goal gl-current-age gv-feudal)
	(up-research-status c: ri-fletching >= research-pending)
	(up-research-status c: ri-wheel-barrow >= research-pending)
	(up-compare-goal gl-military-percentage < 125)
	(or	(up-compare-goal gl-my-villager-count < 52)
		(up-compare-goal gl-military-percentage <= 77))
	(building-type-count-total archery-range > 3)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 27)
	(set-strategic-number sn-wood-gatherer-percentage 41)
	(set-strategic-number sn-gold-gatherer-percentage 32)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(building-type-count-total archery-range > 1)
	(goal gl-feudal-archery pure-archers)
	(civ-selected turkish)
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 1)
	(up-modify-sn sn-wood-gatherer-percentage c:+ 2)
	(up-modify-sn sn-gold-gatherer-percentage c:- 3)
)

(defrule
	(goal gl-feudal-archery archer-skirm)
	(goal gl-feudal-infantry 0)
	(goal gl-current-age gv-feudal)
	(building-type-count-total archery-range > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 36)
	(set-strategic-number sn-wood-gatherer-percentage 54)
	(set-strategic-number sn-gold-gatherer-percentage 10)
)

(defrule
	(goal gl-feudal-archery archer-skirm)
	(goal gl-feudal-infantry 0)
	(goal gl-current-age gv-feudal)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total archery-range > 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 36)
	(set-strategic-number sn-wood-gatherer-percentage 49)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(defrule
	(goal gl-feudal-archery archer-skirm)
	(goal gl-feudal-infantry 0)
	(goal gl-current-age gv-feudal)
	(current-age-time > 240)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total archery-range > 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 34)
	(set-strategic-number sn-wood-gatherer-percentage 49)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(defrule
	(or	(goal gl-feudal-archery archers)
		(goal gl-feudal-archery archer-skirm))
	(goal gl-feudal-infantry 0)
	(goal gl-current-age gv-feudal)
	(building-type-count-total archery-range > 0)
	(strategic-number sn-gold-gatherer-percentage > 4)
	(or	(unit-type-count-total spearman-line > 1)
		(or	(gold-amount > 300)
			(players-building-type-count focus-player stable > 0)))
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 10)
	(up-modify-sn sn-wood-gatherer-percentage c:- 6)
	(up-modify-sn sn-gold-gatherer-percentage c:- 4)
	(up-jump-rule 1)
)

(defrule
	(or	(goal gl-feudal-archery archers)
		(goal gl-feudal-archery archer-skirm))
	(goal gl-feudal-infantry 0)
	(goal gl-current-age gv-feudal)
	(building-type-count-total archery-range > 0)
	(strategic-number sn-gold-gatherer-percentage > 4)
	(or	(up-compare-goal gl-enemy-cavalry-count > 1)
		(or	(up-compare-goal gl-enemy-heavy-cavalry-count > 0)
			(goal gl-enemy-strategy KNIGHT-RUSH)))
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 10)
	(up-modify-sn sn-wood-gatherer-percentage c:- 6)
	(up-modify-sn sn-gold-gatherer-percentage c:- 4)
)

(defrule
	(goal gl-current-age gv-feudal)
	(goal gl-strategy flush)
	(goal gl-feudal-infantry 0)
	(goal gl-feudal-archery archers)
	(building-type-count-total blacksmith > 0)
	(strategic-number sn-gold-gatherer-percentage > 0)
	(or	(up-compare-goal gl-enemy-archery-count > 3)
		(players-building-type-count target-player archery-range > 1))
	(players-unit-type-count focus-player stable == 0)
	(players-unit-type-count focus-player scout-cavalry-line < 2)
	(players-unit-type-count focus-player militiaman-line < 2)
	(up-compare-goal gl-enemy-eagle-count < 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 46)
	(set-strategic-number sn-gold-gatherer-percentage 16)
)

(defrule
	(goal gl-current-age gv-feudal)
	(goal gl-strategy flush)
	(goal gl-feudal-infantry 0)
	(goal gl-feudal-archery archer-skirm)
	(building-type-count-total blacksmith > 0)
	(strategic-number sn-gold-gatherer-percentage > 0)
	(or	(up-compare-goal gl-enemy-archery-count > 3)
		(players-building-type-count target-player archery-range > 1))
	(players-unit-type-count focus-player stable == 0)
	(players-unit-type-count focus-player scout-cavalry-line < 2)
	(players-unit-type-count focus-player militiaman-line < 2)
	(up-compare-goal gl-enemy-eagle-count < 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 12)
)

(defrule
	(goal gl-current-age gv-feudal)
	(or	(strategic-number sn-age-up-castle == 1)
		(and	(goal SLING 3)
			(players-tribute-memory any-ally food >= 50)))
	(up-compare-goal gl-enemy-wall-count-total < 10)
	(goal gl-feudal-archery pure-archers)
	(goal gl-feudal-infantry 0)
	(building-type-count-total archery-range > 1)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 23)
	(set-strategic-number sn-age-up-castle 1)
	(up-jump-rule 3)
)

(defrule
	(goal gl-current-age gv-feudal)
	(goal gl-strategy flush)
	(strategic-number sn-age-up-castle == 1)
=>
	(set-goal gl-feudal-archery 0)
	(set-goal gl-feudal-infantry 0)
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 58)
	(set-strategic-number sn-gold-gatherer-percentage 2)
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(defrule
	(goal gl-current-age gv-feudal)
	(goal gl-strategy flush)
	(strategic-number sn-age-up-castle == 1)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total archery-range > 0)
	(building-type-count-total mining-camp == 0)
=>
	(set-goal gl-feudal-archery 0)
	(set-goal gl-feudal-infantry 0)
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 52)
	(set-strategic-number sn-gold-gatherer-percentage 6)
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(defrule
	(goal gl-current-age gv-feudal)
	(goal gl-strategy flush)
	(strategic-number sn-age-up-castle == 1)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total archery-range > 0)
	(building-type-count-total mining-camp > 0)
=>
	(set-goal gl-feudal-archery 0)
	(set-goal gl-feudal-infantry 0)
	(set-strategic-number sn-food-gatherer-percentage 46)
	(set-strategic-number sn-wood-gatherer-percentage 36)
	(set-strategic-number sn-gold-gatherer-percentage 18)
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(defrule
	(goal gl-strategy default)
	(goal gl-current-age gv-feudal)
	(current-age-time > 240)
	(strategic-number sn-gold-gatherer-percentage > 4)
	(gold-amount > 350)
=>
	(up-modify-sn sn-gold-gatherer-percentage c:* 6)
	(up-modify-sn sn-gold-gatherer-percentage c:/ 10)
	(up-modify-goal temporary-goal s:= sn-food-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-wood-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-gold-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-stone-gatherer-percentage)
	(up-modify-sn sn-food-gatherer-percentage g:%/ temporary-goal)
	(up-modify-sn sn-wood-gatherer-percentage g:%/ temporary-goal)
	(up-modify-sn sn-gold-gatherer-percentage g:%/ temporary-goal)
)

(defrule
	(goal gl-strategy default)
	(goal gl-current-age gv-feudal)
	(goal gl-enemy-strategy TRUSH)
	(goal gl-feudal-infantry 0)
	(strategic-number sn-gold-gatherer-percentage > 0)
	(gold-amount > 250)
=>
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(up-modify-goal temporary-goal s:= sn-food-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-wood-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-stone-gatherer-percentage)
	(up-modify-sn sn-food-gatherer-percentage g:%/ temporary-goal)
	(up-modify-sn sn-wood-gatherer-percentage g:%/ temporary-goal)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(current-age-time > 60)
	(or	(up-compare-const wood-bonus-civ == 1)
		(and	(goal gl-resources-on-map plenty)
			(and	(current-age-time > 360)
				(unit-type-count villager-forager > 2))))
	(building-type-count-total blacksmith > 0)
	(building-type-count-total archery-range > 0)
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 3)
	(up-modify-sn sn-wood-gatherer-percentage c:- 3)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(wood-amount > 120)
	(or	(food-amount < 120)
		(and	(wood-amount > 150)
			(and	(research-available ri-wheel-barrow)
				(up-compare-goal gl-my-villager-count-total > 29))))
	(building-type-count-total blacksmith > 0)
	(building-type-count-total archery-range > 1)
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 3)
	(up-modify-sn sn-wood-gatherer-percentage c:- 3)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(or	(up-compare-goal gl-feudal-archery != skirmishers)
		(game-time > 1170))
	(current-age-time > 360)
	(unit-type-count villager-forager > 2)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total archery-range > 0)
	(strategic-number sn-gold-gatherer-percentage > 0)
=>
	(up-modify-sn sn-gold-gatherer-percentage c:+ 3)
	(up-modify-sn sn-wood-gatherer-percentage c:- 3)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(or	(up-compare-goal gl-feudal-archery != skirmishers)
		(game-time > 1170))
	(current-age-time > 360)
	(food-amount > 900)
	(gold-amount < 200)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total archery-range > 0)
=>
	(up-modify-sn sn-gold-gatherer-percentage c:+ 4)
	(up-modify-sn sn-wood-gatherer-percentage c:+ 4)
	(up-modify-sn sn-food-gatherer-percentage c:- 8)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total archery-range > 1)
	(strategic-number sn-age-up-castle == 2)
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 4)
	(up-modify-sn sn-wood-gatherer-percentage c:- 3)
	(up-modify-sn sn-gold-gatherer-percentage c:- 1)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total archery-range > 0)
=>
	(up-modify-goal temporary-goal g:= gl-gathered-relics)
	(set-goal temporary-goal3 3)
	(up-modify-goal temporary-goal2 g:= gl-my-villager-count)
	(up-modify-goal temporary-goal2 c:/ 30)
	(up-modify-goal temporary-goal2 c:min 2)
	(up-modify-goal temporary-goal3 g:- temporary-goal2)
	(up-modify-goal temporary-goal g:* temporary-goal3)
	(up-modify-goal temporary-goal c:min 40)
	(up-modify-sn sn-gold-gatherer-percentage g:- temporary-goal)
	(up-modify-goal temporary-goal c:/ 2)
	(up-modify-sn sn-food-gatherer-percentage g:+ temporary-goal)
	(up-modify-sn sn-wood-gatherer-percentage g:+ temporary-goal)
)

(defrule
	(goal gl-strategy flush)
=>
	(up-modify-goal temporary-goal s:= sn-food-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-wood-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-gold-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-stone-gatherer-percentage)
	(up-modify-sn sn-food-gatherer-percentage g:%/ temporary-goal)
	(up-modify-sn sn-wood-gatherer-percentage g:%/ temporary-goal)
	(up-modify-sn sn-gold-gatherer-percentage g:%/ temporary-goal)
	(up-get-fact unit-type-count villager-food temporary-goal4)
	(up-get-fact unit-type-count villager-farmer temporary-goal5)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(up-compare-goal temporary-goal4 g:== temporary-goal5)
	(unit-type-count villager-builder < 2)
	(building-type-count-total archery-range > 1)
	(building-type-count-total blacksmith > 0)
=>
	(up-modify-goal temporary-goal g:= gl-my-villager-count)
	(up-modify-goal temporary-goal s:* sn-food-gatherer-percentage)
	(up-modify-goal temporary-goal c:/ 100)
	(up-modify-goal temporary-goal c:- 2)
	(up-modify-goal temporary-goal g:- temporary-goal4)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal g:%/ gl-my-villager-count)
	(up-modify-sn sn-food-gatherer-percentage g:- temporary-goal)
	(up-modify-sn sn-wood-gatherer-percentage g:+ temporary-goal)
;	(up-chat-data-to-all "Modifier: %d" g: temporary-goal)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(goal gl-strategy default)
=>
	(set-strategic-number sn-food-gatherer-percentage 33)
	(set-strategic-number sn-wood-gatherer-percentage 44)
	(set-strategic-number sn-gold-gatherer-percentage 23)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(goal gl-strategy default)
	(not	(civ-selected turkish))
	(up-compare-goal gl-enable-skirmishers != 0)
	(up-compare-goal gl-enemy-archery-count > 15)
	(up-compare-goal gl-enemy-infantry-count < 5)
	(up-compare-goal gl-enemy-cavalry-count < 5)
	(up-compare-goal gl-enemy-eagle-count < 5)
	(up-compare-goal gl-enemy-cataphract-count < 5)
	(goal gl-advanced-archery heavy-archers)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 13)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(goal gl-strategy default)
	(or	(goal gl-advanced-infantry heavy-swordsmen)
		(goal gl-advanced-archery light-archers))
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 44)
	(set-strategic-number sn-gold-gatherer-percentage 16)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(goal gl-strategy default)
	(goal gl-advanced-cavalry heavy-knights)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 43)
	(set-strategic-number sn-gold-gatherer-percentage 17)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(goal gl-strategy default)
	(goal gl-advanced-archery heavy-archers)
	(goal gl-advanced-cavalry heavy-knights)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 39)
	(set-strategic-number sn-gold-gatherer-percentage 23)
)

(defrule
	(goal gl-strategy default)
	(or	(and	(goal gl-current-age gv-feudal-up)
			(and	(gold-amount > 400)
				(wood-amount < 300)))
		(and	(strategic-number sn-age-up-castle == 1)
			(and	(building-type-count-total archery-range == 1)
				(gold-amount >= 150))))
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 3)
	(up-modify-sn sn-wood-gatherer-percentage c:+ 7)
	(up-modify-sn sn-gold-gatherer-percentage c:- 10)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(goal gl-strategy default)
	(wood-amount > 400)
	(gold-amount < 300)
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 1)
	(up-modify-sn sn-wood-gatherer-percentage c:- 8)
	(up-modify-sn sn-gold-gatherer-percentage c:+ 7)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(goal gl-strategy default)
	(or	(and	(unit-type-count-total spearman-line > 5)
			(and	(nand	(gold-amount > 400)
					(wood-amount < 300))
				(up-compare-goal gl-enable-pikemen != 0)))
		(and	(goal gl-advanced-archery light-archers)
			(goal gl-advanced-cavalry LC)))
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 6)
	(up-modify-sn sn-wood-gatherer-percentage c:+ 2)
	(up-modify-sn sn-gold-gatherer-percentage c:- 8)
)

(defrule
	(goal gl-strategy default)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-current-age <= gv-feudal-up)
	(strategic-number sn-gold-gatherer-percentage > 0)
	(up-compare-goal gl-gathered-relics > 1)
	(or	(up-compare-goal gl-gathered-relics > 4)
		(gold-amount > 500))
	(gold-amount > 200)
=>
	(up-modify-goal temporary-goal s:= sn-gold-gatherer-percentage)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(up-modify-goal temporary-goal c:/ 2)
	(up-modify-sn sn-food-gatherer-percentage g:+ temporary-goal)
	(up-modify-sn sn-wood-gatherer-percentage g:+ temporary-goal)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(goal gl-strategy default)
	(strategic-number sn-stone-gatherer-percentage > 0)
=>
	(up-modify-goal temporary-goal s:= sn-food-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-wood-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-gold-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-stone-gatherer-percentage)
	(up-modify-sn sn-food-gatherer-percentage g:%/ temporary-goal)
	(up-modify-sn sn-wood-gatherer-percentage g:%/ temporary-goal)
	(up-modify-sn sn-gold-gatherer-percentage g:%/ temporary-goal)
)

#load-if-not-defined FEUDAL-AGE-END
(defrule
	(or	(up-compare-goal gl-current-age != gv-feudal)
		(or	(up-compare-goal gl-strategy != default)
			(building-type-count-total blacksmith == 0)))
=>
	(up-jump-rule 11)
)

(defrule
	(up-compare-goal gl-feudal-archery != skirmishers)
	(building-type-count-total mining-camp > 0)
	(strategic-number sn-food-gatherer-percentage == 54)
	(strategic-number sn-gold-gatherer-percentage == 8)
	(food-amount > 250)
	(gold-amount < 200)
=>
	(set-strategic-number sn-food-gatherer-percentage 51)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(or	(goal TSA 0)
		(game-time > 1110))
	(up-compare-goal gl-patrol-defence != patrol-on)
	(game-time > 920)
	(building-type-count archery-range > 1)
	(building-type-count-total blacksmith > 0)
	(unit-type-count archery-class > 13)
	(or	(up-compare-goal gl-military-percentage > 90)
		(up-compare-goal gl-target-player-distance > 90))
	(up-compare-goal gl-military-percentage > 70)
	(research-available castle-age)
	(strategic-number sn-age-up-castle == 0)
=>
	(set-strategic-number sn-age-up-castle 2)
)

(defrule
	(up-compare-goal gl-military-percentage < 80)
	(strategic-number sn-age-up-castle == 2)
=>
	(set-strategic-number sn-age-up-castle 0)
)

(defrule
	(goal TSA 0)
	(military-population > 4)
	(or	(and	(goal gl-enemy-strategy MONK-RUSH)
			(or	(up-compare-goal gl-enemy-scorpion-count > 0)
				(or	(up-compare-goal gl-enemy-onager-count > 0)
					(military-population > 20))))
		(and	(players-building-type-count target-player watch-tower > 1)
			(player-human target-player)))
	(research-available castle-age)
=>
	(set-strategic-number sn-age-up-castle 1)
)

(defrule
	(goal TSA 0)
	(or	(and	(military-population > 20)
			(goal gl-enemy-strategy UP-TO-CASTLE))
		(or	(and	(players-building-type-count target-player watch-tower > 1)
				(and	(research-available castle-age)
					(up-compare-goal gl-target-player-distance < 30)))
			(and	(players-building-type-count target-player castle > 0)
				(up-projectile-detected projectile-castle < 6000000))))
=>
	(set-strategic-number sn-age-up-castle 1)
)

(defrule
	(military-population > 3)
	(or	(military-population > 6)
		(and	(players-military-population focus-player < 3)
			(up-compare-goal gl-enemy-wall-count-total > 9)))
	(or	(players-building-type-count target-player stone-wall-line > 2)
		(or	(and	(up-compare-goal gl-enemy-tower-count > 2)
				(up-projectile-detected projectile-watch-tower < 5000000))
			(up-compare-goal gl-enemy-wall-count-total > 5)))
	(research-available castle-age)
=>
	(set-strategic-number sn-age-up-castle 1)
)

(defrule
	(game-time > 1100)
	(or	(up-compare-const gv-players-in-team >= 2)
		(player-human target-player))
	(military-population > 15)
	(or	(up-compare-goal gl-military-percentage > 90)
		(up-compare-goal gl-target-player-distance > 90))
	(up-compare-goal gl-military-percentage > 70)
	(up-compare-goal threat-time > 10000)
	(building-type-count-total archery-range > 0)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-age-up-castle 1)
)

(defrule
	(game-time > 1200)
	(or	(goal MILITARY 0)
		(game-time > 1300))
	(or	(players-military-population focus-player < 24)
		(and	(military-population > 25)
			(or	(players-military-population focus-player < 30)
				(military-population g:> gl-toughest-fought-enemy-military))))
	(military-population > 17)
	(up-compare-goal threat-time > 10000)
	(building-type-count-total archery-range > 0)
=>
	(set-strategic-number sn-age-up-castle 1)
)

(defrule
	(military-population > 10)
	(or	(and	(military-population > 18)
			(food-amount > 400))
		(or	(and	(up-compare-const gv-grouped-by-team == 1)
				(and	(up-players-in-game any >= preferred-player-number)
					(and	(up-players-in-game ally >= 2)
						(building-type-count-total blacksmith > 0))))
			(players-population target-player < 27)))
	(building-type-count-total archery-range > 0)
=>
	(set-strategic-number sn-age-up-castle 1)
)

(defrule
	(or	(and	(military-population > 14)
			(players-military-population focus-player < 7))
		(and	(building-type-count watch-tower > 2)
			(goal gl-tower-defence 1)))
	(game-time > 1140)
	(or	(players-building-type-count target-player watch-tower != 1)
		(or	(goal TSA 0)
			(or	(players-civilian-population target-player > 39)
				(game-time > 1320))))
=>
	(set-strategic-number sn-age-up-castle 1)
)

(defrule
	(soldier-count > 8)
	(or	(goal MILITARY 0)
		(game-time > 1560))
	(or	(food-amount > 400)
		(military-population > 18))
	(game-time > 1140)
	(or	(players-military-population focus-player < 24)
		(or	(military-population g:> gl-toughest-fought-enemy-military)
			(up-compare-goal gl-target-player-distance > 90)))
	(building-type-count-total archery-range > 0)
=>
	(set-strategic-number sn-age-up-castle 1)
)
#else
(defrule
	(game-time > 1330)
	(current-age == feudal-age)
	(food-amount < 200)
	(wood-amount < 200)
	(gold-amount < 200)
	(building-type-count-total archery-range > 0)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 39)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 21)
)

(defrule
	(game-time > 1330)
	(current-age == feudal-age)
	(food-amount > 300)
	(wood-amount < 200)
	(gold-amount < 200)
	(building-type-count-total archery-range > 0)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 27)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 25)
)

(defrule
	(game-time > 1330)
	(current-age == feudal-age)
	(food-amount < 200)
	(wood-amount > 300)
	(gold-amount < 200)
	(building-type-count-total archery-range > 0)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 20)
)

(defrule
	(game-time > 1330)
	(current-age == feudal-age)
	(food-amount < 200)
	(wood-amount < 200)
	(gold-amount > 300)
	(building-type-count-total archery-range > 0)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 5)
)

(defrule
	(game-time > 1330)
	(current-age == feudal-age)
	(food-amount > 300)
	(wood-amount > 300)
	(gold-amount < 200)
	(building-type-count-total archery-range > 0)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 35)
)

(defrule
	(game-time > 1330)
	(current-age == feudal-age)
	(food-amount < 200)
	(wood-amount > 300)
	(gold-amount > 300)
	(building-type-count-total archery-range > 0)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 55)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 5)
)

(defrule
	(game-time > 1330)
	(current-age == feudal-age)
	(food-amount > 300)
	(wood-amount < 200)
	(gold-amount > 300)
	(building-type-count-total archery-range > 0)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 55)
	(set-strategic-number sn-gold-gatherer-percentage 5)
)
#end-if

(defrule
	(goal gl-strategy default)
	(goal gl-fixed-eco-balancing NO)
	(goal gl-current-age gv-feudal-up)
	(wood-amount < 350)
	(timer-triggered 3)
=>
	(up-modify-goal gl-wood-gp-points c:+ 20)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(and	(goal gl-current-age gv-feudal-up)
			(up-compare-goal gl-strategy != castle-drop))
		(starting-age >= castle-age))
	(goal gl-strategy-class basic-class)
	(not	(goal CASTLE 0))
	(building-type-count-total castle == 0)
	(stone-amount < castle-stone)
=>
	(set-strategic-number sn-stone-gatherer-percentage 16)
	(disable-self)
)

(defrule
	(nand	(not	(goal CASTLE 0))
		(building-type-count-total castle < 3))
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(stone-amount > 800)
=>
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(and	(up-compare-goal CASTLE != 0)
			(stone-amount > 800))
		(or	(and	(building-type-count-total castle > 0)
				(goal gl-strategy-class basic-class))
			(and	(game-time > 3000)
				(and	(stone-amount < castle-stone)
					(strategic-number sn-stone-gatherer-percentage < 4)))))
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
=>
	(set-strategic-number sn-stone-gatherer-percentage 4)
)

(defrule
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(and	(or	(stone-amount >= 200)
				(or	(building-type-count-total town-center >= 3)
					(and	(stone-amount >= 100)
						(building-type-count-total town-center >= 2))))
			(strategic-number sn-stone-gatherer-percentage == 10))
		(and	(building-available bombard-tower)
			(up-compare-goal gl-trade-unit-count-total > 35)))
=>
	(set-strategic-number sn-stone-gatherer-percentage 6)
)

(defrule
	(goal gl-strategy castle-drop)
	(civilian-population < 50)
	(game-time < 1500)
	(population < almost-full-pop)
	(or	(building-type-count-total town-center > 2)
		(or	(and	(stone-amount >= 100)
				(building-type-count-total town-center > 1))
			(stone-amount >= 200)))
	(building-type-count castle > 0)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(and	(up-compare-goal CASTLE != 0)
			(building-type-count-total castle < 3))
		(or	(goal gl-wonder-build-attempt-stage saving-resources)
			(and	(or	(up-compare-goal gl-my-villager-count > 60)
					(population > almost-full-pop))
				(and	(up-compare-const gv-maximum-age == feudal-age)
					(goal gl-current-age gv-feudal)))))
=>
	(up-modify-sn sn-stone-gatherer-percentage c:max 6)
)

(defrule
	(game-time > 2400)
	(goal gl-strategy default)
	(building-available bombard-tower)
	(up-compare-goal gl-trade-unit-count-total > 25)
=>
	(up-modify-sn sn-stone-gatherer-percentage c:max 6)
)

(defrule
	(or	(goal gl-strategy default)
		(goal gl-strategy castle-drop))
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count-total town-center >= 1)
	(or	(building-type-count-total town-center >= 3)
		(stone-amount >= 100))
	(or	(building-type-count-total town-center >= 2)
		(stone-amount >= 200))
	(population-cap >= 175)
	(civilian-population < 55)
	(building-type-count-total castle > 0)
=>
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

#load-if-defined ISLANDS-MAP
(defrule
	(goal gl-strategy default)
	(up-compare-goal gl-current-age >= gv-castle)
	(stone-amount < castle-stone)
	(game-time > 2300)
	(or	(game-time > 2400)
		(up-compare-goal gl-current-age >= gv-castle-up))
	(strategic-number sn-stone-gatherer-percentage == 0)
=>
	(set-strategic-number sn-stone-gatherer-percentage 6)
)
#end-if

#end-if; Not DM

#load-if-defined DEFEND-WONDER
(defrule
	(building-available bombard-tower)
	(or	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
		(building-type-count-total wonder > 0))
	(civilian-population > 40)
	(strategic-number sn-stone-gatherer-percentage < 10)
=>
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
#end-if

#load-if-not-defined DEATH-MATCH
#load-if-not-defined UP-MICHI-STYLE

#load-if-not-defined SPANISH-CIV
(defrule
	(up-compare-goal gl-strategy != ranged-rush-strategy)
=>
	(up-jump-rule 20)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
=>
	(set-strategic-number sn-food-gatherer-percentage 39)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 21)
)

(defrule
	(building-type-count-total archery-range > 2)
	(up-compare-goal gl-current-age >= gv-feudal-up)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 26)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(goal RAM 1)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: first-main-ranged-unit-upgrade >= research-pending)
	(unit-type-count-total battering-ram-line < 3)
	(wood-amount < 200)
=>
	(set-strategic-number sn-food-gatherer-percentage 22)
	(set-strategic-number sn-wood-gatherer-percentage 46)
	(set-strategic-number sn-gold-gatherer-percentage 34)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(goal RAM 1)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: first-main-ranged-unit-upgrade >= research-pending)
	(unit-type-count-total battering-ram-line < 3)
	(wood-amount >= 300)
=>
	(set-strategic-number sn-food-gatherer-percentage 22)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 41)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-current-age >= gv-castle)
	(or	(up-compare-goal RAM != 1)
		(unit-type-count-total battering-ram-line > 2))
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: first-main-ranged-unit-upgrade >= research-pending)
=>
	(set-strategic-number sn-food-gatherer-percentage 22)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 43)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(goal SLING 3)
=>
	(set-strategic-number sn-food-gatherer-percentage 28)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 37)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(or	(up-compare-goal RAM != 1)
		(unit-type-count-total battering-ram-line > 2))
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: first-main-ranged-unit-upgrade >= research-pending)
	(gold-amount >= 300)
	(wood-amount < 150)
=>
	(set-strategic-number sn-food-gatherer-percentage 22)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 36)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(or	(up-compare-goal RAM != 1)
		(unit-type-count-total battering-ram-line > 2))
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: first-main-ranged-unit-upgrade >= research-pending)
	(gold-amount < 150)
	(wood-amount >= 300)
=>
	(set-strategic-number sn-food-gatherer-percentage 22)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 44)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(or	(goal TC 1)
		(building-type-count-total town-center > 2))
	(or	(up-compare-goal RAM != 1)
		(unit-type-count-total battering-ram-line > 2))
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: first-main-ranged-unit-upgrade >= research-pending)
=>
	(set-strategic-number sn-food-gatherer-percentage 32)
	(set-strategic-number sn-wood-gatherer-percentage 41)
	(set-strategic-number sn-gold-gatherer-percentage 27)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(or	(goal TC 1)
		(building-type-count-total town-center > 2))
	(or	(up-compare-goal RAM != 1)
		(unit-type-count-total battering-ram-line > 2))
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: first-main-ranged-unit-upgrade >= research-pending)
	(gold-amount >= 300)
	(wood-amount < 150)
=>
	(set-strategic-number sn-food-gatherer-percentage 32)
	(set-strategic-number sn-wood-gatherer-percentage 44)
	(set-strategic-number sn-gold-gatherer-percentage 24)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(or	(goal TC 1)
		(building-type-count-total town-center > 2))
	(or	(up-compare-goal RAM != 1)
		(unit-type-count-total battering-ram-line > 2))
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: first-main-ranged-unit-upgrade >= research-pending)
	(gold-amount < 200)
	(wood-amount >= 300)
=>
	(set-strategic-number sn-food-gatherer-percentage 32)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 34)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: first-main-ranged-unit-upgrade >= research-pending)
	(civ-selected mayan)
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 3)
	(up-modify-sn sn-wood-gatherer-percentage c:- 1)
	(up-modify-sn sn-gold-gatherer-percentage c:- 2)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count-total town-center == 2)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: first-main-ranged-unit-upgrade >= research-pending)
	(current-age >= castle-age)
=>
	(set-strategic-number sn-food-gatherer-percentage 28)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(game-time < 2000)
	(not	(civ-selected turkish))
	(map-size tiny)
	(research-available ri-pikeman)
	(up-compare-goal gl-enable-pikemen != 0)
	(goal gl-enemy-strategy KNIGHT-RUSH)
=>
	(set-strategic-number sn-food-gatherer-percentage 46)
	(set-strategic-number sn-wood-gatherer-percentage 41)
	(set-strategic-number sn-gold-gatherer-percentage 13)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(game-time < 2000)
	(map-size tiny)
	(not	(civ-selected turkish))
	(up-compare-goal gl-enable-pikemen != 0)
	(goal gl-enemy-strategy KNIGHT-RUSH)
=>
	(set-strategic-number sn-food-gatherer-percentage 43)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 17)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(game-time < 2000)
	(food-amount > 300)
	(map-size tiny)
	(not	(civ-selected turkish))
	(up-compare-goal gl-enable-pikemen != 0)
	(goal gl-enemy-strategy KNIGHT-RUSH)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 23)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(game-time < 2000)
	(map-size tiny)
	(civ-selected turkish)
	(building-type-count-total stable > 0)
	(or	(up-compare-goal gl-enemy-cavalry-count > 6)
		(or	(up-compare-goal gl-enemy-heavy-cavalry-count > 3)
			(goal gl-enemy-strategy KNIGHT-RUSH)))
=>
	(set-strategic-number sn-food-gatherer-percentage 43)
	(set-strategic-number sn-wood-gatherer-percentage 31)
	(set-strategic-number sn-gold-gatherer-percentage 26)
)

(defrule
	(goal gl-current-age gv-castle)
	(building-type-count town-center > 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 36)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 30)
)

(defrule
	(goal gl-current-age gv-castle)
	(building-type-count-total town-center > 2)
	(civilian-population > 75)
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 32)
	(set-strategic-number sn-gold-gatherer-percentage 27)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
=>
	(up-modify-goal temporary-goal s:= sn-food-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-wood-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-gold-gatherer-percentage)
	(up-modify-goal temporary-goal s:+ sn-stone-gatherer-percentage)
	(up-modify-sn sn-food-gatherer-percentage g:%/ temporary-goal)
	(up-modify-sn sn-wood-gatherer-percentage g:%/ temporary-goal)
	(up-modify-sn sn-gold-gatherer-percentage g:%/ temporary-goal)
)

#end-if

#load-if-defined TURKISH-CIV
#load-if-not-defined ARENA-MAP
(defrule
	(up-compare-goal gl-strategy != turkish-fast-imp)
=>
	(up-jump-rule 8)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-current-age <= gv-castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 21)
	(set-strategic-number sn-enemy-flush-notice 0)
	(set-strategic-number sn-stone-dropsite-distance 50)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(building-type-count-total archery-range < 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 34)
	(set-strategic-number sn-wood-gatherer-percentage 52)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(building-type-count-total archery-range > 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 46)
	(set-strategic-number sn-wood-gatherer-percentage 36)
	(set-strategic-number sn-gold-gatherer-percentage 18)
)

(defrule
	(goal gl-current-age gv-imperial)
	(goal RAM 0)
	(unit-type-count-total scout-cavalry-line < 4)
	(building-type-count-total mining-camp > 1)
	(building-type-count-total archery-range > 2)
	(strategic-number sn-wood-gatherer-percentage != 25)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 24)
	(set-strategic-number sn-gold-gatherer-percentage 31)
)

(defrule
	(goal gl-current-age gv-imperial)
	(goal RAM 0)
	(unit-type-count-total scout-cavalry-line > 3)
	(building-type-count-total mining-camp > 1)
	(building-type-count-total archery-range > 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-gold-gatherer-percentage 28)
)

(defrule
	(goal gl-current-age gv-imperial)
	(goal RAM 1)
	(building-type-count-total mining-camp > 1)
	(building-type-count-total archery-range > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 39)
	(set-strategic-number sn-gold-gatherer-percentage 21)
)

(defrule
	(or	(and	(goal gl-current-age gv-imperial)
			(game-time > 2200))
		(and	(up-compare-goal gl-current-age >= gv-castle-up)
			(player-valid 3)))
	(building-type-count-total town-center < 3)
=>
	(set-strategic-number sn-stone-gatherer-percentage 5)
	(set-strategic-number sn-stone-dropsite-distance 3)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-goal TC 1)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(up-compare-goal gl-gathered-relics > 0)
=>
	(up-modify-sn sn-gold-gatherer-percentage g:- gl-gathered-relics)
)
#end-if
#end-if

#load-if-defined HUN-CIV
(defrule
	(or	(up-compare-goal gl-strategy != CA-boom)
		(or	(not	(goal gl-fixed-eco-balancing YES))
			(up-compare-goal gl-current-age < gv-feudal-up)))
=>
	(up-jump-rule 13)
)

(defrule
	(current-age == feudal-age)
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 19)
)

(defrule
	(current-age == castle-age)
	(current-age-time < 240)
=>
	(set-strategic-number sn-food-gatherer-percentage 34)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 24)
)

(defrule
	(current-age == feudal-age)
	(goal POSITION POCKET)
	(or	(up-compare-goal gl-rush-suitability-on-map <= AVERAGE)
		(or	(and	(goal gl-enemy-strategy KNIGHT-RUSH)
				(building-type-count-total archery-range < 2))
			(players-building-type-count target-player stone-wall-line > 4)))
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 10)
)

(defrule
	(current-age == castle-age)
	(current-age-time < 240)
	(goal POSITION POCKET)
	(or	(up-compare-goal gl-rush-suitability-on-map <= AVERAGE)
		(or	(and	(goal gl-enemy-strategy KNIGHT-RUSH)
				(building-type-count-total archery-range < 2))
			(players-building-type-count target-player stone-wall-line > 4)))
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(current-age == castle-age)
	(current-age-time >= 240)
	(current-age-time < 600)
	(building-type-count-total town-center == 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 32)
	(set-strategic-number sn-wood-gatherer-percentage 47)
	(set-strategic-number sn-gold-gatherer-percentage 21)
)

(defrule
	(current-age == castle-age)
	(current-age-time >= 240)
	(current-age-time < 600)
	(building-type-count-total town-center == 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 21)
)

(defrule
	(current-age == castle-age)
	(current-age-time >= 240)
	(current-age-time < 600)
	(building-type-count-total town-center > 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 39)
	(set-strategic-number sn-gold-gatherer-percentage 21)
)

(defrule
	(current-age == castle-age)
	(current-age-time >= 240)
	(current-age-time < 600)
	(building-type-count-total town-center == 1)
	(or	(up-compare-goal gl-rush-suitability-on-map <= AVERAGE)
		(or	(and	(goal gl-enemy-strategy KNIGHT-RUSH)
				(building-type-count-total archery-range < 2))
			(players-building-type-count target-player stone-wall-line > 4)))
	(goal POSITION POCKET)
=>
	(set-strategic-number sn-food-gatherer-percentage 32)
	(set-strategic-number sn-wood-gatherer-percentage 54)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(current-age == castle-age)
	(current-age-time >= 240)
	(current-age-time < 600)
	(building-type-count-total town-center == 2)
	(or	(up-compare-goal gl-rush-suitability-on-map <= AVERAGE)
		(or	(and	(goal gl-enemy-strategy KNIGHT-RUSH)
				(building-type-count-total archery-range < 2))
			(players-building-type-count target-player stone-wall-line > 4)))
	(goal POSITION POCKET)
=>
	(set-strategic-number sn-food-gatherer-percentage 36)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(current-age == castle-age)
	(current-age-time < 300)
	(building-type-count-total town-center > 2)
	(or	(up-compare-goal gl-rush-suitability-on-map <= AVERAGE)
		(or	(and	(goal gl-enemy-strategy KNIGHT-RUSH)
				(building-type-count-total archery-range < 2))
			(players-building-type-count target-player stone-wall-line > 4)))
	(goal POSITION POCKET)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 39)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(current-age == castle-age)
	(current-age-time >= 300)
	(current-age-time < 600)
	(building-type-count-total town-center > 2)
	(or	(up-compare-goal gl-rush-suitability-on-map <= AVERAGE)
		(or	(and	(goal gl-enemy-strategy KNIGHT-RUSH)
				(building-type-count-total archery-range < 2))
			(players-building-type-count target-player stone-wall-line > 4)))
	(goal POSITION POCKET)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 41)
	(set-strategic-number sn-gold-gatherer-percentage 15)
)

(defrule
	(up-compare-goal gl-enable-pikemen >= 1)
	(or	(players-building-type-count target-player stable > 1)
		(or	(and	(map-size tiny)
				(goal gl-enemy-strategy KNIGHT-RUSH))
			(up-compare-goal gl-enemy-heavy-cavalry-count > 1)))
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 6)
	(up-modify-sn sn-gold-gatherer-percentage c:- 6)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(current-age >= castle-age)
		(gold-amount > 800))
	(or	(current-age-time > 600)
		(or	(up-compare-goal gl-current-age >= gv-castle-up)
			(or	(not	(goal DOCK 0))
				(gold-amount > 450))))
=>
	(set-goal gl-fixed-eco-balancing NO)
)

(defrule
	(or	(up-compare-goal gl-current-age >= gv-castle-up)
		(or	(game-time > 2400)
			(and	(up-compare-goal SLING != 0)
				(and	(building-type-count-total town-center > 2)
					(up-compare-goal gl-military-percentage > 160)))))
	(goal gl-strategy CA-boom)
=>
	(set-goal gl-strategy default)
)
#else
#load-if-not-defined SPANISH-CIV
(defrule
	(or	(up-compare-goal gl-strategy != xbow-boom)
		(or	(not	(goal gl-fixed-eco-balancing YES))
			(up-compare-goal gl-current-age < gv-feudal-up)))
=>
	(up-jump-rule 16)
)

(defrule
	(current-age == feudal-age)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 18)
)

(defrule
	(current-age == castle-age)
	(current-age-time < 120)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 43)
	(set-strategic-number sn-gold-gatherer-percentage 22)
)

(defrule
	(current-age == castle-age)
	(current-age-time >= 120)
	(current-age-time < 240)
=>
	(set-strategic-number sn-food-gatherer-percentage 32)
	(set-strategic-number sn-wood-gatherer-percentage 47)
	(set-strategic-number sn-gold-gatherer-percentage 21)
)

(defrule
	(current-age == castle-age)
	(current-age-time >= 240)
	(current-age-time < 600)
	(building-type-count-total town-center == 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 20)
)

(defrule
	(current-age == castle-age)
	(building-type-count-total town-center == 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 20)
)

(defrule
	(current-age == castle-age)
	(or	(building-type-count-total town-center > 2)
		(and	(up-research-status c: ri-bodkin-arrow <= research-available)
			(and	(food-amount < 200)
				(goal POSITION FLANK))))
	(current-age-time < 600)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 21)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(goal POSITION POCKET)
=>
	(set-strategic-number sn-food-gatherer-percentage 36)
	(set-strategic-number sn-wood-gatherer-percentage 51)
	(set-strategic-number sn-gold-gatherer-percentage 13)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(goal POSITION POCKET)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 46)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(current-age-time >= 240)
	(building-type-count-total town-center == 1)
	(goal POSITION POCKET)
=>
	(set-strategic-number sn-food-gatherer-percentage 32)
	(set-strategic-number sn-wood-gatherer-percentage 56)
	(set-strategic-number sn-gold-gatherer-percentage 12)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(current-age-time >= 240)
	(building-type-count-total town-center == 2)
	(goal POSITION POCKET)
=>
	(set-strategic-number sn-food-gatherer-percentage 34)
	(set-strategic-number sn-wood-gatherer-percentage 52)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count-total town-center > 2)
	(goal POSITION POCKET)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 41)
	(set-strategic-number sn-gold-gatherer-percentage 12)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(civilian-population > 55)
	(building-type-count-total town-center > 2)
	(goal POSITION POCKET)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 44)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(up-compare-goal gl-enable-pikemen >= 1)
	(or	(players-building-type-count target-player stable > 1)
		(or	(and	(map-size tiny)
				(goal gl-enemy-strategy KNIGHT-RUSH))
			(up-compare-goal gl-enemy-heavy-cavalry-count > 1)))
	(not	(civ-selected turkish))
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 8)
	(up-modify-sn sn-wood-gatherer-percentage c:- 3)
	(up-modify-sn sn-gold-gatherer-percentage c:- 5)
	(up-jump-rule 2)
)

(defrule
	(goal POSITION POCKET)
	(goal gl-rush-suitability-on-map GOOD)
	(players-building-type-count target-player stone-wall-line < 5)
	(or	(up-research-status c: ri-crossbow < research-pending)
		(or	(up-research-status c: ri-wheel-barrow < research-pending)
			(up-research-status c: ri-bow-saw < research-pending)))
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 7)
	(up-modify-sn sn-wood-gatherer-percentage c:- 2)
	(up-modify-sn sn-gold-gatherer-percentage c:- 5)
	(up-jump-rule 2)
)

(defrule
	(goal POSITION POCKET)
	(goal gl-rush-suitability-on-map GOOD)
	(civilian-population > 55)
	(or	(building-type-count-total archery-range < 2)
		(civilian-population > 70))
	(building-type-count-total archery-range < 3)
	(players-building-type-count target-player stone-wall-line < 5)
	(building-type-count-total town-center > 2)
	(up-research-status c: ri-crossbow >= research-pending)
	(up-research-status c: ri-wheel-barrow >= research-pending)
	(up-research-status c: ri-bow-saw >= research-pending)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
=>
	(up-modify-sn sn-wood-gatherer-percentage c:+ 7)
	(up-modify-sn sn-gold-gatherer-percentage c:- 7)
)

(defrule
	(goal POSITION POCKET)
	(or	(up-research-status c: ri-crossbow < research-pending)
		(or	(up-research-status c: ri-wheel-barrow < research-pending)
			(up-research-status c: ri-bow-saw < research-pending)))
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 5)
	(up-modify-sn sn-wood-gatherer-percentage c:+ 1)
	(up-modify-sn sn-gold-gatherer-percentage c:- 6)
)

(defrule
	(goal gl-strategy xbow-boom)
	(or	(current-age >= castle-age)
		(gold-amount > 800))
	(or	(current-age-time > 600)
		(or	(up-compare-goal gl-current-age >= gv-castle-up)
			(or	(up-compare-goal DOCK != 0)
				(or	(gold-amount > 300)
					(and	(wood-amount > 400)
						(current-age-time > 30))))))
=>
	(set-goal gl-fixed-eco-balancing NO)
)

(defrule
	(or	(up-compare-goal gl-current-age >= gv-castle-up)
		(or	(game-time > 2400)
			(and	(up-compare-goal SLING != 0)
				(and	(building-type-count-total town-center > 2)
					(up-compare-goal gl-military-percentage > 160)))))
	(goal gl-strategy xbow-boom)
=>
	(set-goal gl-strategy default)
)
#end-if
#end-if

#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(or	(up-compare-goal gl-strategy != krush)
		(or	(up-compare-goal gl-current-age < gv-feudal-up)
			(not	(goal gl-fixed-eco-balancing YES))))
=>
	(up-jump-rule 12)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
=>
	(set-strategic-number sn-food-gatherer-percentage 39)
	(set-strategic-number sn-wood-gatherer-percentage 55)
	(set-strategic-number sn-gold-gatherer-percentage 6)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 43)
	(set-strategic-number sn-wood-gatherer-percentage 51)
	(set-strategic-number sn-gold-gatherer-percentage 6)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal POSITION != POCKET)
=>
	(set-strategic-number sn-food-gatherer-percentage 39)
	(set-strategic-number sn-wood-gatherer-percentage 47)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(up-compare-goal POSITION != POCKET)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 41)
	(set-strategic-number sn-gold-gatherer-percentage 15)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(current-age-time >= 240)
	(building-type-count-total town-center < 3)
	(up-compare-goal POSITION != POCKET)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 49)
	(set-strategic-number sn-gold-gatherer-percentage 11)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(building-type-count-total town-center > 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 52)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 8)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(building-type-count-total town-center > 2)
	(civilian-population > 50)
=>
	(set-strategic-number sn-food-gatherer-percentage 52)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 11)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(building-type-count-total town-center > 2)
	(civilian-population > 65)
=>
	(set-strategic-number sn-food-gatherer-percentage 51)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 16)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(building-type-count-total town-center > 2)
	(civilian-population > 80)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 28)
	(set-strategic-number sn-gold-gatherer-percentage 25)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(building-type-count-total town-center > 2)
	(civilian-population > 100)
=>
	(set-strategic-number sn-food-gatherer-percentage 43)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 31)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-enable-pikemen >= 1)
	(or	(players-building-type-count target-player stable > 1)
		(or	(and	(map-size tiny)
				(goal gl-enemy-strategy KNIGHT-RUSH))
			(up-compare-goal gl-enemy-heavy-cavalry-count > 1)))
=>
	(up-modify-sn sn-food-gatherer-percentage c:- 1)
	(up-modify-sn sn-wood-gatherer-percentage c:+ 2)
	(up-modify-sn sn-gold-gatherer-percentage c:- 1)
)

(defrule
	(or	(up-compare-goal gl-current-age >= gv-castle)
		(gold-amount > 800))
	(or	(current-age-time > 750)
		(or	(up-compare-goal DOCK != 0)
			(and	(or	(gold-amount > 400)
					(or	(food-amount > 400)
						(wood-amount > 400)))
				(current-age-time > 10))))
=>
	(set-goal gl-fixed-eco-balancing NO)
)

(defrule
	(goal gl-strategy krush)
	(or	(up-compare-goal gl-current-age >= gv-castle-up)
		(or	(game-time > 2400)
			(and	(up-compare-const dm-pala-in-tech-tree == 0)
				(game-time > 2160))))
=>
	(set-goal gl-strategy default)
)
#end-if
#end-if

(defrule
	(goal gl-strategy-class basic-class)
	(up-compare-const gv-defend-wonder == 0)
	(building-type-count-total castle > 0)
	(or	(strategic-number sn-stone-gatherer-percentage == 10)
		(building-type-count-total castle > 2))
=>
	(up-modify-sn sn-stone-gatherer-percentage c:min 5)
)

(defrule
	(up-compare-goal CASTLE != 0)
	(or	(and	(up-compare-goal gl-strategy != castle-drop)
			(building-type-count-total castle < 1))
		(goal SLING 3))
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count-total castle < 2)
=>
	(up-modify-sn sn-stone-gatherer-percentage c:max 8)
)

#load-if-defined MAYAN-CIV
(defrule
	(goal SLING 3)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(population-cap >= 150)
=>
	(up-modify-sn sn-stone-gatherer-percentage c:max 13)
)
#end-if

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(goal TC 1)
	(building-type-count-total town-center < preferred-TC-number)
	(building-type-count-total town-center < 3)
	(or	(stone-amount < 100)
		(building-type-count-total town-center < 2))
	(stone-amount < 200)
	(strategic-number sn-stone-gatherer-percentage == 0)
=>
	(set-strategic-number sn-stone-gatherer-percentage 5)
)

#load-if-not-defined HUN-CIV
(defrule
	(up-compare-goal gl-strategy != castle-drop)
=>
	(up-jump-rule 6)
)

(defrule
	(goal gl-strategy castle-drop)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(population-cap >= 150)
	(building-type-count-total town-center < 3)
	(or	(stone-amount < 100)
		(building-type-count-total town-center < 2))
	(stone-amount < 200)
=>
	(up-modify-sn sn-stone-gatherer-percentage c:max 10)
)

(defrule
	(goal gl-strategy castle-drop)
	(goal gl-current-age gv-feudal)
	(building-type-count-total castle == 0)
	(strategic-number sn-stone-gatherer-percentage < 5)
=>
	(set-strategic-number sn-stone-gatherer-percentage 5)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(goal CASTLE 2)
	(building-type-count-total castle == 0)
	(dropsite-min-distance stone < 5)
	(strategic-number sn-stone-gatherer-percentage != fc-castle-drop-stone-gp)
	(strategic-number sn-stone-gatherer-percentage != castle-drop-stone-gp)
=>
	(set-strategic-number sn-food-gatherer-percentage fc-castle-drop-food-gp)
	(set-strategic-number sn-wood-gatherer-percentage fc-castle-drop-wood-gp)
	(set-strategic-number sn-gold-gatherer-percentage fc-castle-drop-gold-gp)
	(set-strategic-number sn-stone-gatherer-percentage fc-castle-drop-stone-gp)
)


(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(goal CASTLE 2)
	(or	(building-type-count-total castle > 0)
		(stone-amount >= castle-stone))
=>
	(set-strategic-number sn-food-gatherer-percentage castle-drop-food-gp)
	(set-strategic-number sn-wood-gatherer-percentage castle-drop-wood-gp)
	(set-strategic-number sn-gold-gatherer-percentage castle-drop-gold-gp)
	(set-strategic-number sn-stone-gatherer-percentage castle-drop-stone-gp)
	(disable-self)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(goal CASTLE 2)
	(building-type-count-total castle > 0)
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 5)
	(up-modify-sn sn-wood-gatherer-percentage c:- 5)
	(disable-self)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(current-age >= castle-age)
	(or	(current-age-time > 300)
		(or	(up-compare-goal gl-my-villager-count-total > 80)
			(or	(building-type-count-total town-center > 2)
				(or	(up-compare-goal DOCK != 0)
					(and	(food-amount > 300)
						(current-age-time > 10))))))
=>
	(set-goal gl-fixed-eco-balancing NO)
)
#end-if

#else
(defrule
	(up-compare-goal gl-strategy != michi-boom)
=>
	(up-jump-rule 15)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-current-age <= gv-feudal)
=>
	(set-strategic-number sn-food-gatherer-percentage 56)
	(set-strategic-number sn-wood-gatherer-percentage 29)
	(set-strategic-number sn-gold-gatherer-percentage 15)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-current-age <= gv-feudal)
	(gold-amount >= 200)
=>
	(set-strategic-number sn-food-gatherer-percentage 56)
	(set-strategic-number sn-wood-gatherer-percentage 44)
	(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
	(up-compare-goal gl-current-age <= gv-feudal)
	(gold-amount >= 200)
	(or	(strategic-number sn-gold-gatherer-percentage != 0)
		(unit-type-count villager-gold > 0))
=>
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(up-retask-gatherers gold c: 4)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 63)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-enable-training-queue 1)
)

(defrule
	(current-age-time <= 120)
	(or	(building-type-count-total town-center > 2)
		(stone-amount < 100))
	(up-compare-goal gl-current-age >= gv-castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 58)
	(set-strategic-number sn-wood-gatherer-percentage 36)
	(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
	(current-age-time > 120)
	(up-compare-goal gl-current-age >= gv-castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 52)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
	(current-age-time > 120)
	(building-type-count-total town-center < michi-TCs)
	(stone-amount >= 100)
	(up-compare-goal gl-current-age >= gv-castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 49)
	(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
	(up-compare-goal gl-my-villager-count-total > 75)
	(or	(up-compare-goal gl-my-villager-count-total > 80)
		(players-building-type-count any-ally market > 0))
	(building-type-count-total town-center >= michi-TCs)
	(up-compare-goal gl-current-age >= gv-castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 13)
)

(defrule
	(current-age-time > 410)
	(building-type-count-total town-center >= michi-TCs)
	(or	(and	(building-type-count-total monastery > 0)
			(building-type-count-total siege-workshop > 0))
		(building-type-count-total castle > 0))
	(up-compare-goal gl-current-age >= gv-castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-gold-gatherer-percentage 25)
)

(defrule
	(up-compare-goal gl-my-villager-count-total > 70)
	(building-type-count-total town-center >= michi-TCs)
	(players-building-type-count any-ally market > 0)
	(up-compare-goal gl-current-age >= gv-castle)
=>
	(up-modify-sn sn-food-gatherer-percentage c:- 3)
	(up-modify-sn sn-wood-gatherer-percentage c:+ 2)
	(up-modify-sn sn-gold-gatherer-percentage c:+ 1)
)

(defrule
	(up-compare-const wood-bonus-civ == 1)
	(up-compare-goal gl-current-age >= gv-castle)
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 3)
	(up-modify-sn sn-wood-gatherer-percentage c:- 3)
)

(defrule
	(civilian-population > 40)
	(or	(unit-type-count villager-forager > 1)
		(unit-type-count villager-hunter > 1))
	(up-compare-goal gl-current-age >= gv-castle)
=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 2)
	(up-modify-sn sn-wood-gatherer-percentage c:- 2)
)

(defrule
	(current-age-time > 510)
	(building-type-count-total town-center >= michi-TCs)
	(or	(and	(building-type-count-total monastery > 0)
			(building-type-count-total siege-workshop > 0))
		(building-type-count-total castle > 0))
	(up-compare-goal gl-current-age >= gv-castle)
	(or	(gold-amount > 550)
		(civ-selected byzantine))
	(gold-amount > 350)
	(food-amount < needed-castle-food)
=>
	(up-modify-sn sn-gold-gatherer-percentage c:min 11)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(and	(up-compare-goal gl-current-age >= gv-castle)
			(or	(building-type-count-total town-center > 2)
				(stone-amount < 100)))
		(civ-selected briton))
=>
	(set-strategic-number sn-stone-gatherer-percentage 6)
	(disable-self)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
=>
	(set-goal gl-strategy default)
	(set-strategic-number sn-enable-training-queue 0)
)
#end-if

#end-if; DM

; ============ WONDER RACE

#load-if-defined WONDER-RACE
(defrule
	(or	(and	(goal gl-current-age gv-dark)
			(and	(up-compare-goal gl-my-villager-count-total < wonder-dark-villagers)
				(starting-resources == low-resources)))
		(or	(and	(current-age == imperial-age)
				(up-compare-goal gl-my-villager-count-total < 40))
			(current-age-time < 35)))
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(or	(up-compare-goal gl-strategy != wonder-race-fi)
		(strategic-number sn-allow-resource-spending != -1))
=>
	(set-goal gl-strategy wonder-race-fi)
	(set-goal gl-strategy-type FC)
	(set-strategic-number sn-allow-resource-spending -1)
	(set-goal POSITION POCKET)
	(set-goal gl-FC-type gv-2-villagers)
	(set-goal gl-required-current-age-time gv-2-villager-time)
	(set-strategic-number sn-home-exploration-time 600)
)

; ============= WONDER RACE BUILDINGS

#load-if-not-defined IMPERIAL-AGE-START
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(goal gl-current-age gv-dark)
	(or	(goal DOCK 0)
		(and	(building-type-count-total farm < 1)
			(and	(building-type-count-total dock > 1)
				(unit-type-count-total fishing-ship > 8))))
	(or	(building-type-count-total farm < 11)
		(building-type-count-total farm g:< gl-max-farm-count))
	(goal gl-resources-on-map regular)
	(building-type-count-total lumber-camp >= 1)
=>
	(set-goal gl-farming 1)
)

(defrule
	(up-compare-goal gl-current-age > gv-dark-up)
	(or	(up-compare-goal gl-current-age <= gv-feudal)
		(food-amount >= 1300))
	(building-type-count-total market < 1)
	(can-build-with-escrow market)
=>
	(release-escrow wood)
	(up-modify-sn sn-placement-zone-size c:= 10)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: market)
)

(defrule
	(up-compare-goal gl-current-age > gv-dark-up)
	(up-compare-goal gl-current-age <= gv-castle)
	(building-type-count-total market > 0)
	(building-type-count-total blacksmith < 1)
	(building-type-count-total siege-workshop < 1)
	(can-build-with-escrow blacksmith)
=>
	(release-escrow wood)
	(set-strategic-number sn-placement-zone-size 7)
	(up-set-placement-data my-player-number lumber-camp c: 2)
	(up-build place-control 0 c: blacksmith)
)

(defrule
	(current-age == castle-age)
	(up-compare-goal gl-current-age == gv-castle)
	(up-compare-goal gl-start-with-castle != YES)
	(or	(building-type-count-total siege-workshop < 1)
		(building-type-count-total monastery < 1))
=>
	(set-escrow-percentage wood 100)
)

(defrule
	(up-compare-goal gl-current-age == gv-castle)
	(current-age == castle-age)
	(up-compare-goal gl-start-with-castle != YES)
	(building-type-count-total monastery < 1)
	(can-build-with-escrow monastery)
=>
	(release-escrow wood)
	(up-modify-sn sn-placement-zone-size c:= 11)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: monastery)
)
#end-if
#end-if
(defrule
	(goal gl-current-age gv-feudal)
	(current-age == feudal-age)
	(goal DOCK 0)
	(building-type-count-total farm < 11)
	(building-type-count-total market > 0)
	(building-type-count-total blacksmith > 0)
=>
	(set-goal gl-farming 1)
)

(defrule
	(goal gl-current-age gv-castle)
	(building-type-count castle == 0)
	(building-type-count-total siege-workshop < 1)
	(can-build-with-escrow siege-workshop)
=>
	(release-escrow wood)
	(up-modify-sn sn-placement-zone-size c:= 12)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: siege-workshop)
)

(defrule
	(building-type-count-total house < 1)
	(up-pending-objects c: house < 1)
	(building-type-count-total town-center > 0)
	(population-headroom > 4)
	(housing-headroom < 5)
	(can-build-with-escrow house)
=>
	(release-escrow wood)
	(up-assign-builders c: house c: 2)
	(up-set-placement-data my-player-number villager-class c: 1)
	(up-build place-control 0 c: house)
)

(defrule
	(or	(and	(game-time < 240)
			(housing-headroom < 5))
		(starting-resources == high-resources))
	(building-type-count-total house < wr-min-houses)
	(up-pending-objects c: house < 1)
	(building-type-count-total town-center > 0)
	(population-headroom > 4)
	(can-build-with-escrow house)
=>
	(release-escrow wood)
	(up-assign-builders c: house c: 1)
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build place-control 0 c: house)
)

(defrule
	(or	(up-compare-goal gl-current-age >= gv-castle-up)
		(starting-age > castle-age))
	(wood-amount < 1000)
	(dropsite-min-distance wood > 5)
	(dropsite-min-distance wood < 255)
	(can-build-with-escrow lumber-camp)
=>
	(release-escrow wood)
	(set-escrow-percentage wood 0)
	(build lumber-camp)
)

(defrule
	(or	(up-compare-goal gl-current-age >= gv-castle-up)
		(starting-age > castle-age))
	(resource-found gold)
	(or	(gold-amount < 1000)
		(and	(gold-amount >= 1000)
			(dropsite-min-distance stone == -1)))
	(dropsite-min-distance gold > 3)
	(dropsite-min-distance gold < 255)
	(can-build-with-escrow mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(release-escrow wood)
	(build mining-camp)
)

(defrule
	(or	(up-compare-goal gl-current-age >= gv-castle-up)
		(starting-age > castle-age))
	(resource-found stone)
	(stone-amount < 1000)
	(dropsite-min-distance stone > 3)
	(dropsite-min-distance stone < 255)
	(can-build-with-escrow mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(release-escrow wood)
	(build mining-camp)
)

(defrule
	(up-compare-goal gl-my-villager-count > 20)
	(up-research-status c: ri-stone-mining >= research-pending)
	(goal gl-current-age gv-castle-up)
=>
	(up-delete-objects c: farm c: 32767)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(current-age == imperial-age)
	(or	(and	(wood-amount > 900)
			(and	(gold-amount > 900)
				(stone-amount > 900)))
		(building-type-count-total wonder > 0))
=>
	(up-delete-objects c: farm c: 32767)
	(up-delete-objects c: monastery c: 32767)
	(up-delete-objects c: siege-workshop c: 32767)
	(up-delete-objects c: barracks c: 32767)
	(up-delete-objects c: blacksmith c: 32767)
)

(defrule
	(current-age == imperial-age)
	(building-type-count-total wonder > 0)
=>
	(set-strategic-number sn-maximum-gold-drop-distance 0)
	(set-strategic-number sn-maximum-wood-drop-distance 0)
	(set-strategic-number sn-maximum-food-drop-distance 0)
	(set-strategic-number sn-maximum-hunt-drop-distance 0)
	(set-strategic-number sn-maximum-stone-drop-distance 0)
	(up-retask-gatherers food c: 10)
	(up-retask-gatherers wood c: 10)
	(up-retask-gatherers gold c: 10)
	(up-retask-gatherers stone c: 10)
	(delete-building market)
)

(defrule
	(current-age == imperial-age)
	(or	(food-amount < 50)
		(or	(up-compare-goal gl-my-villager-count-total > 30)
			(housing-headroom < 1)))
	(building-type-count-total wonder > 0)
=>
	(delete-building town-center)
	(up-delete-objects c: house c: 32767)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(current-age == castle-age)
	(food-amount > 700)
	(current-age-time > 40)
=>
	(set-escrow-percentage food 100)
	(set-goal gl-strategy wonder-race-blocked-vills)
)

(defrule
	(current-age == castle-age)
	(up-compare-goal gl-current-age >= gv-castle-up)
=>
	(release-escrow food)
	(release-escrow wood)
	(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
)

(defrule
	(building-type-count-total wonder < 1)
	(can-build-with-escrow wonder)
=>
	(release-escrow stone)
	(release-escrow wood)
	(release-escrow gold)
	(set-escrow-percentage stone 0)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(up-modify-escrow wood c:= 0)
	(up-modify-escrow gold c:= 0)
	(up-modify-escrow stone c:= 0)
	(up-assign-builders c: wonder c: 45)
	(build wonder)
)

; ============= ECO BALANCING

#load-if-not-defined IMPERIAL-AGE-START
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(goal gl-current-age gv-dark)
	(not	(goal DOCK 0))
	(up-compare-goal gl-my-villager-count-total > 23)
	(food-amount > 460)
	(building-type-count-total town-center == 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 58)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
	(goal gl-current-age gv-dark-up)
=>
	(set-strategic-number sn-food-gatherer-percentage 31)
	(set-strategic-number sn-wood-gatherer-percentage 55)
	(set-strategic-number sn-gold-gatherer-percentage 14)
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
	(food-amount > 600)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-current-age <= gv-feudal)
=>
	(set-strategic-number sn-food-gatherer-percentage 14)
	(set-strategic-number sn-wood-gatherer-percentage 64)
	(set-strategic-number sn-gold-gatherer-percentage 22)
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-current-age <= gv-castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 39)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 34)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-current-age <= gv-castle)
	(or	(wood-amount >= 375)
		(or	(and	(building-type-count-total siege-workshop > 0)
				(building-type-count-total monastery > 0))
			(building-type-count-total castle > 0)))
=>
	(set-strategic-number sn-food-gatherer-percentage 43)
	(set-strategic-number sn-wood-gatherer-percentage 21)
	(set-strategic-number sn-gold-gatherer-percentage 36)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-current-age <= gv-castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 8)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 42)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
	(or	(building-type-count-total castle > 0)
		(and	(building-type-count-total monastery > 0)
			(or	(building-type-count-total siege-workshop > 0)
				(building-type-count-total university > 0))))
	(goal gl-current-age gv-castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 8)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 42)
	(set-strategic-number sn-stone-gatherer-percentage 10)
	(set-goal gl-disable-mining-upgrades disable-stone)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(unit-type-count-total fishing-ship < 5)
	(research-available ri-stone-mining)
	(food-amount < 100)
=>
	(set-strategic-number sn-food-gatherer-percentage 5)
	(set-strategic-number sn-wood-gatherer-percentage 28)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 37)
	(set-goal gl-disable-mining-upgrades NO)
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
=>
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-wood-gatherer-percentage 29)
	(set-strategic-number sn-gold-gatherer-percentage 32)
	(set-strategic-number sn-stone-gatherer-percentage 39)
	(set-strategic-number sn-maximum-food-drop-distance 0)
	(set-strategic-number sn-maximum-hunt-drop-distance 0)
	(set-goal gl-disable-mining-upgrades NO)
)
#end-if
#end-if

#load-if-not-defined DARK-AGE-START
#load-if-not-defined FEUDAL-AGE-START
#load-if-not-defined CASTLE-AGE-START
(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(up-compare-goal gl-my-villager-count-total < 25)
	(starting-resources == low-resources)
=>
	(set-strategic-number sn-food-gatherer-percentage 15)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 29)
	(set-strategic-number sn-stone-gatherer-percentage 19)
	(up-jump-rule 1)
)

(defrule
	(or	(starting-resources != low-resources)
		(up-compare-goal gl-my-villager-count-total >= 25))
=>
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 34)
	(set-strategic-number sn-stone-gatherer-percentage 26)
	(set-strategic-number sn-maximum-food-drop-distance 0)
	(set-goal gl-current-age gv-imperial)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(starting-resources <= medium-resources)
	(up-compare-goal gl-my-villager-count-total < 25)
	(unit-type-count-total fishing-ship < 4)
	(or	(food-amount < 300)
		(up-compare-goal gl-my-villager-count-total < 15))
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 29)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 20)
	(set-strategic-number sn-maximum-food-drop-distance 10)
	(set-strategic-number sn-maximum-hunt-drop-distance 10)
)
#end-if
#end-if
#end-if

(defrule
	(or	(up-compare-goal gl-current-age >= gv-castle-up)
		(starting-age > castle-age))
	(or	(wood-amount > 1000)
		(building-type-count-total wonder > 0))
=>
	(set-strategic-number sn-wood-gatherer-percentage 0)
)

(defrule
	(or	(up-compare-goal gl-current-age >= gv-castle-up)
		(starting-age > castle-age))
	(or	(gold-amount > 1000)
		(building-type-count-total wonder > 0))
=>
	(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
	(or	(up-compare-goal gl-current-age >= gv-castle-up)
		(starting-age > castle-age))
	(or	(stone-amount > 1000)
		(building-type-count-total wonder > 0))
=>
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

; ============= MARKET

(defrule
	(goal gl-current-age gv-castle)
	(gold-amount >= very-high-castle-gold)
	(food-amount < needed-castle-food)
	(can-buy-commodity food)
=>
	(buy-commodity food)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(or	(and	(current-age == castle-age)
			(and	(food-amount >= needed-castle-food)
				(and	(gold-amount < needed-castle-gold)
					(up-compare-goal gl-current-age <= gv-castle))))
		(wood-amount >= 1100))
	(wood-amount >= 150)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
)

(defrule
	(stone-amount >= 900)
	(or	(stone-amount >= 1100)
		(civ-selected incan))
	(can-sell-commodity stone)
=>
	(sell-commodity stone)
)

(defrule
	(or	(and	(goal gl-current-age gv-castle)
			(and	(gold-amount < needed-castle-gold)
				(food-amount >= very-high-castle-food)))
		(and	(up-compare-goal gl-current-age >= gv-castle-up)
			(and	(up-compare-goal gl-my-villager-count-total >= 24)
				(up-research-status c: ri-stone-mining >= research-pending))))
	(can-sell-commodity food)
=>
	(sell-commodity food)
)

(defrule
	(gold-amount >= 1140)
	(wood-amount < 1000)
=>
	(release-escrow gold)
	(buy-commodity wood)
)

(defrule
	(gold-amount >= 1170)
	(stone-amount < 1000)
=>
	(release-escrow gold)
	(buy-commodity stone)
)

; ============== WATER MAP SUPPORT

#load-if-not-defined IMPERIAL-AGE-START
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(cc-players-unit-type-count 0 deep-fish > 20)
	(building-type-count town-center > 0)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock mixed-map-style)
	(chat-to-player my-player-number water-map-chat)
	(set-goal DOCK 1)
	(set-goal gl-normal-milling 0)
	(disable-self)
)

(defrule
	(unit-type-count-total fishing-ship > 0)
=>
	(enable-timer 16 53)
	(set-strategic-number sn-total-number-explorers 2)
	(set-strategic-number sn-number-boat-explore-groups 1)
	(set-strategic-number sn-target-evaluation-damage-capability 12434)
	(disable-self)
)

(defrule
	(unit-type-count-total fishing-ship > 0)
	(strategic-number sn-number-boat-explore-groups != 1)
	(strategic-number sn-target-evaluation-damage-capability == 12434)
=>
	(set-strategic-number sn-total-number-explorers 2)
	(set-strategic-number sn-number-boat-explore-groups 1)
)

(defrule
	(timer-triggered 16)
	(building-type-count-total dock > 0)
	(unit-type-count-total fishing-ship > 0)
=>
	(disable-timer 16)
	(set-strategic-number sn-number-boat-explore-groups 0)
	(set-strategic-number sn-target-evaluation-damage-capability 200)
	(up-reset-scouts)
	(disable-self)
)

(defrule
	(up-compare-goal DOCK != 0)
	(or	(building-type-count-total lumber-camp > 0)
		(wood-amount > 350))
	(or	(building-type-count-total mill > 0)
		(goal gl-normal-milling 0))
	(building-type-count-total dock < 2)
	(or	(unit-type-count-total fishing-ship > 6)
		(building-type-count-total dock < 1))
	(up-compare-goal gl-current-age <= gv-dark-up)
	(can-build dock)
=>
	(build dock)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
;	(building-type-count-total mill > 0)
	(building-type-count-total dock == 0)
	(up-compare-goal gl-my-villager-count-total > 17)
	(up-pending-placement c: dock)
	(wood-amount > 150)
	(game-time < 1200)
=>
	(set-goal DOCK 0)
	(chat-to-player my-player-number "Placing dock has failed")
	(set-strategic-number sn-minimum-water-body-size-for-dock land-map-style); Might be undockable map so play it as so
	(up-reset-placement c: dock)
)

(defrule
;	(up-compare-goal DOCK != 0)
	(up-compare-goal gl-current-age <= gv-feudal)
	(or	(building-type-count-total lumber-camp > 0)
		(wood-amount > 200))
	(or	(building-type-count-total mill > 0)
		(unit-type-count-total fishing-ship < 3))
	(or	(building-type-count-total lumber-camp > 1)
		(unit-type-count-total fishing-ship < 7))
	(or	(unit-type-count-total fishing-ship < 13)
		(wood-amount > 450))
	(unit-type-count-total fishing-ship < 16)
	(can-train fishing-ship)
=>
	(train fishing-ship)
)
#end-if
#end-if

#end-if

#load-if-defined ARENA-MAP
#load-if-defined TURKISH-CIV
(defrule
	(up-compare-goal gl-strategy != turkish-fast-imp)
=>
	(up-jump-rule 12)
)

(defrule
	(or	(and	(goal gl-current-age gv-dark)
			(and	(up-compare-goal gl-my-villager-count-total < wonder-dark-villagers)
				(starting-resources == low-resources)))
		(and	(current-age-time < 45)
			(current-age == castle-age)))
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(unit-type-count-total bombard-cannon < 7)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)

; ============= BUILDINGS

(defrule
	(goal gl-current-age gv-dark)
	(goal DOCK 0)
	(building-type-count-total farm < 19)
	(dropsite-min-distance deer-hunting >= 14)
	(up-compare-goal gl-deer-distance >= 22)
	(building-type-count-total mill < 2)
	(or	(building-type-count-total farm g:< gl-max-farm-count)
		(building-type-count-total farm < 7))
	(building-type-count-total lumber-camp >= 1)
=>
	(set-goal gl-farming 1)
)

; ============= ECO BALANCING

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
	(goal gl-current-age gv-dark-up)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-skip-first-mining-camp 0)
	(set-strategic-number sn-stone-dropsite-distance 50)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-current-age <= gv-castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 24)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(building-type-count-total archery-range < 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 56)
	(set-strategic-number sn-gold-gatherer-percentage 14)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(disable-self)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(building-type-count-total archery-range > 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 47)
	(set-strategic-number sn-gold-gatherer-percentage 18)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(disable-self)
)

(defrule
	(unit-type-count-total scout-cavalry-line < 4)
	(current-age == imperial-age)
	(building-type-count-total mining-camp > 1)
	(building-type-count-total archery-range > 1)
	(game-time < 1800)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 39)
	(set-strategic-number sn-gold-gatherer-percentage 24)
)

(defrule
	(goal gl-strategy turkish-fast-imp)
	(unit-type-count-total scout-cavalry-line > 3)
	(current-age == imperial-age)
	(building-type-count-total mining-camp > 1)
	(building-type-count-total archery-range > 1)
	(game-time < 1800)
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 39)
	(set-strategic-number sn-gold-gatherer-percentage 20)
)

(defrule
	(goal gl-strategy turkish-fast-imp)
	(unit-type-count-total scout-cavalry-line < 4)
	(current-age == imperial-age)
	(building-type-count-total mining-camp > 1)
	(building-type-count-total archery-range > 1)
	(game-time > 1800)
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 29)
)

(defrule
	(goal gl-strategy turkish-fast-imp)
	(unit-type-count-total scout-cavalry-line > 3)
	(current-age == imperial-age)
	(building-type-count-total mining-camp > 1)
	(building-type-count-total archery-range > 1)
	(game-time > 1800)
=>
	(set-strategic-number sn-food-gatherer-percentage 43)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 22)
)

(defrule
	(goal gl-strategy turkish-fast-imp)
	(current-age == imperial-age)
	(game-time > 2200)
=>
	(set-strategic-number sn-stone-gatherer-percentage 5)
	(set-strategic-number sn-stone-dropsite-distance 3)
)
#end-if
#end-if

; ============ SOME VILLS AND AGE UPPING

(defrule
	(current-age == gv-maximum-age)
	(or	(up-compare-const gv-maximum-age == dark-age)
		(up-compare-const gv-maximum-age == feudal-age))
	(up-compare-goal gl-my-villager-count-total >= imperial-villager-cap)
=>
	(up-jump-rule 50)
)

#load-if-defined DEATH-MATCH
(defrule
	(can-research feudal-age)
=>
	(research feudal-age)
	(set-goal gl-current-age gv-dark-up)
	(enable-timer 9 5)
)
#end-if

#load-if-defined FEUDAL-AGE-START
(defrule
	(building-type-count-total blacksmith < 1)
	(nand	(can-research-with-escrow ri-wheel-barrow)
		(up-compare-goal gl-my-villager-count-total > 25))
	(up-compare-goal gl-my-villager-count-total < imperial-villager-cap)
	(goal gl-current-age gv-feudal)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)
#end-if

#load-if-defined LOW-RESOURCES-START
#load-if-defined DIFFICULTY-HARD
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(goal gl-strategy flush)
	(goal gl-resources-on-map regular)
	(goal gl-feudal-infantry men-at-arms)
	(up-timer-status 2 != timer-running)
	(up-compare-goal gl-my-villager-count-total < maa1-villagers)
	(up-compare-goal gl-my-villager-count-total < imperial-villager-cap)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)
#end-if
#end-if
#end-if

(defrule
	(or	(research-completed tech-for-castle)
		(or	(players-military-population focus-player < enemy-army1)
			(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)))
	(can-research castle-age)
=>
	(enable-timer 6 castle-forward-time); 64 for persians, 80 for others
	(research castle-age)
	(set-strategic-number sn-maximum-stone-drop-distance 6)
	(set-goal gl-current-age gv-feudal-up)
	(set-strategic-number sn-maximum-town-size 14)
	(disable-timer 2)
	(set-strategic-number sn-skip-first-mining-camp 0)
	(set-strategic-number sn-sling-control 0)
	(enable-timer 9 5)
)

(defrule
	(current-age == castle-age)
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(goal MILITARY 1)
		(up-compare-goal gl-enemy-units-in-town < 5))
	(research-available imperial-age)
	(population > 200)
	(or	(unit-type-count villager-gold > 10)
		(or	(unit-type-count-total trade-cart > 14)
			(up-compare-goal gl-gathered-relics > 4)))
=>
	(set-escrow-percentage food 80)
	(set-escrow-percentage gold 70)
	(up-add-research-cost c: imperial-age c: -1)
)

(defrule
	(current-age == castle-age)
	(nor	(goal gl-strategy sling)
		(goal gl-strategy castle-sling))
	(can-research-with-escrow imperial-age)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(research imperial-age)
	(set-goal gl-disable-mining-upgrades NO)
	(set-goal gl-current-age gv-castle-up)
	(enable-timer 9 5)
)

; ============== SHOT STRATEGY FIX

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal-up)
	(goal SLING 3)
=>
	(set-goal gl-strategy ranged-rush-strategy)
)

; ============== SOME STUFF WITH NOT-HARD DIFFICULTY LEVELS

#load-if-not-defined DEATH-MATCH
(defrule
	(up-compare-goal gl-my-villager-count-total >= feudal-up-villagers)
	(can-research feudal-age)
=>
	(research feudal-age)
	(set-goal gl-current-age gv-dark-up)
	(enable-timer 9 5)
	(set-strategic-number sn-sling-control 0)
)

; ============= STARTING RESOURCES & AGE

#load-if-not-defined LOW-RESOURCES-START
(defrule
	(game-time > 30)
	(building-type-count-total mill > 0)
	(building-type-count-total lumber-camp < 1)
	(resource-found wood)
	(can-build lumber-camp)
=>
	(build lumber-camp)
)

#load-if-defined DARK-AGE-START
(defrule
	(or	(not	(up-compare-goal gl-strategy-type >= FC))
		(up-compare-goal gl-my-villager-count-total >= feudal-FC-up-villagers))
	(up-compare-goal gl-my-villager-count-total >= feudal-flush-up-villagers)
	(can-research feudal-age)
=>
	(research feudal-age)
	(set-goal gl-current-age gv-dark-up)
	(enable-timer 9 5)
	(set-strategic-number sn-sling-control 0)
)
#end-if
#end-if

#load-if-not-defined DARK-AGE-START
(defrule
	(goal gl-current-age real-starting-age)
	(game-time < 500)
	(up-compare-const gv-defend-wonder == 0)
	(nand	(starting-age >= imperial-age)
		(up-compare-const gv-wonder-race == 1))
	(up-compare-goal gl-my-villager-count-total < initial-flush-villagers)
	(up-compare-goal gl-my-villager-count-total < imperial-villager-cap)
=>
	(set-goal gl-current-age gv-dark)
)

(defrule
	(up-compare-goal gl-current-age > gv-feudal)
	(strategic-number sn-skip-first-mining-camp == 1)
=>
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(defrule
	(current-age == gv-starting-age)
	(goal gl-current-age gv-dark)
	(building-type-count-total lumber-camp > 0)
	(or	(and	(or	(up-compare-goal gl-strategy-type <= controlled-flush)
				(up-compare-goal gl-my-villager-count-total >= initial-FC-villagers))
			(or	(up-compare-goal gl-my-villager-count-total >= initial-flush-villagers)
				(up-compare-goal gl-my-villager-count-total >= imperial-villager-cap)))
		(population-headroom < 5))
=>
	(set-goal gl-current-age gv-pre-age)
	(set-strategic-number sn-sling-control 0)
	(set-goal gl-gold-score-last 0)
)

(defrule
	(up-compare-goal gl-my-villager-count-total > 15)
	(strategic-number sn-lumber-camp-max-distance < 17)
	(current-age == gv-starting-age)
	(building-type-count-total lumber-camp == 1)
	(or	(nand	(up-compare-goal DOCK != 0)
			(building-type-count-total dock < 1))
		(wood-amount >= 250))
	(building-type-count-total mill > 0)
	(resource-found wood)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(set-strategic-number sn-lumber-camp-max-distance 22)
	(build lumber-camp)
)
#else
#load-if-defined UP-SCENARIO-GAME; On scenarios starting ages may bug
(defrule
	(current-age != gv-starting-age)
	(goal gl-current-age gv-dark)
	(building-type-count-total lumber-camp > 0)
	(up-compare-goal gl-my-villager-count-total >= 15)
	(or	(up-compare-goal gl-my-villager-count-total >= 20)
		(game-time > 500))
=>
	(up-get-fact current-age 0 gl-current-age)
	(up-modify-goal gl-current-age c:* 2)
	(up-chat-data-to-player my-player-number "Setting current age to %d" g: gl-current-age)
	(set-strategic-number sn-sling-control 0)
	(set-goal gl-gold-score-last 0)
)
#end-if
#end-if

#else; DM
#load-if-defined POST-IMPERIAL-AGE-START
(defrule
	(current-age == imperial-age)
=>
	(set-goal gl-current-age gv-castle-up)
	(set-strategic-number sn-sling-control 0)
	(disable-self)
)
#end-if
#end-if

; ============== VILLAGERS

#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined WONDER-RACE
(defrule
	(or	(and	(current-age >= feudal-age)
			(or	(players-military-population focus-player > 1)
				(and	(up-research-status c: ri-wheel-barrow >= research-pending)
					(current-age-time > 30)))); Let 2 villager FC train villagers first
		(or	(up-compare-goal gl-target-player-distance < 28); Forward, weird start... whatever it is, we definitely want loom
			(and	(players-military-population focus-player > 2); Drush
				(game-time > 360))))
	(can-research ri-loom)
=>
	(research ri-loom)
	(enable-timer 2 21)
)
#end-if
#end-if

(defrule
	(or	(and	(current-age > dark-age)
			(up-compare-goal gl-current-age > gv-dark))
		(or	(strategic-number sn-allow-new-build-order == -7)
			(or	(strategic-number sn-allow-new-build-order == -1)
				(or	(goal gl-strategy grush)
					(and	(up-timer-status 2 == timer-running)
						(and	(building-type-count town-center == 1)
							(up-pending-objects c: villager-class > 0)))))))
=>
	(up-jump-rule 39)
)

(defrule
	(up-compare-goal gl-total-food-amount > dark-up-food)
	(or	(and	(building-type-count market > 0)
			(up-compare-goal gl-gathered-relics > 4))
		(and	(or	(up-compare-goal gl-my-villager-count-total > 25)
				(gold-amount > 700))
			(or	(goal gl-strategy monk-mango-push)
				(gold-amount > 1000))))
	(up-compare-goal gl-my-villager-count-total > 23)
	(up-compare-goal gl-gathered-relics > 3)
=>
	(set-strategic-number sn-enable-training-queue 0)
	(up-jump-rule 30)
)

(defrule
	(food-amount > dark-up-food)
	(up-compare-goal gl-my-villager-count-total > 25)
	(up-compare-const gv-regicide == 1)
	(up-compare-goal gl-boar-eaten >= 3)
	(up-compare-goal gl-lured-deer-count >= 3)
	(strategic-number sn-sheep-count >= 8)
	(or	(and	(strategic-number sn-sheep-count >= 10)
			(not	(civ-selected chinese)))
		(up-compare-goal gl-my-villager-count-total > 26))
=>
	(set-strategic-number sn-enable-training-queue 0)
	(up-jump-rule 29)
)

(defrule
	(food-amount > dark-up-food)
	(up-compare-goal gl-my-villager-count-total > 26)
	(up-compare-const gv-regicide == 1)
	(up-compare-goal gl-boar-eaten >= 2)
	(or	(up-compare-goal gl-my-villager-count-total > 27)
		(or	(goal gl-close-deer YES)
			(up-compare-goal gl-boar-eaten >= 3)))
	(or	(strategic-number sn-sheep-count >= 12)
		(up-compare-goal gl-my-villager-count-total > 27))
	(strategic-number sn-sheep-count >= 10)
=>
	(set-strategic-number sn-enable-training-queue 0)
	(up-jump-rule 28)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(goal gl-strategy-type FC)
	(or	(up-compare-goal gl-my-villager-count-total >= 27)
		(or	(and	(up-compare-goal gl-total-food-amount >= 750)
				(up-compare-goal gl-my-villager-count-total >= 26))
			(goal gl-strategy uu-boom))); won't happen outside aztecs, since queue is on
	(up-compare-goal gl-my-villager-count-total >= 25)
	(can-research feudal-age)
=>
	(research feudal-age)
	(set-goal gl-current-age gv-dark-up)
	(disable-timer 1)
	(enable-timer 9 5)
)

(defrule
	(or	(and	(or	(goal gl-strategy eagle-rush)
				(map-type fortress))
			(up-compare-goal gl-my-villager-count-total > 25))
		(and	(or	(food-amount > 1000)
				(goal gl-strategy michi-boom))
			(game-time > 300)))
	(can-research feudal-age)
=>
	(research feudal-age)
	(set-goal gl-current-age gv-dark-up)
	(enable-timer 9 5)
	(disable-timer 1)
)

(defrule
	(civ-selected malay)
	(up-compare-const all-techs-enabled == 0)
=>
	(up-modify-goal gl-my-villager-count-total c:- 2)
	(up-modify-goal temporary-goal g:= gl-strategy-type)
	(up-modify-goal temporary-goal c:- 1)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal c:min 1)
	(up-modify-goal temporary-goal c:* 2)
	(up-modify-goal gl-my-villager-count-total g:- temporary-goal)
)

(defrule
	(up-compare-goal gl-strategy-type >= FC)
	(up-compare-goal gl-strategy != michi-boom)
	(goal gl-resources-on-map regular)
	(food-amount < 800)
	(or	(and	(up-compare-goal gl-my-villager-count-total < 30)
			(civ-selected chinese))
		(goal gl-DRUSH YES))
	(strategic-number sn-nomad-style-start == 0)
	(up-compare-goal gl-my-villager-count-total < 32)
=>
	(up-modify-goal gl-my-villager-count-total c:- 1)
)

(defrule
	(goal gl-strategy-type FC)
	(goal gl-boar-eaten 0)
	(up-compare-goal gl-my-villager-count-total < 29)
=>
	(up-jump-rule 2)
)

(defrule
	(goal gl-strategy-type FC)
	(civ-selected aztec)
	(goal gl-strategy uu-boom); well...
	(up-compare-goal gl-total-food-amount >= 640)
	(strategic-number sn-sheep-count > 5)
	(up-compare-goal gl-boar-eaten > 1)
	(up-compare-goal gl-my-villager-count-total >= 25)
	(or	(up-compare-goal gl-my-villager-count-total >= 26)
		(and	(up-compare-goal gl-lured-deer-count > 3)
			(and	(strategic-number sn-sheep-count > 7)
				(up-compare-goal gl-total-food-amount >= 670))))
=>
	(set-strategic-number sn-enable-training-queue 0)
)

(defrule
	(up-compare-goal gl-strategy != sling)
	(up-compare-goal gl-strategy-type < FC2)
	(up-compare-goal gl-total-food-amount >= dark-up-food)
	(up-compare-goal gl-my-villager-count-total >= 26)
	(or	(up-compare-goal gl-my-villager-count-total >= 27)
		(up-compare-goal gl-total-food-amount >= 750))
	(or	(up-compare-goal gl-my-villager-count-total >= 28)
		(and	(up-compare-goal gl-boar-eaten > 1)
			(and	(strategic-number sn-sheep-count > 5)
				(up-compare-goal gl-total-food-amount >= 650))))
=>
	(set-strategic-number sn-enable-training-queue 0)
)

(defrule
	(up-compare-goal gl-strategy-type >= FC2)
	(current-age == dark-age)
	(up-compare-goal gl-boar-eaten < 3)
	(strategic-number sn-sheep-count < 8)
	(or	(up-compare-goal gl-lured-deer-count < 1)
		(strategic-number sn-sheep-count < 6))
	(or	(up-compare-goal gl-lured-deer-count < 2)
		(strategic-number sn-sheep-count < 4))
	(up-compare-goal gl-lured-deer-count < 3)
	(goal gl-resources-on-map regular)
	(up-compare-goal gl-my-villager-count-total < 30)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(up-compare-goal gl-strategy-type >= FC2)
	(current-age == dark-age)
	(up-compare-goal gl-boar-eaten < 2)
	(or	(up-compare-goal gl-lured-deer-count < 3)
		(strategic-number sn-sheep-count < 5))
	(up-compare-goal gl-lured-deer-count < 6)
	(up-compare-goal gl-my-villager-count-total < 30)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(or	(and	(or	(strategic-number sn-sheep-count >= 12)
				(and	(strategic-number sn-sheep-count >= 8)
					(or	(up-compare-goal gl-lured-deer-count > 2)
						(and	(goal gl-loom-notice YES)
							(up-compare-goal gl-boar-eaten >= 2)))))
			(up-compare-goal gl-boar-eaten >= 1))
		(or	(current-age != dark-age)
			(up-compare-goal gl-strategy-type < FC2)))
=>
	(up-jump-rule 2)
)

(defrule
	(strategic-number sn-wood-found != 2); Real forest distance couldn't be detected
	(or	(strategic-number sn-lumber-camp-max-distance >= 20)
		(building-type-count-total lumber-camp < 2))
	(strategic-number sn-lumber-camp-max-distance >= 17)
	(strategic-number sn-sheep-count < 12)
	(up-compare-goal gl-boar-eaten < 3)
	(up-compare-goal gl-lured-deer-count < 4)
	(goal gl-resources-on-map regular)
	(or	(up-compare-goal gl-my-villager-count-total < 29)
		(up-compare-goal gl-lured-deer-count < 2))
	(up-compare-goal gl-my-villager-count-total < 30)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(up-compare-const gv-fortress == 0)
	(up-compare-goal gl-boar-eaten < 3)
	(or	(strategic-number sn-sheep-count <= bad-start-sheep)
		(and	(or	(up-compare-goal gl-boar-eaten < 2)
				(strategic-number sn-sheep-count < 5))
			(up-compare-goal gl-lured-deer-count < 2)))
	(up-compare-goal gl-lured-deer-count < 3)
	(up-compare-goal gl-my-villager-count-total < 31)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(strategic-number sn-wood-found != 2)
	(current-age == dark-age)
	(up-compare-goal gl-strategy-type >= FC2)
	(or	(strategic-number sn-lumber-camp-max-distance >= 24)
		(building-type-count-total lumber-camp < 2))
	(strategic-number sn-lumber-camp-max-distance >= 21)
	(strategic-number sn-sheep-count < 12)
	(up-compare-goal gl-boar-eaten < 3)
	(up-compare-goal gl-lured-deer-count < 3)
	(goal gl-resources-on-map regular)
	(up-compare-goal gl-my-villager-count-total < 30)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(up-compare-goal gl-strategy-type >= FC2)
	(up-compare-const gv-fortress == 0)
	(up-compare-const gv-regicide == 0)
	(current-age == dark-age)
	(building-type-count-total mill < 2)
	(building-type-count-total farm < 14)
	(up-compare-goal gl-lured-deer-count < 3)
	(or	(strategic-number sn-sheep-count < 5)
		(goal gl-lured-deer-count 0))
	(strategic-number sn-sheep-count < 7)
	(up-compare-goal gl-boar-eaten < 2)
	(up-compare-goal gl-my-villager-count-total < 32)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(up-compare-goal gl-strategy-type >= FC2)
	(up-compare-const gv-fortress == 0)
	(up-compare-const gv-regicide == 0)
	(up-compare-const gv-migration == 0)
	(current-age == dark-age)
	(strategic-number sn-sheep-count < 7)
	(up-compare-goal gl-lured-deer-count < 7)
	(building-type-count-total farm < 13)
	(or	(strategic-number sn-sheep-count < 3)
		(up-compare-goal gl-boar-eaten < 1))
	(up-compare-goal gl-boar-eaten < 2)
	(up-compare-goal gl-my-villager-count-total < 33)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(current-age == dark-age)
	(or	(goal gl-strategy eagle-rush)
		(and	(goal gl-strategy sling)
			(up-compare-goal gl-my-villager-count-total < 27)))
	(or	(up-compare-goal gl-my-villager-count-total < 27); 31
		(or	(strategic-number sn-sheep-count < 7)
			(up-compare-goal gl-boar-eaten < 2)))
	(up-compare-goal gl-my-villager-count-total < 29)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(up-compare-const gv-wonder-race == 0)
	(up-compare-goal gl-my-villager-count-total >= 28)
	(up-compare-goal gl-lured-deer-count >= 3)
	(strategic-number sn-sheep-count >= 5)
	(or	(strategic-number sn-sheep-count >= 6)
		(up-compare-goal gl-lured-deer-count >= 4))
	(building-type-count-total lumber-camp > 1)
	(or	(strategic-number sn-lumber-camp-max-distance < 20)
		(strategic-number sn-wood-found == 2))
	(up-compare-goal gl-boar-eaten > 1)
=>
	(set-strategic-number sn-enable-training-queue 0)
	(up-jump-rule 9)
)

(defrule
	(or	(and	(strategic-number sn-wood-found != 2)
			(and	(or	(strategic-number sn-lumber-camp-max-distance >= 20)
					(building-type-count-total lumber-camp < 2))
				(strategic-number sn-lumber-camp-max-distance >= 17)))
		(strategic-number sn-sheep-count < 6))
	(nand	(goal gl-resources-on-map plenty)
		(and	(up-compare-goal gl-my-villager-count-total > 23)
			(strategic-number sn-lumber-camp-max-distance < 25)))
	(up-compare-goal gl-my-villager-count-total < 29)
=>
	(up-jump-rule 3)
)

(defrule
	(up-compare-const gv-wonder-race == 0)
	(up-compare-goal gl-my-villager-count-total >= 27)
	(or	(up-compare-goal gl-my-villager-count-total >= 28)
		(goal gl-loom-notice YES))
	(or	(up-compare-goal gl-lured-deer-count >= 4)
		(strategic-number sn-sheep-count >= 8))
	(or	(up-compare-goal gl-lured-deer-count >= 3)
		(or	(up-compare-goal gl-boar-eaten > 2)
			(building-type-count-total mill > 1)))
	(up-compare-goal gl-boar-eaten > 1)
=>
	(set-strategic-number sn-enable-training-queue 0)
	(up-jump-rule 7)
)

(defrule
	(goal gl-strategy flush)
;	(goal gl-feudal-infantry 0)
	(food-amount > high-dark-food1)
	(up-compare-goal gl-my-villager-count-total >= flush-villagers3)
	(strategic-number sn-sheep-count >= 8)
	(up-compare-goal gl-boar-eaten >= 2)
	(or	(up-compare-goal gl-lured-deer-count >= 3)
		(up-compare-goal gl-boar-eaten >= 3))
	(or	(up-compare-goal gl-lured-deer-count >= 4)
		(or	(strategic-number sn-sheep-count >= 10)
			(up-compare-goal gl-boar-eaten >= 3)))
=>
	(set-strategic-number sn-enable-training-queue 0)
	(up-jump-rule 4)
)

(defrule
	(goal gl-strategy flush)
;	(goal gl-feudal-infantry 0)
	(food-amount > high-dark-food1)
	(up-compare-goal gl-my-villager-count-total >= flush-villagers1)
	(or	(up-compare-goal gl-my-villager-count-total >= flush-villagers3)
		(strategic-number sn-lumber-camp-max-distance < 19))
	(strategic-number sn-sheep-count >= 12)
	(up-compare-goal gl-boar-eaten >= 2)
	(or	(up-compare-goal gl-lured-deer-count >= 3)
		(or	(goal gl-resources-on-map plenty)
			(up-compare-goal gl-boar-eaten >= 3)))
=>
	(set-strategic-number sn-enable-training-queue 0)
	(up-jump-rule 3)
)

(defrule
	(goal gl-strategy flush)
	(or	(research-available ri-loom)
		(or	(and	(up-compare-goal gl-my-villager-count-total > 25)
				(or	(up-compare-goal gl-total-food-amount > high-dark-food1)
					(and	(up-compare-goal gl-total-food-amount > high-dark-food2)
						(up-compare-goal gl-my-villager-count-total > 26))))
			(and	(up-compare-goal gl-total-food-amount >= dark-up-food)
				(up-compare-goal gl-my-villager-count-total > 24))))
	(up-compare-goal gl-my-villager-count-total > 23)
=>
	(up-jump-rule 2)
)

(defrule
	(goal gl-strategy michi-boom)
	(up-compare-goal gl-my-villager-count-total >= michi-boom-vills); 25-28 depending on civ
	(goal gl-resources-on-map plenty)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(and	(up-compare-goal gl-strategy != flush)
			(or	(goal gl-strategy-class basic-class)
				(goal gl-strategy eew-strategy)))
		(and	(goal gl-strategy flush)
			(up-compare-goal gl-my-villager-count-total < flush-villagers2)))
	(current-age == dark-age)
	(up-compare-goal gl-my-villager-count-total < 29); 31
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(goal gl-strategy flush)
	(current-age == dark-age)
	(up-compare-goal gl-my-villager-count-total < flush-villagers4)
	(strategic-number sn-nomad-style-start == 0)
	(strategic-number sn-lumber-camp-max-distance >= 17)
	(or	(building-type-count-total lumber-camp == 1)
		(strategic-number sn-lumber-camp-max-distance >= 20))
	(or	(up-compare-goal gl-lured-deer-count < 2)
		(or	(up-compare-goal gl-my-villager-count-total < flush-villagers5)
			(strategic-number sn-lumber-camp-max-distance >= 26)))
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(or	(up-compare-goal gl-strategy-type >= FC2)
		(goal gl-strategy scorpion-rush))
	(current-age == dark-age)
	(or	(up-compare-goal gl-my-villager-count-total < 29)
		(and	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
			(up-gaia-type-count-total c: deep-fish < 2)))
	(or	(up-compare-goal gl-my-villager-count-total < 30)
		(up-gaia-type-count-total c: deep-fish < 1))
	(up-compare-goal gl-my-villager-count-total < 31)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(up-compare-goal gl-strategy-type >= FC)
	(up-compare-goal gl-strategy != michi-boom)
	(goal gl-resources-on-map regular)
	(food-amount < 800)
	(or	(and	(up-compare-goal gl-my-villager-count-total < 30)
			(civ-selected chinese))
		(goal gl-DRUSH YES))
	(strategic-number sn-nomad-style-start == 0)
	(up-compare-goal gl-my-villager-count-total < 32)
=>
	(up-modify-goal gl-my-villager-count-total c:+ 1)
)

(defrule
	(civ-selected malay)
	(up-compare-const all-techs-enabled == 0)
=>
	(up-modify-goal gl-my-villager-count-total c:+ 2)
	(up-modify-goal temporary-goal g:= gl-strategy-type)
	(up-modify-goal temporary-goal c:- 1)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal c:min 0)
	(up-modify-goal temporary-goal c:* 2)
	(up-modify-goal gl-my-villager-count-total g:+ temporary-goal)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(or	(and	(goal gl-strategy-class basic-class)
			(or	(goal gl-strategy flush)
				(up-compare-goal gl-my-villager-count-total >= 26)))
		(goal gl-strategy sling))
	(up-compare-goal gl-my-villager-count-total >= flush-villagers1)
	(can-research feudal-age)
=>
	(research feudal-age)
	(set-goal gl-current-age gv-dark-up)
	(disable-timer 1)
	(enable-timer 9 5)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(up-compare-goal gl-strategy-class != basic-class)
	(or	(up-compare-goal gl-strategy-type <= FC2); test
		(up-compare-goal gl-my-villager-count-total > 27))
	(or	(up-compare-goal gl-my-villager-count-total >= 26)
		(or	(goal gl-strategy forward)
			(goal gl-strategy trush)))
	(up-compare-goal gl-my-villager-count-total >= forward-villagers)
	(can-research feudal-age)
=>
	(research feudal-age)
	(set-goal gl-current-age gv-dark-up)
	(disable-timer 1)
	(enable-timer 9 5)
)

(defrule
	(or	(population >= absolute-villager-cap)
		(or	(and	(up-compare-const gv-regicide == 1)
				(up-compare-goal gl-my-villager-count-total > 24))
			(goal gl-nothing-style-map YES)))
	(can-research feudal-age)
=>
	(research feudal-age)
	(set-goal gl-current-age gv-dark-up)
	(disable-timer 1)
	(enable-timer 9 5)
)

(defrule
	(or	(and	(up-compare-goal gl-gathered-relics > 3)
			(or	(building-type-count market > 0)
				(or	(goal gl-strategy monk-mango-push)
					(gold-amount > 1000))))
		(goal gl-strategy wall-boom))
	(up-compare-goal gl-my-villager-count-total > 23)
	(can-research feudal-age)
=>
	(research feudal-age)
	(set-goal gl-current-age gv-dark-up)
	(disable-timer 1)
	(enable-timer 9 5)
)

(defrule
	(goal gl-strategy flush)
	(or	(research-available ri-loom)
		(or	(and	(up-compare-goal gl-my-villager-count-total > 25)
				(or	(up-compare-goal gl-total-food-amount > high-dark-food1)
					(and	(up-compare-goal gl-total-food-amount > high-dark-food2)
						(up-compare-goal gl-my-villager-count-total > 26))))
			(and	(up-compare-goal gl-total-food-amount >= dark-up-food)
				(up-compare-goal gl-my-villager-count-total > 24))))
	(up-compare-goal gl-my-villager-count-total > 23)
=>
	(up-jump-rule 3)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(current-age == dark-age)
	(or	(up-compare-const gv-michi-style == 0)
		(goal gl-resources-on-map regular))
	(up-compare-goal gl-my-villager-count-total < 31)
	(or	(food-amount < 200)
		(and	(food-amount < dark-queue-food)
			(and	(up-pending-objects c: villager-class < 2)
				(timer-triggered 2))))
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(up-compare-goal gl-strategy-type != basic-flush)
	(or	(up-compare-const gv-michi-style == 0)
		(goal gl-resources-on-map regular))
	(current-age == dark-age)
	(or	(up-compare-goal gl-my-villager-count-total < 29)
		(strategic-number sn-boars-on-map == NONE))
	(up-compare-goal gl-my-villager-count-total < 31)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(current-age == dark-age)
	(up-compare-goal gl-nothing-style-map != YES)
	(or	(goal gl-strategy heavy-krush)
		(and	(food-amount < dark-up-food)
			(and	(up-pending-objects c: villager-class < 1)
				(goal gl-strategy-type basic-flush))))
	(up-compare-goal gl-my-villager-count-total < 29)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(or	(and	(current-age > feudal-age)
			(goal gl-strategy saracen-heavy-krush))
		(and	(up-compare-goal gl-my-villager-count-total < 20)
			(and	(goal gl-strategy sling)
				(goal gl-current-age gv-feudal))))
	(up-compare-goal gl-my-villager-count-total < 29)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(or	(current-age != feudal-age)
		(or	(and	(up-compare-goal gl-my-villager-count-total > 60)
				(and	(up-research-status c: ri-wheel-barrow >= research-pending)
					(and	(up-compare-const gv-maximum-age == feudal-age)
						(player-in-game any-ally))))
			(and	(goal gl-strategy ranged-rush-strategy)
				(and	(up-compare-goal gl-my-villager-count-total > 27)
					(current-age-time > 55)))))
=>
	(up-jump-rule 9)
)

(defrule
	(or	(up-compare-goal gl-my-villager-count-total >= absolute-villager-cap)
		(or	(and	(current-age == gv-maximum-age)
				(up-compare-goal gl-my-villager-count-total >= imperial-villager-cap))
			(and	(or	(goal gl-strategy scrush)
					(goal gl-strategy sling))
				(and	(can-afford-research ri-wheel-barrow)
					(up-compare-goal gl-my-villager-count-total > 25)))))
=>
	(up-jump-rule 8)
)

(defrule
	(or	(and	(goal gl-FC-type gv-2-villagers)
			(current-age-time < 15))
		(or	(and	(goal gl-FC-type gv-3-villagers)
				(and	(current-age-time < 35)
					(up-research-status c: ri-loom >= research-pending)))
			(and	(up-compare-const gv-maximum-age == feudal-age)
				(up-research-status c: ri-wheel-barrow >= research-pending))))
=>
	(set-strategic-number sn-enable-training-queue 1)
	(up-jump-rule 2)
)

(defrule
	(goal gl-current-age gv-feudal)
	(difficulty <= hard)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(research-completed ri-loom)
	(food-amount < max-flush-food2)
	(up-compare-goal SLING != 3)
	(or	(timer-triggered 2)
		(goal gl-strategy sling))
	(nand	(can-afford-research ri-wheel-barrow)
		(or	(up-compare-goal gl-my-villager-count-total >= 30)
			(goal gl-strategy sling)))
=>
	(set-strategic-number sn-enable-training-queue 1)
)

(defrule
	(goal gl-current-age gv-feudal)
	(or	(and	(food-amount >= max-flush-food2)
			(or	(up-research-status c: ri-wheel-barrow >= research-pending)
				(up-compare-goal gl-FC-type >= gv-2-villagers)))
		(and	(can-afford-research ri-wheel-barrow)
			(up-compare-goal gl-my-villager-count-total >= 36)))
	(or	(up-compare-goal SLING != 3)
		(up-compare-goal gl-strategy-type >= FC))
=>
	(set-strategic-number sn-enable-training-queue 0)
)

(defrule
	(or	(and	(game-time > 1200)
			(nand	(research-available castle-age)
				(up-compare-goal gl-my-villager-count-total > 29)))
		(and	(up-compare-goal gl-my-villager-count-total < 30)
			(up-compare-goal gl-strategy-type <= controlled-flush)))
	(or	(food-amount < 500)
		(up-compare-goal gl-my-villager-count-total < 20))
	(up-compare-goal gl-my-villager-count-total < relative-100-villagers)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 feudal-villager-queue-time); 19 for persians, 21 for rest
)

(defrule
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(not	(can-research castle-age))
	(or	(food-amount < max-flush-food1)
		(or	(gold-amount < high-feudal-gold)
			(current-age-time < 100)))
	(nor	(can-research ri-wheel-barrow)
		(can-research ri-loom))
	(up-compare-goal gl-my-villager-count-total < relative-100-villagers)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 feudal-villager-queue-time)
)

(defrule
	(goal gl-current-age gv-feudal)
	(difficulty <= hard)
	(up-compare-goal gl-strategy-type <= controlled-flush)
=>
	(set-strategic-number sn-enable-training-queue 0)
)

(defrule
	(or	(food-amount < high-feudal-food)
		(or	(gold-amount < high-feudal-gold)
			(building-type-count-total blacksmith < up-building-count)))
	(up-compare-goal gl-strategy != saracen-heavy-krush)
	(up-compare-goal gl-strategy != eagle-rush)
	(nor	(can-research ri-wheel-barrow)
		(can-research ri-loom))
	(up-compare-goal gl-my-villager-count-total < relative-100-villagers)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

(defrule
	(or	(and	(up-compare-goal gl-FC-type >= gv-2-villagers)
			(or	(current-age-time < 15)
				(and	(current-age-time < 35)
					(up-pending-objects c: villager-class g:< gl-FC-type))))
		(and	(goal gl-strategy grush)
			(and	(building-type-count-total market == 0)
				(up-research-status c: ri-wheel-barrow >= research-pending))))
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)

#load-if-not-defined DARK-AGE-START
(defrule
	(or	(goal gl-current-age gv-dark)
		(game-time < 50))
	(up-compare-goal gl-my-villager-count-total < imperial-villager-cap)
	(up-compare-goal gl-my-villager-count-total < 30)
	(can-train villager)
=>
	(train villager)
	(enable-timer 2 21)
)
#end-if

#load-if-not-defined WONDER-RACE

#load-if-not-defined DEATH-MATCH
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(goal gl-strategy knight-rush)
	(or	(civ-selected persian)
		(gold-amount > 300))
	(up-pending-objects c: villager-class > 1)
	(civilian-population < 75)
	(up-compare-goal gl-military-percentage3 < 80)
=>
	(up-jump-rule 2)
)

(defrule
	(or	(and	(up-timer-status 2 == timer-running)
			(and	(up-pending-objects c: villager-class > 0)
				(building-type-count-total town-center == 1)))
		(and	(up-compare-goal gl-migration-notice < min-migration-progress)
			(and	(up-compare-goal gl-my-villager-count > 50)
				(or	(building-type-count town-center > 1)
					(goal gl-super-pocket YES)))))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-current-age >= gv-late-villager-age)
	(up-compare-goal gl-strategy != castle-sling)
	(research-completed ri-loom)
	(or	(up-compare-goal gl-enemy-units-in-town < 5)
		(or	(up-compare-goal TSA >= 1)
			(food-amount > 150)))
	(or	(wood-amount < 200)
		(or	(up-research-status c: villager-tech >= research-pending)
			(up-compare-goal gl-my-villager-count-total < 50)))
	(up-research-status c: ri-wheel-barrow >= research-pending)
=>
	(set-strategic-number sn-enable-training-queue 1)
)
#end-if
(defrule
	(up-compare-goal gl-current-age >= gv-late-villager-age)
	(up-compare-goal gl-strategy != castle-sling)
	(or	(and	(food-amount >= maximum-castle-queue-food)
			(and	(gold-amount >= maximum-castle-queue-gold)
				(goal gl-current-age gv-castle)))
		(and	(up-research-status c: villager-tech < research-pending)
			(and	(up-compare-goal gl-my-villager-count-total >= 50)
				(and	(up-compare-const gv-michi-style == 0)
					(wood-amount >= 200)))))
=>
	(set-strategic-number sn-enable-training-queue 0)
)
#end-if

(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
)

(defrule
	(nand	(goal gl-current-age gv-castle)
		(and	(gold-amount > high-castle-gold)
			(and	(civilian-population > 80)
				(game-time < 2400))))
	(can-research-with-escrow ri-hand-cart)
=>
	(set-goal temporary-goal3 1)
)

(defrule
	(nand	(goal gl-current-age gv-castle)
		(and	(gold-amount > high-castle-gold)
			(and	(civilian-population > 80)
				(game-time < 2400))))
	(can-afford-research ri-hand-cart)
=>
	(set-goal temporary-goal4 1)
)

(defrule
	(or	(current-age != castle-age)
		(or	(up-compare-goal gl-my-villager-count-total >= imperial-villager-cap)
			(or	(up-compare-goal gl-my-villager-count-total >= relative-100-villagers)
				(and	(goal temporary-goal3 1)
					(and	(up-compare-goal gl-my-villager-count-total > 50)
						(current-age-time >= 10))))))
=>
	(up-jump-rule 2)
)

(defrule
	(current-age == castle-age)
	(nand	(up-compare-goal gl-strategy-type >= FI)
		(and	(food-amount > 900)
			(gold-amount > 550)))
	(or	(up-compare-goal gl-strategy != saracen-heavy-krush)
		(nand	(building-type-count-total town-center == 1)
			(game-time < 2100)))
	(nor	(can-research-with-escrow imperial-age)
		(can-research ri-wheel-barrow))
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(current-age == castle-age)
	(research-available ri-wheel-barrow)
	(or	(research-available first-main-ranged-unit-upgrade)
		(research-available ri-bodkin-arrow))
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)

#load-if-defined UP-MICHI-STYLE
(defrule
	(goal gl-strategy michi-boom)
	(goal gl-current-age gv-castle)
	(nand	(goal temporary-goal4 1)
		(up-compare-goal gl-my-villager-count-total > 60))
	(not	(can-research imperial-age))
	(up-compare-goal gl-my-villager-count-total < 150)
	(up-compare-goal gl-my-villager-count-total < absolute-villager-cap)
	(up-compare-goal gl-my-villager-count-total < imperial-villager-cap)
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)
#end-if

#load-if-not-defined POPULATION-CAP-EXTENDED
(defrule
	(or	(up-compare-goal gl-my-villager-count-total >= difficulty-villager-cap)
		(or	(up-compare-goal gl-my-villager-count-total >= imperial-villager-cap)
			(or	(current-age != gv-maximum-age)
				(or	(up-compare-goal gl-my-villager-count-total >= 100)
					(civilian-population > 125)))))
=>
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(or	(and	(or	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
				(cc-players-unit-type-count 0 tree > 20))
			(dropsite-min-distance wood != 255))
		(up-compare-goal gl-my-villager-count-total < 20))
	(or	(up-compare-goal gl-my-villager-count-total < 75)
		(population < pop-to-stop-full-pop-attack))
	(nand	(goal temporary-goal4 1)
		(up-compare-goal gl-my-villager-count-total > 50))
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(current-age == gv-maximum-age)
	(game-time > 2100)
	(or	(up-compare-goal gl-my-villager-count-total > 75)
		(up-compare-goal gl-my-villager-count-total > imperial-villager-cap))
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(population > pop-to-full-pop-attack)
	(or	(warboat-count < 15)
		(and	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-landing-style)
			(soldier-count < 22)))
=>
	(set-strategic-number sn-villager-deleting 1)
)

(defrule
	(up-compare-const gv-FFA-like-game == 0)
	(current-age == gv-maximum-age)
	(game-time > time-to-allow-villager-deleting); 900 in DM, otherwise 2700
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(food-amount > food-to-delete-75-extra-vill)
	(or	(up-compare-goal gl-my-villager-count-total > 75)
		(up-compare-goal gl-my-villager-count-total > imperial-villager-cap))
	(wood-amount > wood-to-delete-75-extra-vill)
	(gold-amount > gold-to-delete-75-extra-vill)
	(population > pop-to-full-pop-attack)
	(players-population every-enemy < almost-full-pop)
=>
	(set-strategic-number sn-villager-deleting 1)
)

(defrule
	(or	(current-age == gv-maximum-age)
		(and	(current-age >= castle-age)
			(or	(goal gl-strategy-class basic-class)
				(or	(and	(population >= pop-to-full-pop-attack)
						(goal gl-strategy castle-push))
					(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)))))
	(population >= 23)
	(up-compare-goal gl-my-villager-count-total > imperial-villager-cap)
=>
	(set-strategic-number sn-villager-deleting 1)
)
#end-if

#load-if-defined TINY-MAP
(defrule
	(or	(up-compare-goal gl-my-villager-count-total >= difficulty-villager-cap)
		(current-age != gv-maximum-age))
=>
	(up-jump-rule 1)
)

(defrule
	(current-age == gv-maximum-age)
	(nand	(food-amount > 1800)
		(and	(up-compare-goal gl-my-villager-count-total > 75)
			(and	(wood-amount > 1800)
				(gold-amount > 1000))))
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-compare-goal gl-my-villager-count-total < imperial-villager-cap)
	(up-compare-goal gl-my-villager-count-total < 100)
	(nand	(goal temporary-goal4 1)
		(up-compare-goal gl-my-villager-count-total > 50))
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)
#else
#load-if-not-defined POPULATION-CAP-EXTENDED
(defrule
	(or	(up-compare-goal gl-my-villager-count-total >= difficulty-villager-cap)
		(or	(and	(civilian-population > 125)
				(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style))
			(or	(current-age != gv-maximum-age)
				(or	(and	(goal temporary-goal4 1)
						(up-compare-goal gl-my-villager-count-total > 50))
					(up-compare-goal gl-my-villager-count-total >= imperial-villager-cap)))))
=>
	(up-jump-rule 4)
)

(defrule
	(or	(nand	(food-amount > 1400)
			(and	(up-compare-goal gl-my-villager-count-total > 75)
				(and	(wood-amount > 900)
					(gold-amount > 500))))
		(up-compare-const gv-handicap == 1))
	(up-compare-const gv-FFA-like-game == 1)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(up-compare-goal gl-my-villager-count-total < 120)
	(up-research-status c: ri-hand-cart >= research-pending)
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(nand	(food-amount > 1400)
		(and	(up-compare-goal gl-my-villager-count-total > 75)
			(and	(wood-amount > 900)
				(gold-amount > 500))))
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(or	(up-compare-goal gl-trade-unit-count-total < 17)
		(and	(population < relatively-high-pop)
			(up-compare-goal gl-my-villager-count-total < 88)))
	(up-compare-goal gl-my-villager-count-total < 100)
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(nand	(food-amount > 1400)
		(and	(up-compare-goal gl-my-villager-count-total > 65)
			(and	(wood-amount > 900)
				(gold-amount > 500))))
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-compare-goal gl-trade-unit-count-total >= 17)
	(or	(up-compare-goal gl-my-villager-count-total < 81)
		(strategic-number sn-minimum-water-body-size-for-dock == land-map-style))
	(up-compare-goal gl-my-villager-count-total < late-game-villagers)
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(food-amount < 1400)
	(wood-amount < 900)
	(gold-amount < 500)
	(unit-type-count-total fishing-ship < 2)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-compare-goal gl-trade-unit-count-total >= 17)
	(civ-selected persian)
	(up-compare-goal CASTLE != 0)
	(up-compare-goal gl-my-villager-count-total < 96)
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(up-compare-const gv-FFA-like-game == 0)
	(current-age == gv-maximum-age)
	(game-time > time-to-allow-villager-deleting); 900 in DM, otherwise 2700
	(food-amount > food-to-delete-100-extra-vill)
	(or	(up-compare-goal gl-my-villager-count-total > 100)
		(up-compare-goal gl-my-villager-count-total > imperial-villager-cap))
	(wood-amount > wood-to-delete-100-extra-vill)
	(gold-amount > gold-to-delete-100-extra-vill)
	(population > almost-full-pop)
	(up-compare-goal gl-population > pop-to-full-pop-attack)
=>
	(set-strategic-number sn-villager-deleting 1)
)
#end-if
#end-if

#load-if-defined POPULATION-CAP-200
#load-if-defined POPULATION-CAP-EXTENDED
(defrule
	(or	(up-compare-goal gl-my-villager-count-total >= difficulty-villager-cap)
		(or	(current-age < castle-age)
			(and	(goal temporary-goal4 1)
				(up-compare-goal gl-my-villager-count-total > 50))))
=>
	(up-jump-rule 2)
)

(defrule
	(nand	(food-amount > 1600)
		(and	(up-compare-goal gl-my-villager-count-total > 75)
			(and	(wood-amount > 1000)
				(gold-amount > 500))))
	(or	(up-compare-const gv-FFA-like-game == 1)
		(up-compare-goal gl-my-villager-count-total < 120))
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(up-compare-goal gl-my-villager-count-total < 140)
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(or	(and	(or	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
				(cc-players-unit-type-count 0 tree > 20))
			(dropsite-min-distance wood != 255))
		(up-compare-goal gl-my-villager-count-total < 20))
	(or	(up-compare-goal gl-my-villager-count-total < 100)
		(population-cap > 350))
	(up-compare-goal gl-my-villager-count-total < 200)
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(up-compare-goal gl-population > pop-to-full-pop-attack)
	(up-compare-goal gl-strategy != castle-sling)
	(population-cap < 270)
	(up-compare-goal gl-my-villager-count-total > 120)
	(or	(up-compare-goal gl-my-villager-count-total > 150)
		(or	(and	(up-compare-goal gl-my-villager-count-total > 130)
				(up-compare-goal gl-trade-unit-count-total > 30))
			(and	(up-compare-goal gl-trade-unit-count-total > 40)
				(gold-amount > 1000))))
=>
	(set-strategic-number sn-villager-deleting 1)
)
#else
(defrule
	(or	(and	(up-compare-goal gl-my-villager-count-total <= 96)
			(and	(civ-selected persian)
				(up-compare-goal CASTLE != 0)))
		(goal gl-strategy sling))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-population > 190)
	(up-compare-goal gl-strategy != castle-sling)
	(or	(up-compare-goal gl-my-villager-count-total > 133)
		(or	(and	(or	(up-compare-goal gl-my-villager-count-total > 105)
					(and	(civilian-population > 136)
						(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)))
				(up-compare-goal gl-trade-unit-count-total > 20))
			(and	(up-compare-goal gl-my-villager-count-total > 120)
				(up-compare-goal gl-trade-unit-count-total > 10))))
=>
	(set-strategic-number sn-villager-deleting 1)
)

(defrule
	(true)
=>
	(set-goal temporary-goal7 late-game-villagers)
	(up-modify-goal temporary-goal7 c:+ 2)
)

(defrule
	(or	(unit-type-count fishing-ship > 1)
		(or	(population < 180)
			(or	(up-compare-goal gl-my-villager-count-total g:< temporary-goal7)
				(or	(up-compare-goal gl-population <= 190)
					(or	(current-age != imperial-age)
						(up-compare-goal gl-strategy != default))))))
=>
	(up-jump-rule 2)
)

(defrule
	(nand	(up-compare-goal CASTLE != 0)
		(research-available my-unique-unit-upgrade))
	(strategic-number sn-allow-resource-spending > 5)
	(food-amount > 400)
	(wood-amount > 400)
	(gold-amount > 300)
	(up-compare-goal gl-trade-unit-count-total > 35)
	(up-compare-goal gl-my-villager-count-total g:>= temporary-goal7)
	(or	(up-compare-const gv-2-villager-time >= 45)
		(goal CASTLE 0))
	(civilian-population > 120)
=>
	(set-strategic-number sn-villager-deleting 1)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(food-amount > 300)
	(wood-amount > 300)
	(gold-amount > 300)
	(up-compare-goal gl-trade-unit-count-total > 20)
	(up-compare-goal gl-my-villager-count-total > 88)
	(or	(up-compare-goal gl-my-villager-count-total > 96)
		(or	(up-compare-const gv-2-villager-time >= 45)
			(goal CASTLE 0)))
	(civilian-population > 130)
=>
	(set-strategic-number sn-villager-deleting 1)
)
#end-if

(defrule
	(up-compare-goal gl-population > pop-to-full-pop-attack)
	(up-compare-goal gl-strategy != castle-sling)
	(up-compare-goal gl-strategy != sling)
	(population-cap < 240)
	(or	(up-compare-goal gl-my-villager-count-total > 120)
		(population-cap < 215))
	(up-compare-goal gl-my-villager-count-total > 100)
	(or	(and	(up-compare-goal gl-my-villager-count-total > 130)
			(up-compare-goal gl-trade-unit-count-total > 15))
		(and	(up-compare-goal gl-trade-unit-count-total > 37)
			(strategic-number sn-allow-resource-spending > 5)))
=>
	(set-strategic-number sn-villager-deleting 1)
)

#load-if-not-defined TINY-MAP
(defrule
	(current-age == castle-age)
	(up-compare-goal gl-my-villager-count-total > 95)
	(up-compare-goal gl-my-villager-count-total < 130)
	(up-compare-goal gl-trade-unit-count-total < 10)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(nand	(goal temporary-goal4 1)
		(up-compare-goal gl-my-villager-count-total > 50))
	(not	(can-research-with-escrow imperial-age))
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)
#else
(defrule
	(current-age == castle-age)
	(up-compare-goal gl-my-villager-count-total > 95)
	(or	(up-compare-goal gl-my-villager-count-total < 130)
		(population-cap > 240))
	(up-compare-goal gl-my-villager-count-total < 145)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(nand	(goal temporary-goal4 1)
		(up-compare-goal gl-my-villager-count-total > 50))
	(not	(can-research-with-escrow imperial-age))
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)
#end-if

#load-if-defined UP-2-PLAYER-GAME
(defrule
	(game-time > 3000)
	(or	(dropsite-min-distance gold == -1)
		(or	(dropsite-min-distance gold == 255)
			(cc-players-unit-type-count 0 gold-mine < 6)))
	(population-cap < 240)
	(population >= trash-war-villager-limit-pop)
=>
	(set-goal temporary-goal5 1)
)

(defrule
	(goal gl-strategy default)
	(civ-selected byzantine)
	(strategic-number sn-allow-resource-spending > 5)
	(goal CASTLE 0)
	(game-time > 2100)
	(up-compare-goal gl-my-villager-count-total > 115)
	(population-cap < 240)
	(population >= trash-war-villager-limit-pop)
=>
	(set-goal temporary-goal5 1)
)

(defrule
	(current-age == imperial-age)
	(nand	(food-amount > 1600)
		(and	(wood-amount > 1000)
			(gold-amount > 500)))
	(up-compare-goal gl-my-villager-count-total > 95)
	(or	(and	(goal temporary-goal5 0)
			(population <= almost-full-pop))
		(up-compare-goal gl-my-villager-count-total < trash-war-villager-limit))
	(up-compare-goal gl-my-villager-count-total < 130)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)
#else
(defrule
	(current-age == imperial-age)
	(nand	(food-amount > 1600)
		(and	(wood-amount > 1000)
			(gold-amount > 500)))
	(up-compare-goal gl-my-villager-count-total > 95)
	(up-compare-goal gl-my-villager-count-total < 130)
	(up-compare-goal gl-trade-unit-count-total < 10)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(can-train villager)
=>
	(set-goal temporary-goal 1)
)
#end-if

#end-if

(defrule
	(current-age == imperial-age)
	(or	(up-compare-const scout-unit != eagle-warrior-line)
		(and	(up-research-status c: ri-elite-eagle-warrior >= research-pending)
			(and	(up-compare-goal gl-my-villager-count-total < 119)
				(not	(player-in-game any-ally)))))
=>
	(up-jump-rule 4)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(current-age == castle-age)
	(up-pending-objects c: villager-class > 0)
	(or	(research-available first-main-ranged-unit-upgrade)
		(research-available ri-bodkin-arrow))
=>
	(set-goal temporary-goal 0)
)

(defrule
	(up-compare-goal gl-my-villager-count-total > 80)
	(research-available ri-elite-eagle-warrior)
	(or	(up-compare-goal gl-my-villager-count-total > 92)
		(or	(goal gl-enable-pikemen 0)
			(up-compare-goal gl-enemy-cavalry-count < 10)))
	(food-amount < 850)
	(or	(goal gl-strategy eew-strategy)
		(up-compare-goal gl-eagles != 0))
	(up-compare-const scout-unit == eagle-warrior-line)
=>
	(set-goal temporary-goal 0)
)

(defrule
	(population-cap <= 200)
	(current-age >= castle-age)
	(up-compare-goal gl-my-villager-count-total > 113)
	(up-compare-const scout-unit == eagle-warrior-line)
	(nand	(civ-selected aztec)
		(and	(up-compare-goal CASTLE != 0)
			(up-compare-goal gl-my-villager-count-total < 125)))
=>
	(set-goal temporary-goal 0)
)

(defrule
	(goal gl-current-age gv-castle)
	(research-available imperial-age)
	(food-amount > 550)
	(or	(food-amount > 700)
		(up-compare-goal gl-my-villager-count-total > 90))
	(gold-amount > 650)
	(or	(up-compare-goal gl-my-villager-count-total > 72)
		(and	(or	(goal SLING 1)
				(goal SLING 3))
			(gold-amount > 750)))
=>
	(set-goal temporary-goal 0)
)

(defrule
	(civ-selected mayan)
	(goal SLING 3)
	(population-cap <= 200)
	(up-compare-goal gl-my-villager-count-total > 84)
=>
	(set-goal temporary-goal 0)
)

(defrule
	(game-time > 2100)
	(goal temporary-goal 1)
	(can-train villager)
=>
	(train villager)
	(set-goal temporary-goal 0)
)

(defrule
	(or	(up-compare-goal temporary-goal != 1)
		(or	(not	(can-train villager))
			(and	(up-resource-amount 220 == 0)
				(up-compare-flag gl-flag == sync-update-test))))
=>
	(up-jump-rule 5)
)

(defrule
	(up-resource-amount 220 > 0)
	(up-compare-flag gl-flag == sync-update-test)
=>
	(up-get-fact resource-amount 220 temporary-goal)
	(up-modify-goal temporary-goal c:* -1)
	(up-cc-add-resource c: 220 g: temporary-goal); Reset stockpile for next sync test
	(up-modify-flag gl-flag c:- sync-update-test)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(up-full-reset-search)
	(up-find-local c: town-center c: 10)
	(up-find-remote c: town-center c: 10)
	(up-remove-objects search-remote object-data-train-count > 1)
	(up-remove-objects search-remote object-data-researching == 1)
	(up-remove-objects search-local object-data-researching == 1)
	(up-remove-objects search-local object-data-train-count > 0)
	(up-remove-objects search-remote object-data-progress-value < 80)
	(up-clean-search search-remote object-data-progress-value search-order-desc)
)

(defrule
	(not	(up-set-target-object search-local c: 1))
	(up-set-target-object search-remote g: temporary-goal3)
=>
	(up-get-object-data object-data-id temporary-goal6)
	(up-add-object-by-id search-local g: temporary-goal6)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-clean-search search-local object-data-index search-order-none)
	(up-jump-rule -1)
)

(defrule
	(up-compare-goal temporary-goal5 < 2)
	(up-set-target-object search-local g: temporary-goal4)
=>
	(up-modify-goal temporary-goal5 c:+ 1)
	(set-goal temporary-goal3 0)
	(up-remove-objects search-local object-data-index g:!= temporary-goal4)
	(up-modify-goal temporary-goal4 c:+ 1)
	(up-target-point 0 action-train c: villager)
	(up-reset-search 1 1 0 0)
	(up-reset-filters)
	(up-find-local c: town-center c: 10)
	(up-remove-objects search-local object-data-train-count > 0)
	(up-remove-objects search-local object-data-researching == 1)
	(up-cc-add-resource c: 220 c: 1); Add absent resource for sync update check
	(up-modify-flag gl-flag c:+ sync-update-test)
	(up-jump-rule -2)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)
#end-if

#load-if-not-defined DEATH-MATCH
(defrule
	(up-compare-goal gl-current-age >= gv-late-villager-age)
	(up-compare-goal gl-strategy != michi-boom)
	(up-compare-goal gl-strategy != castle-sling)
=>
	(set-strategic-number sn-enable-training-queue 0)
)
#end-if

; ========== TRADING AND TEAM GAME STUFF

;(defrule
;	(not	(taunt-detected 1 53))
;	(or	(strategic-number sn-focus-player-number < 0)
;		(or	(not	(player-valid focus-player))
;			(or	(strategic-number sn-focus-player-number == my-player-number)
;				(stance-toward focus-player ally))))
;=>
;	(up-chat-data-to-all "!!! FOCUS PLAYER (%d) !!! (5)" s: sn-focus-player-number)
;)

#load-if-not-defined WONDER-RACE
#load-if-defined UP-ALLY-IN-GAME
(load "Barbarian\SLING")
#end-if

;(defrule
;	(not	(taunt-detected 1 53))
;	(or	(strategic-number sn-focus-player-number < 0)
;		(or	(not	(player-valid focus-player))
;			(or	(strategic-number sn-focus-player-number == my-player-number)
;				(stance-toward focus-player ally))))
;=>
;	(up-chat-data-to-all "!!! FOCUS PLAYER (%d) !!! (51)" s: sn-focus-player-number)
;)

(defrule
	(goal gl-strategy monk-mango-push)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-current-age <= gv-feudal)
	(building-type-count-total market == 0)
	(strategic-number sn-skip-first-mining-camp == 0)
=>
	(set-strategic-number sn-skip-first-mining-camp 1)
)

; ======== BUILDINGS - HIGH PRIORITY

#load-if-defined DEFEND-WONDER
(defrule
	(building-type-count castle == 0)
	(up-pending-objects c: house < 2)
	(building-type-count-total town-center > 0)
	(population-headroom > 8)
	(housing-headroom < 10)
=>
	(up-modify-goal gl-house-build-priority c:max 1004)
)

(defrule
	(building-type-count castle == 0)
	(up-pending-objects c: house < 2)
	(building-type-count-total town-center > 0)
	(population-headroom > 8)
	(housing-headroom < 10)
=>
	(up-modify-goal gl-house-build-priority c:max 1004)
)
#end-if

#load-if-defined KING-OF-THE-HILL
(defrule
	(game-time > 2200)
	(hold-koh-ruin)
	(not	(map-type ghost-lake))
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
=>
	(set-strategic-number sn-gather-idle-soldiers-at-center 1)
	(set-goal gl-wonder-build-attempt-stage placed)
	(up-modify-flag gl-flag c:+ wonder-build-attempt)
	(set-goal MILITARY 0)
	(up-jump-rule 4)
)

(defrule
	(game-time > 2200)
	(hold-koh-ruin)
	(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
		(map-type ghost-lake))
=>
	(set-strategic-number sn-gather-idle-soldiers-at-center 1)
)

(defrule
	(not	(hold-koh-ruin))
	(goal MILITARY 0)
=>
	(set-strategic-number sn-gather-idle-soldiers-at-center 0)
	(set-goal gl-wonder-build-attempt-stage lost)
	(up-modify-flag gl-flag c:- wonder-build-attempt)
)

(defrule
	(or	(game-time <= 2200)
		(hold-koh-ruin))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal MILITARY != 1)
	(up-timer-status 30 != timer-running)
=>
	(up-full-reset-search)
	(up-get-point position-center gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: all-units-class c: 150)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: all-units-class c: 150)
	(up-target-point gl-point-x action-patrol -1 -1)
	(set-strategic-number sn-gather-idle-soldiers-at-center 1)
	(enable-timer 30 30)
)
#end-if

#load-if-not-defined CASTLE-AGE-END
#load-if-not-defined IMPERIAL-AGE-END
(defrule
	(or	(game-time > 1500)
		(or	(death-match-game)
			(civilian-population > 52)))
	(game-time > 300)
	(building-type-count town-center > 0)
	(population > 12)
	(up-pending-objects c: watch-tower < 1)
	(building-type-count-total watch-tower < 12)
	(goal TSA 0)
	(can-build watch-tower)
=>
	(set-strategic-number sn-placement-zone-size 30)
	(up-set-placement-data my-player-number -1 s: sn-maximum-town-size)
	(up-build place-control 0 c: watch-tower)
)

(defrule
	(or	(game-time > 1500)
		(or	(death-match-game)
			(civilian-population > 52)))
	(game-time > 300)
	(building-type-count town-center > 0)
	(population > 12)
	(up-pending-objects c: watch-tower < 3)
	(goal TSA 1)
	(can-build watch-tower)
=>
	(up-build place-forward 0 c: watch-tower)
)
#end-if
#end-if

#load-if-not-defined DEATH-MATCH
#load-if-defined VICTORY-STANDARD

#load-if-defined DEFEND-WONDER
(defrule
	(building-type-count-total wonder > 0)
=>
	(set-goal gl-wonder-build-attempt-stage placed)
	(up-modify-flag gl-flag c:+ wonder-build-attempt)
	(disable-self)
)
#end-if

(defrule
	(up-compare-flag gl-flag != wonder-build-attempt)
	(up-compare-goal gl-wonder-outpost != YES)
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(up-compare-goal gl-wonder-build-attempt-stage != placed)
	(players-building-type-count every-ally wonder == 0)
	(building-type-count-total wonder == 0)
	(nor	(taunt-detected any-human-ally 37)
		(taunt-detected my-player-number 37))
=>
	(up-jump-rule 34)
)

(defrule
	(or	(population < 150)
		(or	(current-age <= castle-age)
			(and	(goal MILITARY 0)
				(and	(up-compare-goal gl-enemy-units-in-town > 14)
					(population < pop-to-full-pop-attack)))))
	(or	(taunt-detected any-human-ally 37)
		(taunt-detected my-player-number 37))
=>
	(chat-to-player my-player-number "2I'm too weak to build a wonder.")
	(chat-to-player every-ally "2I'm too weak to build a wonder.")
	(acknowledge-taunt every-ally 37)
	(acknowledge-taunt my-player-number 37)
)

(defrule
	(or	(goal gl-wonder-build-attempt-stage saving-resources)
		(goal gl-wonder-build-attempt-stage placed))
	(or	(taunt-detected any-human-ally 37)
		(taunt-detected my-player-number 37))
=>
	(chat-to-player my-player-number "2Either I am or an ally is already building a wonder.")
	(chat-to-player every-ally "2Either I am or an ally is already building a wonder.")
	(acknowledge-taunt every-ally 37)
	(acknowledge-taunt my-player-number 37)
)

(defrule
	(or	(taunt-detected any-human-ally 37)
		(taunt-detected my-player-number 37))
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(up-compare-goal gl-wonder-build-attempt-stage != placed)
=>
	(up-modify-flag gl-flag c:+ wonder-build-attempt)
	(set-goal gl-wonder-build-attempt-stage saving-resources)
	(chat-to-player my-player-number "1Attempting to build a wonder.")
	(chat-to-player every-ally "1Attempting to build a wonder.")
	(acknowledge-taunt every-ally 37)
	(acknowledge-taunt my-player-number 37)
	(set-goal gl-strategy default)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)

(defrule
	(up-compare-goal gl-wonder-placement-at-back > 0)
=>
	(up-modify-goal gl-wonder-placement-at-back c:- 1)
)

(defrule
	(goal gl-wonder-placement-at-back 0)
=>
	(up-reset-placement c: wonder)
	(disable-self)
)

(defrule
	(up-compare-goal gl-wonder-placement-at-back >= 0)
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-flag gl-flag == wonder-build-attempt)
	(up-compare-goal gl-wonder-build-attempt-stage != placed)
	(building-type-count-total wonder < 1)
	(can-build-with-escrow wonder)
=>
	(up-assign-builders c: wonder c: 37)
	(release-escrow stone)
	(release-escrow wood)
	(release-escrow gold)
	(set-escrow-percentage stone 0)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(enable-timer 39 45)
	(up-set-placement-data my-player-number -1 c: -25)
	(up-build place-control 0 c: wonder)
	(set-goal gl-wonder-placement-at-back 4)
)

(defrule
	(up-compare-flag gl-flag == wonder-build-attempt)
	(up-compare-goal gl-wonder-build-attempt-stage != placed)
	(building-type-count-total wonder < 1)
	(can-build-with-escrow wonder)
=>
	(up-assign-builders c: wonder c: 37)
	(up-release-escrow)
	(set-escrow-percentage stone 0)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(enable-timer 39 45)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-modify-sn sn-placement-zone-size g:= gl-my-maximum-town-size)
	(up-build place-control 0 c: wonder)
)

(defrule
	(up-compare-flag gl-flag == wonder-build-attempt)
	(goal gl-wonder-build-attempt-stage saving-resources)
	(building-type-count-total wonder > 0)
=>
	(set-goal gl-wonder-build-attempt-stage placed)
)

(defrule
	(up-compare-flag gl-flag == wonder-build-attempt)
	(goal gl-wonder-build-attempt-stage saving-resources)
	(or	(commodity-buying-price stone < 400)
		(gold-amount > 2000))
	(gold-amount > 1400)
	(stone-amount < 1000)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
)

#load-if-defined KING-OF-THE-HILL
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(or	(up-compare-goal gl-wonder-outpost != YES)
		(building-type-count-total outpost < 1))
	(population >= wonder-outpost-pop)
	(players-building-type-count any-ally victory-building > 0)
	(can-build outpost)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 10)
	(set-goal gl-wonder-outpost YES)
	(up-set-placement-data this-any-ally victory-building c: outpost-distance)
	(up-build place-control 0 c: outpost)
	(set-goal gl-wonder-build-attempt-stage placed)
	(up-modify-flag gl-flag c:+ wonder-build-attempt)
)
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(or	(up-compare-goal gl-wonder-outpost != YES)
		(building-type-count-total outpost < 1))
	(population >= wonder-outpost-pop)
	(players-building-type-count any-computer-ally victory-building > 0)
	(can-build outpost)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 10)
	(set-goal gl-wonder-outpost YES)
	(up-set-placement-data this-any-computer-ally victory-building c: outpost-distance)
	(up-build place-control 0 c: outpost)
	(set-goal gl-wonder-build-attempt-stage placed)
	(up-modify-flag gl-flag c:+ wonder-build-attempt)
)
#end-if

(defrule
	(up-compare-const victory-building == wonder)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-compare-goal gl-wonder-outpost != CHECKING)
	(up-compare-goal gl-wonder-outpost != YES)
	(population >= wonder-outpost-pop)
	(players-building-type-count any-human-ally victory-building > 0)
	(can-build outpost)
=>
	(set-goal gl-wonder-outpost CHECKING)
	(chat-to-allies "Taunt 26 if you want me to defend your wonder.")
	(acknowledge-taunt every-ally 26)
)

(defrule
	(taunt-detected any-human-ally 26)
	(players-building-type-count any-human-ally victory-building > 0)
	(goal gl-wonder-outpost CHECKING)
	(can-build outpost)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 10)
	(set-goal gl-wonder-outpost YES)
	(up-set-placement-data this-any-human-ally victory-building c: outpost-distance)
	(up-build place-control 0 c: outpost)
	(set-goal gl-wonder-build-attempt-stage placed)
	(up-modify-flag gl-flag c:+ wonder-build-attempt)
	(chat-to-allies "1I'll start building defences.")
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(or	(up-compare-goal gl-wonder-outpost != YES)
		(building-type-count-total outpost < 1))
	(population >= wonder-outpost-pop)
	(up-pending-objects c: outpost < 1)
	(building-type-count koth-monument > 0)
	(can-build outpost)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 10)
	(set-goal gl-wonder-outpost YES)
	(up-set-placement-data my-player-number koth-monument c: outpost-distance)
	(up-build place-control 0 c: outpost)
	(set-goal gl-wonder-build-attempt-stage placed)
	(up-modify-flag gl-flag c:+ wonder-build-attempt)
)

(defrule
	(goal gl-unit-spreading-count 10)
=>
	(set-goal gl-unit-spreading-count 11)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
)

(defrule
	(or	(and	(goal gl-wonder-outpost YES)
			(or	(players-building-type-count any-ally wonder > 0)
				(hold-koh-ruin)))
		(building-type-count-total wonder > 0))
	(up-compare-goal MILITARY != 1)
	(up-compare-goal gl-enemy-units-in-town < 5)
	(up-timer-status 39 != timer-running)
=>
	(up-retreat-to outpost c: -1)
	(up-retreat-to wonder c: -1)
	(enable-timer 39 135)
	(set-goal gl-unit-spreading-count 10)
	(set-strategic-number sn-task-ungrouped-soldiers 1)
)

(defrule
	(players-building-type-count every-ally wonder == 0)
	(not	(hold-koh-ruin))
	(or	(and	(building-type-count outpost > 0)
			(goal gl-wonder-outpost YES))
		(goal gl-wonder-outpost CHECKING))
=>
	(set-goal gl-wonder-outpost NO)
	(delete-building outpost)
)

(defrule
	(up-compare-flag gl-flag == wonder-build-attempt)
	(or	(nand	(goal gl-wonder-build-attempt-stage placed)
			(up-compare-const gv-forced-defence == 0))
		(players-building-type-count wonder-owner wonder > 0))
	(nor	(enemy-captured-relics)
		(players-building-type-count any-enemy wonder > 0))
	(or	(up-timer-status 7 != timer-disabled)
		(up-compare-goal MILITARY != 0))
=>
	(disable-timer 7)
	(set-goal MILITARY 0)
	(set-strategic-number sn-hitting-pop-cap NO)
)

(defrule
	(up-compare-flag gl-flag == wonder-build-attempt)
	(or	(enemy-captured-relics)
		(or	(players-building-type-count any-enemy wonder > 0)
			(and	(goal gl-wonder-build-attempt-stage placed)
				(not	(players-building-type-count any-human-ally wonder > 0)))))
	(up-compare-const gv-defend-wonder == 0)
	(up-compare-const victory-building == wonder)
	(up-timer-status 7 == timer-disabled)
=>
	(enable-timer 7 0)
)

(defrule
	(goal gl-wonder-build-attempt-stage placed)
	(not	(hold-koh-ruin))
	(building-type-count-total wonder == 0)
	(players-building-type-count wonder every-ally == 0)
=>
	(set-goal gl-wonder-build-attempt-stage lost)
	(up-modify-flag gl-flag c:- wonder-build-attempt)
	(enable-timer 7 0)
)

(defrule
	(game-time > 240)
	(goal gl-wonder-build-attempt-stage placed)
	(players-building-type-count any-ally victory-building > 0)
	(building-type-count-total castle > 0)
	(can-build castle)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 25)
	(up-set-placement-data this-any-ally victory-building c: 4)
	(up-build place-control 0 c: castle)
	(set-goal gl-castle-placed YES)
	(set-goal castle-dropped-timer 30)
;	(chat-to-player my-player-number "Castle for protection")
)

(defrule
	(game-time > 240)
	(up-compare-flag gl-flag == wonder-build-attempt)
	(building-type-count victory-building > 0)
	(can-build castle)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 25)
	(up-set-placement-data my-player-number victory-building c: 4)
	(up-build place-control 0 c: castle)
	(set-goal gl-castle-placed YES)
	(set-goal castle-dropped-timer 30)
;	(chat-to-player my-player-number "Castle for protection")
)

(defrule
	(game-time > 240)
;	(current-age == gv-maximum-age)
	(up-compare-flag gl-flag == wonder-build-attempt)
	(goal gl-wonder-build-attempt-stage placed)
	(players-building-type-count any-ally victory-building > 0)
	(building-type-count-total castle > 0)
	(nor	(building-available bombard-tower)
		(up-research-status c: ri-bombard-tower >= research-available))
	(up-research-status c: ri-guard-tower >= research-available)
	(building-type-count-total watch-tower < 7)
	(can-build watch-tower)
=>
	(up-assign-builders c: watch-tower c: 1)
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 10)
	(up-set-placement-data this-any-ally victory-building c: 4)
	(up-build place-control 0 c: watch-tower)
)

(defrule
	(game-time > 240)
	(current-age == gv-maximum-age)
	(building-type-count victory-building > 0)
	(building-type-count-total castle > 0)
	(nor	(building-available bombard-tower)
		(up-research-status c: ri-bombard-tower >= research-available))
	(up-research-status c: ri-guard-tower >= research-available)
	(building-type-count-total watch-tower < 7)
	(can-build watch-tower)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 10)
	(up-set-placement-data my-player-number victory-building c: 4)
	(up-build place-control 0 c: watch-tower)
)

(defrule
	(game-time > 240)
	(up-compare-flag gl-flag == wonder-build-attempt)
	(goal gl-wonder-build-attempt-stage placed)
	(players-building-type-count any-ally victory-building > 0)
	(building-type-count-total castle > 0)
	(can-build bombard-tower)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 10)
	(up-set-placement-data this-any-ally victory-building c: 4)
	(up-build place-control 0 c: bombard-tower)
)

(defrule
	(game-time > 240)
	(building-type-count victory-building > 0)
	(building-type-count-total castle > 0)
	(can-build bombard-tower)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 10)
	(up-set-placement-data my-player-number victory-building c: 4)
	(up-build place-control 0 c: bombard-tower)
)

#load-if-not-defined DEFEND-WONDER
(defrule
	(game-time > 240)
	(goal gl-wonder-build-attempt-stage placed)
	(players-building-type-count any-ally victory-building > 0)
	(or	(up-compare-goal gl-advanced-infantry != 0)
		(up-compare-goal gl-eagles != 0))
	(wood-amount > 500)
	(or	(building-type-count-total barracks < 7)
		(wood-amount > 1800))
	(building-type-count-total barracks < 17)
	(can-build barracks)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 15)
	(up-set-placement-data this-any-ally victory-building c: 7)
	(up-build place-control 0 c: barracks)
)

(defrule
	(game-time > 240)
	(building-type-count-total victory-building > 0)
	(up-compare-flag gl-flag == wonder-build-attempt)
	(or	(up-compare-goal gl-advanced-infantry != 0)
		(up-compare-goal gl-eagles != 0))
	(wood-amount > 500)
	(or	(building-type-count-total barracks < 7)
		(wood-amount > 2000))
	(building-type-count-total barracks < 17)
	(can-build barracks)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 15)
	(up-set-placement-data my-player-number victory-building c: 8)
	(up-build place-control 0 c: barracks)
)

(defrule
	(game-time > 240)
	(goal gl-wonder-build-attempt-stage placed)
	(players-building-type-count any-ally victory-building > 0)
	(goal gl-strategy default)
	(up-compare-goal gl-advanced-archery != 0)
	(up-compare-goal gl-advanced-archery != scorpions)
	(wood-amount > 500)
	(or	(building-type-count-total archery-range < 7)
		(wood-amount > 1800))
	(building-type-count-total archery-range < 17)
	(can-build archery-range)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 15)
	(up-set-placement-data this-any-ally victory-building c: 8)
	(up-build place-control 0 c: archery-range)
)

(defrule
	(game-time > 240)
	(building-type-count-total victory-building > 0)
	(up-compare-flag gl-flag == wonder-build-attempt)
	(goal gl-strategy default)
	(up-compare-goal gl-advanced-archery != 0)
	(up-compare-goal gl-advanced-archery != scorpions)
	(strategic-number sn-allow-resource-spending > 4)
	(wood-amount > 500)
	(building-type-count-total archery-range < 7)
	(can-build archery-range)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 15)
	(up-set-placement-data my-player-number victory-building c: 8)
	(up-build place-control 0 c: archery-range)
)

(defrule
	(game-time > 240)
	(goal gl-wonder-build-attempt-stage placed)
	(players-building-type-count any-ally victory-building > 0)
	(up-compare-goal gl-advanced-cavalry != 0)
	(strategic-number sn-allow-resource-spending > 4)
	(wood-amount > 500)
	(or	(building-type-count-total stable < 7)
		(wood-amount > 1400))
	(building-type-count-total stable < 13)
	(can-build stable)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 15)
	(up-set-placement-data this-any-ally victory-building c: 8)
	(up-build place-control 0 c: stable)
)

(defrule
	(game-time > 240)
	(building-type-count-total victory-building > 0)
	(up-compare-flag gl-flag == wonder-build-attempt)
	(up-compare-goal gl-advanced-cavalry != 0)
	(strategic-number sn-allow-resource-spending > 4)
	(wood-amount > 500)
	(building-type-count-total stable < 7)
	(can-build stable)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 15)
	(up-set-placement-data my-player-number victory-building c: 8)
	(up-build place-control 0 c: stable)
)

(defrule
	(game-time > 240)
	(goal gl-wonder-build-attempt-stage placed)
	(players-building-type-count any-ally victory-building > 0)
	(up-compare-flag gl-flag == wonder-build-attempt)
	(strategic-number sn-allow-resource-spending > 4)
	(wood-amount > 500)
	(building-type-count-total siege-workshop < 5)
	(can-build siege-workshop)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 15)
	(up-set-placement-data this-any-ally victory-building c: 7)
	(up-build place-control 0 c: siege-workshop)
)

(defrule
	(game-time > 240)
	(building-type-count-total victory-building > 0)
	(up-compare-flag gl-flag == wonder-build-attempt)
	(strategic-number sn-allow-resource-spending > 4)
	(wood-amount > 500)
	(building-type-count-total siege-workshop < 5)
	(can-build siege-workshop)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 15)
	(up-set-placement-data my-player-number victory-building c: 7)
	(up-build place-control 0 c: siege-workshop)
)
#end-if
#end-if
#end-if

#end-if; Wonder Race

#load-if-defined DEATH-MATCH
(load "Barbarian\DeathMatch")
#else

#load-if-not-defined WONDER-RACE

#load-if-not-defined REGICIDE
#load-if-not-defined DEFEND-WONDER
#load-if-not-defined FORTRESS-MAP
#load-if-not-defined MIGRATION-MAP

(defrule
	(or	(game-time >= 3000)
		(or	(goal gl-strategy saracen-heavy-krush)
			(or	(and	(goal gl-strategy eagle-rush)
					(players-current-age target-player == feudal-age))
				(or	(up-compare-goal gl-current-age != gv-castle)
					(up-compare-goal gl-my-villager-count < 25)))))
=>
	(up-jump-rule 18)
)

(defrule
	(game-time < 2400)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(goal POSITION FLANK)
	(goal TSA 1)
	(building-type-count-total farm > 16)
	(players-military-population focus-player < 15)
	(up-compare-goal gl-military-percentage3 > 160)
	(soldier-count > 28)
	(building-type-count town-center >= early-ram-TCs)
	(or	(up-compare-goal gl-enemy-wall-count-total < 5)
		(building-type-count town-center > 2))
	(unit-type-count-total battering-ram-line < 3)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 75)
	(up-modify-goal gl-panic-xbow-counter c:max 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(unit-type-count-total battering-ram-line < 1)
		(players-building-type-count target-player watch-tower > 4))
	(unit-type-count-total battering-ram-line < 2)
	(unit-type-count-total trebuchet-set < 1)
	(up-compare-goal gl-enemy-tower-count > 2)
	(up-compare-goal gl-enemy-tower-distance < 33)
=>
	(up-modify-escrow wood c:max 320); Buffer for rams
	(up-modify-escrow gold c:max 150)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal g:= gl-max-farm-count)
	(up-modify-goal temporary-goal c:- 2)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(or	(and	(soldier-count < 12)
			(player-valid 5))
		(and	(up-research-status c: ri-bodkin-arrow >= research-pending)
			(and	(up-compare-goal gl-soldier-percentage > 50)
				(players-current-age focus-player <= feudal-age))))
=>
	(up-jump-rule 14)
)

(defrule
	(or	(and	(building-type-count-total market < 1)
			(and	(wood-amount < 400)
				(and	(up-research-status c: imperial-age >= research-available)
					(and	(civilian-population > 90)
						(up-compare-const gv-players-in-team >= 2)))))
		(or	(building-type-count-total farm g:< temporary-goal)
			(and	(soldier-count < 30)
				(unit-type-count-total mangonel-line > 2))))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-my-villager-count > 45)
	(up-compare-goal gl-castle-age-style >= mangonel-push)
	(or	(goal gl-castle-age-style mangonel-push)
		(or	(unit-type-count-total mangonel-line < 2)
			(building-type-count-total town-center > 2)))
	(nand	(up-compare-goal gl-castle-age-style >= mangonel-defence)
		(soldier-count < 20))
	(unit-type-count-total mangonel-line < 5)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 135)
	(set-goal gl-panic-xbow-counter YES)
)

(defrule
	(up-compare-goal gl-my-villager-count > 45)
	(unit-type-count archery-class > 15)
	(unit-type-count cavalry-class < 3)
	(up-compare-goal gl-eagle-warrior-count < 4)
	(unit-type-count infantry-class < 7)
	(up-compare-goal gl-enemy-onager-count > 0)
	(or	(up-compare-goal gl-enemy-onager-count > 1)
		(and	(building-type-count siege-workshop > 0)
			(unit-type-count-total mangonel-line < 1)))
	(up-compare-const gv-pocket-value == FLANK)
	(unit-type-count-total mangonel-line < 2)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 135)
	(set-goal gl-panic-xbow-counter YES)
)

(defrule
	(up-compare-goal gl-target-player-distance < 40)
	(up-compare-goal gl-my-villager-count > 30)
	(soldier-count < 5)
	(unit-type-count cavalry-class < 3)
	(up-compare-goal gl-eagle-warrior-count < 3)
	(unit-type-count infantry-class < 3)
	(up-compare-goal gl-enemy-onager-count > 0)
	(or	(up-compare-goal gl-enemy-onager-count > 1)
		(unit-type-count-total mangonel-line < 1))
	(up-compare-const gv-pocket-value == FLANK)
	(unit-type-count-total mangonel-line < 2)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 135)
	(set-goal gl-panic-xbow-counter YES)
)

(defrule
	(up-compare-goal gl-my-villager-count > 35)
	(soldier-count < 15)
	(unit-type-count cavalry-class < 3)
	(up-compare-goal gl-eagle-warrior-count < 4)
	(unit-type-count infantry-class < 7)
	(up-compare-goal gl-enemy-onager-count > 0)
	(or	(up-compare-goal gl-enemy-onager-count > 1)
		(and	(building-type-count siege-workshop > 0)
			(unit-type-count-total mangonel-line < 1)))
	(up-compare-const gv-pocket-value == FLANK)
	(unit-type-count-total mangonel-line < 2)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 135)
	(set-goal gl-panic-xbow-counter YES)
)

(defrule
	(up-compare-goal gl-my-villager-count > 35)
	(soldier-count < 20)
	(unit-type-count cavalry-class < 10)
	(unit-type-count huskarl-set < 10)
	(or	(up-compare-goal gl-enemy-archery-count > 25)
		(and	(goal gl-strategy castle-push)
			(and	(players-unit-type-count focus-player battering-ram-line > 0)
				(unit-type-count-total mangonel-line < 1))))
	(up-compare-const gv-pocket-value == FLANK)
	(unit-type-count-total mangonel-line < 2)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 135)
	(set-goal gl-panic-xbow-counter YES)
)

(defrule
	(or	(and	(goal gl-enemy-strategy SCORPION-RUSH)
			(and	(unit-type-count-total mangonel-line < 2)
				(game-time < 1800)))
		(up-compare-goal gl-enemy-scorpion-count > 5))
	(or	(up-compare-goal gl-enemy-heavy-cavalry-count < 2)
		(unit-type-count-total mangonel-line < 2))
	(up-compare-const gv-pocket-value == FLANK)
	(unit-type-count-total mangonel-line < 4)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 135)
	(set-goal gl-panic-xbow-counter YES)
)

(defrule
	(up-compare-goal gl-my-villager-count > 50)
	(or	(unit-type-count archery-class > 15)
		(unit-type-count mounted-archery-class > 10))
	(up-compare-goal gl-enemy-cavalry-count < 5)
	(up-compare-goal gl-enemy-skirmisher-count > 15)
	(unit-type-count cavalry-class < 4)
	(up-compare-goal gl-eagle-warrior-count < 6)
	(building-type-count town-center > 2)
	(or	(building-type-count siege-workshop > 0)
		(up-compare-goal gl-enemy-archer-count < 15))
	(unit-type-count-total mangonel-line < 3)
=>
	(up-modify-escrow wood c:max 160)
	(up-modify-escrow gold c:max 135)
	(set-goal gl-panic-xbow-counter YES)
)

(defrule
	(up-compare-goal gl-my-villager-count > 45)
	(unit-type-count archery-class > 10)
	(unit-type-count cavalry-class < 4)
	(up-compare-goal gl-eagle-warrior-count < 5)
	(up-compare-goal gl-enemy-scorpion-count > 1)
	(or	(up-compare-goal gl-enemy-scorpion-count > 4)
		(unit-type-count-total mangonel-line < 1))
	(building-type-count siege-workshop > 0)
	(up-compare-const gv-pocket-value == FLANK)
	(unit-type-count-total mangonel-line < 2)
=>
	(up-modify-escrow wood c:max 160)
	(up-modify-escrow gold c:max 135)
	(set-goal gl-panic-xbow-counter YES)
)

(defrule
	(or	(or	(up-compare-goal gl-enemy-heavy-cavalry-count >= 1)
			(or	(up-compare-goal gl-enemy-eagle-count >= 2)
				(or	(up-compare-goal gl-enemy-infantry-count >= 2)
					(up-compare-goal gl-enemy-cavalry-count >= 2))))
		(or	(game-time >= 2400)
			(or	(soldier-count >= 12)
				(or	(goal TSA 1)
					(goal gl-strategy scorpion-rush)))))
=>
	(up-jump-rule 4)
)

(defrule
	(goal POSITION POCKET)
	(or	(and	(game-time < 1200)
			(and	(or	(soldier-count < 6)
					(unit-type-count-total knight-line > 3))
				(and	(up-compare-goal gl-enemy-units-in-town < 15)
					(building-type-count market == 0))))
		(or	(up-unit-type-in-town c: archery-class < 4)
			(up-timer-status 38 == timer-running))); We've just started retreating
=>
	(up-jump-rule 3)
)

(defrule
	(soldier-count < 4)
	(up-compare-goal gl-enemy-archery-count > 6)
	(or	(and	(town-under-attack)
			(or	(up-compare-const gv-x-vs-one-challenge == 1)
				(and	(up-allied-goal any-computer-ally gl-identity != Barbarian)
					(up-unit-type-in-town c: archery-class > 5))))
		(up-compare-const gv-pocket-position == 0))
	(unit-type-count-total mangonel-line < 2)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 135)
	(set-goal gl-panic-xbow-counter YES)
)

(defrule
	(goal POSITION FLANK)
	(up-compare-goal gl-rush-suitability-on-map >= AVERAGE)
	(goal gl-enemy-strategy XBOW-RUSH)
	(up-compare-goal gl-strategy-type >= FI)
	(unit-type-count-total mangonel-line < 1)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 135)
	(set-goal gl-panic-xbow-counter YES)
)

(defrule
	(up-compare-goal gl-enemy-archery-count > 13)
	(or	(town-under-attack)
		(or	(and	(up-compare-const gv-x-vs-one-challenge == 1)
				(and	(building-type-count town-center > 1)
					(and	(up-compare-goal gl-rush-suitability-on-map >= AVERAGE)
						(unit-type-count-total mangonel-line < 1)))); Booming may get damaged, but atleast we don't die to xbows too easily
			(up-compare-const gv-pocket-position == 0)))
	(unit-type-count-total mangonel-line < 2)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 135)
	(set-goal gl-panic-xbow-counter YES)
)

#load-if-not-defined UP-POCKET-POSITION
(defrule
	(up-compare-goal gl-castle-age-style >= mangonel-push)
	(building-type-count-total siege-workshop < 2)
	(nand	(or	(and	(goal gl-castle-age-style mangonel-defence)
				(building-type-count-total town-center < 3))
			(goal gl-castle-age-style one-workshop-mangonels))
		(building-type-count-total siege-workshop > 0))
	(can-build-with-escrow siege-workshop)
=>
	(set-goal gl-workshop-build-priority 10000)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(game-time < 2700)
	(up-compare-goal gl-current-age >= gv-castle)
	(strategic-number sn-allow-resource-spending >= 0)
	(up-compare-goal gl-my-villager-count > 25)
	(nand	(population > 80)
		(players-population target-player < 50))
	(up-projectile-detected projectile-castle < 600000)
	(unit-type-count-total battering-ram-line < 3)
	(unit-type-count-total trebuchet-set < 1)
	(players-building-type-count target-player castle > 0)
	(up-compare-goal gl-enemy-castle-distance < 35)
=>
	(up-modify-escrow wood c:max 320)
	(up-modify-escrow gold c:max 150)
)

(defrule
	(building-type-count-total siege-workshop < 1)
	(or	(and	(or	(up-compare-goal gl-enemy-tower-count > 2)
				(players-building-type-count target-player castle > 0))
			(and	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
				(or	(up-compare-goal gl-enemy-tower-distance < 35)
					(up-compare-goal gl-enemy-castle-distance < 35))))
		(up-compare-goal gl-panic-xbow-counter > 0))
	(can-build-with-escrow siege-workshop)
=>
	(set-goal gl-workshop-build-priority 10000)
	(set-strategic-number sn-monk-trained 1)
)
#else
(defrule
	(game-time < 2700)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-compare-goal gl-current-age >= gv-castle)
	(strategic-number sn-allow-resource-spending >= 0)
	(up-compare-goal gl-my-villager-count > 25)
	(population > 55)
	(up-projectile-detected projectile-castle < 600000)
	(or	(building-type-count-total siege-workshop < 1)
		(unit-type-count-total battering-ram-line < 3))
	(unit-type-count-total trebuchet-set < 1)
	(players-building-type-count target-player castle > 0)
	(up-compare-goal gl-enemy-castle-distance < 35)
=>
	(up-modify-escrow wood c:max 320)
	(up-modify-escrow gold c:max 150)
)

(defrule
	(building-type-count-total siege-workshop < 1)
	(or	(and	(or	(up-compare-goal gl-enemy-tower-count > 2)
				(players-building-type-count target-player castle > 0))
			(or	(up-compare-goal gl-enemy-tower-distance < 35)
				(up-compare-goal gl-enemy-castle-distance < 35)))
		(up-compare-goal gl-panic-xbow-counter > 0))
	(can-build-with-escrow siege-workshop)
=>
	(set-goal gl-workshop-build-priority 10000)
	(set-strategic-number sn-monk-trained 1)
)
#end-if

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(or	(and	(goal gl-gathering-inside EVEN-CASTLE)
			(and	(up-compare-goal gl-my-villager-count-total >= 65)
				(and	(up-compare-goal gl-target-player-distance < 33)
					(unit-type-count-total scorpion-line > 0))))
		(and	(building-type-count-total siege-workshop < 1)
			(up-compare-goal gl-enemy-castle-distance < 40)))
	(building-type-count-total town-center > 2)
	(building-type-count-total siege-workshop < 3)
	(can-build-with-escrow siege-workshop)
=>
	(set-goal gl-workshop-build-priority 10000)
)
#end-if
#end-if
#end-if
#end-if

#load-if-defined IMPERIAL-AGE-END
(defrule
	(or	(and	(building-type-count-total siege-workshop > 0)
			(and	(building-type-count-total monastery > 0)
				(up-compare-const gv-migration == 0)))
		(or	(and	(goal gl-strategy default)
				(current-age-time < 5))
			(and	(civ-selected khmer)
				(up-compare-const all-techs-enabled == 0))))
=>
	(up-jump-rule 6)
)

(defrule
	(goal gl-current-age gv-castle)
	(or	(and	(food-amount >= high-castle-food)
			(gold-amount >= high-castle-gold))
		(and	(goal gl-strategy castle-drop)
			(and	(players-current-age focus-player <= feudal-age)
				(and	(players-military-population focus-player > 4)
					(goal POSITION FLANK)))))
	(building-type-count-total primary-up-building < 1)
	(building-type-count castle < 1)
=>
	(up-modify-goal gl-primary-up-build-priority c:max 1003)
)

(defrule
	(goal gl-current-age gv-castle)
	(up-compare-goal gl-migration-notice >= min-migration-progress)
	(or	(and	(civilian-population > 70)
			(and	(food-amount >= 550)
				(and	(gold-amount >= 400)
					(building-type-count-total town-center > 2))))
		(and	(goal gl-strategy ranged-rush-strategy)
			(goal RAM 1)))
	(building-type-count castle < 1)
	(building-type-count-total siege-workshop < 1)
=>
	(up-modify-escrow wood c:max 200)
)

(defrule
	(goal gl-current-age gv-castle)
	(up-compare-goal gl-migration-notice >= min-migration-progress)
	(or	(and	(civilian-population > 70)
			(and	(food-amount >= 500)
				(gold-amount >= 400)))
		(and	(taunt-detected my-player-number 175)
			(goal SLING 0)))
	(building-type-count-total town-center > 2)
	(building-type-count-total siege-workshop < 1)
	(can-build-with-escrow siege-workshop)
=>
	(set-goal gl-workshop-build-priority 10000)
)

(defrule
	(goal gl-current-age gv-castle)
	(civilian-population > 60)
	(or	(civilian-population >= monastery-villagers1)
		(and	(food-amount >= needed-castle-food)
			(gold-amount >= needed-castle-gold)))
	(food-amount >= 500)
	(gold-amount >= 400)
	(building-type-count-total town-center >= TCs-for-up-monastery)
	(not	(research-available imperial-age))
	(building-type-count castle < 1)
	(building-type-count-total monastery < 1)
	(building-type-count-total secondary-up-building < 1)
=>
	(up-modify-escrow wood c:max 175)
)

(defrule
	(goal gl-current-age gv-castle)
	(civilian-population >= monastery-villagers1)
	(food-amount >= 500)
	(gold-amount >= 400)
	(building-type-count-total town-center >= TCs-for-up-monastery)
	(up-research-status c: imperial-age != research-available)
	(current-age-time > 5)
	(building-type-count castle < 1)
	(building-type-count-total monastery < 1)
	(building-type-count-total secondary-up-building < 1)
	(can-build-with-escrow monastery)
=>
	(release-escrow wood)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-modify-sn sn-placement-zone-size g:= gl-my-maximum-town-size)
	(up-build place-control 0 c: monastery)
)

(defrule
	(goal gl-current-age gv-castle)
	(food-amount >= needed-castle-food)
	(gold-amount >= needed-castle-gold)
	(building-type-count town-center >= 1)
	(not	(research-available imperial-age))
	(building-type-count castle < 1)
	(building-type-count-total monastery < 1)
	(building-type-count-total secondary-up-building < 1)
	(can-build-with-escrow monastery)
=>
	(release-escrow wood)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-modify-sn sn-placement-zone-size g:= gl-my-maximum-town-size)
	(up-build place-control 0 c: monastery)
)
#end-if

(defrule
	(goal gl-workshop-build-priority 10000)
	(can-build-with-escrow siege-workshop)
=>
	(set-goal gl-workshop-build-priority -1)
	(release-escrow wood)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-modify-sn sn-placement-zone-size g:= gl-my-maximum-town-size)
	(up-build place-control 0 c: siege-workshop)
)

(defrule
	(goal gl-feudal-infantry men-at-arms)
	(building-type-count-total barracks < 1)
=>
	(up-jump-rule 3)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(strategic-number sn-nomad-style-start == 0)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(strategic-number sn-skip-first-mining-camp == 0)
	(current-age < castle-age)
	(nand	(goal gl-DRUSH YES)
		(goal gl-current-age gv-dark))
	(strategic-number sn-gold-gatherer-percentage > 0)
	(building-type-count-total mining-camp < 6)
	(dropsite-min-distance gold > 3)
	(resource-found gold)
	(can-build mining-camp)
=>
	(up-modify-sn sn-allow-adjacent-dropsites g:= gl-mining-camp-backup)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build mining-camp)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(strategic-number sn-nomad-style-start == 1)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(strategic-number sn-skip-first-mining-camp == 0)
	(current-age < castle-age)
	(strategic-number sn-gold-gatherer-percentage > 0)
	(building-type-count-total mining-camp < 6)
	(dropsite-min-distance gold > 3)
	(dropsite-min-distance gold < 255)
	(resource-found gold)
	(can-build mining-camp)
=>
	(up-modify-sn sn-allow-adjacent-dropsites g:= gl-mining-camp-backup)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build mining-camp)
)

(defrule
	(strategic-number sn-allow-new-build-order == 2)
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(current-age < castle-age)
	(building-type-count-total mining-camp < 6)
	(nand	(civ-selected saracen)
		(up-compare-goal gl-current-age < gv-feudal-up))
	(dropsite-min-distance gold > 3)
	(dropsite-min-distance gold < 255)
	(resource-found gold)
	(can-build mining-camp)
=>
	(up-modify-sn sn-allow-adjacent-dropsites g:= gl-mining-camp-backup)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(up-modify-sn sn-mining-camp-max-distance c:max 30)
	(build mining-camp)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal)
	(building-type-count-total market < 1)
	(or	(goal gl-strategy eew-strategy)
		(or	(up-compare-goal gl-strategy-type >= FI)
			(or	(goal gl-strategy castle-drop)
				(or	(game-time > 3000)
					(or	(goal gl-strategy michi-boom)
						(or	(goal gl-strategy scorpion-rush)
							(gold-amount > 1000)))))))
=>
	(up-modify-goal gl-market-build-priority c:max 1002)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal)
	(building-type-count-total market < 1)
	(or	(goal gl-strategy scorpion-boom)
		(or	(goal gl-strategy monk-mango-push)
			(or	(goal gl-strategy mongol-boom)
				(or	(food-amount > 1250)
					(and	(up-research-status c: imperial-age >= research-available)
						(civilian-population > 90))))))
=>
	(up-modify-goal gl-market-build-priority c:max 1002)
)

(defrule
	(timer-triggered 8)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal CASTLE != 0)
	(or	(building-type-count-total mining-camp < 12)
		(wood-amount > 400))
	(up-compare-goal gl-my-villager-count > 15)
	(or	(up-pending-objects c: mining-camp < 1)
		(strategic-number sn-defer-dropsite-update == 0))
	(dropsite-min-distance stone > 3)
	(dropsite-min-distance stone < 255)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp)
)

(defrule
	(timer-triggered 8)
	(up-compare-goal gl-my-villager-count-total > 10)
	(or	(up-compare-goal gl-my-villager-count-total < 30)
		(game-time < 1700))
	(civilian-population < lumber-villagers1)
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 255)
	(current-age <= castle-age)
	(resource-found wood)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(enable-timer 8 max-lumbercamp-renew-time)
	(build lumber-camp)
)

(defrule
	(timer-triggered 8)
	(up-compare-goal gl-my-villager-count-total >= 30)
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 255)
	(or	(civilian-population < lumber-villagers2)
		(or	(building-type-count-total town-center < 3)
			(unit-type-count villager-wood < 38)))
	(resource-found wood)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(enable-timer 8 210)
	(build lumber-camp)
)

(defrule
	(timer-triggered 8)
	(up-compare-goal gl-my-villager-count-total >= 180)
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 255)
	(resource-found wood)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(enable-timer 8 120)
	(build lumber-camp)
)

(defrule
	(timer-triggered 8)
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 255)
	(resource-found wood)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(enable-timer 8 165)
	(build lumber-camp)
)

#load-if-not-defined DEFEND-WONDER
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(up-compare-goal gl-current-age != gv-castle-up)
	(building-type-count-total blacksmith > 0)
=>
	(up-jump-rule 5)
)

(defrule
	(goal gl-current-age gv-castle-up)
	(or	(and	(food-amount > 1300)
			(population >= pop-to-full-pop-attack))
		(up-compare-const gv-michi-style == 1))
	(building-type-count-total blacksmith < 2)
=>
	(up-modify-goal gl-blacksmith-build-priority c:max 1001)
)

(defrule
	(goal gl-strategy flush)
	(or	(building-type-count-total archery-range > 1)
		(or	(and	(building-type-count-total archery-range > 0)
				;(or	(goal gl-feudal-infantry men-at-arms)
					(strategic-number sn-age-up-castle == 1));)
			(game-time > 3000)))
	(building-type-count-total blacksmith < 1)
=>
	(up-modify-goal gl-blacksmith-build-priority c:max 1001)
)

(defrule
	(or	(soldier-count > 5)
		(up-compare-goal gl-current-age >= gv-feudal-up))
	(nand	(or	(goal gl-strategy flush)
			(or	(goal gl-strategy scrush)
				(up-compare-goal gl-strategy-type >= FC)))
		(up-compare-goal gl-current-age <= gv-feudal))
	(building-type-count-total blacksmith < 1)
=>
	(up-modify-goal gl-blacksmith-build-priority c:max 1001)
)

(defrule
	(up-compare-goal gl-strategy != saracen-heavy-krush)
	(up-compare-goal gl-strategy-type >= FC)
	(building-type-count-total blacksmith < 1)
	(or	(building-type-count-total market > 0)
		(or	(building-type-count-total stable > 0)
			(building-type-count-total archery-range > 0)))
	(building-type-count lumber-camp > 0)
	(up-compare-goal threat-time > 10000)
	(can-build blacksmith)
=>
	(set-strategic-number sn-placement-zone-size 7)
	(up-set-placement-data my-player-number lumber-camp c: 2)
	(up-build place-control 0 c: blacksmith)
	(disable-self)
)

(defrule
	(up-compare-goal gl-strategy != saracen-heavy-krush)
	(up-compare-goal gl-strategy-type >= FC)
	(building-type-count-total blacksmith < 1)
	(or	(building-type-count-total market > 0)
		(or	(building-type-count-total stable > 0)
			(building-type-count-total archery-range > 0)))
=>
	(up-modify-goal gl-blacksmith-build-priority c:max 1001)
)
#end-if
#end-if

(defrule
	(or	(up-compare-goal gl-TC-lost != NO)
		(or	(up-compare-goal gl-current-age != gv-feudal)
			(or	(up-compare-goal gl-strategy != flush)
				(and	(or	(current-age-time < 10)
						(and	(current-age-time < 40)
							(wood-amount < 250)))
					(and	(goal gl-feudal-infantry men-at-arms)
						(building-type-count-total archery-range > 0))))))
=>
	(up-jump-rule 4)
)

(defrule
	(goal SLING 3)
	(building-type-count-total archery-range < 4)
	(building-type-count-total blacksmith > 0)
=>
	(up-modify-goal gl-range-build-priority c:max 999)
)

(defrule
	(goal gl-feudal-archery pure-archers)
	(up-research-status c: ri-fletching >= research-pending)
	(game-time > 930)
	(or	(game-time > 1140)
		(and	(building-type-count-total archery-range < 3)
			(up-compare-goal gl-military-percentage < 90)))
	(or	(game-time > 1230)
		(building-type-count-total archery-range < 4))
	(soldier-count g:< gl-toughest-fought-enemy-military)
	(strategic-number sn-age-up-castle < 1)
	(building-type-count blacksmith > 0)
	(building-type-count-total archery-range < 5)
=>
	(up-modify-goal gl-range-build-priority c:max 999)
)

(defrule
	(game-time > 1260)
	(wood-amount > 350)
	(strategic-number sn-age-up-castle < 1)
	(up-compare-goal gl-my-villager-count > 50)
	(or	(up-compare-goal gl-my-villager-count > 60)
		(building-type-count-total archery-range < 5))
	(or	(up-compare-goal gl-my-villager-count > 70)
		(building-type-count-total archery-range < 6))
	(building-type-count-total archery-range < 8)
=>
	(up-modify-goal gl-range-build-priority c:max 999)
)

(defrule
	(or	(up-compare-goal gl-feudal-archery != 0)
		(and	(strategic-number sn-age-up-castle == 1)
			(building-type-count-total archery-range < 2)))
	(or	(building-type-count-total archery-range < 2)
		(and	(game-time > 960)
			(and	(up-research-status c: ri-wheel-barrow >= research-pending)
				(and	(up-research-status c: ri-fletching >= research-pending)
					(up-compare-goal gl-feudal-archery != pure-archers)))))
	(building-type-count-total archery-range < 3)
=>
	(up-modify-goal gl-range-build-priority c:max 999)
)

(defrule
	(goal gl-TC-lost NO)
	(goal gl-strategy flush)
	(or	(goal gl-current-age gv-feudal)
		(and	(goal gl-advanced-trash YES)
			(building-type-count town-center > 2)))
	(game-time > 1320)
	(or	(wood-amount > 450)
		(strategic-number sn-age-up-castle != 1))
	(building-type-count-total archery-range < 4)
=>
	(up-modify-goal gl-range-build-priority c:max 999)
)

(defrule
	(goal gl-TC-lost NO)
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(goal gl-advanced-trash YES)
		(goal gl-advanced-archery slingers))
	(building-type-count-total archery-range < 2)
=>
	(up-modify-goal gl-range-build-priority c:max 999)
)

#load-if-not-defined TURKISH-CIV
(defrule
	(or	(goal gl-TC-lost YES)
		(or	(and	(goal gl-current-age gv-feudal)
				(up-compare-goal gl-strategy-type >= FC))
			(or	(up-compare-goal gl-current-age <= gv-dark-up)
				(or	(building-type-count town-center == 0)
					(up-compare-goal gl-migration-notice < min-migration-progress)))))
=>
	(up-jump-rule 4)
)

(defrule
	(goal gl-strategy ew-boom)
	(or	(and	(goal gl-strategy-control gv-1-barracks)
			(or	(and	(building-type-count-total town-center < 3)
					(wood-amount < 450))
				(up-compare-goal gl-my-villager-count < 45)))
		(and	(building-type-count-total barracks > 1)
			(and	(up-compare-goal gl-military-percentage2 > 90)
				(up-compare-goal gl-patrol-defence != patrol-on))))
	(building-type-count-total barracks > 0)
=>
	(up-jump-rule 1)
)

(defrule
	(goal gl-strategy-class basic-class)
	(goal gl-eagles extra-eagles)
	(or	(and	(building-type-count-total town-center > 2)
			(and	(building-type-count-total monastery > 0)
				(civilian-population > 70)))
		(building-type-count-total barracks < 2))
	(or	(building-type-count-total barracks < 4)
		(civilian-population > 100))
	(building-type-count-total barracks < 7)
=>
	(up-modify-goal gl-barracks-build-priority c:max 998)
)

(defrule
	(goal gl-current-age gv-feudal)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= threat-player)
	(up-get-focus-fact unit-type-count knight-line temporary-goal2)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(up-compare-goal gl-strategy != sling)
	(or	(up-compare-goal gl-enemy-heavy-cavalry-count > 4)
		(up-compare-goal temporary-goal2 > 4))
	(or	(and	(goal gl-eew-strategy-type boom)
			(or	(building-type-count-total town-center > 2)
				(goal POSITION FLANK)))
		(and	(goal gl-current-age gv-feudal); For flush, jump above
			(building-type-count-total barracks < 2)))
	(building-type-count-total barracks < 3)
=>
	(up-modify-goal gl-barracks-build-priority c:max 998)
)
#end-if

#load-if-not-defined AZTEC-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(up-compare-goal gl-strategy != krush)
=>
	(up-jump-rule 4)
)

(defrule
	(building-type-count-total town-center > 2)
	(civilian-population > 70)
	(goal POSITION POCKET)
	(or	(and	(unit-available camel)
			(up-compare-goal gl-enemy-heavy-cavalry-count > 7))
		(up-compare-goal gl-military-percentage2 < 60))
	(or	(building-type-count-total stable < 3)
		(and	(soldier-count < 25)
			(civilian-population > 90)))
	(building-type-count-total stable < 4)
=>
	(up-modify-goal gl-stable-build-priority c:max 996)
)

(defrule
	(goal gl-current-age gv-castle)
	(game-time > 1590)
	(goal POSITION POCKET)
	(goal gl-safe-in-town YES)
	(soldier-count > 10)
	(civilian-population > 60)
	(up-compare-goal gl-pair-player-military > 30)
	(up-compare-goal gl-military-percentage2 > 50)
	(or	(and	(or	(unit-type-count-total knight-line > 9)
				(soldier-count > 20))
			(up-compare-goal gl-military-percentage > 55))
		(up-compare-goal gl-closest-enemy-military < 20))
=>
	(up-jump-rule 2)
)

(defrule
	(building-type-count-total town-center > 2)
	(up-compare-goal gl-my-villager-count > 45)
	(or	(building-type-count-total stable < 2)
		(and	(civilian-population > 70)
			(up-compare-const dm-pala-in-tech-tree == 1)))
	(or	(building-type-count-total stable < 4)
		(or	(civilian-population > 125)
			(population >= almost-full-pop)))
	(building-type-count-total stable < 7)
=>
	(up-modify-goal gl-stable-build-priority c:max 996)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal)
	(or	(and	(up-compare-goal POSITION != POCKET)
			(and	(up-compare-goal gl-current-age >= gv-feudal-up)
				(building-type-count-total stable < 2)))
		(or	(building-type-count-total stable < 1)
			(and	(up-compare-goal gl-current-age >= gv-feudal-up)
				(goal SLING 3))))
	(building-type-count-total stable < 3)
=>
	(up-modify-goal gl-stable-build-priority c:max 996)
)

(defrule
	(civilian-population > 60)
	(or	(civilian-population > 100)
		(and	(building-type-count-total stable < 4)
			(goal gl-strategy-class basic-class)))
	(or	(players-unit-type-count focus-player monk >= high-monks)
		(players-unit-type-count focus-player missionary >= high-monks))
	(or	(building-type-count-total stable < 4)
		(players-unit-type-count focus-player monk > 12))
	(building-type-count-total stable < 6)
=>
	(up-modify-escrow wood c:max 175)
)

(defrule
	(or	(civilian-population > 100)
		(and	(building-type-count-total stable < 4)
			(goal gl-strategy-class basic-class)))
	(or	(players-unit-type-count focus-player monk >= high-monks)
		(players-unit-type-count focus-player missionary >= high-monks))
	(or	(building-type-count-total stable < 4)
		(players-unit-type-count focus-player monk > 12))
	(building-type-count-total stable < 6)
	(can-build-with-escrow stable)
=>
	(set-goal gl-stable-build-priority 10000)
)

#load-if-defined HUN-CIV
(defrule
	(goal gl-strategy CA-rush)
	(goal TC 1)
	(building-type-count-total town-center < 3)
	(or	(and	(building-type-count-total town-center < 2)
			(not	(map-size tiny)))
		(up-compare-goal gl-military-percentage > 150))
=>
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(or	(and	(unit-type-count villager-food > 13)
			(or	(up-compare-goal gl-peace-in-town != YES)
				(unit-type-count-total cavalry-archer-line > 14)))
		(goal gl-strategy CA-rush))
	(up-compare-goal gl-my-villager-count-total > 43)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(unit-type-count-total cavalry-archer-line > 9)
	(building-available stable)
	(building-type-count-total stable < 1)
	(research-available ri-bloodlines)
=>
	(up-modify-goal gl-stable-build-priority c:max 10000)
	(up-modify-escrow wood c:max 175)
)
#end-if

(defrule
	(goal gl-stable-build-priority 10000)
	(can-build-with-escrow stable)
=>
	(set-goal gl-stable-build-priority -1)
	(release-escrow wood)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data my-player-number -1 g: gl-my-maximum-town-size)
	(up-build place-control 0 c: stable)
)
#end-if
#end-if
#end-if

(defrule
	(goal gl-strategy-class basic-class)
	(or	(goal gl-enable-pikemen 0)
		(or	(and	(goal gl-enable-pikemen 1)
				(building-type-count-total barracks > 3))
			(goal gl-enable-pikemen 4)))
	(building-type-count-total barracks > 0)
=>
	(up-jump-rule 3)
)

(defrule
	(goal gl-strategy-class basic-class)
	(building-type-count town-center > 2)
	(civilian-population > 100)
	(research-completed ri-pikeman)
	(or	(up-compare-goal gl-enemy-cavalry-count > 14)
		(and	(up-compare-goal gl-enemy-cataphract-count > 14)
			(up-research-status c: last-spearman-up >= research-available)))
	(building-type-count-total barracks < 7)
=>
	(up-modify-goal gl-barracks-build-priority c:max 1000)
)

(defrule
	(goal gl-strategy-class basic-class)
	(or	(and	(goal gl-strategy krush)
			(building-type-count-total barracks < 1))
		(and	(up-compare-goal gl-enemy-cavalry-count > 15)
			(and	(up-compare-goal gl-my-villager-count > 75)
				(up-compare-const special-raid-unit != janissary-line))))
	(up-compare-goal gl-current-age >= gv-dark-up)
	(building-type-count-total barracks < 4)
=>
	(up-modify-goal gl-barracks-build-priority c:max 995)
)

#load-if-defined TINY-MAP
#load-if-not-defined TURKISH-CIV
(defrule
	(or	(and	(goal gl-strategy ranged-rush-strategy)
			(and	(goal gl-enemy-strategy KNIGHT-RUSH)
				(building-type-count-total barracks < 2)))
		(and	(up-compare-goal gl-enemy-cavalry-count > 20)
			(and	(civilian-population > 120)
				(goal gl-strategy-class basic-class))))
	(unit-type-count-total camel-line < 8)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count-total barracks < 7)
=>
	(up-modify-goal gl-barracks-build-priority c:max 992)
)
#else
(defrule
	(goal gl-strategy ranged-rush-strategy)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(up-compare-goal gl-enemy-cavalry-count > 6)
		(or	(up-compare-goal gl-enemy-heavy-cavalry-count > 3)
			(goal gl-enemy-strategy KNIGHT-RUSH)))
	(building-type-count-total stable < 1)
=>
	(up-modify-goal gl-stable-build-priority c:max 993)
)
#end-if
#else
(defrule
	(up-compare-goal gl-enemy-cavalry-count > 20)
	(civilian-population > 120)
	(goal gl-strategy-class basic-class)
	(unit-type-count-total camel-line < 8)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count-total barracks < 7)
=>
	(up-modify-goal gl-barracks-build-priority c:max 992)
)
#end-if

#load-if-defined HUN-CIV
(defrule
	(goal gl-TC-lost NO)
	(up-compare-goal gl-advanced-archery != 0)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(game-time > 1800)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(building-type-count-total archery-range < 2)
		(up-compare-goal gl-my-villager-count-total > 90))
	(building-type-count-total archery-range < 5)
=>
	(up-modify-goal gl-range-build-priority c:max 994)
)

(defrule
	(up-compare-goal gl-advanced-archery != 0)
	(up-compare-goal gl-current-age >= gv-feudal)
	(building-type-count-total town-center > 2)
	(game-time > 1400)
	(or	(goal POSITION FLANK)
		(game-time > 1650))
	(or	(and	(building-type-count-total archery-range < 4)
			(goal gl-strategy CA-boom))
		(and	(research-completed ri-heavy-cavalry-archer)
			(goal gl-advanced-archery hun-CAs)))
	(building-type-count-total archery-range < 6)
=>
	(up-modify-goal gl-range-build-priority c:max 994)
)
#end-if

(defrule
	(up-compare-goal gl-current-age >= gv-feudal)
	(goal gl-strategy ranged-rush-strategy)
	(building-type-count-total archery-range < 3)
	(or	(building-type-count-total archery-range < 1)
		(up-compare-goal gl-current-age >= gv-feudal-up))
=>
	(up-modify-goal gl-range-build-priority c:max 991)
)

(defrule
	(players-building-type-count target-player stone-wall-line > 4)
	(goal POSITION POCKET)
	(or	(building-type-count-total town-center < 3)
		(game-time < 1260))
=>
	(up-jump-rule 1)
)

(defrule
	(goal gl-strategy ranged-boom-strategy)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(nand	(goal POSITION POCKET)
		(or	(building-type-count-total town-center < 3)
			(game-time < 1260)))
	(building-type-count-total archery-range < 2)
=>
	(up-modify-goal gl-range-build-priority c:max 991)
)

(defrule
	(or	(and	(goal gl-strategy ranged-rush-strategy)
			(and	(up-compare-goal gl-my-villager-count-total > 70)
				(building-type-count town-center > 2)))
		(goal gl-advanced-archery elite-skirmishers))
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-enemy-strategy != KNIGHT-RUSH)
	(up-compare-goal gl-my-villager-count-total > 42)
	(or	(building-type-count-total archery-range < 4)
		(up-compare-goal gl-my-villager-count-total > 65))
	(building-type-count-total archery-range < 6)
=>
	(up-modify-goal gl-range-build-priority c:max 991)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(and	(goal gl-strategy xbow-boom)
			(and	(building-type-count-total town-center > 2)
				(and	(research-completed ri-bodkin-arrow)
					(research-completed ri-crossbow))))
		(goal gl-advanced-archery CAs))
	(or	(building-type-count-total town-center > 2)
		(building-type-count-total archery-range < 2))
	(building-type-count-total archery-range < 4)
=>
	(up-modify-goal gl-range-build-priority c:max 991)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal)
	(goal gl-strategy ranged-boom-strategy)
	(building-type-count-total archery-range < 1)
=>
	(up-modify-goal gl-range-build-priority c:max 991)
)

#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined HUN-CIV
(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-my-UU-count-total > 10)
	(up-compare-const range-for-UU >= 1)
	(strategic-number sn-allow-resource-spending > 1)
	(or	(strategic-number sn-allow-resource-spending > 3)
		(up-compare-const range-for-UU >= 2))
	(or	(strategic-number sn-allow-resource-spending > 2)
		(up-compare-const range-for-UU >= 3))
	(building-type-count-total archery-range < 1)
=>
	(up-modify-goal gl-range-build-priority c:max 991)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-my-UU-count-total > 10)
	(up-compare-const stable-for-UU >= 1)
	(strategic-number sn-allow-resource-spending > 0)
	(strategic-number sn-allow-resource-spending > 1)
	(or	(strategic-number sn-allow-resource-spending > 3)
		(up-compare-const stable-for-UU >= 2))
	(or	(strategic-number sn-allow-resource-spending > 2)
		(up-compare-const range-for-UU >= 3))
	(building-type-count-total stable < 1)
=>
	(up-modify-goal gl-stable-build-priority c:max 991)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(up-compare-const range-for-UU >= 1)
		(up-compare-const stable-for-UU >= 1))
	(up-compare-goal gl-my-UU-count-total > 10)
	(strategic-number sn-allow-resource-spending > 2)
	(game-time > 1800)
	(building-type-count-total barracks < 1)
=>
	(up-modify-goal gl-barracks-build-priority c:max 990)
)
#else
(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(unit-type-count-total cavalry-archer-line > 10)
	(strategic-number sn-allow-resource-spending > 0)
	(up-compare-goal gl-strategy != CA-rush)
	(building-type-count-total stable < 1)
=>
	(up-modify-goal gl-stable-build-priority c:max 991)
)
#end-if
#end-if

#end-if; Not wonder race

; ==================== RESEARCHES - HIGH PRIORITY

#load-if-not-defined WONDER-RACE
(defrule
	(strategic-number sn-heresy-escrow == 1)
	(building-type-count monastery > 0)
	(or	(unit-type-count villager-gold > 7)
		(unit-type-count trade-cart > 9))
	(up-compare-goal gl-my-villager-count-total > 50)
	(soldier-count > 25)
	(or	(players-unit-type-count focus-player monk > 9)
		(players-unit-type-count focus-player missionary > 9))
	(research-available ri-heresy)
=>
	(set-escrow-percentage gold 100)
	(set-strategic-number sn-allow-resource-spending -1)
	(up-add-research-cost c: ri-heresy c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending == -1)
	(strategic-number sn-target-evaluation-randomness == 0)
=>
	(chat-to-player my-player-number "Start saving resources for heresy.")
	(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
	(release-escrow food)
	(release-escrow wood)
	(set-strategic-number sn-target-evaluation-randomness 1)
)

(defrule
	(strategic-number sn-target-evaluation-randomness == 1)
	(players-unit-type-count every-enemy monk < 17)
	(players-unit-type-count every-enemy missionary < 17)
	(or	(up-compare-goal gl-eew-strategy-type >= fast-imp)
		(and	(player-in-game any-ally)
			(or	(unit-type-count-total scout-cavalry-line > 6)
				(unit-type-count-total archer-line > 16))))
	(research-available ri-heresy)
=>
	(set-escrow-percentage gold 0)
	(release-escrow gold)
	(chat-to-player my-player-number "Cancel escrows for heresy.")
	(set-strategic-number sn-heresy-escrow 0)
	(set-strategic-number sn-target-evaluation-randomness 2)
)

(defrule
	(strategic-number sn-target-evaluation-randomness == 2)
	(or	(and	(unit-type-count-total archer-line <= 16)
			(unit-type-count-total scout-cavalry-line <= 6))
		(or	(players-unit-type-count focus-player monk >= 17)
			(players-unit-type-count focus-player missionary >= 17)))
	(up-compare-goal gl-eew-strategy-type < fast-imp)
	(research-available ri-heresy)
=>
	(set-escrow-percentage gold 0)
	(release-escrow gold)
	(chat-to-player my-player-number "Check if heresy is needed again.")
	(set-strategic-number sn-heresy-escrow 1)
	(set-strategic-number sn-target-evaluation-randomness 0)
)

(defrule
	(or	(or	(players-unit-type-count focus-player monk > 8)
			(players-unit-type-count focus-player missionary > 8))
		(strategic-number sn-allow-resource-spending == -1)); If the plan was to get heresy, take it anyway
	(can-research-with-escrow ri-heresy)
=>
	(set-escrow-percentage gold 0)
	(release-escrow gold)
	(research ri-heresy)
	(set-strategic-number sn-target-evaluation-randomness 0)
	(set-strategic-number sn-heresy-escrow 0)
	(chat-to-player my-player-number "Heresy")
)

(defrule
	(strategic-number sn-allow-resource-spending == -1)
	(or	(not	(research-available ri-heresy))
		(or	(research-completed ri-heresy)
			(strategic-number sn-heresy-escrow == 0)))
=>
	(set-strategic-number sn-allow-resource-spending 0)
)
#end-if

; ======== RESEARCHES - ECONOMY - HIGH PRIORITY

(defrule
	(goal gl-rush-suitability-on-map GOOD)
	(up-compare-goal gl-nothing-style-map != YES)
	(up-compare-goal gl-strategy-type >= FC)
	(up-research-status c: ri-loom < research-pending)
	(goal gl-current-age gv-dark-up)
	(goal gl-FC-type gv-wheelbarrow)
=>
	(set-goal gl-FC-type gv-3-villagers)
)

(defrule
	(up-compare-goal gl-nothing-style-map != YES)
	(up-compare-goal gl-strategy-type >= FC)
	(strategic-number sn-nomad-style-start == 0)
	(food-amount > 350)
	(or	(up-compare-goal gl-total-food-amount >= gv-2-villager-FC-food)
		(and	(goal gl-strategy monk-mango-push)
			(gold-amount > 700)))
	(wood-amount >= gv-2-villager-FC-wood)
	(up-research-status c: feudal-age == research-pending)
	(goal gl-current-age gv-dark-up)
=>
	(set-goal gl-FC-type gv-2-villagers)
	(set-goal gl-required-current-age-time gv-2-villager-time)
	(disable-self)
)

#load-if-defined KHMER-CIV
(defrule
	(goal gl-current-age gv-dark-up)
	(goal gl-FC-type gv-2-villagers)
	(up-compare-const all-techs-enabled == 0)
=>
	(set-goal gl-FC-type gv-0-villagers)
)
#end-if

(defrule
	(nand	(up-compare-goal gl-FC-type >= gv-2-villagers)
		(or	(and	(current-age < castle-age)
				(up-compare-goal gl-strategy-type >= FC))
			(goal gl-strategy saracen-heavy-krush)))
	(nand	(goal gl-strategy ranged-rush-strategy)
		(research-available ri-bodkin-arrow))
	(up-compare-const gv-wonder-race == 0)
	(or	(up-compare-goal gl-my-villager-count-total > 19)
		(up-compare-goal gl-my-villager-count-total >= imperial-villager-cap))
	(can-research ri-wheel-barrow)
=>
	(research ri-wheel-barrow)
)

(defrule
	(or	(and	(soldier-count > 40)
			(and	(up-compare-goal gl-my-villager-count-total > 90)
				(game-time > defensive-technology-time)))
		(and	(goal gl-nothing-style-map YES)
			(building-type-count-total market == 0)))
	(game-time > 1500)
	(can-research ri-town-watch)
=>
	(research ri-town-watch)
)

(defrule
	(up-compare-goal gl-strategy != scrush)
	(or	(nand	(building-type-count-total mining-camp < 2)
			(goal CASTLE 2))
		(current-age >= castle-age))
	(nand	(goal gl-strategy heavy-krush)
		(and	(building-type-count-total town-center == 1)
			(game-time < 1700)))
	(or	(up-compare-goal gl-strategy-type <= controlled-flush)
		(up-compare-goal gl-current-age >= gv-feudal-up))
	(can-research ri-double-bit-axe)
=>
	(research ri-double-bit-axe)
)

#load-if-not-defined WONDER-RACE
(defrule
	(up-compare-goal gl-strategy != heavy-krush)
	(up-compare-goal gl-current-age >= gv-feudal)
	(or	(up-compare-goal gl-strategy != ranged-rush-strategy)
		(game-time > 1400))
	(or	(goal gl-strategy-type basic-flush)
		(up-compare-goal gl-current-age >= gv-feudal-up))
	(nand	(goal gl-strategy flush)
		(and	(current-age-time < 420)
			(goal gl-current-age gv-feudal)))
=>
	(research ri-horse-collar)
)
#end-if

#load-if-not-defined UP-MICHI-STYLE
(defrule
	(or	(up-compare-goal gl-disable-mining-upgrades != YES)
		(and	(goal gl-strategy ranged-rush-strategy)
			(and	(up-research-status c: ri-bodkin-arrow >= research-pending)
				(and	(up-research-status c: first-main-ranged-unit-upgrade >= research-pending)
					(and	(up-research-status c: ri-wheel-barrow >= research-pending)
						(up-research-status c: ri-bow-saw >= research-pending))))))
	(strategic-number sn-gold-gatherer-percentage > 9)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(can-research ri-gold-mining)
=>
	(research ri-gold-mining)
)

(defrule
	(or	(and	(goal gl-strategy sling)
			(and	(up-research-status c: ri-coinage >= research-pending)
				(civilian-population > 50)))
		(and	(or	(up-compare-goal gl-disable-mining-upgrades != YES)
				(up-compare-goal gl-my-villager-count-total > 50))
			(up-compare-goal gl-current-age >= gv-feudal-up)))
	(strategic-number sn-gold-gatherer-percentage > 9)
	(can-research ri-gold-mining)
=>
	(research ri-gold-mining)
)
#else
(defrule
	(building-type-count-total town-center > 3)
	(strategic-number sn-gold-gatherer-percentage > 0)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(can-research ri-gold-mining)
=>
	(research ri-gold-mining)
)
#end-if

(defrule
	(goal SLING 3)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(goal gl-strategy castle-drop)
=>
	(research ri-stone-mining)
	(research ri-gold-mining)
)

(defrule
	(up-compare-goal gl-eew-strategy-type != fast-imp)
	(nand	(or	(up-compare-goal gl-disable-mining-upgrades <= YES)
			(goal gl-strategy-class basic-class))
		(up-compare-goal gl-my-villager-count-total < 50))
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(dropsite-min-distance stone < 4)
	(dropsite-min-distance stone >= 0)
	(strategic-number sn-stone-gatherer-percentage != 7)
	(strategic-number sn-stone-gatherer-percentage > 3)
	(or	(strategic-number sn-stone-gatherer-percentage > 5)
		(civilian-population > 100))
	(can-research ri-stone-mining)
=>
	(research ri-stone-mining)
)

#load-if-not-defined WONDER-RACE
(defrule
	(or	(goal gl-strategy-class basic-class)
		(goal gl-strategy ranged-rush-strategy))
	(current-age-time > 40)
	(or	(and	(current-age-time > 600)
			(civilian-population > 65))
		(and	(or	(building-type-count-total town-center > 2)
				(building-type-count-total town-center >= preferred-TC-number))
			(goal gl-strategy-class basic-class)))
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-research-status c: ri-bow-saw >= research-pending)
=>
	(research ri-heavy-plow)
)

(defrule
	(or	(and	(game-time > 1500)
			(and	(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
					(goal gl-islands-style YES))
				(building-type-count-total town-center > 2)))
		(or	(up-compare-goal gl-current-age >= gv-castle-up)
			(goal gl-strategy castle-sling)))
	(up-research-status c: ri-bow-saw >= research-pending)
=>
	(research ri-heavy-plow)
)

(defrule
	(or	(and	(goal gl-strategy turkish-fast-imp)
			(or	(building-type-count-total monastery > 0)
				(building-type-count-total siege-workshop > 0)))
		(or	(and	(goal gl-strategy-class basic-class)
				(and	(wood-amount > 500)
					(current-age-time > 30)))
			(goal gl-strategy sling)))
	(up-research-status c: ri-bow-saw >= research-pending)
=>
	(research ri-heavy-plow)
)
#end-if

; ======== RESEARCHES - UNIT UPGRADES

#load-if-not-defined TURKISH-CIV
(defrule
	(or	(strategic-number sn-allow-resource-spending >= 0)
		(strategic-number sn-allow-resource-spending == -2))
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-my-villager-count > 45)
	(up-compare-goal gl-enemy-heavy-cavalry-count > 7)
	(unit-type-count spearman-line > 12)
	(research-available ri-pikeman)
	(building-type-count barracks > 0)
=>
	(up-modify-escrow food c:max 215)
	(up-modify-escrow gold c:max 90)
	(up-add-research-cost c: ri-pikeman c: -1)
	(set-strategic-number sn-allow-resource-spending -2)
	(up-jump-rule 1)
)

(defrule
	(or	(food-amount > 150)
		(strategic-number sn-allow-resource-spending == -2))
	(or	(up-compare-goal gl-enemy-heavy-cavalry-count > 3)
		(goal gl-enemy-strategy KNIGHT-RUSH))
	(unit-type-count spearman-line > 2)
	(research-available ri-pikeman)
	(building-type-count barracks > 0)
=>
	(up-modify-escrow food c:max 215)
	(up-modify-escrow gold c:max 90)
	(up-add-research-cost c: ri-pikeman c: -1)
	(set-strategic-number sn-allow-resource-spending -2)
)

(defrule
	(strategic-number sn-allow-resource-spending == -2)
	(or	(can-research-with-escrow ri-pikeman)
		(not	(research-available ri-pikeman)))
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-pikeman)
	(set-strategic-number sn-allow-resource-spending 0)
)

#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(unit-type-count scout-cavalry-line < 9)
	(up-compare-goal gl-advanced-cavalry != LC)
	(or	(and	(research-available ri-bodkin-arrow)
			(unit-type-count archery-class > 9))
		(and	(research-available ri-crossbow)
			(unit-type-count archer-line > 7)))
=>
	(up-jump-rule 2)
)

(defrule
	(or	(players-unit-type-count focus-player monk > 3)
		(and	(unit-type-count scout-cavalry-line > 5)
			(strategic-number sn-allow-resource-spending > 1)))
	(up-compare-goal gl-my-villager-count > 40)
	(unit-type-count scout-cavalry-line > 4)
	(research-available ri-light-cavalry)
	(building-type-count stable > 0)
=>
	(up-modify-escrow food c:max 150)
	(up-modify-escrow gold c:max 50)
)

(defrule
	(or	(and	(players-unit-type-count focus-player monk > 3)
			(unit-type-count-total scout-cavalry-line > 1))
		(or	(unit-type-count-total scout-cavalry-line >= relative-4-units)
			(or	(and	(unit-type-count-total scout-cavalry-line > 1)
					(food-amount > 1700))
				(goal gl-advanced-cavalry LC))))
	(can-research-with-escrow ri-light-cavalry)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-light-cavalry)
)

(defrule
	(or	(civ-selected mongol)
		(civ-selected saracen))
	(goal gl-strategy default)
	(up-compare-goal CASTLE != 0)
	(unit-type-count trade-cart > 9)
	(building-type-count castle > 0)
	(or	(research-available my-unique-unit-upgrade)
		(and	(civ-selected saracen)
			(research-available my-unique-research)))
=>
	(up-jump-rule 2)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(cc-players-unit-type-count 0 gold-mine > 3)
		(and	(unit-type-count trade-cart > 30)
			(strategic-number sn-allow-resource-spending > 5)))
	(population > 170)
	(civilian-population > 120)
	(soldier-count > 45)
	(unit-type-count-total scout-cavalry-line > 13)
	(building-type-count stable > 0)
	(research-available ri-hussar)
=>
	(up-modify-escrow food c:max 500)
	(up-modify-escrow gold c:max 600)
	(up-add-research-cost c: ri-hussar c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(unit-type-count-total scout-cavalry-line >= relative-6-units)
		(or	(and	(unit-type-count-total scout-cavalry-line > 1)
				(food-amount > 2500))
			(and	(strategic-number sn-allow-resource-spending > 5)
				(goal gl-advanced-cavalry LC))))
	(can-research-with-escrow ri-hussar)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-hussar)
)
#end-if
#end-if

#load-if-defined POPULATION-CAP-200
(defrule
	(goal gl-strategy-class basic-class)
	(game-time < 2400)
	(up-compare-goal gl-advanced-cavalry != 0)
	(or	(building-type-count-total town-center < 3)
		(up-compare-goal gl-skirmisher-count-total < 20))
	(up-compare-goal gl-enemy-spearman-count < 12)
	(civilian-population < 120)
	(up-compare-goal gl-enemy-archery-count < 5)
	(up-compare-goal gl-enemy-gunpowder-count < 5)
=>
	(up-jump-rule 4)
)

(defrule
	(goal gl-strategy-class basic-class)
	(or	(wood-amount < 525)
		(current-age-time < 5))
	(goal gl-safe-in-town YES)
	(building-type-count-total town-center < 3)
	(goal gl-enable-skirmishers 0)
	(civilian-population < 80)
	(up-compare-goal gl-enemy-archery-count < 5)
	(up-compare-goal gl-enemy-gunpowder-count < 5)
=>
	(up-jump-rule 3)
)

(defrule
	(goal gl-strategy-class basic-class)
	(or	(wood-amount < 525)
		(current-age-time < 5))
	(goal gl-safe-in-town YES)
	(building-type-count-total town-center < 3)
	(or	(players-military-population focus-player < 10)
		(or	(and	(up-compare-goal gl-target-player-distance > 90)
				(or	(up-compare-goal TSA >= 1)
					(up-compare-goal gl-enemy-units-in-town < 5)))
			(up-compare-goal gl-military-percentage > 240)))
=>
	(up-jump-rule 2)
)
#end-if

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(building-type-count archery-range > 0)
	(up-compare-goal gl-enable-skirmishers >= 1)
	(up-compare-goal gl-enable-skirmishers != 2)
	(or	(and	(up-compare-goal gl-skirmisher-count-total > 12)
			(strategic-number sn-allow-resource-spending > 1))
		(or	(up-compare-goal gl-enemy-archery-count > 6)
			(goal gl-enemy-strategy XBOW-RUSH)))
	(up-compare-goal gl-skirmisher-count-total > 5)
	(research-available ri-elite-skirmisher)
=>
	(up-modify-escrow wood c:max 250)
	(up-modify-escrow gold c:max 160)
	(up-add-research-cost c: ri-elite-skirmisher c: -1)
)

(defrule
	(up-compare-goal gl-skirmisher-count-total > 0)
	(or	(and	(up-compare-goal gl-skirmisher-count-total >= relative-5-units)
			(and	(strategic-number sn-allow-resource-spending > 0)
				(or	(up-compare-goal gl-skirmisher-count-total > relative-10-units)
					(or	(up-compare-goal gl-enable-skirmishers >= 1)
						(strategic-number sn-allow-resource-spending > 2)))))
		(goal gl-advanced-trash YES))
	(can-research-with-escrow ri-elite-skirmisher)
=>
	(release-escrow wood)
	(release-escrow gold)
	(research ri-elite-skirmisher)
)

#load-if-defined UP-GAME-WK
(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(building-type-count archery-range > 0)
	(up-compare-goal gl-enable-skirmishers >= 1)
	(up-compare-goal gl-enable-skirmishers != 2)
	(up-compare-goal gl-skirmisher-count-total > 17)
	(research-available ri-imperial-skirmisher)
=>
	(up-modify-escrow wood c:max 300)
	(up-modify-escrow gold c:max 450)
	(up-add-research-cost c: ri-imperial-skirmisher c: -1)
)

(defrule
	(up-compare-goal gl-skirmisher-count-total > 0)
	(or	(and	(or	(up-compare-goal gl-skirmisher-count-total > relative-10-units)
				(and	(up-compare-goal gl-skirmisher-count-total > relative-6-units)
					(strategic-number sn-allow-resource-spending > 5)))	
			(strategic-number sn-allow-resource-spending > 2))
		(goal gl-advanced-trash YES))
	(can-research-with-escrow ri-imperial-skirmisher)
=>
	(release-escrow wood)
	(release-escrow gold)
	(research ri-imperial-skirmisher)
)
#end-if

(defrule
	(or	(goal gl-enable-pikemen 0)
		(and	(research-available ri-elite-eagle-warrior)
			(up-compare-goal gl-eagles != 0)))
;	(player-in-game any-ally)
	(research-available ri-halberdier)
	(population > 130)
	(unit-type-count-total spearman-line < 18)
	(up-compare-goal gl-enemy-cavalry-count < 13)
	(up-compare-goal gl-enemy-heavy-cavalry-count < 10)
	(up-compare-goal gl-enemy-cataphract-count < 8)
	(up-compare-goal gl-enemy-strategy != KNIGHT-RUSH)
	(up-compare-goal CASTLE != 1)
	(up-compare-goal gl-advanced-infantry != pikemen)
	(strategic-number sn-allow-resource-spending < 6)
=>
	(up-jump-rule 5)
)

(defrule
	(up-compare-goal gl-nothing-style-map != YES)
	(up-compare-goal CASTLE != 1)
	(up-compare-goal gl-advanced-infantry != pikemen)
	(current-age-time < 1200)
	(or	(and	(unit-type-count-total spearman-line < 10)
			(strategic-number sn-allow-resource-spending < 6))
		(and	(player-in-game any-ally)
			(research-available ri-halberdier)))
	(unit-type-count-total spearman-line < 20)
	(up-compare-goal gl-enemy-cavalry-count < 4)
	(up-compare-goal gl-enemy-cataphract-count < 4)
	(up-compare-goal gl-enemy-strategy != KNIGHT-RUSH)
=>
	(up-jump-rule 4)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(strategic-number sn-allow-resource-spending > 1)
		(or	(up-compare-goal gl-enemy-cavalry-count > 6)
			(goal gl-enemy-strategy KNIGHT-RUSH)))
	(up-compare-goal gl-peace-in-town != YES)
	(unit-type-count villager-farmer > 17)
	(up-compare-goal gl-my-villager-count > 50)
	(unit-type-count spearman-line > 8)
	(research-available ri-pikeman)
	(building-type-count barracks > 0)
=>
	(up-modify-escrow food c:max 215)
	(up-modify-escrow gold c:max 90)
	(up-add-research-cost c: ri-pikeman c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(unit-type-count-total spearman-line >= relative-6-units)
		(or	(and	(unit-type-count-total spearman-line >= relative-3-units)
				(and	(up-compare-goal gl-enemy-heavy-cavalry-count > 4)
					(goal gl-enable-pikemen 2)))
			(or	(goal gl-advanced-infantry pikemen)
				(goal CASTLE 1))))
	(can-research-with-escrow ri-pikeman)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-pikeman)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(civilian-population > 90)
	(or	(and	(dropsite-min-distance gold < 5)
			(dropsite-min-distance gold >= 0))
		(unit-type-count trade-cart > 30))
	(unit-type-count-total spearman-line > 14)
	(building-type-count barracks > 0)
	(research-available ri-halberdier)
=>
	(up-modify-escrow food c:max 300)
	(up-modify-escrow gold c:max 600)
	(up-modify-goal gl-gold-gp-points c:+ 40)
	(up-add-research-cost c: ri-halberdier c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(unit-type-count-total spearman-line >= relative-6-units)
		(or	(goal CASTLE 1)
			(goal gl-advanced-infantry pikemen)))
	(can-research-with-escrow ri-halberdier)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-halberdier)
)
#end-if

#load-if-not-defined KOREAN-CIV
(defrule
	(up-compare-goal gl-enable-camels != 0)
	(up-compare-goal gl-enable-camels != 2)
	(or	(and	(strategic-number sn-allow-resource-spending >= 0)
			(unit-type-count-total camel > 6))
		(and	(strategic-number sn-allow-resource-spending > 4)
			(unit-type-count-total camel >= relative-4-units)))
	(can-research ri-heavy-camel)
=>
	(research ri-heavy-camel)
)

(defrule
	(up-compare-goal gl-enable-camels != 0)
	(up-compare-goal gl-enable-camels != 2)
	(goal gl-strategy default)
	(current-age == imperial-age)
	(food-amount > 104)
	(up-compare-goal gl-trade-unit-count-total > 19)
	(up-compare-const anti-mangudai-camels == 1)
	(or	(players-unit-type-count focus-player mangudai-line > 10)
		(players-unit-type-count target-player mangudai-line > 10))
	(can-research ri-heavy-camel)
=>
	(research ri-heavy-camel)
)

(defrule
	(up-compare-goal gl-enable-camels != 0)
	(up-compare-goal gl-enable-camels != 2)
	(goal gl-strategy default)
	(current-age == imperial-age)
	(food-amount > 104)
	(up-compare-goal gl-trade-unit-count-total > 19)
	(not	(civ-selected persian))
	(or	(players-unit-type-count focus-player war-wagon-line > 10)
		(players-unit-type-count target-player war-wagon-line > 10))
	(can-research ri-heavy-camel)
=>
	(research ri-heavy-camel)
)

(defrule
	(up-compare-goal gl-enable-camels != 0)
	(up-compare-goal gl-enable-camels != 2)
	(goal gl-strategy-class basic-class)
	(strategic-number sn-allow-resource-spending > 0)
	(civilian-population > 50)
	(up-compare-goal gl-enemy-heavy-cavalry-count > 7)
	(research-available ri-heavy-camel)
	(or	(unit-type-count-total camel-line > 8)
		(civ-selected turkish))
=>
	(up-modify-escrow food c:max 325)
	(up-modify-escrow gold c:max 360)
	(up-add-research-cost c: ri-heavy-camel c: -1)
)

(defrule
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-enable-camels != 0)
	(or	(and	(unit-type-count-total camel-line > 6)
			(or	(up-compare-goal gl-enemy-cavalry-count > 2)
				(or	(up-compare-goal gl-enemy-heavy-cavalry-count > 0)
					(players-unit-type-count focus-player cavalry-archer-line > 4))))
		(or	(up-compare-goal gl-enemy-cavalry-count > 14)
			(up-compare-goal gl-enemy-heavy-cavalry-count > 4)))
	(can-research-with-escrow ri-heavy-camel)
=>
	(up-release-escrow)
	(research ri-heavy-camel)
)

(defrule
	(goal gl-advanced-cavalry heavy-camels)
	(strategic-number sn-allow-resource-spending > 0)
	(civilian-population > 50)
	(research-available ri-heavy-camel)
	(unit-type-count-total camel-line > 8)
=>
	(up-modify-escrow food c:max 325)
	(up-modify-escrow gold c:max 360)
	(up-add-research-cost c: ri-heavy-camel c: -1)
)

(defrule
	(goal gl-advanced-cavalry heavy-camels)
	(strategic-number sn-allow-resource-spending > 0)
	(research-available ri-heavy-camel)
	(can-research-with-escrow ri-heavy-camel)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-heavy-camel)
)

#load-if-defined HUN-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(or	(and	(unit-type-count villager-food > 13)
			(up-compare-goal gl-peace-in-town != YES))
		(goal gl-strategy CA-rush))
	(up-compare-goal gl-my-villager-count-total > 43)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(unit-type-count-total cavalry-archer-line > 9)
	(building-type-count stable > 0)
	(research-available ri-bloodlines)
=>
	(up-modify-escrow food c:max 150)
	(up-modify-escrow gold c:max 100)
	(up-add-research-cost c: ri-bloodlines c: -1)
)
#end-if

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(nand	(up-compare-goal gl-strategy-type >= FC)
		(up-compare-goal gl-current-age < gv-feudal-up))
	(or	(unit-type-count-total scout-cavalry-line >= relative-5-units)
		(or	(unit-type-count-total knight-line >= relative-5-units)
			(or	(unit-type-count-total cavalry-archer-line >= relative-5-units)
				(unit-type-count-total conquistador-line >= relative-5-units))))
	(can-research-with-escrow ri-bloodlines)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-bloodlines)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(goal gl-advanced-cavalry heavy-knights)
		(and	(strategic-number sn-allow-resource-spending > 0)
			(or	(unit-type-count-total camel-line >= relative-5-units)
				(unit-type-count-total mangudai-line >= relative-5-units))))
	(can-research-with-escrow ri-bloodlines)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-bloodlines)
)
#end-if

(defrule
	(up-compare-goal gl-advanced-infantry != heavy-swordsmen)
	(up-compare-goal CASTLE != 4)
	(nand	(unit-type-count-total militiaman-line > 12)
		(and	(up-compare-goal gl-enemy-eagle-count > 8)
			(up-compare-goal gl-current-age >= gv-castle)))
	(not	(civ-selected gothic))
	(up-compare-goal gl-current-age >= gv-castle)
=>
	(up-jump-rule 8)
)

(defrule
	(up-compare-goal gl-current-age <= gv-feudal)
	(or	(goal gl-strategy flush)
		(and	(goal gl-strategy scrush)
			(up-compare-goal gl-strategy-control != MEN-AT-ARMS)))
	(goal gl-feudal-infantry 0)
	(unit-type-count-total militiaman-line < 4)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(up-research-status c: ri-loom >= research-pending)
		(gold-amount >= 90))
	(or	(goal gl-advanced-infantry heavy-swordsmen)
		(or	(goal CASTLE 4)
			(unit-type-count-total militiaman-line > 2)))
	(or	(goal gl-eternal-drush YES)
		(or	(up-compare-goal gl-strategy-type <= controlled-flush)
			(up-compare-goal gl-current-age >= gv-feudal-up)))
	(can-research ri-man-at-arms)
=>
	(research ri-man-at-arms)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(current-age-time > 120)
	(unit-type-count villager-farmer > 22)
	(or	(goal gl-advanced-infantry heavy-swordsmen)
		(goal CASTLE 4))
	(building-type-count barracks > 0)
	(research-available ri-long-swordsman)
=>
	(up-modify-escrow food c:max 200)
	(up-modify-escrow gold c:max 65)
	(up-add-research-cost c: ri-long-swordsman c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(goal gl-advanced-infantry heavy-swordsmen)
		(or	(goal CASTLE 4)
			(and	(unit-type-count-total militiaman-line > 6)
				(and	(nand	(unit-type-count archery-class > 9)
						(research-available ri-bodkin-arrow))
					(strategic-number sn-allow-resource-spending > 0)))))
	(can-research-with-escrow ri-long-swordsman)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-long-swordsman)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(unit-type-count villager-farmer > 25)
	(civilian-population > 90)
	(or	(unit-type-count-total militiaman-line > 10)
		(or	(goal gl-advanced-infantry heavy-swordsmen)
			(goal CASTLE 4)))
	(building-type-count barracks > 0)
	(up-compare-goal gl-my-villager-count-total > 63)
	(research-available ri-two-handed-swordsman)
=>
	(up-modify-escrow food c:max 300)
	(up-modify-escrow gold c:max 100)
	(up-add-research-cost c: ri-two-handed-swordsman c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(goal gl-advanced-infantry heavy-swordsmen)
		(or	(goal CASTLE 4)
			(unit-type-count-total militiaman-line > 6)))
	(can-research-with-escrow ri-two-handed-swordsman)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-two-handed-swordsman)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(soldier-count > 50)
	(civilian-population > 100)
	(unit-type-count villager-farmer > 32)
	(or	(unit-type-count-total militiaman-line > 15)
		(or	(goal gl-advanced-infantry heavy-swordsmen)
			(goal CASTLE 4)))
	(building-type-count barracks > 0)
	(research-available ri-champion)
=>
	(up-modify-escrow food c:max 750)
	(up-modify-escrow gold c:max 350)
	(up-add-research-cost c: ri-champion c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(unit-type-count-total militiaman-line > 8)
		(or	(goal gl-advanced-infantry heavy-swordsmen)
			(goal CASTLE 4)))
	(can-research-with-escrow ri-champion)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-champion)
)

(defrule
	(not	(unit-available eagle-warrior))
=>
	(up-jump-rule 3)
)

(defrule
	(or	(goal gl-eagles extra-eagles)
		(goal CASTLE 6))
	(up-compare-goal gl-current-age >= gv-castle-up)
	(up-research-status c: ri-elite-eagle-warrior < research-pending)
=>
	(up-add-research-cost c: ri-elite-eagle-warrior c: -1)
)

(defrule
	(goal gl-strategy eew-strategy)
	(can-research-with-escrow ri-elite-eagle-warrior)
=>
	(set-goal gl-strategy-aggressiveness-level LOW); Allows fixed targeting on enemy sling
	(release-escrow food)
	(release-escrow gold)
	(research ri-elite-eagle-warrior)
	(set-goal gl-eagles heavy-eagles)
	(set-strategic-number sn-allow-resource-spending 1)
	(enable-timer 7 0)
	(up-modify-goal gl-camp-raid-time c:- 600)
)

(defrule
	(up-compare-goal gl-strategy != eew-strategy)
	(or	(up-compare-goal gl-eagle-warrior-count-total > 9)
		(or	(and	(up-compare-goal gl-eagle-warrior-count-total > 5)
				(strategic-number sn-allow-resource-spending > 5))
			(or	(goal CASTLE 6)
				(or	(goal gl-strategy eagle-rush)
					(goal gl-eagles extra-eagles)))))
	(can-research-with-escrow ri-elite-eagle-warrior)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-elite-eagle-warrior)
)

(defrule
	(or	(and	(nor	(research-available ri-crossbow)
				(research-available ri-bodkin-arrow))
			(nor	(research-available ri-arbalest)
				(research-available ri-bracer)))
		(and	(research-completed ri-bracer)
			(and	(civ-selected aztec)
				(up-compare-const gv-FFA-like-game == 1))))
=>
	(up-jump-rule 11)
)

(defrule
	(goal gl-strategy xbow-boom)
	(goal POSITION POCKET)
	(up-compare-goal gl-defending-ally != YES); If we have to defend ally, better get xbow fast nevertheless
	(or	(up-research-status c: ri-bow-saw < research-pending)
		(research-available ri-wheel-barrow))
=>
	(up-jump-rule 9)
)

(defrule
	(goal gl-strategy-class basic-class)
	(game-time < 2400)
	(up-compare-goal gl-advanced-cavalry != 0)
	(or	(building-type-count-total town-center < 3)
		(up-compare-goal gl-skirmisher-count-total < 20))
	(or	(unit-type-count-total archer-line <= relative-5-units)
		(civ-selected spanish))
	(up-compare-goal gl-enemy-spearman-count < 12)
	(unit-type-count-total cavalry-archer-unit <= relative-4-units)
	(civilian-population < 120)
	(up-compare-goal gl-enemy-archery-count < 5)
	(up-compare-goal gl-enemy-gunpowder-count < 5)
=>
	(up-jump-rule 5)
)

(defrule
	(or	(strategic-number sn-allow-resource-spending <= 0)
		(or	(research-completed ri-bodkin-arrow)
			(or	(and	(goal POSITION POCKET)
					(and	(game-time < 1800)
						(or	(goal MILITARY 0)
							(up-compare-goal gl-my-villager-count-total < 95))))
				(and	(goal MILITARY 0)
					(up-compare-goal threat-time > 10000)))))
=>
	(up-jump-rule 2)
)

(defrule
	(unit-type-count villager-farmer < 18)
	(food-amount < 250)
	(or	(unit-type-count villager-farmer < 13)
		(building-type-count town-center > 1))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-peace-in-town != YES)
	(or	(unit-type-count-total archer-line > 13)
		(or	(up-compare-goal gl-skirmisher-count-total > 13)
			(or	(unit-type-count-total galley-line > 10)
				(or	(goal gl-strategy xbow-boom)
					(and	(unit-type-count-total cavalry-archer-line > 10)
						(civ-selected hun))))))
	(research-available ri-bodkin-arrow)
=>
	(up-modify-escrow food c:max 200)
	(up-modify-escrow gold c:max 100)
	(up-add-research-cost c: ri-bodkin-arrow c: -1)
)

(defrule
	(or	(strategic-number sn-allow-resource-spending > 0)
		(players-current-age every-enemy <= feudal-age))
	(or	(unit-type-count-total archer-line >= relative-5-units)
		(or	(unit-type-count-total cavalry-archer-unit >= relative-4-units)
			(up-compare-goal gl-skirmisher-count-total >= relative-5-units)))
	(can-research-with-escrow ri-bodkin-arrow)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-bodkin-arrow)
)

(defrule
	(up-compare-goal gl-eagles != 0)
	(research-available ri-elite-eagle-warrior)
	(up-compare-goal gl-enemy-units-in-town < 10)
	(up-compare-goal gl-enemy-gunpowder-count < 10)
=>
	(up-jump-rule 2)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(unit-type-count-total archer-line > 10)
		(or	(unit-type-count-total cavalry-archer-unit > 8)
			(or	(up-compare-goal gl-skirmisher-count-total > 10)
				(unit-type-count-total galley-line > 8))))
	(research-available ri-bracer)
=>
	(up-modify-escrow food c:max 300)
	(up-modify-escrow gold c:max 200)
	(up-add-research-cost c: ri-bracer c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(unit-type-count-total archer-line >= relative-6-units)
		(or	(unit-type-count-total cavalry-archer-unit >= relative-6-units)
			(up-compare-goal gl-skirmisher-count-total >= relative-6-units)))
	(can-research-with-escrow ri-bracer)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-bracer)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(unit-type-count villager-farmer > 11)
	(or	(unit-type-count-total archer-line > 5)
		(or	(goal gl-advanced-archery heavy-archers)
			(and	(goal gl-strategy xbow-boom)
				(goal POSITION FLANK))))
	(unit-type-count-total archer-line > 0)
	(building-type-count archery-range > 0)
	(research-available ri-crossbow)
=>
	(up-modify-escrow food c:max 125)
	(up-modify-escrow gold c:max 75)
	(up-add-research-cost c: ri-crossbow c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(unit-type-count-total archer-line >= relative-6-units)
		(or	(goal gl-advanced-archery heavy-archers)
			(or	(goal gl-strategy xbow-rush)
				(or	(goal gl-strategy xbow-boom)
					(goal gl-advanced-archery light-archers)))))
	(can-research-with-escrow ri-crossbow)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-crossbow)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(goal gl-strategy ranged-rush-strategy)
		(goal gl-strategy xbow-boom))
	(can-research-with-escrow ri-bodkin-arrow)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-bodkin-arrow)
)

(defrule
	(up-compare-goal gl-eagles != 0)
	(unit-type-count-total archer-line < 25)
	(or	(research-available ri-elite-eagle-warrior)
		(or	(and	(research-available my-unique-research)
				(building-type-count castle > 0))
			(or	(unit-type-count-total archer-line < 18)
				(or	(research-completed ri-elite-plumed-archer)
					(up-compare-goal gl-enemy-eagle-count > 7)))))
=>
	(up-jump-rule 2)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(building-type-count archery-range > 0)
	(unit-type-count-total archer-line > 13)
	(unit-type-count villager-farmer > 23)
	(goal gl-advanced-archery heavy-archers)
	(research-available ri-arbalest)
=>
	(up-modify-escrow food c:max 350)
	(up-modify-escrow gold c:max 300)
	(up-add-research-cost c: ri-arbalest c: -1)
)

(defrule
	(unit-type-count-total archer-line > 0)
	(or	(unit-type-count-total archer-line > 13)
		(or	(goal gl-advanced-archery heavy-archers)
			(and	(population >= pop-to-full-pop-attack)
				(unit-type-count-total archer-line > 10))))
	(can-research-with-escrow ri-arbalest)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-arbalest)
)

(defrule
	(unit-type-count-total galley-line >= relative-4-units)
	(or	(can-research-with-escrow ri-fletching)
		(or	(and	(can-research-with-escrow ri-bodkin-arrow)
				(up-research-status c: ri-war-galley >= research-pending))
			(can-research-with-escrow ri-bracer)))
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
)

(defrule
	(goal gl-strategy default)
	(strategic-number sn-allow-resource-spending < 6); Lacking some important research
	(research-available ri-paladin)
	(up-compare-goal gl-advanced-cavalry != heavy-knights); Not going palas
=>
	(up-jump-rule 2); Delay palas to get more important stuff first
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(goal gl-advanced-cavalry heavy-knights)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(up-compare-const gv-maximum-age == imperial-age)
	(up-research-status c: ri-2nd-knight-upgrade < research-pending)
=>
	(up-modify-goal gl-food-gp-points c:+ 15)
	(up-add-research-cost c: ri-2nd-knight-upgrade c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(unit-type-count-total knight-unit >= relative-10-units)
		(or	(goal gl-advanced-cavalry heavy-knights)
			(goal gl-strategy knight-boom)))
	(or	(can-research-with-escrow ri-1st-knight-upgrade)
		(can-research-with-escrow ri-2nd-knight-upgrade))
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-1st-knight-upgrade)
	(research ri-2nd-knight-upgrade)
)

(defrule
	(or	(not	(research-available my-unique-unit-upgrade))
		(and	(civ-selected spanish)
			(and	(up-research-status c: ri-paladin <= research-pending)
				(goal gl-strategy-class basic-class))))
=>
	(up-jump-rule 3)
)

(defrule
	(timer-triggered 3)
	(up-compare-goal CASTLE != 0)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(up-compare-const gv-maximum-age == imperial-age)
	(up-research-status c: my-unique-unit-upgrade < research-pending)
=>
	(up-add-research-cost c: my-unique-unit-upgrade c: -1)
)

(defrule
	(or	(soldier-count >= escrow-UU-soldier)
		(population >= escrow-UU-pop))
	(civilian-population >= 95)
	(or	(not	(town-under-attack))
		(up-compare-goal TSA >= 1))
	(up-compare-goal gl-my-UU-count-total >= escrow-UU-count)
	(research-available my-unique-unit-upgrade)
=>
	(up-modify-escrow escrow-UU-resource1 c:max escrow-UU-resource1-count)
	(up-modify-escrow escrow-UU-resource2 c:max escrow-UU-resource2-count)
)

(defrule
	(or	(up-compare-goal gl-my-UU-count-total > 8)
		(or	(up-compare-goal CASTLE != 0)
			(or	(and	(up-compare-goal gl-my-UU-count-total > 0)
					(population-cap < 65))
				(and	(up-compare-const escrow-UU-resource1-count > 0)
					(up-compare-goal gl-my-UU-count-total >= relative-6-units)))))
	(can-research-with-escrow my-unique-unit-upgrade)
=>
	(release-escrow escrow-UU-resource1)
	(release-escrow escrow-UU-resource2)
 	(research my-unique-unit-upgrade)
)

(defrule
	(or	(strategic-number sn-allow-resource-spending <= 0)
		(or	(nor	(research-available ri-scale-mail)
				(or	(research-available ri-chain-mail)
					(research-available ri-plate-mail)))
			(and	(up-compare-const gv-maximum-age == feudal-age)
				(and	(unit-type-count-total militiaman-line <= relative-2-units)
					(game-time < extra-flush-upgrade-time)))))
=>
	(up-jump-rule 4)
)

(defrule
	(unit-type-count-total militiaman-line > relative-2-units)
	(or	(and	(up-compare-goal gl-current-age >= gv-feudal-up)
			(or	(unit-type-count-total militiaman-line > relative-6-units)
				(or	(goal CASTLE 4)
					(goal gl-advanced-infantry heavy-swordsmen))))
		(and	(research-completed ri-fletching)
			;(goal gl-feudal-infantry men-at-arms)))
			(unit-type-count-total militiaman-line > relative-6-units)))
	(up-research-status c: ri-man-at-arms != research-available)
=>
	(research ri-scale-mail)
)

(defrule
	(unit-type-count-total spearman-line >= relative-6-units)
	(up-research-status c: ri-pikeman != pikeman-status)
	(up-compare-goal gl-current-age >= gv-current-age-for-mail)
=>
	(research ri-scale-mail)
)

(defrule
	(or	(and	(unit-type-count-total militiaman-line >= relative-6-units)
			(not	(research-available ri-long-swordsman)))
		(or	(and	(unit-type-count-total spearman-line >= relative-6-units)
				(up-research-status c: ri-pikeman >= research-pending)); Turks shouldn't take it
			(or	(up-compare-goal gl-eagle-warrior-count-total >= relative-6-units)
				(up-research-status c: ri-elite-eagle-warrior >= research-pending))))
=>
	(research ri-chain-mail)
)

(defrule
	(or	(unit-type-count-total militiaman-line >= relative-6-units)
		(or	(and	(up-compare-goal gl-eagle-warrior-count-total >= relative-6-units)
				(up-research-status c: ri-elite-eagle-warrior >= research-pending))
			(and	(unit-type-count-total spearman-line >= relative-6-units)
				(and	(or	(and	(strategic-number sn-allow-resource-spending > 2)
							(current-age-time > 15))
						(research-completed ri-halberdier))
					(up-compare-goal gl-strategy != eew-strategy)))))
=>
	(research ri-plate-mail)
)

(defrule
	(or	(up-compare-const UU-type != infantry-class)
		(and	(research-completed ri-chain-mail)
			(and	(research-completed ri-iron-casting)
				(and	(nor	(research-available ri-plate-mail)
						(or	(research-available ri-blast-furnace)
							(research-available ri-squires)))
					(research-completed ri-tracking)))))
=>
	(up-jump-rule 6)
)

(defrule
	(or	(strategic-number sn-allow-resource-spending == 0)
		(or	(and	(goal POSITION POCKET)
				(and	(game-time < 1500)
					(and	(nand	(town-under-attack)
							(up-compare-goal MILITARY != 1))
						(strategic-number sn-allow-resource-spending == 1))))
			(research-completed ri-plate-mail)))
	(up-compare-goal gl-defending-ally != YES)
	(up-compare-goal gl-attacking-with-ally != YES)
=>
	(up-jump-rule 5)
)

(defrule
	(up-compare-goal gl-my-UU-count-total > 12)
	(strategic-number sn-allow-resource-spending > 1)
	(building-type-count farm > 17)
	(up-compare-goal gl-my-villager-count-total > 50)
	(or	(research-available ri-scale-mail)
		(or	(research-available ri-chain-mail)
			(research-available ri-plate-mail)))
=>
	(up-modify-escrow food c:max 300)
	(up-modify-escrow gold c:max 150)
	(up-add-research-cost c: ri-plate-mail c: -1)
)

(defrule
	(up-compare-goal gl-my-UU-count-total >= relative-4-units)
	(strategic-number sn-allow-resource-spending > 0)
	(or	(or	(can-research-with-escrow ri-scale-mail)
			(can-research-with-escrow ri-plate-mail))
		(and	(can-research-with-escrow ri-chain-mail)
			(strategic-number sn-allow-resource-spending > 1)))
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-scale-mail)
	(research ri-chain-mail)
	(research ri-plate-mail)
)

(defrule
	(or	(and	(up-compare-goal gl-eew-strategy-type >= fast-imp)
			(up-research-status c: ri-elite-eagle-warrior < research-pending))
		(or	(strategic-number sn-allow-resource-spending < uu-resource-level1)
			(and	(up-compare-goal gl-my-UU-count-total < relative-6-units)
				(or	(up-compare-goal gl-my-UU-count-total < relative-4-units)
					(strategic-number sn-allow-resource-spending < 6)))))
=>
	(up-jump-rule 1)
)

(defrule
	(or	(can-research ri-forging)
		(and	(or	(strategic-number sn-allow-resource-spending >= uu-resource-level2)
				(and	(up-research-status c: ri-chain-mail >= research-pending)
					(town-under-attack)))
			(or	(can-research ri-iron-casting)
				(can-research ri-blast-furnace))))
=>
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(or	(strategic-number sn-allow-resource-spending >= UU-extra-priority)
		(and	(goal gl-current-age gv-castle)
			(strategic-number sn-allow-resource-spending > 2)))
	(research-completed ri-chain-mail)
	(not	(research-available ri-plate-mail))
	(up-compare-goal gl-my-UU-count-total >= relative-6-units)
	(or	(can-research ri-squires)
		(and	(can-research ri-tracking)
			(strategic-number sn-allow-resource-spending > 3)))
=>
	(research ri-squires)
	(research ri-tracking)
)

(defrule
	(or	(up-compare-const UU-type != cavalry-class)
		(and	(research-completed ri-chain-barding)
			(and	(research-completed ri-iron-casting)
				(and	(nor	(research-available ri-plate-barding)
						(research-available ri-blast-furnace))
					(nor	(research-available ri-husbandry)
						(research-available ri-bloodlines))))))
=>
	(up-jump-rule 4)
)

(defrule
	(up-compare-goal gl-my-UU-count-total > 12)
	(strategic-number sn-allow-resource-spending > 1)
	(building-type-count farm > 22)
	(up-compare-goal gl-my-villager-count-total > 60)
	(or	(research-available ri-scale-barding)
		(or	(research-available ri-chain-barding)
			(research-available ri-plate-barding)))
=>
	(up-modify-escrow food c:max 350)
	(up-modify-escrow gold c:max 200)
	(up-add-research-cost c: ri-plate-barding c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(up-compare-goal gl-my-UU-count-total >= relative-3-units)
		(and	(strategic-number sn-allow-resource-spending > 5)
			(goal CASTLE 2)))
	(or	(or	(can-research-with-escrow ri-scale-barding)
			(can-research-with-escrow ri-plate-barding))
		(can-research-with-escrow ri-chain-barding))
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(up-compare-goal gl-my-UU-count-total >= relative-3-units)
	(or	(can-research ri-forging)
		(and	(strategic-number sn-allow-resource-spending > 2)
			(and	(or	(can-research ri-iron-casting)
					(can-research ri-blast-furnace))
				(up-research-status c: ri-chain-barding >= research-pending))))
=>
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(up-compare-goal gl-my-UU-count-total >= relative-3-units)
		(and	(strategic-number sn-allow-resource-spending > 5)
			(goal CASTLE 2)))
	(or	(and	(can-research ri-husbandry)
			(and	(strategic-number sn-allow-resource-spending > 4)
				(research-completed ri-chain-barding)))
		(can-research ri-bloodlines))
=>
	(research ri-bloodlines)
	(research ri-husbandry)
)

#load-if-defined INCAN-CIV
(defrule
	(or	(strategic-number sn-allow-resource-spending > 2)
		(goal MILITARY 1))
	(strategic-number sn-allow-resource-spending > 1)
	(unit-type-count-total slinger >= relative-6-units)
	(can-research ri-thumb-ring)
=>
	(research ri-thumb-ring)
)
#end-if

#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(up-compare-goal gl-current-age >= gv-current-age-for-mail)
	(up-research-status c: gv-tech-for-armor != research-available); Bloodlines for feudal age end
	(strategic-number sn-allow-resource-spending > 0)
	(building-type-count-total stable > 0)
	(or	(unit-type-count-total scout-cavalry-line >= relative-5-units)
		(or	(unit-type-count-total camel-line >= relative-5-units)
			(or	(unit-type-count-total knight-line >= relative-5-units)
				(or	(goal gl-advanced-cavalry LC)
					(up-research-status c: ri-2nd-knight-upgrade >= research-pending)))))
=>
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
)

(defrule
	(or	(up-research-status c: ri-chain-barding != research-available)
		(and	(or	(and	(goal gl-defending-ally YES)
					(and	(up-compare-goal gl-military-percentage > 75)
						(civilian-population < 80)))
				(or	(up-compare-goal gl-military-percentage2 < 70)
					(and	(civilian-population < 60)
						(building-type-count-total town-center > 2))))
			(unit-type-count-total knight-line < 10)))
=>
	(up-jump-rule 2)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(civilian-population > 50)
	(or	(goal gl-strategy krush)
		(goal gl-strategy knight-rush))
	(or	(up-compare-goal TSA >= 1)
		(or	(goal gl-defending-ally YES)
			(goal gl-patrol-defence patrol-on)))
	(unit-type-count villager-farmer > 18)
	(unit-type-count-total knight-line > 8)
	(building-type-count blacksmith > 0)
	(research-available ri-chain-barding)
=>
	(up-modify-escrow food c:max 250)
	(up-modify-escrow gold c:max 150)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(civilian-population > 50)
	(or	(goal gl-strategy krush)
		(goal gl-advanced-cavalry heavy-knights))
	(or	(up-compare-goal TSA >= 1)
		(or	(goal gl-defending-ally YES)
			(goal gl-patrol-defence patrol-on)))
	(building-type-count-total stable > 0)
	(unit-type-count-total knight-line > 7)
	(can-research-with-escrow ri-chain-barding)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-chain-barding)
)
#end-if
#end-if

#load-if-defined UP-GAME-WK
#load-if-defined INDIAN-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(unit-type-count-total camel-line >= relative-5-units)
	(up-research-status c: ri-chain-barding >= research-pending)
	(or	(can-research ri-forging)
		(or	(can-research ri-iron-casting)
			(and	(can-research ri-blast-furnace)
				(and	(up-research-status c: ri-plate-barding >= research-pending)
					(up-research-status c: ri-heavy-camel >= research-pending)))))
=>
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)
#end-if

(defrule
	(up-compare-const elephants-available == 0)
=>
	(up-jump-rule 8)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(up-compare-goal gl-battle-elephant-count-total > 4)
	(or	(up-compare-goal gl-battle-elephant-count-total > 10)
		(strategic-number sn-allow-resource-spending > 1))
=>
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
)

(defrule
	(or	(up-research-status c: ri-chain-barding != research-available)
		(and	(or	(and	(goal gl-defending-ally YES)
					(and	(up-compare-goal gl-military-percentage > 75)
						(civilian-population < 80)))
				(or	(up-compare-goal gl-military-percentage2 < 70)
					(and	(civilian-population < 60)
						(building-type-count-total town-center > 2))))
			(up-compare-goal gl-battle-elephant-count-total < 10)))
=>
	(up-jump-rule 2)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(civilian-population > 50)
	(or	(goal gl-advanced-cavalry light-elephants)
		(goal gl-advanced-cavalry heavy-elephants))
	(or	(up-compare-goal TSA >= 1)
		(or	(goal gl-defending-ally YES)
			(goal gl-patrol-defence patrol-on)))
	(unit-type-count villager-farmer > 18)
	(up-compare-goal gl-battle-elephant-count-total > 8)
	(building-type-count blacksmith > 0)
	(research-available ri-chain-barding)
=>
	(up-modify-escrow food c:max 250)
	(up-modify-escrow gold c:max 150)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(civilian-population > 50)
	(or	(goal gl-advanced-cavalry light-elephants)
		(goal gl-advanced-cavalry heavy-elephants))
	(or	(up-compare-goal TSA >= 1)
		(or	(goal gl-defending-ally YES)
			(goal gl-patrol-defence patrol-on)))
	(building-type-count-total stable > 0)
	(up-compare-goal gl-battle-elephant-count-total > 7)
	(can-research-with-escrow ri-chain-barding)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-chain-barding)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(up-compare-goal gl-battle-elephant-count-total > 4)
	(or	(up-compare-goal gl-battle-elephant-count-total > 11)
		(strategic-number sn-allow-resource-spending > 2))
	(up-research-status c: ri-chain-barding != research-available)
	(up-research-status c: ri-plate-barding != research-available)
=>
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(up-compare-goal gl-battle-elephant-count-total > 4)
	(or	(up-compare-goal gl-battle-elephant-count-total > 10)
		(strategic-number sn-allow-resource-spending > 1))
	(up-research-status c: ri-scale-barding != research-available)
	(up-research-status c: ri-chain-barding != research-available)
	(or	(can-research ri-husbandry)
		(or	(strategic-number sn-allow-resource-spending > 2)
			(up-compare-goal gl-battle-elephant-count-total > 15)))
=>
	(research ri-husbandry)
	(research ri-bloodlines)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(civilian-population > 100)
	(goal gl-advanced-cavalry heavy-elephants)
	(unit-type-count villager-farmer > 40)
	(soldier-count > 17)
	(nand	(goal TSA 0)
		(up-compare-goal gl-enemy-units-in-town > 7))
	(up-compare-goal gl-battle-elephant-count-total > 10)
	(building-type-count stable > 0)
	(research-available ri-chain-barding)
=>
	(up-modify-escrow food c:max 1200)
	(up-modify-escrow gold c:max 900)
)

(defrule
	(or	(goal gl-advanced-cavalry light-elephants)
		(goal gl-advanced-cavalry heavy-elephants))
	(can-research-with-escrow ri-elite-battle-elephant)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-elite-battle-elephant)
)

#end-if

(defrule
	(or	(and	(strategic-number sn-allow-resource-spending > 2); 1
			(up-compare-goal gl-current-age >= gv-feudal-up))
		(and	(up-compare-const gv-maximum-age == feudal-age)
			(game-time > 1800)))
	(or	(and	(unit-type-count-total militiaman-line >= relative-6-units)
			(strategic-number sn-allow-resource-spending > 2))
		(and	(unit-type-count-total spearman-line >= relative-6-units)
			(up-research-status c: ri-pikeman >= research-pending)))
	(can-research ri-forging)
=>
	(research ri-forging)
)

(defrule
	(strategic-number sn-allow-resource-spending > 2); 1
	(up-research-status c: ri-plate-mail != research-available)
	(or	(and	(unit-type-count-total spearman-line >= relative-6-units)
			(up-research-status c: ri-pikeman >= research-pending))
		(and	(or	(unit-type-count-total militiaman-line >= relative-6-units)
				(and	(up-compare-goal gl-eagle-warrior-count-total >= relative-6-units)
					(up-research-status c: ri-elite-eagle-warrior != research-available)))
			(strategic-number sn-allow-resource-spending > 2)))
	(can-research ri-iron-casting)
=>
	(research ri-iron-casting)
)

(defrule
	(strategic-number sn-allow-resource-spending > 3)
	(or	(unit-type-count-total militiaman-line >= relative-6-units)
		(or	(unit-type-count-total spearman-line >= relative-6-units)
			(unit-type-count-total elite-eagle-warrior >= relative-6-units)))
	(not	(research-available ri-plate-mail))
	(can-research ri-blast-furnace)
=>
	(research ri-blast-furnace)
)

#load-if-not-defined AZTEC-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(or	(and	(strategic-number sn-allow-resource-spending < 2)
			(up-compare-goal gl-enemy-eew-count < 10))
		(or	(and	(goal gl-strategy default)
				(and	(research-available ri-bow-saw)
					(food-amount < 350)))
			(or	(and	(research-available ri-plate-barding)
					(up-research-status c: ri-forging >= research-pending))
				(strategic-number sn-allow-resource-spending < 1))))
=>
	(up-jump-rule 2)
)

(defrule
	(goal gl-strategy default)
	(civilian-population > 80)
	(up-research-status c: ri-chain-barding >= research-pending)
	(or	(unit-type-count-total scout-cavalry-line >= relative-10-units)
		(unit-type-count-total knight-line >= relative-10-units))
=>
	(research ri-forging)
	(research ri-iron-casting)
)

(defrule
	(or	(strategic-number sn-allow-resource-spending > 2)
		(and	(up-research-status c: ri-chain-barding >= research-pending)
			(research-available ri-forging)))
	(or	(unit-type-count-total scout-cavalry-line >= relative-5-units)
		(or	(unit-type-count-total camel-line >= relative-5-units)
			(unit-type-count-total knight-line >= relative-5-units)))
	(nand	(research-available ri-iron-casting)
		(up-research-status c: ri-chain-barding < research-pending))
=>
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)
#end-if
#end-if
#end-if

(defrule
	(or	(up-compare-goal gl-early-raid != DUC-system)
		(or	(and	(unit-type-count archery-class < 25)
				(or	(unit-type-count archery-class < 20)
					(or	(escrow-amount wood < 200)
						(escrow-amount wood == 250))))
			(or	(up-compare-goal gl-military-percentage < 80)
				(or	(goal TSA 0)
					(up-compare-goal gl-my-villager-count-total < 40)))))
=>
	(up-jump-rule 5)
)

(defrule
	(or	(up-compare-goal gl-military-percentage > 170)
		(or	(current-age-time < 5)
			(and	(up-compare-goal gl-skirmisher-count-total > relative-10-units)
				(and	(up-compare-goal gl-enable-skirmishers >= 1)
					(research-available ri-elite-skirmisher)))))
=>
	(up-jump-rule 4)
)

(defrule
	(building-available university)
	(research-available ri-ballistics)
	(strategic-number sn-allow-resource-spending > 0)
	(building-type-count-total university < 1)
=>
	(up-modify-escrow wood c:max 200)
)

(defrule
	(building-available university)
	(research-available ri-ballistics)
	(strategic-number sn-allow-resource-spending > 0)
	(building-type-count-total university < 1)
	(can-build-with-escrow university)
=>
	(release-escrow wood)
	(up-modify-sn sn-placement-zone-size g:= gl-my-maximum-town-size)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: university)
)

(defrule
	(building-type-count university > 0)
	(research-available ri-ballistics)
=>
	(up-modify-escrow wood c:max 300)
	(up-modify-escrow gold c:max 175)
)

(defrule
	(can-research-with-escrow ri-ballistics)
=>
	(release-escrow wood)
	(release-escrow gold)
	(research ri-ballistics)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(game-time > defensive-technology-time)
	(current-age == gv-maximum-age)
	(or	(building-type-count-total bombard-tower > 3)
		(or	(building-type-count-total castle > 3)
			(and	(building-type-count-total castle > 2)
				(and	(up-research-status c: ri-bodkin-arrow < research-pending)
					(gold-amount > 1400)))))
=>
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
	(research ri-ballistics)
)

(defrule
	(or	(and	(building-type-count town-center > 2)
			(up-unit-type-in-town c: knight-line > 2))
		(and	(goal gl-strategy sling)
			(building-type-count-total watch-tower > 3)))
	(soldier-count < 5)
	(players-military-population focus-player > 7)
	(up-compare-goal gl-enemy-units-in-town > 7)
	(civilian-population > 40)
	(can-research ri-fletching)
=>
	(research ri-fletching)
)

(defrule
	(nand	(up-compare-goal gl-strategy-type >= FC)
		(up-compare-goal gl-current-age <= gv-feudal))
	(or	(unit-type-count-total archer-line >= relative-4-units)
		(or	(up-compare-goal gl-skirmisher-count-total >= relative-4-units)
			(and	(up-compare-goal gl-feudal-archery > 0)
				(unit-type-count-total archery-class > 0))))
	(can-research-with-escrow ri-fletching)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-fletching)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(or	(unit-type-count-total cavalry-archer-unit >= relative-2-units)
		(or	(goal gl-strategy ranged-boom-strategy)
			(or	(goal gl-strategy ranged-rush-strategy)
				(or	(goal gl-advanced-archery hun-CAs)
					(goal gl-advanced-archery light-CAs)))))
	(can-research-with-escrow ri-fletching)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-fletching)
)

(defrule
	(up-compare-goal gl-eagles != 0)
	(or	(research-available ri-elite-eagle-warrior)
		(and	(building-type-count castle > 0)
			(and	(research-available my-unique-research)
				(or	(player-in-game any-ally)
					(game-time < 3000)))))
=>
	(up-jump-rule 5)
)

(defrule
	(up-compare-goal gl-my-villager-count-total > 40)
	(unit-type-count-total galley-line > 20)
	(or	(up-compare-goal gl-military-percentage > 110)
		(unit-type-count-total galley-line > 26))
	(up-research-status c: ri-bracer != research-available)
	(strategic-number sn-allow-resource-spending >= 0)
	(research-available ri-ballistics)
	(up-research-status c: ri-war-galley >= research-pending)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(building-type-count university > 0)
=>
	(up-modify-escrow wood c:max 300)
	(up-modify-escrow gold c:max 175)
	(up-add-research-cost c: ri-ballistics c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(up-compare-goal gl-my-villager-count-total > 40)
	(unit-type-count-total main-ranged-unit > 25)
	(up-research-status c: ri-bracer != research-available)
	(nand	(goal gl-current-age gv-castle)
		(up-compare-goal gl-military-percentage > 180)); Rather get up
	(or	(up-compare-goal gl-military-percentage > 135)
		(up-compare-goal gl-enemy-cavalry-count > 10))
	(research-available ri-ballistics)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(building-type-count university > 0)
=>
	(up-modify-escrow wood c:max 300)
	(up-modify-escrow gold c:max 175)
	(up-add-research-cost c: ri-ballistics c: -1)
)

(defrule
	(up-compare-goal gl-my-villager-count-total > 50)
	(strategic-number sn-allow-resource-spending > 2)
	(up-research-status c: ri-bracer != research-available)
	(or	(unit-type-count-total archer-line > 17)
		(or	(unit-type-count-total cavalry-archer-unit > 15)
			(up-compare-goal gl-skirmisher-count-total > 15)))
	(building-type-count university > 0)
	(research-available ri-chemistry)
=>
	(up-modify-escrow food c:max 300)
	(up-modify-escrow gold c:max 200)
	(up-add-research-cost c: ri-chemistry c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(goal gl-advanced-archery main-ranged)
	(unit-type-count-total main-ranged-unit > 25)
	(can-research-with-escrow ri-ballistics)
=>
	(release-escrow wood)
	(release-escrow gold)
	(research ri-ballistics)
)

(defrule
	(up-research-status c: ri-bracer != research-available)
	(or	(and	(unit-type-count-total galley-line >= relative-4-units)
			(strategic-number sn-allow-resource-spending > 1))
		(or	(unit-type-count-total archer-line >= relative-6-units)
			(or	(up-compare-goal gl-skirmisher-count-total >= relative-6-units)
				(unit-type-count-total cavalry-archer-unit >= relative-6-units))))
	(or	(can-research-with-escrow ri-ballistics)
		(can-research ri-chemistry))
=>
	(up-release-escrow)
	(research ri-ballistics)
	(research ri-chemistry)
)

#load-if-not-defined ALL-TECHS-ENABLED
(defrule
	(unit-type-count-total archer-line < relative-6-units)
	(up-compare-goal gl-skirmisher-count-total < relative-6-units)
	(or	(up-compare-const cannons-available == 0)
		(and	(up-compare-const cannon-galleons-available == 0)
			(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)))
=>
	(up-jump-rule 1)
)
#end-if

(defrule
	(or	(and	(or	(unit-type-count-total archer-line >= relative-6-units)
				(up-compare-goal gl-skirmisher-count-total >= relative-6-units))
			(up-research-status c: ri-bracer != research-available))
		(or	(and	(strategic-number sn-allow-resource-spending > 5)
				(food-amount > 1500))
			(goal gl-advanced-archery medium-cannoneers)))
	(can-research-with-escrow ri-chemistry)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-chemistry)
)

(defrule
	(goal gl-advanced-cavalry heavy-knights)
	(population > 160)
	(or	(civ-selected frankish)
		(or	(civ-selected persian)
			(or	(civ-selected spanish)
				(civ-selected teutonic))))
	(strategic-number sn-allow-resource-spending > 5)
	(up-compare-goal gl-trade-unit-count-total > 35)
	(up-compare-goal gl-enemy-mameluke-count > 14)
	(can-research ri-chemistry)
=>
	(research ri-chemistry)
)

(defrule
	(population-cap < 200)
	(or	(can-research-with-escrow ri-chemistry)
		(or	(can-research-with-escrow ri-ballistics)
			(can-research-with-escrow ri-murder-holes)))
=>
	(release-escrow food)
	(release-escrow wood)
	(release-escrow gold)
	(research ri-ballistics)
	(research ri-chemistry)
	(research ri-murder-holes)
)

#load-if-defined HUN-CIV
(defrule
	(or	(strategic-number sn-allow-resource-spending > 2)
		(or	(up-compare-goal gl-current-age >= gv-castle-up)
			(or	(goal MILITARY 1)
				(or	(up-compare-goal gl-enemy-units-in-town > 4)
					(goal gl-patrol-defence patrol-on)))))
	(strategic-number sn-allow-resource-spending > 1)
	(unit-type-count-total cavalry-archer-line >= relative-6-units)
	(or	(can-research ri-parthian-tactics)
		(can-research ri-thumb-ring))
=>
	(research ri-parthian-tactics)
	(research ri-thumb-ring)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(unit-type-count-total cavalry-archer-line > 19)
	(cc-players-unit-type-count 0 gold-mine > 2)
	(research-available ri-heavy-cavalry-archer)
=>
	(up-modify-escrow food c:max 900)
	(up-modify-escrow gold c:max 500)
	(up-add-research-cost c: ri-heavy-cavalry-archer c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(unit-type-count-total cavalry-archer-line >= relative-6-units)
		(and	(or	(goal gl-advanced-archery hun-CAs)
				(goal gl-advanced-archery light-CAs))
			(population > almost-full-pop)))
	(or	(can-research-with-escrow ri-heavy-cavalry-archer)
		(can-research-with-escrow ri-chemistry))
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-chemistry)
	(research ri-heavy-cavalry-archer)
)
#end-if

(defrule
	(nor	(goal gl-advanced-archery CAs)
		(goal gl-strategy sling))
=>
	(up-jump-rule 5)
)

(defrule
	(or	(strategic-number sn-allow-resource-spending > 2)
		(and	(up-compare-goal gl-current-age >= gv-castle-up)
			(strategic-number sn-allow-resource-spending > 1)))
	(goal gl-advanced-archery CAs)
	(unit-type-count-total cavalry-archer-line >= relative-6-units)
	(or	(can-research ri-parthian-tactics)
		(can-research ri-thumb-ring))
=>
	(research ri-parthian-tactics)
	(research ri-thumb-ring)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(up-gaia-type-count c: gold > 2)
	(goal gl-advanced-archery CAs)
	(unit-type-count-total cavalry-archer-line > 19)
	(research-available ri-heavy-cavalry-archer)
=>
	(up-modify-escrow food c:max 900)
	(up-modify-escrow gold c:max 500)
	(up-add-research-cost c: ri-heavy-cavalry-archer c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(goal gl-advanced-archery CAs)
	(or	(unit-type-count-total cavalry-archer-line >= relative-6-units)
		(population > almost-full-pop))
	(or	(can-research-with-escrow ri-heavy-cavalry-archer)
		(can-research-with-escrow ri-chemistry))
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-chemistry)
	(research ri-heavy-cavalry-archer)
)

(defrule
	(or	(and	(goal gl-advanced-archery CAs)
			(and	(strategic-number sn-allow-resource-spending > 0)
				(unit-type-count-total cavalry-archer-line > 0)))
		(and	(goal gl-strategy sling)
			(and	(game-time > 1500)
				(and	(building-type-count-total watch-tower > 2)
					(can-research ri-fletching)))))
=>
	(research ri-bloodlines)
	(research ri-fletching)
	(research ri-bodkin-arrow)
)

(defrule
	(goal gl-advanced-archery CAs)
	(strategic-number sn-allow-resource-spending > 1)
	(unit-type-count-total cavalry-archer-line > 0)
=>
	(research ri-bracer)
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-parthian-tactics)
	(research ri-thumb-ring)
	(research ri-ballistics)
	(research ri-chemistry)
)

(defrule
	(or	(goal gl-advanced-archery heavy-cannoneers)
		(or	(goal gl-advanced-archery light-cannoneers)
			(or	(and	(up-compare-goal MILITARY >= 1)
					(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
						(and	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
							(and	(strategic-number sn-allow-resource-spending > 5)
								(goal gl-strategy default)))))
				(unit-type-count-total scorpion-line >= relative-5-units))))
=>
	(research ri-chemistry)
)

(defrule
	(or	(not	(research-available ri-thumb-ring))
		(or	(and	(goal gl-current-age gv-castle)
				(and	(players-current-age focus-player == imperial-age)
					(goal TSA 0)))
			(up-research-status c: ri-bracer == research-available)))
=>
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(or	(and	(or	(strategic-number sn-allow-resource-spending > 2)
				(and	(unit-type-count-total archer-line > 25)
					(up-compare-goal gl-enemy-cavalry-count > 10)))
			(unit-type-count-total archer-line >= relative-6-units))
		(and	(or	(strategic-number sn-allow-resource-spending > 5)
				(game-time > 3600))
			(up-compare-goal gl-skirmisher-count-total > 18)))
	(can-research ri-thumb-ring)
=>
	(research ri-thumb-ring)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(or	(and	(research-completed ri-bodkin-arrow)
			(or	(unit-type-count-total cavalry-archer-unit >= relative-6-units)
				(unit-type-count-total mangudai-line >= relative-6-units)))
		(and	(goal gl-strategy turkish-fast-imp)
			(up-compare-goal gl-current-age >= gv-castle-up)))
	(or	(can-research ri-padded-archer-armor)
		(can-research ri-leather-archer-armor))
=>
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(unit-type-count-total hand-cannoneer >= relative-5-units)
		(and	(research-completed ri-fletching)
			(or	(up-compare-goal gl-skirmisher-count-total >= relative-5-units)
				(and	(unit-type-count-total archer-line >= relative-5-units)
					(nor	(research-available ri-crossbow)
						(research-available ri-bodkin-arrow))))))
	(up-compare-flag gl-flag != pikeman-upgrade-notice)
	(can-research ri-padded-archer-armor)
=>
	(research ri-padded-archer-armor)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(or	(and	(or	(unit-type-count-total archer-line >= relative-5-units)
				(up-compare-goal gl-skirmisher-count-total >= relative-5-units))
			(and	(research-completed ri-bodkin-arrow)
				(up-research-status c: ri-bracer != research-available)))
		(unit-type-count-total hand-cannoneer >= relative-5-units))
	(up-compare-flag gl-flag != pikeman-upgrade-notice)
	(can-research ri-leather-archer-armor)
=>
	(research ri-leather-archer-armor)
)

(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(or	(and	(up-research-status c: ri-bracer != research-available)
			(or	(unit-type-count-total archer-line >= relative-6-units)
				(or	(up-compare-goal gl-skirmisher-count-total >= relative-6-units)
					(or	(unit-type-count-total cavalry-archer-unit >= relative-6-units)
						(goal gl-advanced-trash YES)))))
		(unit-type-count-total hand-cannoneer >= relative-6-units))
	(can-research ri-ring-archer-armor)
=>
	(research ri-ring-archer-armor)
)

(defrule
	(goal gl-strategy-class basic-class)
	(goal CASTLE 0)
	(up-compare-goal gl-my-UU-count-total < 20)
	(strategic-number sn-allow-resource-spending < 5)
=>
	(up-jump-rule 12)
)

(defrule
	(up-compare-const UU-type != archery-class)
	(up-compare-const UU-type != cavalry-archer-class)
=>
	(up-jump-rule 6)
)

(defrule
	(nor	(research-available ri-fletching)
		(research-available ri-bodkin-arrow))
	(nor	(research-available ri-bracer)
		(research-available ri-chemistry))
	(nor	(research-available ri-padded-archer-armor)
		(research-available ri-leather-archer-armor))
	(nor	(research-available ri-ring-archer-armor)
		(research-available ri-ballistics))
	(not	(research-available ri-thumb-ring))
=>
	(up-jump-rule 5)
)

(defrule
	(or	(strategic-number sn-allow-resource-spending == 0)
		(or	(and	(goal POSITION POCKET)
				(and	(game-time < 1500)
					(and	(nand	(town-under-attack)
							(up-compare-goal MILITARY != 1))
						(strategic-number sn-allow-resource-spending == 1))))
			(research-completed ri-bracer)))
	(up-compare-goal gl-defending-ally != YES)
	(up-compare-goal gl-attacking-with-ally != YES)
=>
	(up-jump-rule 2)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(up-compare-goal gl-my-UU-count-total > 10)
	(or	(town-under-attack)
		(or	(goal MILITARY 1)
			(strategic-number sn-allow-resource-spending > 1)))
	(or	(research-available ri-fletching)
		(or	(research-available ri-bodkin-arrow)
			(research-available ri-bracer)))
=>
	(up-modify-escrow food c:max 300)
	(up-modify-escrow gold c:max 200)
	(up-add-research-cost c: ri-bracer c: -1)
)

(defrule
	(up-compare-goal gl-my-UU-count-total > 0)
	(or	(can-research-with-escrow ri-fletching)
		(and	(strategic-number sn-allow-resource-spending > 0)
			(or	(can-research-with-escrow ri-bodkin-arrow)
				(can-research-with-escrow ri-bracer))))
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(up-compare-goal gl-my-UU-count-total >= relative-4-units)
	(or	(can-research-with-escrow ri-chemistry)
		(or	(can-research-with-escrow ri-ballistics)
			(can-research-with-escrow ri-thumb-ring)))
=>
	(release-escrow food)
	(release-escrow wood)
	(release-escrow gold)
	(research ri-chemistry)
	(research ri-ballistics)
	(research ri-thumb-ring)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(up-research-status c: ri-fletching >= research-pending)
	(up-compare-goal gl-my-UU-count-total >= relative-4-units)
	(or	(can-research ri-padded-archer-armor)
		(and	(strategic-number sn-allow-resource-spending > 2)
			(or	(and	(can-research ri-leather-archer-armor)
					(up-research-status c: ri-bodkin-arrow >= research-pending))
				(up-research-status c: ri-bracer >= research-pending))))
=>
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
)

(defrule
	(up-compare-const UU-type != archery-cannon-class)
	(up-compare-const UU-type != cavalry-cannon-class)
=>
	(up-jump-rule 3)
)

(defrule
	(nor	(research-available ri-padded-archer-armor)
		(research-available ri-leather-archer-armor))
	(not	(research-available ri-ring-archer-armor))
=>
	(up-jump-rule 2)
)

(defrule
	(or	(strategic-number sn-allow-resource-spending == 0)
		(and	(goal POSITION POCKET)
			(and	(game-time < 1500)
				(and	(or	(not	(town-under-attack))
						(goal MILITARY 0))
					(strategic-number sn-allow-resource-spending == 1)))))
=>
	(up-jump-rule 2)
)

#load-if-not-defined KHMER-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(up-compare-goal gl-my-UU-count-total >= relative-2-units)
	(or	(can-research ri-padded-archer-armor)
		(and	(strategic-number sn-allow-resource-spending > 1)
			(and	(up-compare-goal gl-my-UU-count-total > 3)
				(or	(can-research ri-leather-archer-armor)
					(can-research ri-ring-archer-armor)))))
=>
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
)
#else
(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(up-compare-goal gl-my-UU-count-total >= relative-2-units)
	(or	(can-research ri-scale-barding)
		(and	(strategic-number sn-allow-resource-spending > 1)
			(and	(up-compare-goal gl-my-UU-count-total > 3)
				(or	(can-research ri-chain-barding)
					(can-research ri-plate-barding)))))
=>
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
)
#end-if
(defrule
	(or	(up-compare-const UU-type == cavalry-archer-class)
		(up-compare-const UU-type == cavalry-cannon-class))
	(or	(up-compare-goal gl-my-UU-count-total >= relative-5-units)
		(up-research-status c: my-unique-unit-upgrade >= research-pending))
	(or	(strategic-number sn-allow-resource-spending > 3)
		(or	(can-research ri-parthian-tactics)
			(can-research ri-bloodlines)))
=>
	(research ri-parthian-tactics)
	(research ri-bloodlines)
	(research ri-husbandry)
)

#load-if-defined BURMESE-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(up-compare-goal gl-my-UU-count-total >= relative-4-units)
	(can-research-with-escrow ri-ballistics)
=>
	(release-escrow wood)
	(release-escrow gold)
	(research ri-ballistics)
)
#end-if

#load-if-defined SPANISH-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(or	(strategic-number sn-allow-resource-spending > 3)
		(and	(up-compare-goal gl-current-age <= gv-castle)
			(or	(goal MILITARY 1)
				(or	(up-compare-goal gl-enemy-units-in-town > 4)
					(goal gl-patrol-defence patrol-on)))))
	(up-compare-goal gl-my-UU-count-total >= relative-6-units)
	(can-research ri-husbandry)
=>
	(research ri-husbandry)
)
#end-if

#load-if-defined TURKISH-CIV
(defrule
	(or	(and	(goal gl-strategy turkish-fast-imp)
			(up-compare-goal gl-enemy-archery-count > 3))
		(goal gl-advanced-archery heavy-cannoneers))
	(can-research ri-ring-archer-armor)
=>
	(research ri-ring-archer-armor)
)
#end-if

(defrule
	(goal gl-strategy-class basic-class)
	(civilian-population > 60)
	(or	(goal TSA 1)
		(or	(goal gl-defending-ally YES)
			(goal gl-patrol-defence patrol-on)))
	(strategic-number sn-allow-resource-spending > 0)
	(research-completed ri-chain-mail)
	(up-research-status c: ri-forging >= research-pending)
	(up-compare-goal gl-eagle-warrior-count-total > 12)
	(up-compare-goal gl-enemy-archer-count > 17)
	(can-research ri-squires)
=>
	(research ri-squires)
)

(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(or	(strategic-number sn-allow-resource-spending > 3)
		(and	(research-completed ri-iron-casting)
			(and	(goal gl-current-age gv-castle)
				(current-age-time > 1200))))
	(research-completed ri-chain-mail)
	(or	(up-compare-goal gl-eagle-warrior-count-total >= relative-6-units)
		(or	(unit-type-count-total spearman-line >= relative-6-units)
			(unit-type-count-total militiaman-line >= relative-6-units)))
	(can-research ri-squires)
=>
	(research ri-squires)
)

(defrule
	(strategic-number sn-allow-resource-spending > 3)
	(research-completed ri-chain-mail)
	(not	(research-available ri-squires))
	(or	(up-compare-goal gl-eagle-warrior-count-total >= relative-6-units)
		(or	(unit-type-count-total spearman-line >= relative-6-units)
			(unit-type-count-total militiaman-line >= relative-6-units)))
	(can-research ri-tracking)
=>
	(research ri-tracking)
)

(defrule
	(strategic-number sn-allow-resource-spending > 4)
	(unit-type-count infantry-class > 20)
	(research-completed ri-chain-mail)
	(not	(research-available ri-plate-mail))
	(can-research ri-arson)
=>
	(research ri-arson)
)

(defrule
	(goal gl-early-raid direct-raid)
	(nand	(goal gl-current-age gv-castle)
		(gold-amount > high-castle-gold))
	(or	(unit-type-count-total scout-cavalry-line >= relative-6-units)
		(unit-type-count-total knight-line >= relative-6-units))
	(can-research ri-husbandry)
=>
	(research ri-husbandry)
)

(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(or	(strategic-number sn-allow-resource-spending > 3)
		(and	(research-completed ri-iron-casting)
			(and	(goal gl-current-age gv-castle)
				(food-amount < 400)))); Not too close to upping yet
	(or	(unit-type-count-total scout-cavalry-line >= relative-6-units)
		(or	(unit-type-count-total knight-line >= relative-6-units)
			(unit-type-count-total camel-line >= relative-6-units)))
	(can-research ri-husbandry)
=>
	(research ri-husbandry)
)

#load-if-defined HUN-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(or	(strategic-number sn-allow-resource-spending > 3)
		(and	(research-completed ri-thumb-ring)
			(up-compare-goal gl-current-age <= gv-castle)))
	(unit-type-count-total cavalry-archer-line >= relative-6-units)
	(can-research ri-husbandry)
=>
	(research ri-husbandry)
)
#end-if

#load-if-defined AZTEC-CIV
(defrule
	(or	(unit-type-count-total monk > 10)
		(or	(up-compare-const gv-michi-style == 1)
			(goal gl-advanced-monastery monks)))
	(unit-type-count-total monk > 1)
=>
	(research ri-fervor)
)
#end-if

(defrule
	(or	(up-compare-goal gl-eew-strategy-type >= fast-imp)
		(goal gl-strategy turkish-fast-imp))
	(up-compare-const gv-meso-civ-enemy == 0)
	(players-military-population focus-player > 4)
	(players-current-age any-enemy == castle-age)
	(unit-type-count-total monk > 0)
	(can-research ri-sanctity)
=>
	(research ri-sanctity)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(current-age-time > 20)
	(unit-type-count-total monastery-class > 14)
	(or	(up-compare-goal gl-enemy-scorpion-count > 15)
		(or	(up-compare-goal gl-enemy-onager-count > 10)
			(players-unit-type-count focus-player bombard-cannon > 6))); Redemption tends to mess up monks, so don't take it easily
	(can-research ri-redemption)
=>
	(research ri-redemption)
)

(defrule
	(or	(unit-type-count-total monk > 6)
		(goal gl-advanced-monastery monks))
	(can-research ri-theocracy)
=>
	(research ri-theocracy)
)

#load-if-not-defined UP-MICHI-STYLE
(defrule
	(or	(and	(unit-type-count-total monk >= relative-4-units)
			(can-research ri-sanctity))
		(or	(and	(unit-type-count-total monk > relative-6-units)
				(or	(can-research ri-block-printing)
					(can-research ri-illumination)))
			(goal gl-advanced-monastery monks)))
=>
	(research ri-sanctity)
	(research ri-block-printing)
	(research ri-illumination)
)
#else
(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(unit-type-count-total monastery-class > 0)
	(or	(unit-type-count-total monastery-class >= relative-3-units)
		(civ-selected aztec))
=>
	(research ri-theocracy)
	(research ri-sanctity)
	(research ri-block-printing)
	(research ri-illumination)
)
#end-if

#load-if-defined SPANISH-CIV
(defrule
	(unit-type-count-total missionary >= relative-4-units)
	(or	(and	(can-research ri-fervor)
			(up-compare-const gv-aofe-game == 1))
		(or	(can-research ri-theocracy)
			(or	(can-research ri-block-printing)
				(can-research ri-illumination))))
=>
	(research ri-theocracy)
	(research ri-block-printing)
	(research ri-illumination)
	(research ri-fervor)
)
#end-if

(defrule
	(players-unit-type-count focus-player monk < 14)
	(unit-type-count-total monk < 10)
=>
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(or	(and	(or	(unit-type-count-total monk > 37)
				(gold-amount > 3500))
			(civ-selected aztec))
		(and	(players-unit-type-count focus-player monk > 13)
			(and	(population >= pop-to-full-pop-attack)
				(up-research-status c: ri-heresy != research-available))))
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
=>
	(research ri-heresy)
	(research ri-faith)
)

(defrule
	(strategic-number sn-allow-resource-spending != -4)
	(goal gl-strategy eagle-rush)
	(unit-type-count-total monastery-class > 4)
	(or	(players-unit-type-count focus-player monk > 6)
		(players-unit-type-count focus-player missionary > 6))
	(research-available ri-atonement)
=>
	(up-modify-escrow gold c:max 325)
	(up-add-research-cost c: ri-atonement c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending != -4)
	(unit-type-count-total monastery-class > 4)
	(or	(or	(players-unit-type-count focus-player monk > 3)
			(players-unit-type-count focus-player missionary > 3))
		(and	(unit-type-count-total monk > 15)
			(and	(current-age == imperial-age)
				(and	(current-age-time > 300)
					(civ-selected aztec)))))
	(can-research-with-escrow ri-atonement)
=>
	(release-escrow gold)
	(research ri-atonement)
)

#load-if-defined AZTEC-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(current-age-time > 360)
	(unit-type-count-total monk > 7)
	(or	(unit-type-count-total monk > 17)
		(and	(gold-amount > 1500)
			(and	(up-research-status c: ri-faith >= research-pending)
				(strategic-number sn-allow-resource-spending > 5))))
	(can-research ri-herbal-medicine)
=>
	(research ri-herbal-medicine)
)
#end-if

(defrule
	(or	(nor	(unit-type-count-total scorpion-line > 3)
			(or	(and	(strategic-number sn-allow-resource-spending > 5)
					(food-amount > 2500))
				(goal gl-advanced-archery scorpions)))
		(not	(research-available ri-heavy-scorpion)))
	(nor	(research-available ri-capped-ram)
		(research-available ri-siege-ram))
=>
	(up-jump-rule 5)
)

(defrule
	(research-available ri-siege-ram)
	(food-amount < 2500)
	(or	(and	(goal gl-advanced-cavalry heavy-knights)
			(up-research-status c: ri-paladin < research-pending))
		(or	(and	(up-compare-goal gl-eagles != 0)
				(up-research-status c: ri-elite-eagle-warrior < research-pending))
			(and	(goal gl-advanced-infantry heavy-swordsmen)
				(up-research-status c: ri-champion < research-pending))))
=>
	(up-jump-rule 2)
)

(defrule
	(research-available ri-siege-ram)
	(food-amount < 2500)
	(up-compare-goal CASTLE != 0)
	(up-research-status c: my-unique-unit-upgrade < research-pending)
	(up-compare-const escrow-UU-resource1 == food)
=>
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(unit-type-count-total battering-ram-line >= relative-2-units)
	(or	(goal MILITARY 1)
		(current-age-time > 60))
	(or	(can-research ri-capped-ram)
		(or	(and	(or	(unit-type-count-total battering-ram-line >= relative-5-units)
					(strategic-number sn-allow-resource-spending > 4))
				(strategic-number sn-allow-resource-spending > 3))
			(food-amount > 2000)))
=>
	(research ri-capped-ram)
	(research ri-siege-ram)
)

(defrule
	(goal gl-advanced-archery scorpions)
	(or	(up-compare-goal threat-time > 10000)
		(population > 170))
	(strategic-number sn-allow-resource-spending > 0)
	(current-age-time > 30)
	(soldier-count > 30)
	(population > 160)
	(building-type-count siege-workshop > 0)
	(research-available ri-heavy-scorpion)
=>
	(up-modify-escrow food c:max 1000)
	(up-modify-escrow wood c:max 1100)
	(up-add-research-cost c: ri-heavy-scorpion c: -1)
)

(defrule
	(or	(and	(unit-type-count-total scorpion-line >= relative-6-units)
			(current-age-time > 30))
		(goal gl-advanced-archery scorpions))
	(can-research-with-escrow ri-heavy-scorpion)
=>
	(up-release-escrow)
	(research ri-heavy-scorpion)
)

#load-if-defined KOREAN-CIV
(defrule
	(not	(research-completed ri-onager))
	(up-compare-const gv-michi-style == 0)
	(up-compare-goal gl-enemy-infantry-count < 5)
	(up-compare-goal gl-enemy-archery-count < 5)
	(up-compare-goal gl-enemy-gunpowder-count < 5)
	(up-compare-goal gl-enemy-scorpion-count < 3)
	(up-compare-goal gl-enemy-onager-count < 2)
	(up-compare-goal gl-enemy-mameluke-count < 4)
=>
	(up-jump-rule 2)
)

(defrule
	(map-size tiny)
	(or	(goal CASTLE 4)
		(goal gl-advanced-infantry heavy-swordsmen))
=>
	(up-jump-rule 1)
)

(defrule
	(or	(soldier-count > 20)
		(population >= almost-full-pop))
	(or	(and	(strategic-number sn-allow-resource-spending > 2)
			(goal gl-strategy-class basic-class))
		(up-research-status c: my-unique-unit-upgrade >= research-pending))
	(or	(can-research ri-onager)
		(can-research ri-siege-onager))
=>
	(research ri-onager)
	(research ri-siege-onager)
)
#end-if

#load-if-defined AZTEC-CIV
(defrule
	(population >= 150)
	(nand	(up-compare-goal CASTLE != 0)
		(research-available my-unique-unit-upgrade))
	(soldier-count > 30)
	(up-research-status c: ri-plate-mail >= research-pending)
	(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
		(up-research-status c: ri-elite-eagle-warrior >= research-pending))
	(building-type-count castle > 0)
	(strategic-number sn-allow-resource-spending > 3)
	(research-available my-unique-research)
=>
	(up-modify-escrow food c:max 450)
	(up-modify-escrow gold c:max 750)
)

(defrule
	(or	(up-research-status c: ri-champion >= research-pending)
		(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
			(or	(up-research-status c: ri-elite-eagle-warrior >= research-pending)
				(or	(and	(strategic-number sn-allow-resource-spending > 3)
						(unit-type-count-total spearman-line >= relative-6-units))
					(goal gl-required-eagle-upgrades full-upgrades)))))
	(strategic-number sn-allow-resource-spending >= 0)
	(can-research-with-escrow my-unique-research)
=>
	(up-release-escrow)
	(research my-unique-research)
	(set-strategic-number sn-allow-resource-spending 6)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(research-completed ri-bodkin-arrow)
	(nand	(current-age == imperial-age)
		(research-available ri-bracer))
	(up-compare-goal gl-skirmisher-count-total >= relative-10-units)
	(can-research ri-atlatl)
=>
	(research ri-atlatl)
)
#end-if
#load-if-defined BRITON-CIV
(defrule
	(research-completed ri-bracer)
	(research-completed ri-chemistry)
	(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
		(strategic-number sn-allow-resource-spending > 5))
	(can-research ri-yeomen)
=>
	(research ri-yeomen)
)

(defrule
	(or	(and	(strategic-number sn-allow-resource-spending > 5)
			(soldier-count > 50))
		(goal gl-strategy fi-monk-rush))
	(unit-type-count-total trebuchet-set >= relative-3-units)
	(can-research ri-war-wolf)
=>
	(research ri-war-wolf)
)
#end-if
#load-if-defined BYZANTINE-CIV
(defrule
	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(or	(can-research-with-escrow my-unique-research)
		(or	(can-research ri-scale-barding)
			(or	(can-research ri-chain-barding)
				(can-research ri-plate-barding))))
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(nand	(current-age == imperial-age)
		(research-available ri-fast-fire-ship))
	(up-compare-goal gl-fire-ship-count-total > relative-6-units)
	(can-research ri-greek-fire)
=>
	(research ri-greek-fire)
)
#end-if
#load-if-defined CELTIC-CIV
(defrule
	(or	(strategic-number sn-allow-resource-spending > 4)
		(and	(goal CASTLE 0)
			(up-research-status c: ri-heavy-scorpion >= research-pending)))
	(or	(unit-type-count-total battering-ram-line >= relative-4-units)
		(or	(unit-type-count-total mangonel-line >= relative-4-units)
			(and	(unit-type-count-total scorpion-line >= relative-4-units)
				(up-research-status c: ri-heavy-scorpion >= research-pending))))
	(nand	(up-compare-goal gl-advanced-archery != scorpions)
		(military-population < 30))
=>
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(building-type-count castle > 1)
	(can-research ri-stronghold)
=>
	(research ri-stronghold)
)
#end-if
#load-if-defined CHINESE-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(unit-type-count-total chu-ko-nu-line > 10)
		(unit-type-count-total scorpion-line > 9))
	(research-available my-unique-research)
=>
	(up-modify-escrow wood c:max 600)
	(up-modify-escrow gold c:max 600)
	(up-add-research-cost c: my-unique-research c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(unit-type-count-total chu-ko-nu-line >= relative-5-units)
		(or	(and	(population >= almost-full-pop)
				(not	(goal CASTLE 0)))
			(unit-type-count-total scorpion >= relative-5-units)))
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow wood)
	(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined FRANKISH-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(unit-type-count-total throwing-axeman-line >= relative-5-units)
	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(gold-amount > 800)
	(or	(gold-amount > 2000)
		(up-compare-goal gl-trade-unit-count-total > 30))
	(research-completed ri-paladin)
	(can-research ri-chivalry)
=>
	(research ri-chivalry)
)
#end-if
#load-if-defined HUN-CIV
#load-if-defined VICTORY-STANDARD
(defrule
	(or	(enemy-captured-relics)
		(players-building-type-count any-enemy wonder > 0))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#end-if
#load-if-defined INCAN-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(or	(unit-type-count-total elite-eagle-warrior > 14)
		(or	(unit-type-count-total my-elite-UU > 10)
			(or	(unit-type-count-total slinger > 17)
				(and	(strategic-number sn-allow-resource-spending > 5)
					(goal gl-strategy default)))))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(or	(and	(strategic-number sn-allow-resource-spending > 3)
			(nand	(goal gl-eagles 0)
				(and	(goal CASTLE 0)
					(up-compare-goal gl-advanced-archery != slingers))))
		(goal gl-required-eagle-upgrades full-upgrades))
	(strategic-number sn-allow-resource-spending >= 0)
	(can-research my-unique-research)
=>
	(research my-unique-research)
	(set-strategic-number sn-allow-resource-spending 6)
)

(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(research-completed ri-bodkin-arrow)
	(nand	(current-age == imperial-age)
		(research-available ri-bracer))
	(or	(up-compare-goal gl-skirmisher-count-total > relative-10-units)
		(or	(unit-type-count-total slinger > relative-6-units)
			(strategic-number sn-allow-resource-spending > 3)))
	(can-research ri-andean-sling)
=>
	(research ri-andean-sling)
)
#end-if
#load-if-defined INDIAN-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(or	(unit-type-count-total hand-cannoneer > 12)
		(strategic-number sn-allow-resource-spending > 5))
	(or	(unit-type-count-total hand-cannoneer >= relative-6-units)
		(and	(gold-amount > 1000)
			(goal gl-advanced-archery heavy-cannoneers)))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 3)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(or	(up-compare-goal gl-my-villager-count-total > 100)
		(population > almost-full-pop))
	(can-research ri-sultans)
=>
	(research ri-sultans)
)
#end-if
#load-if-defined ITALIAN-CIV
(defrule
	(soldier-count > 40)
	(strategic-number sn-allow-resource-spending > 2)
	(players-building-type-count any-ally market > 0)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(research-completed ri-leather-archer-armor)
	(or	(and	(up-compare-goal gl-my-UU-count-total > 15)
			(or	(strategic-number sn-allow-resource-spending > 2)
				(up-compare-goal gl-current-age >= gv-castle-up)))
		(and	(population >= pop-to-full-pop-attack)
			(up-compare-goal gl-my-UU-count-total >= relative-6-units)))
	(not	(research-available my-unique-unit-upgrade))
	(can-research ri-pavise)
=>
	(research ri-pavise)
)
#end-if
#load-if-defined JAPANESE-CIV
(defrule
	(research-completed my-unique-unit-upgrade)
	(gold-amount > 900)
	(wood-amount > 1500)
	(strategic-number sn-allow-resource-spending > 5)
	(unit-type-count-total trebuchet-set > 0)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined KOREAN-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(unit-type-count-total mangonel-line >= relative-2-units)
	(or	(soldier-count > 30)
		(population >= almost-full-pop))
	(up-research-status c: ri-siege-onager >= research-pending)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(or	(unit-type-count-total turtle-ship-line > 9)
		(research-completed ri-elite-turtle-ship))
	(unit-type-count-total turtle-ship-line >= relative-3-units)
	(can-research ri-panokseon)
=>
	(research ri-panokseon)
)
#end-if
#load-if-defined MAGYAR-CIV
(defrule
	(unit-type-count-total cavalry-archer-line > 0)
	(research-completed ri-heavy-cavalry-archer)
	(strategic-number sn-allow-resource-spending > 5)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(or	(strategic-number sn-allow-resource-spending > 1)
		(up-compare-goal gl-my-villager-count-total > 70))
	(strategic-number sn-allow-resource-spending > 0)
	(not	(goal CASTLE 0))
	(can-research ri-mercenaries)
=>
	(research ri-mercenaries)
)
#end-if
#load-if-defined MAYAN-CIV
(defrule
	(population >= 150)
	(goal gl-eagles heavy-eagles)
	(up-compare-goal gl-eagle-warrior-count-total > 20)
	(building-type-count castle > 0)
	(strategic-number sn-allow-resource-spending > 2)
	(research-available my-unique-research)
=>
	(up-modify-escrow food c:max 750)
	(up-modify-escrow gold c:max 450)
)

(defrule
	(or	(and	(or	(and	(up-compare-goal gl-eagle-warrior-count-total >= relative-4-units)
					(strategic-number sn-allow-resource-spending > 2))
				(and	(goal gl-eagles heavy-eagles)
					(goal CASTLE 0)))
			(up-research-status c: ri-elite-eagle-warrior >= research-pending))
		(goal gl-required-eagle-upgrades full-upgrades))
	(strategic-number sn-allow-resource-spending >= 0)
	(can-research-with-escrow my-unique-research)
=>
	(up-release-escrow)
	(research my-unique-research)
	(set-strategic-number sn-allow-resource-spending 6)
)
#end-if
#load-if-defined MONGOL-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 3)
	(or	(goal MILITARY 1)
		(strategic-number sn-allow-resource-spending > 5))
	(or	(unit-type-count-total battering-ram-line >= relative-4-units)
		(or	(unit-type-count-total mangonel-line >= relative-5-units)
			(and	(unit-type-count-total scorpion-line >= relative-6-units)
				(not	(research-available ri-heavy-scorpion)))))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(game-time > 2400)
	(food-amount > 1500)
	(strategic-number sn-allow-resource-spending > 5)
	(population >= almost-full-pop)
	(can-research ri-nomads)
=>
	(research ri-nomads)
)
#end-if
#load-if-defined PERSIAN-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(unit-type-count-total war-elephant-line >= relative-4-units)
		(research-completed my-unique-unit-upgrade))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(or	(not	(goal MILITARY 1))
		(strategic-number sn-allow-resource-spending > 5))
	(strategic-number sn-allow-resource-spending > 3)
	(game-time > 2700)
	(building-type-count-total castle > 3)
	(can-research ri-boiling-oil)
=>
	(research ri-boiling-oil)
)
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(soldier-count > 35)
	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(research-available my-unique-research)
=>
	(up-modify-escrow food c:max 750)
	(up-modify-escrow gold c:max 800)
	(up-add-research-cost c: my-unique-research c: -1)
)

(defrule
	(or	(and	(unit-type-count-total camel-line >= relative-3-units)
			(and	(research-completed ri-heavy-camel)
				(strategic-number sn-allow-resource-spending > 5)))
		(up-research-status c: my-unique-unit-upgrade >= research-pending))
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow food)
	(release-escrow gold)
	(research my-unique-research)
)

(defrule
	(or	(unit-type-count-total monk-set > relative-6-units)
		(goal gl-strategy fi-monk-rush))
	(can-research ri-madrasah)
=>
	(research ri-madrasah)
)
#end-if
#load-if-defined SLAVIC-CIV
(defrule
	(or	(unit-type-count-total spearman-line >= relative-4-units)
		(unit-type-count-total militiaman-line >= relative-4-units))
	(strategic-number sn-allow-resource-spending > 5)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(or	(unit-type-count-total monk-set > relative-6-units)
		(goal gl-strategy fi-monk-rush))
	(can-research ri-orthodoxy)
=>
	(research ri-orthodoxy)
)
#end-if
#load-if-defined SPANISH-CIV
(defrule
	(current-age-time > 60)
	(strategic-number sn-allow-resource-spending > 3)
	(or	(soldier-count > 50)
		(or	(town-under-attack)
			(population > almost-full-pop)))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(or	(unit-type-count-total monastery-class > relative-6-units)
		(goal gl-strategy fi-monk-rush))
	(can-research ri-inquisition)
=>
	(research ri-inquisition)
)
#end-if
#load-if-defined TEUTONIC-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(food-amount > 1000)
	(or	(research-completed ri-paladin)
		(and	(goal gl-advanced-cavalry 0)
			(unit-type-count-total knight-line < 5)))
	(building-type-count-total castle > 3)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(or	(research-completed ri-paladin)
		(or	(and	(goal gl-advanced-cavalry 0)
				(unit-type-count-total knight-line < 5))
			(up-compare-const gv-maximum-age == castle-age)))
	(can-research ri-ironclad)
=>
	(research ri-ironclad)
)
#end-if
#load-if-defined TURKISH-CIV
(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(building-type-count town-center >= preferred-TC-number)
	(or	(and	(strategic-number sn-allow-resource-spending > 5)
			(or	(building-type-count-total bombard-tower > 3)
				(or	(unit-type-count-total bombard-cannon >= relative-2-units)
					(or	(unit-type-count-total cannon-galleon-line >= relative-2-units)
						(gold-amount > 3000)))))
		(up-compare-const gv-michi-style == 1))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined VIKING-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(or	(up-compare-goal CASTLE != 0)
		(or	(goal gl-advanced-infantry 0)
			(unit-type-count-total spearman-line > 9)))
	(or	(up-compare-goal gl-enemy-cavalry-count > 6)
		(or	(players-unit-type-count focus-player cavalry-archer-line > 6)
			(or	(up-compare-goal gl-enemy-camelry-count > 6)
				(food-amount > 1400))))
	(research-completed my-unique-unit-upgrade)
	(can-research ri-chieftains)
=>
	(research ri-chieftains)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(unit-type-count-total berserk-line > 0)
	(research-completed my-unique-unit-upgrade)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined BERBERS-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(or	(strategic-number sn-allow-resource-spending > 5)
		(and	(up-compare-goal gl-current-age >= gv-castle-up)
			(civilian-population > 100)))
	(goal gl-strategy default)
	(can-research ri-kasbah)
=>
	(research ri-kasbah)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(or	(up-compare-goal gl-my-UU-count-total > 10)
		(unit-type-count-total camel-line > 10))
	(can-research ri-maghrabi-camels)
=>
	(research ri-maghrabi-camels)
)
#end-if
#load-if-defined BURMESE-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(up-compare-goal gl-battle-elephant-count-total > 4)
	(or	(up-compare-goal gl-battle-elephant-count-total > 10)
		(strategic-number sn-allow-resource-spending > 1))
	(can-research ri-howdah)
=>
	(research ri-howdah)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(up-compare-goal gl-trade-unit-count-total > 25); Luxury tech
	(up-compare-goal gl-my-UU-count-total > 10)
	(can-research ri-manipur-cavalry)
=>
	(research ri-manipur-cavalry)
)
#end-if
#load-if-defined ETHIOPIAN-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(goal CASTLE 2)
	(research-completed my-unique-unit-upgrade)
	(up-compare-goal gl-trade-unit-count-total > 20)
	(can-research ri-royal-heirs)
=>
	(research ri-royal-heirs)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(or	(research-completed ri-siege-ram)
		(research-completed ri-siege-onager))
	(or	(up-compare-goal gl-trade-unit-count-total > 20)
		(up-compare-const gv-michi-style == 1))
	(can-research ri-torsion-engines)
=>
	(research ri-torsion-engines)
)
#end-if
#load-if-defined KHMER-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(up-compare-goal gl-battle-elephant-count-total > 7)
		(research-completed ri-elite-battle-elephant))
	(can-research ri-tusk-swords)
=>
	(research ri-tusk-swords)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(up-compare-goal gl-my-UU-count-total > 10)
		(research-completed ri-heavy-scorpion))
	(can-research ri-double-crossbow)
=>
	(research ri-double-crossbow)
)
#end-if
#load-if-defined MALAY-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 3)
	(or	(strategic-number sn-allow-resource-spending > 5)
		(building-type-count dock > 5))
	(building-type-count dock > 0)
	(can-research ri-thalassocracy)
=>
	(research ri-thalassocracy)
)

(defrule
	(strategic-number sn-allow-resource-spending > 3)
	(civilian-population > 80)
	(up-compare-goal gl-enemy-archer-count < 30)
	(up-compare-goal gl-enemy-gunpowder-count < 15)
	(or	(and	(strategic-number sn-allow-resource-spending > 5)
			(food-amount > 2000))
		(game-time > 3000))
	(not	(player-in-game any-ally))
	(can-research ri-forced-levy)
=>
	(research ri-forced-levy)
)
#end-if
#load-if-defined MALIAN-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 3)
	(game-time > 3000)
	(food-amount > 1300)
	(building-type-count town-center > 2)
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(can-research ri-tigui)
=>
	(research ri-tigui)
)

(defrule
	(not	(research-available ri-plate-barding))
	(strategic-number sn-allow-resource-spending > 0)
	(or	(up-compare-goal gl-advanced-cavalry != 0)
		(or	(unit-type-count-total camel-line > 7)
			(unit-type-count-total scout-cavalry-line > 7)))
	(can-research ri-farimba)
=>
	(research ri-farimba)
)
#end-if

#load-if-defined PORTUGUESE-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 3)
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(can-research ri-carrack)
=>
	(research ri-carrack)
)

(defrule
	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(up-compare-goal gl-my-UU-count-total > 10)
	(can-research ri-siege-engineers)
=>
	(research ri-siege-engineers)
)

(defrule
	(or	(goal gl-strategy default)
		(or	(up-compare-goal gl-my-UU-count-total > 10)
			(or	(unit-type-count-total hand-cannoneer > 10)
				(unit-type-count-total bombard-cannon > 1))))
	(can-research ri-arquebus)
=>
	(research ri-arquebus)
)
#end-if

#load-if-defined VIETNAMESE-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 3)
	(goal gl-advanced-cavalry heavy-elephants)
	(research-completed ri-elite-battle-elephant)
	(up-research-status c: ri-plate-barding >= research-pending)
	(can-research ri-chatras)
=>
	(research ri-chatras)
)

(defrule
	(strategic-number sn-allow-resource-spending > 3)
	(or	(and	(food-amount > 1100)
			(commodity-selling-price food < 40))
		(player-in-game any-ally))
	(can-research ri-paper-money)
=>
	(research ri-paper-money)
)
#end-if

;(defrule
;	(not	(taunt-detected 1 53))
;	(or	(strategic-number sn-focus-player-number < 0)
;		(or	(not	(player-valid focus-player))
;			(or	(strategic-number sn-focus-player-number == my-player-number)
;				(stance-toward focus-player ally))))
;=>
;	(up-chat-data-to-all "!!! FOCUS PLAYER (%d) !!! (52)" s: sn-focus-player-number)
;)


(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(or	(and	(current-age-time > 30)
			(or	(goal gl-strategy-class basic-class)
				(or	(goal gl-eagles heavy-eagles)
					(food-amount > 800))))
		(or	(goal gl-strategy knight-boom)
			(up-compare-goal CASTLE != 0)))
	(nand	(up-compare-goal gl-eagles != 0)
		(research-available my-unique-research))
=>
	(research ri-conscription)
)

(defrule
	(current-age-time > 30)
	(strategic-number sn-allow-resource-spending > 3)
	(or	(unit-type-count-total battering-ram-line >= relative-4-units)
		(or	(unit-type-count-total mangonel-line >= relative-4-units)
			(or	(and	(unit-type-count-total scorpion-line > relative-4-units)
					(not	(research-available ri-heavy-scorpion)))
				(or	(unit-type-count-total trebuchet-set >= relative-3-units)
					(food-amount > 2500)))))
	(can-research ri-siege-engineers)
=>
	(research ri-siege-engineers)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(population > almost-full-pop)
	(civilian-population > 115)
	(or	(and	(unit-type-count-total mangonel-line >= relative-4-units)
			(up-research-status c: ri-onager >= research-pending))
		(or	(and	(goal gl-advanced-archery scorpions)
				(up-research-status c: ri-heavy-scorpion >= research-pending))
			(unit-type-count-total bombard-cannon >= relative-4-units)))
	(research-available ri-siege-engineers)
=>
	(up-modify-escrow food c:max 500)
	(up-modify-escrow wood c:max 600)
	(up-add-research-cost c: ri-siege-engineers c: -1)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(or	(and	(unit-type-count-total mangonel-line >= relative-3-units)
			(up-research-status c: ri-onager >= research-pending))
		(or	(and	(goal gl-advanced-archery scorpions)
				(up-research-status c: ri-heavy-scorpion >= research-pending))
			(unit-type-count-total bombard-cannon >= relative-4-units)))
	(can-research-with-escrow ri-siege-engineers)
=>
	(release-escrow food)
	(release-escrow wood)
	(research ri-siege-engineers)
)

#load-if-defined GOTHIC-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(or	(and	(strategic-number sn-allow-resource-spending > 5)
			(research-completed my-unique-unit-upgrade))
		(building-type-count-total castle < 2))
	(not	(goal CASTLE 0))
	(or	(population <= almost-full-pop)
		(up-compare-goal gl-current-age >= gv-castle-up))
	(can-research ri-anarchy)
=>
	(research ri-anarchy)
)

(defrule
	(or	(goal gl-strategy-class basic-class)
		(goal gl-strategy gothic-boom))
	(strategic-number sn-allow-resource-spending > 5)
	(can-research ri-perfusion)
=>
	(research ri-perfusion)
)
#end-if

#end-if; DM

; =============== HIGH PRIORITY UNITS

#load-if-defined DEFEND-WONDER
(defrule
	(goal gl-strategy-requirement default)
	(game-time > 240)
	(building-type-count town-center > 1)
	(building-type-count castle > 0)
	(soldier-count > 20)
	(or	(players-military-population focus-player < 10)
		(soldier-count > 30))
	(players-building-type-count any-enemy wonder > 0)
	(unit-type-count-total trebuchet-set < 2)
	(unit-type-count-total battering-ram-line < 2)
	(unit-available trebuchet)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 200)
)

(defrule
	(goal gl-strategy-requirement default)
	(game-time > 240)
	(building-type-count town-center > 1)
	(soldier-count > 20)
	(or	(players-military-population focus-player < 10)
		(soldier-count > 30))
	(players-building-type-count any-enemy wonder > 0)
	(unit-type-count-total trebuchet-set < 2)
	(unit-type-count-total battering-ram-line < 2)
	(can-train-with-escrow trebuchet)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train trebuchet)
)
#end-if

(defrule
	(goal gl-strategy default)
	(building-type-count town-center > 0)
	(building-type-count castle > 0)
	(players-building-type-count focus-player castle > 0)
	(up-compare-goal gl-enemy-castle-distance < 43)
	(soldier-count > 6)
	(or	(up-projectile-detected projectile-castle < 5000)
		(soldier-count > 17))
	(unit-type-count-total trebuchet-set < 1)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 200)
)

(defrule
	(goal gl-strategy default)
	(building-type-count town-center > 0)
	(building-type-count castle > 0)
	(players-building-type-count focus-player castle > 0)
	(up-compare-goal gl-enemy-castle-distance < 43)
	(soldier-count > 6)
	(unit-type-count-total trebuchet-set < 1)
	(can-train-with-escrow trebuchet)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train trebuchet)
)

(defrule
	(goal gl-strategy default)
	(goal SLING 3)
	(strategic-number sn-allow-resource-spending > 2)
	(building-type-count town-center > 1)
	(building-type-count castle > 0)
	(players-building-type-count focus-player castle > 0)
	(soldier-count > 20)
	(or	(unit-type-count-total trebuchet-set < 1)
		(up-compare-goal gl-soldier-percentage >= 160))
	(unit-type-count-total trebuchet-set < 2)
	(can-train-with-escrow trebuchet)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train trebuchet)
)

(defrule
	(goal gl-strategy-requirement default)
	(strategic-number sn-allow-resource-spending > 3)
	(building-type-count town-center > 1)
	(building-type-count castle > 0)
	(or	(players-military-population focus-player < 15)
		(up-compare-goal gl-soldier-percentage >= 180))
	(players-building-type-count focus-player castle > 1)
	(soldier-count > 40)
	(unit-type-count-total trebuchet-set < 2)
	(can-train-with-escrow trebuchet)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train trebuchet)
	(up-jump-rule 1)
)

(defrule
	(goal gl-strategy-requirement default)
	(strategic-number sn-allow-resource-spending > 3)
	(building-type-count town-center > 1)
	(building-type-count castle > 0)
	(or	(players-military-population focus-player < 15)
		(up-compare-goal gl-soldier-percentage >= 180))
	(players-building-type-count focus-player castle > 1)
	(soldier-count > 40)
	(unit-type-count-total trebuchet-set < 2)
	(unit-available trebuchet)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 200)
	(up-jump-rule 4)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(goal gl-strategy-requirement default)
	(strategic-number sn-allow-resource-spending > 3)
	(building-type-count town-center > 2)
	(building-type-count siege-workshop > 0)
	(or	(up-compare-goal gl-population > 175)
		(up-compare-goal gl-enemy-units-in-town < 5))
	(population > 160)
	(game-time > 3000)
	(goal gl-trade-unit-count-total 0)
	(unit-type-count-total battering-ram-line < 7)
	(soldier-count > 50)
	(unit-available battering-ram-line)
=>
	(up-modify-escrow wood c:max 160)
	(up-modify-escrow gold c:max 75)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(goal gl-strategy-requirement default)
	(strategic-number sn-allow-resource-spending > 3)
	(building-type-count town-center > 2)
	(building-type-count siege-workshop > 0)
	(population > 160)
	(game-time > 3000)
	(goal gl-trade-unit-count-total 0)
	(unit-type-count-total battering-ram-line < 7)
	(soldier-count > 50)
	(can-train-with-escrow battering-ram-line)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train battering-ram-line)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(goal gl-strategy-requirement default)
	(strategic-number sn-allow-resource-spending > 3)
	(building-type-count town-center > 1)
	(building-type-count siege-workshop > 0)
	(or	(goal MILITARY 1)
		(and	(population > 160)
			(up-compare-goal gl-enemy-units-in-town < 5)))
	(unit-type-count-total battering-ram-line < 5)
	(soldier-count > 34)
	(unit-available battering-ram-line)
=>
	(up-modify-escrow wood c:max 160)
	(up-modify-escrow gold c:max 75)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(goal gl-strategy-requirement default)
	(strategic-number sn-allow-resource-spending > 3)
	(building-type-count town-center > 1)
	(or	(goal MILITARY 1)
		(and	(population > 160)
			(up-compare-goal gl-enemy-units-in-town < 5)))
	(unit-type-count-total battering-ram-line < 5)
	(soldier-count > 34)
	(can-train-with-escrow battering-ram-line)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train battering-ram-line)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(strategic-number sn-allow-resource-spending >= 0)
	(goal POSITION FLANK)
	(goal gl-panic-xbow-counter 1)
	(players-military-population focus-player < 15)
	(soldier-count > 26)
	(goal TSA 1)
	(unit-type-count-total battering-ram-line < 3)
	(can-train-with-escrow battering-ram-line)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train battering-ram-line)
	(set-goal gl-panic-xbow-counter 0)
)

(defrule
	(or	(and	(goal gl-strategy ranged-rush-strategy)
			(and	(soldier-count g:> gl-toughest-fought-enemy-military)
				(soldier-count > 20)))
		(goal gl-strategy knight-rush))
	(building-type-count-total siege-workshop > 0)
	(unit-type-count-total battering-ram-line < 3)
	(players-building-type-count target-player castle > 0)
	(players-current-age target-player <= castle-age)
	(soldier-count > 5)
	(unit-available battering-ram-line)
=>
	(up-modify-escrow wood c:max 160)
	(up-modify-escrow gold c:max 75)
)

(defrule
	(or	(and	(goal gl-strategy ranged-rush-strategy)
			(soldier-count > 20))
		(goal gl-strategy knight-rush))
	(unit-type-count-total battering-ram-line < 3)
	(players-building-type-count target-player castle > 0)
	(players-current-age target-player <= castle-age)
	(can-train-with-escrow battering-ram-line)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train battering-ram-line)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)
=>
	(up-jump-rule 18)
)

(defrule
	(population > 160)
	(goal gl-strategy default)
	(civ-selected turkish)
	(strategic-number sn-allow-resource-spending > 5)
	(up-compare-goal gl-trade-unit-count-total > 35)
	(up-compare-goal gl-enemy-onager-count > 1)
	(unit-type-count-total bombard-cannon < 4)
	(up-compare-goal gl-gold-income-per-minute > 600)
	(or	(unit-type-count-total bombard-cannon < 2)
		(and	(up-compare-goal gl-enemy-onager-count > 4)
			(population > 180)))
	(unit-available bombard-cannon)
=>
	(up-modify-escrow wood c:max 225)
	(up-modify-escrow gold c:max 225)
)

(defrule
	(population > 160)
	(goal gl-strategy default)
	(or	(civ-selected turkish)
		(civ-selected portuguese))
	(strategic-number sn-allow-resource-spending > 5)
	(up-compare-goal gl-trade-unit-count-total > 35)
	(up-compare-goal gl-enemy-onager-count > 1)
	(unit-type-count-total bombard-cannon < 4)
	(up-compare-goal gl-gold-income-per-minute > 600)
	(unit-available bombard-cannon)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train bombard-cannon)
)

(defrule
	(population > 160)
	(goal gl-advanced-cavalry heavy-knights)
	(strategic-number sn-allow-resource-spending > 5)
	(up-compare-goal gl-trade-unit-count-total > 35)
	(up-compare-goal gl-enemy-mameluke-count > 14)
	(unit-type-count-total bombard-cannon < 4)
	(or	(unit-type-count-total bombard-cannon < 2)
		(and	(up-compare-goal gl-enemy-onager-count > 1)
			(and	(up-compare-goal gl-gold-income-per-minute > 600)
				(population > 180))))
	(unit-available bombard-cannon)
=>
	(up-modify-escrow wood c:max 225)
	(up-modify-escrow gold c:max 225)
)

(defrule
	(population > 160)
	(or	(goal gl-advanced-cavalry heavy-knights)
		(civ-selected persian))
	(strategic-number sn-allow-resource-spending > 5)
	(up-compare-goal gl-trade-unit-count-total > 35)
	(up-compare-goal gl-enemy-mameluke-count > 14)
	(or	(unit-type-count-total bombard-cannon < 4)
		(up-compare-goal gl-enemy-mameluke-count > 28))
	(unit-type-count-total bombard-cannon < 7)
	(can-train-with-escrow bombard-cannon)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train bombard-cannon)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
=>
	(up-jump-rule 6)
)

(defrule
	(or	(strategic-number sn-minimum-water-body-size-for-dock != mixed-map-style)
		(building-type-count dock == 0))
=>
	(up-jump-rule 2)
)

(defrule
	(unit-type-count villager-wood > 29)
	(strategic-number sn-allow-resource-spending >= 0)
	(goal gl-heavy-water-map YES)
	(warboat-count > 4)
	(unit-available cannon-galleon-line)
	(up-compare-goal gl-target-navy-count < 5)
	(unit-type-count-total cannon-galleon-line < 4)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 150)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(goal gl-heavy-water-map YES)
	(warboat-count >= relative-5-units)
	(up-compare-goal gl-target-navy-count < 5)
	(unit-type-count-total cannon-galleon-line < 4)
	(can-train-with-escrow cannon-galleon-line)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train cannon-galleon-line)
)

(defrule
	(or	(and	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
			(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style))
		(building-type-count dock == 0))
=>
	(up-jump-rule 2)
)

(defrule
	(game-time > 2400)
	(strategic-number sn-allow-resource-spending >= 0)
	(warboat-count > 40)
	(population > 150)
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 10)
	(unit-type-count villager-wood > 19)
	(up-compare-goal MILITARY >= 1)
	(unit-available cannon-galleon-line)
	(unit-type-count-total cannon-galleon-line < 4)
	(population <= pop-to-full-pop-attack)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 150)
)

(defrule
	(game-time > 2400)
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(warboat-count > 40)
		(up-compare-goal gl-population > almost-full-pop))
	(up-compare-goal MILITARY >= 1)
	(unit-type-count-total cannon-galleon-line < 4)
	(can-train-with-escrow cannon-galleon-line)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train cannon-galleon-line)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(up-compare-goal gl-strategy != monk-mango-push)
	(up-compare-goal gl-strategy != trush-push)
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(goal MILITARY 1)
		(players-building-type-count any-enemy bombard-tower > 0))
	(unit-type-count-total battering-ram-line < 6)
	(or	(game-time > 3000)
		(player-human target-player))
	(soldier-count > 40)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)

(defrule
	(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
		(or	(building-type-count castle == 0)
			(or	(not	(unit-available trebuchet))
				(or	(soldier-count < 20)
					(or	(and	(unit-type-count villager-gold <= 14)
							(unit-type-count-total trade-cart <= 17))
						(up-timer-status 15 == timer-running))))))
=>
	(up-jump-rule 6)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(up-compare-goal gl-target-player-distance < 43)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-full-reset-search)
	(up-find-remote c: bombard-tower c: 1)
	(up-find-remote c: castle c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(game-time > 2100)
	(or	(up-projectile-detected projectile-castle < 5000)
		(or	(up-projectile-detected projectile-watch-tower < 5000)	
			(up-projectile-detected projectile-bombard-tower < 5000)))
	(unit-type-count-total trebuchet-set < 1)
	(soldier-count > 20)
	(or	(soldier-count > 43)
		(up-compare-goal gl-enemy-castle-distance < 43))
	(can-train-with-escrow trebuchet)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train trebuchet)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(up-compare-goal gl-enemy-castle-distance < 43)
		(up-compare-goal gl-enemy-tower-distance < 43))
	(up-compare-goal gl-remote-total > 0)
	(unit-type-count villager-gold > 14)
	(or	(unit-type-count-total trebuchet-set < 1)
		(or	(warboat-count > 20)
			(up-compare-goal gl-target-navy-count < 10)))
	(unit-type-count-total trebuchet-set < 3)
	(soldier-count > 20)
	(population > 120)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 200)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(up-compare-goal gl-enemy-castle-distance < 43)
		(up-compare-goal gl-enemy-tower-distance < 43))
	(up-compare-goal gl-remote-total > 0)
	(or	(escrow-amount wood == 200)
		(or	(unit-type-count-total trade-cart > 17)
			(unit-type-count villager-gold > 10)))
	(unit-type-count-total trebuchet-set < 3)
	(population > 120)
	(can-train-with-escrow trebuchet)
=>
	(release-escrow wood)
	(release-escrow gold)
	(train trebuchet)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(players-building-type-count target-player castle > 0)
	(or	(unit-type-count villager-gold > 14)
		(unit-type-count-total trade-cart > 23))
	(or	(unit-type-count-total trebuchet-set < 2)
		(and	(players-building-type-count target-player stone-wall-line > 30)
			(up-compare-goal gl-population > 180)))
	(unit-type-count-total trebuchet-set < 2)
	(population > 165)
	(soldier-count > 40)
=>
	(up-modify-escrow wood c:max 200)
	(up-modify-escrow gold c:max 200)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(or	(players-building-type-count target-player castle > 0)
		(players-building-type-count target-player bombard-tower > 0))
	(or	(unit-type-count villager-gold > 14)
		(unit-type-count-total trade-cart > 23))
	(or	(unit-type-count-total trebuchet-set < 2)
		(players-building-type-count target-player stone-wall-line > 30))
	(unit-type-count-total trebuchet-set < 3)
	(soldier-count > 40)
	(can-train-with-escrow trebuchet)
=>
	(release-escrow wood)
	(release-escrow gold)
	(train trebuchet)
)

#load-if-not-defined DEATH-MATCH
(defrule
	(game-time > 5)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(up-compare-goal gl-strategy != uu-block-strategy)
	(up-compare-goal CASTLE != 0)
	(up-compare-goal CASTLE != 5)
	(up-compare-goal gl-cutter != IN-PROGRESS)
	(strategic-number sn-allow-resource-spending > 5)
	(research-completed my-unique-unit-upgrade)
	(up-compare-goal gl-my-UU-count-total < 25)
	(can-train my-UU)
=>
	(train my-UU)
)

; ======== RESEARCHES - ECONOMY - LOW PRIORITY

#load-if-not-defined WONDER-RACE
(defrule
	(nor	(research-available ri-gold-shaft-mining)
		(research-available ri-bow-saw))
	(or	(nor	(research-available ri-masonry)
			(or	(research-available ri-stonecutting)
				(research-available ri-architecture)))
		(game-time < defensive-technology-time))
	(nor	(research-available ri-two-man-saw)
		(research-available ri-crop-rotation))
	(not	(research-available ri-guilds))
=>
	(up-jump-rule 10)
)

(defrule
	(current-age-time > 10)
	(civilian-population > 50)
	(building-type-count town-center > 0)
	(research-available ri-bow-saw)
=>
	(up-modify-escrow food c:max 150)
	(up-modify-escrow wood c:max 100)
)

(defrule
	(or	(and	(current-age-time > 10)
			(civilian-population > 45))
		(and	(goal gl-strategy ranged-rush-strategy)
			(food-amount > 400)))
	(building-type-count town-center > 0)
	(can-research-with-escrow ri-bow-saw)
=>
	(release-escrow food)
	(release-escrow wood)
	(research ri-bow-saw)
)

(defrule
	(up-compare-goal gl-strategy != eagle-rush)
	(nand	(goal gl-strategy saracen-heavy-krush)
		(game-time < 2200))
	(nand	(unit-type-count-total galley-line > 6)
		(research-available ri-war-galley))
	(or	(food-amount >= 200)
		(current-age-time > 120))
	(nand	(goal gl-strategy ranged-rush-strategy)
		(up-research-status c: ri-bodkin-arrow < research-pending))
	(building-type-count town-center > 0)
=>
	(research ri-bow-saw)
)

(defrule
	(food-amount < 1200)
	(gold-amount > high-castle-gold)
=>
	(up-jump-rule 2)
)

(defrule
	(or	(and	(civilian-population > 90)
			(or	(up-compare-goal gl-current-age >= gv-castle-up)
				(or	(food-amount < 600)
					(food-amount >= 1200))))
		(and	(goal gl-strategy-class basic-class)
			(and	(food-amount >= 450)
				(and	(gold-amount < 150)
					(building-type-count town-center > 2)))))
=>
	(research ri-gold-shaft-mining)
)

(defrule
	(or	(and	(soldier-count > 30)
			(building-type-count town-center >= 3))
		(or	(and	(up-compare-goal gl-current-age >= gv-castle-up)
				(or	(up-compare-goal gl-strategy != turkish-fast-imp)
					(building-type-count-total archery-range > 1)))
			(building-type-count-total town-center >= michi-TCs)))
	(can-research ri-gold-shaft-mining)
=>
	(research ri-gold-shaft-mining)
)

(defrule
	(strategic-number sn-allow-resource-spending > 3)
	(building-type-count-total town-center > 3)
	(soldier-count > 40)
	(dropsite-min-distance stone < 4) 
	(or	(strategic-number sn-stone-gatherer-percentage > 8)
		(and	(strategic-number sn-stone-gatherer-percentage > 3)
			(and	(strategic-number sn-allow-resource-spending > 5)
				(or	(cc-players-unit-type-count 0 stone-mine > huge-stone-mine-amount)
					(food-amount > 1600)))))
	(can-research ri-stone-shaft-mining)
=>
	(research ri-stone-shaft-mining)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(up-compare-goal gl-eagles != extra-eagles); Get EEW first
	(nand	(up-compare-goal gl-strategy-type >= FI)
		(current-age-time < 360))
	(or	(and	(population > 55)
			(military-population > 30))
		(population > almost-full-pop))
	(or	(current-age-time > 10)
		(up-compare-const gv-michi-style == 1))
	(can-research-with-escrow ri-guilds)
=>
	(up-release-escrow)
	(research ri-guilds)
)

(defrule
	(or	(current-age-time > 180)
		(strategic-number sn-allow-resource-spending > 3))
	(nand	(goal gl-strategy-type FI)
		(game-time <= 2200))
	(or	(and	(can-research ri-crop-rotation)
			(not	(research-available ri-two-man-saw)))
		(can-research ri-two-man-saw))
=>
	(research ri-two-man-saw)
	(research ri-crop-rotation)
)


(defrule
	(game-time > defensive-technology-time); 3000 normally, 2300 in michi
	(strategic-number sn-allow-resource-spending > 3)
	(military-population > 50)
	(or	(can-research ri-masonry)
		(or	(can-research ri-architecture)
			(can-research ri-stonecutting)))
=>
	(research ri-masonry)
	(research ri-stonecutting)
	(research ri-architecture)
)

(defrule
	(or	(and	(building-type-count-total watch-tower > 3)
			(players-unit-type-count focus-player monk > 6))
		(and	(or	(building-type-count-total castle > 2)
				(building-type-count-total bombard-tower > 5))
			(and	(strategic-number sn-allow-resource-spending > 3)
				(game-time > defensive-technology-time))))
	(can-research ri-murder-holes)
=>
	(research ri-murder-holes)
)

(defrule
	(or	(building-type-count-total victory-building > 0)
		(or	(players-building-type-count any-ally victory-building > 0)
			(and	(goal gl-strategy sling)
				(building-type-count-total watch-tower > 4))))
	(building-type-count-total watch-tower > 0)
	(or	(can-research ri-guard-tower)
		(can-research ri-keep))
=>
	(research ri-guard-tower)
	(research ri-keep)
)

(defrule
	(game-time > defensive-technology-time)
	(strategic-number sn-allow-resource-spending > 3)
	(or	(military-population > 50)
		(population > almost-full-pop))
	(building-type-count-total castle > 1)
	(can-research ri-hoardings)
	(or	(food-amount > 2000)
		(and	(strategic-number sn-allow-resource-spending > 5)
			(building-type-count-total castle > 2)))
=>
	(research ri-hoardings)
)

#load-if-defined UP-MICHI-STYLE
(defrule
	(building-type-count-total town-center > 5)
	(food-amount > 350)
	(or	(up-research-status c: ri-hand-cart >= research-pending)
		(food-amount > 450))
	(can-research ri-stone-shaft-mining)
=>
	(research ri-stone-shaft-mining)
)
#end-if
#end-if

#load-if-not-defined DEATH-MATCH
(defrule
	(game-time <= 51)
	(goal SLING 0)
	(up-compare-goal gl-strategy != turtle-rush)
	(or	(up-compare-goal gl-strategy != grush)
		(goal POSITION POCKET))
	(up-compare-goal gl-strategy != fire-ship-rush)
	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
=>
	(set-goal DOCK 2)
	(set-goal gl-strategy war-galley-rush)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal gl-strategy-type FC2)
	(set-strategic-number sn-dock-proximity-factor proximity1)
	(set-strategic-number sn-allow-new-build-order 2)
)
#end-if

; ============== BUILDINGS - DARK

(defrule
	(or	(up-compare-goal gl-nothing-style-map != YES)
		(housing-headroom <= 2))
	(strategic-number sn-town-center-start == 1)
	(up-pending-objects c: house < 1)
	(building-type-count-total house < 1)
	(game-time < 10)
	(building-type-count-total town-center > 0)
	(population-headroom > 3)
	(housing-headroom <= dark-housing-cap)
	(can-build-with-escrow house)
=>
	(set-strategic-number sn-placement-zone-size 3)
	(up-assign-builders c: house c: 2)
	(up-set-placement-data my-player-number villager-class c: 1)
	(up-build place-control gl-escrow-state c: house)
)

(defrule
	(true)
=>
	(up-get-fact housing-headroom 0 temporary-goal)
	(up-modify-goal temporary-goal c:* -1)
	(up-modify-goal temporary-goal2 g:= temporary-goal)
	(up-modify-goal temporary-goal2 c:max 0)
	(up-modify-goal temporary-goal3 g:= temporary-goal)
	(up-modify-goal temporary-goal3 c:* 5)
	(up-modify-goal temporary-goal g:+ temporary-goal3)
	(up-modify-goal temporary-goal2 c:* 5)
	(up-modify-goal temporary-goal g:- temporary-goal2)
	(up-modify-goal temporary-goal c:+ 3)
	(up-modify-goal temporary-goal c:z/ 5)
	(up-modify-goal temporary-goal c:+ 1)
;	(up-chat-data-to-all "Want %d more houses" g: temporary-goal)
)

(defrule
	(game-time < 600)
	(goal gl-current-age gv-dark)
	(current-age == dark-age)
	(building-type-count-total house == 1)
	(building-type-count-total farm < 5)
	(goal gl-nothing-style-map YES)
=>
	(up-jump-rule 2)
)

(defrule
	(nand	(game-time < 16)
		(and	(up-gaia-type-count c: sheep > 0)
			(up-pending-objects c: house < 2)))
	(building-type-count town-center > 0)
	(up-pending-objects c: house < 5)
	(up-pending-objects c: house g:< temporary-goal)
	(population-headroom > 3)
=>
	(up-modify-goal gl-house-build-priority c:max 989)
)

(defrule
	(building-type-count town-center > 0)
	(up-pending-objects c: house < 1)
	(population-headroom > 3)
	(or	(up-compare-goal gl-nothing-style-map != YES)
		(housing-headroom <= 2))
	(or	(housing-headroom <= dark-housing-cap)
		(building-type-count-total house > 0))
	(housing-headroom <= 3)
=>
	(up-modify-goal gl-house-build-priority c:max 989)
)

(defrule
	(or	(housing-headroom < 3)
		(or	(up-compare-goal gl-strategy-type <= controlled-flush)
			(up-compare-goal gl-current-age >= gv-feudal-up)))
	(building-type-count town-center > 0)
	(up-compare-goal gl-current-age > gv-dark-up)
	(up-pending-objects c: house < 1)
	(population-headroom > 3)
	(housing-headroom < 4)
=>
	(up-modify-goal gl-house-build-priority c:max 989)
)

(defrule
	(or	(current-age > feudal-age)
		(and	(goal gl-DRUSH YES)
			(and	(building-type-count-total barracks == 0)
				(building-type-count-total mill > 1))))
	(building-type-count-total mill > 0)
	(building-type-count-total lumber-camp > 0)
=>
	(up-jump-rule 9)
)

(defrule
	(goal gl-current-age gv-dark)
	(building-type-count town-center > 1)
	(up-compare-goal gl-my-villager-count-total < 25)
	(or	(up-compare-goal gl-my-villager-count-total < 15)
		(unit-type-count villager-wood < 3))
	(not	(civ-selected hun))
	(building-type-count-total mill > 0)
	(building-type-count-total lumber-camp == 0)
=>
	(up-jump-rule 8)
)

(defrule
	(or	(goal gl-strategy forward)
		(goal gl-strategy trush))
	(goal gl-current-age gv-dark-up)
	(current-age == dark-age)
=>
	(set-strategic-number sn-skip-first-mining-camp 1)
	(disable-self)
)

(defrule
	(or	(building-type-count town-center == 0)
		(or	(strategic-number sn-wood-found > 3)
			(and	(strategic-number sn-wood-found == -1)
				(and	(resource-found wood)
					(game-time < 300)))))
=>
	(up-jump-rule 1)
)

(defrule
	(game-time > 20)
	(or	(and	(up-compare-goal gl-my-villager-count >= gv-8-villager-lumber)
			(goal gl-normal-milling 0))
		(dropsite-min-distance wood > 6))
	(goal gl-current-age gv-dark)
	(building-type-count-total lumber-camp == 0)
	(resource-found wood)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(build lumber-camp)
	(set-strategic-number sn-maximum-wood-drop-distance 6)
	(chat-to-player my-player-number lumber-camp-chat)
	(enable-timer 10 5)
)

(defrule
	(goal gl-normal-milling 0)
	(building-type-count town-center > 0)
	(or	(unit-type-count-total fishing-ship s:>= sn-pre-mill-fishers)
		(and	(wood-amount > 250)
			(game-time > 2)))
	(building-type-count-total mill == 0)
	(resource-found food)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-preferred-mill-placement 0)
	(set-strategic-number sn-maximum-food-drop-distance 10)
	(set-goal gl-normal-milling 1)
	(build mill)
	(chat-to-player my-player-number mill-chat)
)

(defrule
	(goal gl-normal-milling 0)
	(building-type-count town-center > 0)
	(unit-type-count-total fishing-ship s:>= sn-pre-mill-fishers)
	(building-type-count-total mill == 0)
	(not	(resource-found food))
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-preferred-mill-placement 1)
	(set-strategic-number sn-maximum-food-drop-distance 10)
	(set-goal gl-normal-milling 1)
	(build mill)
	(chat-to-player my-player-number mill-chat)
)

(defrule
	(or	(and	(unit-type-count scout-unit > 0)
			(map-type ghost-lake))
		(or	(map-type migration)
			(and	(up-compare-goal gl-current-age < gv-feudal-up)
				(and	(or	(up-compare-const gv-fish-map == 1)
						(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))
					(unit-type-count villager-food > 4)))))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-my-villager-count-total > 20)
	(up-compare-goal gl-close-deer != YES)
	(up-compare-goal gl-deer-distance < 22)
	(nand	(building-type-count-total barracks == 0)
		(goal gl-DRUSH YES))
	(or	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
		(and	(unit-type-count-total fishing-ship s:>= sn-pre-mill-fishers)
			(up-compare-goal gl-strategy-type >= FC)))
	(up-compare-goal gl-deer-luring <= -1)
	(building-type-count-total mill == 1)
	(can-build mill)
=>
	(set-strategic-number sn-preferred-mill-placement 1)
	(build mill)
)

(defrule
	(strategic-number sn-allow-new-build-order <= -2)
	(strategic-number sn-allow-new-build-order >= -4)
	(up-compare-goal gl-my-villager-count-total > 20)
	(up-compare-goal gl-current-age <= gv-dark-up)
	(building-type-count-total lumber-camp == 1)
	(or	(building-type-count-total mill > 0)
		(goal gl-normal-milling 3))
	(resource-found wood)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(up-modify-sn sn-lumber-camp-max-distance c:+ 3)
	(build lumber-camp)
	(chat-to-player my-player-number "Second lumber")
)

#load-if-defined DEFEND-WONDER
(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(civilian-population > 25)
	(building-type-count-total mining-camp < 3)
	(dropsite-min-distance gold >= 0)
	(dropsite-min-distance gold < 255)
	(resource-found gold)
	(can-build mining-camp)
=>
	(up-modify-sn sn-allow-adjacent-dropsites g:= gl-mining-camp-backup)
	(build mining-camp)
)
#end-if

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(strategic-number sn-gold-gatherer-percentage > 0)
	(strategic-number sn-stone-gatherer-percentage > 0)
	(or	(goal gl-strategy castle-drop)
		(strategic-number sn-stone-gatherer-percentage > 3))
	(dropsite-min-distance stone > 3)
	(dropsite-min-distance stone < 255)
	(resource-found stone)
	(building-type-count-total mining-camp < 6)
	(can-build mining-camp)
=>
	(up-modify-sn sn-allow-adjacent-dropsites g:= gl-mining-camp-backup)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(up-modify-sn sn-mining-camp-max-distance c:max 24)
	(build mining-camp)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(strategic-number sn-gold-gatherer-percentage > 0)
	(strategic-number sn-nomad-style-start == 1)
	(goal gl-strategy castle-drop)
	(dropsite-min-distance stone > 3)
	(dropsite-min-distance stone < 255)
	(or	(resource-found stone)
		(building-type-count-total mining-camp < 3))
	(dropsite-min-distance gold < 4)
	(can-build mining-camp)
=>
	(up-modify-sn sn-allow-adjacent-dropsites g:= gl-mining-camp-backup)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build mining-camp)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(strategic-number sn-nomad-style-start == 1)
	(strategic-number sn-gold-gatherer-percentage > 0)
	(strategic-number sn-stone-gatherer-percentage > 3)
	(dropsite-min-distance stone > 3)
	(dropsite-min-distance stone < 255)
	(building-type-count-total mining-camp < 3)
	(dropsite-min-distance gold < 4)
	(dropsite-min-distance gold >= 0)
	(can-build mining-camp)
=>
	(up-modify-sn sn-allow-adjacent-dropsites g:= gl-mining-camp-backup)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build mining-camp)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(strategic-number sn-nomad-style-start == 0)
	(strategic-number sn-gold-gatherer-percentage > 0)
	(strategic-number sn-stone-gatherer-percentage > 3)
	(dropsite-min-distance stone > 3)
	(dropsite-min-distance stone < 255)
	(building-type-count-total mining-camp < 3)
	(dropsite-min-distance gold < 4)
	(dropsite-min-distance gold >= 0)
	(can-build mining-camp)
=>
	(up-modify-sn sn-allow-adjacent-dropsites g:= gl-mining-camp-backup)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(up-modify-sn sn-mining-camp-max-distance c:max 24)
	(build mining-camp)
)

(defrule
	(up-pending-objects c: mining-camp < 1)
	(strategic-number sn-mining-camp-max-distance >= 40)
	(cc-players-unit-type-count 0 gold-mine > 8)
	(building-type-count town-center > 2)
	(game-time > 2000)
	(or	(building-type-count-total mining-camp < relative-5-camps)
		(game-time > camp-max-80-time))
	(or	(building-type-count-total mining-camp < relative-8-camps)
		(game-time > camp-max-100-time))
	(building-type-count-total mining-camp < 11)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(build mining-camp)
)

(defrule
	(or	(building-type-count-total mill > 0)
		(or	(building-type-count town-center == 0)
			(or	(and	(building-type-count-total lumber-camp == 0)
					(and	(up-compare-goal gl-normal-milling != 1)
						(and	(wood-amount < 250)
							(or	(wood-amount < 200)
								(up-compare-goal DOCK != 0)))))
				(goal gl-normal-milling 3))))
=>
	(up-jump-rule 4)
)

(defrule
	(goal gl-normal-milling 1)
	(up-compare-goal gl-deer-distance < 27)
	(up-gaia-type-count c: deer > 0)
	(or	(game-time > 300)
		(cc-players-unit-type-count 0 forage-class == 0))
	(or	(up-compare-goal gl-my-villager-count-total > 8)
		(unit-type-count villager-food < 3))
	(not	(resource-found food))
	(can-build mill)
=>
	(set-strategic-number sn-preferred-mill-placement 1)
	(up-modify-sn sn-mill-max-distance c:max 27)
	(build mill)
	(set-strategic-number sn-maximum-hunt-drop-distance 17)
)

(defrule
	(goal gl-normal-milling 1)
	(game-time > 10)
	(strategic-number sn-nomad-style-start == 1)
	(up-compare-goal gl-my-villager-count-total > 5)
	(unit-type-count villager-forager > 0)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-preferred-mill-placement 0)
	(build mill)
	(chat-to-player my-player-number mill-chat)
)

(defrule
	(strategic-number sn-nomad-style-start == 1)
	(up-compare-goal gl-my-villager-count-total > 6)
	(or	(or	(and	(up-compare-goal gl-my-villager-count-total > 10)
				(strategic-number sn-sheep-count < 7))
			(strategic-number sn-sheep-count < 5))
		(up-compare-goal gl-my-villager-count-total > 13))
	(up-compare-goal gl-deer-distance < 27)
	(can-build mill)
=>
	(set-strategic-number sn-preferred-mill-placement 1)
	(up-modify-sn sn-mill-max-distance c:max 27)
	(build mill)
	(chat-to-player my-player-number mill-chat)
)

(defrule
	(up-compare-goal gl-normal-milling >= 0)
	(up-compare-goal gl-normal-milling <= 2)
	(strategic-number sn-allow-new-build-order >= -1)
	(strategic-number sn-allow-new-build-order <= 1)
	(up-compare-goal gl-my-villager-count-total > 12)
	(resource-found food)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-preferred-mill-placement 0)
	(build mill)
	(set-strategic-number sn-maximum-food-drop-distance 10)
	(chat-to-player my-player-number mill-chat)
)

(defrule
	(strategic-number sn-nomad-style-start == 1)
	(building-type-count town-center > 0)
	(up-compare-goal gl-my-villager-count-total > 8)
	(strategic-number sn-sheep-count < 5)
	(up-compare-goal gl-deer-distance > 7)
	(up-compare-goal gl-deer-distance < 27)
	(unit-type-count villager-forager == 0)
	(game-time > 420)
=>
	(set-strategic-number sn-preferred-mill-placement 1)
	(disable-self)
)

(defrule
	(current-age > feudal-age)
	(building-type-count-total mill > 0)
	(building-type-count-total lumber-camp > 0)
=>
	(up-jump-rule 32)
)

(defrule
	(goal gl-nothing-style-map YES)
=>
	(up-jump-rule 31)
)

(defrule
	(game-time < 300)
	(dropsite-min-distance deer-hunting > 27)
	(up-gaia-type-count c: forage-class < 1)
	(up-gaia-type-count c: shore-fish < 1)
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-normal-milling != 3)
	(building-type-count town-center > 0)
	(game-time > 150)
	(strategic-number sn-nomad-style-start == 0)
	(or	(dropsite-min-distance food > 4)
		(dropsite-min-distance food == -1))
	(unit-type-count villager-food <= 1)
	(building-type-count-total mill == 0)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-preferred-mill-placement 1)
	(up-modify-sn sn-mill-max-distance c:max 27)
	(build mill)
	(set-strategic-number sn-maximum-food-drop-distance 10)
	(chat-to-player my-player-number "Mill anyway")
)

(defrule
	(strategic-number sn-allow-new-build-order == 1)
	(building-type-count town-center > 0)
	(game-time > 150)
	(or	(up-compare-goal gl-my-villager-count-total > 16)
		(and	(game-time > 480)
			(unit-type-count villager-food <= 1))); The explorer may be on "food"
	(building-type-count-total mill == 0)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-preferred-mill-placement 1)
	(up-modify-sn sn-mill-max-distance c:max 27)
	(build mill)
	(set-strategic-number sn-maximum-food-drop-distance 10)
	(chat-to-player my-player-number "Mill anyway")
)

(defrule
	(game-time > 20)
	(strategic-number sn-wood-found <= 3)
	(up-compare-goal gl-my-villager-count-total >= gv-11-villager-lumber)
	(goal gl-current-age gv-dark)
	(building-type-count-total mill > 0)
	(building-type-count-total lumber-camp == 0)
	(resource-found wood)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(build lumber-camp)
	(set-strategic-number sn-maximum-wood-drop-distance 6)
	(chat-to-player my-player-number lumber-camp-chat)
	(enable-timer 10 5)
)

(defrule
	(goal gl-feudal-infantry men-at-arms)
	(or	(building-type-count-total barracks < 1)
		(and	(dropsite-min-distance gold > 3)
			(building-type-count-total mining-camp < 1)))
=>
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(up-compare-goal gl-my-villager-count-total > 20)
	(up-compare-goal gl-current-age <= gv-dark-up)
	(building-type-count-total lumber-camp == 1)
	(building-type-count-total mill > 0)
	(resource-found wood)
	(can-build lumber-camp)
	(nand	(goal gl-DRUSH YES)
		(building-type-count-total barracks < 1))
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(up-modify-sn sn-lumber-camp-max-distance c:+ 3)
	(build lumber-camp)
	(chat-to-player my-player-number "Second lumber")
)

(defrule
	(current-age == dark-age)
	(up-compare-goal gl-strategy != michi-boom)
;	(or	(and
	(building-type-count-total town-center > 1)
			(goal DOCK 0);)
;		(and	(wood-amount >= 375)
;			(goal gl-current-age gv-dark-up))); Disable this on normal maps then due to non-restricted use
	(goal gl-resources-on-map regular)
	(up-compare-goal gl-strategy != grush); There was an invalid check here, so the rule has been bugged and inactive for ages !?
	(building-type-count-total farm g:< gl-max-farm-count)
	(building-type-count-total farm < 25)
	(wood-amount >= 160)
=>
	(set-goal gl-farming 1)
)

(defrule
	(current-age == dark-age)
	(goal gl-current-age gv-dark)
	(game-time > 240)
	(goal gl-strategy-type basic-flush)
	(up-compare-goal gl-DRUSH != YES)
	(goal gl-resources-on-map regular)
	(building-type-count-total lumber-camp > 0)
	(or	(building-type-count-total farm < 1)
		(and	(building-type-count-total lumber-camp > 1)
			(and	(strategic-number sn-sheep-count < 11)
				(up-compare-goal gl-lured-deer-count < 2))))
	(building-type-count-total farm < 2)
=>
	(set-goal gl-farming 1)
)

(defrule
	(current-age == dark-age)
	(goal gl-current-age gv-dark)
	(game-time > 420)
	(unit-type-count villager-food < 12)
	(building-type-count-total farm g:< gl-max-farm-count)
	(goal gl-resources-on-map regular)
	(or	(wood-amount >= 230)
		(and	(dropsite-min-distance food > 5)
			(and	(dropsite-min-distance hunting > 8)
				(up-compare-goal gl-total-food-amount < 400))))
=>
	(set-goal gl-farming 1)
)

(defrule
	(food-amount >= 80)
	(building-type-count-total farm > 2)
	(or	(building-type-count-total town-center <= 1)
		(food-amount >= 350))
	(or	(starting-resources != low-resources)
		(up-compare-const gv-regicide == 1))
	(game-time < 300)
=>
	(up-jump-rule 10)
)

(defrule
	(strategic-number sn-nomad-style-start == 0)
	(strategic-number sn-sheep-count > 7)
	(or	(and	(building-type-count-total farm >= farm-number1)
			(or	(building-type-count-total farm >= farm-number3)
				(building-type-count-total mill > 1)))
		(up-compare-goal gl-lured-deer-count > 2))
	(or	(up-compare-goal gl-my-villager-count < 27)
		(food-amount >= 410))
	(up-compare-goal gl-boar-eaten >= 2)
=>
	(up-jump-rule 2)
)

(defrule
	(or	(goal gl-close-deer YES)
		(or	(and	(up-compare-goal gl-strategy-type <= controlled-flush)
				(or	(and	(building-type-count-total farm > 4)
						(strategic-number sn-sheep-count > 5))
					(building-type-count-total farm g:>= gl-max-farm-count)))
			(and	(strategic-number sn-sheep-count > 7)
				(building-type-count-total farm > 7))))
	(up-compare-goal gl-boar-eaten >= 2)
=>
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(building-type-count-total lumber-camp > 0)
	(goal gl-current-age gv-dark)
	(current-age == dark-age)
	(idle-farm-count < 1)
	(up-compare-goal gl-DRUSH != YES)
	(building-type-count-total mill < 2)
	(goal gl-resources-on-map regular)
	(or	(and	(building-type-count-total farm > 4)
			(dropsite-min-distance deer-hunting >= 22))
		(wood-amount > 160))
	(building-type-count-total farm < 10)
=>
	(set-goal gl-farming 1)
)

(defrule
	(strategic-number sn-allow-new-build-order == 1)
	(current-age == dark-age)
	(building-type-count-total lumber-camp > 1)
	(goal gl-resources-on-map regular)
	(up-compare-goal gl-strategy-type >= FC2)
	(nand	(dropsite-min-distance stone > 3)
		(strategic-number sn-stone-gatherer-percentage > 0))
	(or	(up-compare-goal gl-deer-distance >= 22)
		(goal gl-close-deer YES))
	(or	(building-type-count-total farm < fc-farms1); 5 for non-malay / 8
		(up-compare-goal gl-my-villager-count-total > 28)); >27
	(building-type-count-total farm < fc-farms2); 6 for non-malay / 10
=>
	(set-goal gl-farming 1)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(or	(building-type-count-total town-center > 1)
		(strategic-number sn-nomad-style-start == 1))
	(current-age == dark-age)
	(goal gl-current-age gv-dark)
	(building-type-count-total farm > 3)
	(building-type-count-total lumber-camp > 0)
	(idle-farm-count < 1)
=>
	(set-goal gl-farming 1)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(up-compare-goal gl-strategy-type >= FC)
	(strategic-number sn-sheep-count < 5)
	(current-age == dark-age)
	(or	(building-type-count-total farm < 9)
		(or	(up-compare-goal gl-boar-eaten < 2)
			(and	(up-compare-goal gl-lured-deer-count < 2)
				(up-compare-goal gl-boar-eaten < 3))))
	(goal gl-current-age gv-dark)
	(building-type-count-total farm > 3)
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total farm < 11)
=>
	(set-goal gl-farming 1)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(up-compare-goal gl-strategy-type >= FC)
	(strategic-number sn-sheep-count < 5)
	(current-age == dark-age)
	(or	(up-compare-goal gl-boar-eaten < 2)
		(and	(up-compare-goal gl-lured-deer-count < 2)
			(up-compare-goal gl-boar-eaten < 3)))
	(up-compare-goal gl-total-food-amount < 450)
	(goal gl-current-age gv-dark)
	(building-type-count-total farm > 3)
	(building-type-count-total lumber-camp > 0)
	(idle-farm-count < 1)
=>
	(set-goal gl-farming 1)
)

(defrule
	(strategic-number sn-allow-new-build-order == 1)
	(up-compare-goal gl-my-villager-count-total > 28)
	(up-compare-goal gl-strategy-type >= FC)
	(strategic-number sn-sheep-count < 10)
	(up-compare-goal gl-boar-eaten < 3)
	(current-age == dark-age)
	(building-type-count-total farm < 7)
	(building-type-count-total farm > 3)
	(up-compare-goal gl-deer-distance >= 22)
	(up-compare-goal gl-close-deer != YES)
	(building-type-count-total mill < 2)
	(building-type-count-total lumber-camp > 0)
=>
	(set-goal gl-farming 1)
)

(defrule
	(strategic-number sn-allow-new-build-order == 1)
	(game-time > 420)
	(up-compare-goal gl-strategy-type >= FC)
	(strategic-number sn-sheep-count < 7)
	(up-compare-goal gl-boar-eaten < 3)
	(current-age == dark-age)
	(building-type-count-total farm < 9)
	(building-type-count-total farm > 3)
	(up-compare-goal gl-deer-distance >= 22)
	(up-compare-goal gl-close-deer != YES)
	(building-type-count-total mill < 2)
	(building-type-count-total lumber-camp > 0)
=>
	(set-goal gl-farming 1)
)

(defrule
	(strategic-number sn-allow-new-build-order == 1)
	(up-compare-goal gl-strategy-type >= FC2)
	(strategic-number sn-sheep-count < 7)
	(up-compare-goal gl-boar-eaten < 2)
	(current-age == dark-age)
	(goal gl-current-age gv-dark)
	(building-type-count-total farm > 3)
	(or	(building-type-count-total farm < 9)
		(and	(up-compare-goal gl-lured-deer-count < 4)
			(building-type-count-total mill < 2)))
	(building-type-count-total farm < 11)
	(building-type-count-total lumber-camp > 0)
=>
	(set-goal gl-farming 1)
)

(defrule
	(civ-selected chinese)
	(unit-type-count sheep > 0)
	(unit-type-count villager-forager == 0)
	(up-compare-goal gl-my-villager-count < 9)
	(food-amount < 80)
=>
	(up-jump-rule 1)
)

(defrule
	(goal gl-normal-milling 1)
	(building-type-count town-center > 0)
	(or	(up-compare-goal gl-my-villager-count-total > 7)
		(unit-type-count villager-forager > 0))
	(building-type-count-total mill == 0)
	(or	(resource-found food)
		(up-compare-goal gl-my-villager-count-total > 17))
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build mill)
	(set-strategic-number sn-maximum-food-drop-distance 10)
	(chat-to-player my-player-number mill-chat)
)

(defrule
	(goal gl-normal-milling 1)
	(building-type-count town-center > 0)
	(game-time > no-sheep-mill-time); 15 in low resources start, else 60
	(or	(and	(strategic-number sn-nomad-style-start == 0)
			(resource-found food))
		(wood-amount > 250))
	(unit-type-count villager-shepherd == 0)
	(unit-type-count sheep == 0)
	(building-type-count-total mill == 0)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build mill)
	(set-strategic-number sn-maximum-food-drop-distance 10)
	(chat-to-player my-player-number "No sheep - mill")
)

(defrule
	(up-compare-goal gl-normal-milling != 3)
	(building-type-count town-center > 0)
	(game-time > 120)
	(unit-type-count sheep == 0)
	(nand	(up-compare-goal gl-wood-backup >= 7)
		(building-type-count-total lumber-camp == 0))
	(building-type-count-total mill == 0)
	(dropsite-min-distance food == -1)
	(can-build mill)
=>
	(set-strategic-number sn-preferred-mill-placement 1)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build mill)
	(set-strategic-number sn-maximum-food-drop-distance 10)
)

(defrule
	(building-type-count-total town-center > 0)
	(game-time > 330)
	(or	(building-type-count-total dock > 0)
		(game-time > 570))
	(up-compare-const gv-nomad-style == 1)
	(building-type-count-total mill == 0)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build mill)
)

(defrule
	(or	(starting-age != dark-age)
		(or	(up-compare-const gv-regicide == 1)
			(starting-resources != low-resources)))
	(up-compare-goal gl-my-villager-count < 15)
	(or	(food-amount >= 100)
		(or	(unit-type-count villager-food > 6)
			(and	(up-compare-goal gl-my-villager-count < 8)
				(up-pending-objects c: villager-class > 0))))
=>
	(up-jump-rule 5)
)

(defrule
	(or	(up-compare-goal gl-current-age != gv-dark)
		(or	(up-compare-goal DOCK != 0)
			(or	(building-type-count-total lumber-camp < 1)
				(or	(building-type-count-total town-center < 1)
					(or	(goal gl-DRUSH YES)
						(or	(building-type-count-total farm >= 8); 9
							(and	(building-type-count-total farm g:>= gl-max-farm-count)
								(up-compare-goal gl-strategy-type <= controlled-flush))))))))
=>
	(up-jump-rule 4)
)

(defrule
	(strategic-number sn-sheep-count > 5)
	(or	(and	(up-compare-goal gl-strategy-type <= controlled-flush)
			(and	(up-compare-goal gl-boar-eaten > 1)
				(or	(up-compare-goal gl-lured-deer-count > 2)
					(or	(strategic-number sn-sheep-count > 9)
						(game-time < 360)))))
		(goal gl-resources-on-map plenty))
=>
	(up-jump-rule 3)
)

(defrule
	(strategic-number sn-nomad-style-start == 0)
	(strategic-number sn-sheep-count > 7)
	(or	(or	(building-type-count-total farm >= farm-number1)
			(building-type-count-total mill > 1))
		(up-compare-goal gl-lured-deer-count > 2))
	(or	(up-compare-goal gl-my-villager-count < 27)
		(food-amount >= 410))
	(up-compare-goal gl-boar-eaten >= 2)
=>
	(up-jump-rule 2)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(or	(and	(up-compare-goal gl-deer-distance >= 22)
			(and	(building-type-count-total mill < 2)
				(up-compare-goal gl-close-deer != YES)))
		(building-type-count-total farm < 2))
=>
	(set-goal gl-farming 1)
)

(defrule
	(strategic-number sn-allow-new-build-order == 1)
	(or	(up-compare-goal gl-strategy-type >= FC)
		(or	(building-type-count-total farm < 2)
			(and	(building-type-count-total farm < 4)
				(strategic-number sn-sheep-count < 7))))
	(building-type-count-total farm < 6)
	(or	(building-type-count-total farm < 5)
		(up-compare-goal gl-my-villager-count-total > 27))
	(or	(up-compare-goal gl-deer-distance >= 22)
		(goal gl-close-deer YES))
=>
	(set-goal gl-farming 1)
)

#load-if-not-defined WONDER-RACE
(defrule
	(up-compare-goal gl-strategy-type >= FC)
	(goal gl-resources-on-map plenty)
	(current-age == dark-age)
	(up-compare-goal gl-my-villager-count-total > 25)
	(or	(building-type-count-total farm < 3)
		(up-compare-goal gl-my-villager-count-total > 27))
	(up-compare-goal gl-boar-eaten < 3)
	(strategic-number sn-sheep-count < 12)
	(up-compare-goal gl-lured-deer-count < 4)
	(up-gaia-type-count c: deer < 3)
	(building-type-count-total farm < 5)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(and	(up-compare-goal gl-nothing-style-map != YES)
			(and	(up-compare-goal gl-current-age >= gv-castle)
				(and	(building-type-count-total mill > 0)
					(building-type-count-total lumber-camp > 0))))
		(or	(goal gl-resources-on-map plenty)
			(starting-age != dark-age)))
=>
	(up-jump-rule 14)
)

(defrule
	(or	(goal gl-nothing-style-map YES)
		(or	(building-type-count town-center == 0)
			(and	(starting-resources != low-resources)
				(and	(food-amount >= 100)
					(and	(goal gl-current-age gv-dark)
						(or	(game-time < 300)
							(or	(idle-farm-count > 0)
								(up-pending-objects c: farm > 0))))))))
=>
	(up-jump-rule 15)
)

(defrule
	(up-compare-goal gl-strategy-type >= FC)
	(goal DOCK 0)
	(or	(nand	(up-compare-goal gl-deer-distance < 22)
			(building-type-count-total mill < 2))
		(goal gl-close-deer YES))
	(goal gl-current-age gv-dark)
	(or	(building-type-count-total farm < 4)
		(up-compare-goal gl-lured-deer-count < 5))
	(building-type-count-total farm < 5)
	(building-type-count-total lumber-camp > 1)
=>
	(set-goal gl-farming 1)
)

(defrule
	(goal gl-feudal-infantry men-at-arms)
	(goal DOCK 0)
	(or	(nand	(up-compare-goal gl-deer-distance < 22)
			(building-type-count-total mill < 2))
		(goal gl-close-deer YES))
	(goal gl-current-age gv-dark)
	(building-type-count-total farm g:< gl-max-farm-count)
	(building-type-count-total farm < maa1-farms)
	(building-type-count-total lumber-camp >= 1)
=>
	(set-goal gl-farming 1)
)

(defrule
	(goal gl-feudal-infantry men-at-arms)
	(goal gl-feudal-infantry 0); Disable for now, enable if faster m@a rush without range
	(goal DOCK 0)
	(or	(nand	(up-compare-goal gl-deer-distance < 22)
			(building-type-count-total mill < 2))
		(goal gl-close-deer YES))
	(dropsite-min-distance gold < 5)
	(building-type-count-total farm g:< gl-max-farm-count)
	(building-type-count-total farm < 5)
	(building-type-count-total barracks > 0)
	(building-type-count-total lumber-camp >= 1)
=>
	(set-goal gl-farming 1)
)

(defrule
	(strategic-number sn-allow-new-build-order == 1)
	(goal gl-current-age gv-dark)
	(or	(strategic-number sn-boars-on-map == NONE)
		(and	(game-time > 600)
			(goal gl-boar-eaten 0)))
	(up-compare-goal gl-DRUSH != YES)
	(or	(up-compare-goal gl-deer-distance >= 22)
		(goal gl-close-deer YES))
	(idle-farm-count < 1)
	(up-pending-objects c: farm < 1)
	(building-type-count-total lumber-camp >= 1)
=>
	(set-goal gl-farming 1)
)

(defrule
	(goal gl-current-age gv-dark)
	(goal gl-DRUSH YES)
	(building-type-count-total barracks > 0)
	(or	(building-type-count-total farm < 4)
		(or	(strategic-number sn-sheep-count < 8)
			(or	(and	(up-compare-goal gl-lured-deer-count < 1)
					(up-compare-goal gl-deer-distance >= 15))
				(up-compare-goal gl-my-villager-count-total > 25))))
	(building-type-count-total farm < 5)
	(building-type-count-total lumber-camp >= 1)
=>
	(set-goal gl-farming 1)
)

(defrule
	(goal gl-current-age gv-dark)
	(goal gl-DRUSH YES)
	(building-type-count-total barracks > 0)
	(or	(and	(up-compare-goal gl-boar-eaten < 2)
			(and	(up-gaia-type-count g: gl-boar-unit < 2)
				(or	(up-compare-goal gl-boar-eaten < 1)
					(up-gaia-type-count g: gl-boar-unit < 1))))
		(up-compare-goal gl-my-villager-count-total > 26))
	(building-type-count-total farm < 7)
	(building-type-count-total lumber-camp >= 1)
=>
	(set-goal gl-farming 1)
)

(defrule
	(or	(strategic-number sn-allow-new-build-order == 1)
		(and	(unit-type-count villager-food < 4)
			(unit-type-count villager-builder < 2)))
	(goal gl-current-age gv-dark-up)
	(up-compare-goal gl-strategy-type >= FC)
	(unit-type-count villager-food < 8)
	(or	(building-type-count-total farm < 5)
		(food-amount < 750))
	(building-type-count-total farm < 8)
	(building-type-count-total farm g:< gl-max-farm-count)
	(building-type-count-total lumber-camp >= 1)
=>
	(set-goal gl-farming 1)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(goal gl-current-age gv-dark)
	(not	(goal DOCK 0))
	(or	(game-time > 300)
		(starting-resources == low-resources))
	(wood-amount > 200)
	(or	(building-type-count-total farm < 6)
		(goal gl-boar-eaten 0))
	(building-type-count-total farm < 7)
	(building-type-count-total lumber-camp >= 1)
=>
	(set-goal gl-farming 1)
)

(defrule
	(strategic-number sn-allow-new-build-order >= 1)
	(goal gl-current-age gv-dark)
	(not	(goal DOCK 0))
	(building-type-count-total dock > 1)
	(wood-amount >= dock-farm-wood)
	(building-type-count-total farm < 9)
	(or	(idle-farm-count <= 1)
		(building-type-count-total farm < 7))
	(building-type-count-total lumber-camp >= 1)
=>
	(set-goal gl-farming 1)
)

(defrule
	(or	(and	(up-compare-goal gl-current-age <= gv-dark-up)
			(up-compare-goal gl-deer-distance < 22))
		(or	(up-compare-goal DOCK != 0)
			(and	(up-compare-goal gl-strategy-type <= controlled-flush)
				(and	(food-amount > 170)
					(and	(or	(food-amount > 300)
							(building-type-count-total farm > 3))
						(goal gl-current-age gv-dark-up))))))
=>
	(up-jump-rule 2)
)

(defrule
	(strategic-number sn-allow-new-build-order == 1)
	(up-compare-goal gl-current-age <= gv-dark-up)
	(building-type-count-total lumber-camp > 0)
	(up-compare-goal gl-DRUSH != YES)
	(or	(up-compare-goal gl-lured-deer-count < 2)
		(and	(up-compare-goal gl-lured-deer-count < 3)
			(strategic-number sn-sheep-count < 8)))
	(or	(up-compare-goal gl-deer-distance >= 22)
		(goal gl-close-deer YES))
	(building-type-count-total farm g:< gl-max-farm-count)
	(building-type-count-total farm < farm-number2)
=>
	(set-goal gl-farming 1)
)

(defrule
	(up-compare-goal gl-current-age <= gv-dark-up)
	(or	(goal gl-current-age gv-dark)
		(and	(goal gl-strategy turkish-fast-imp)
			(building-type-count-total farm < 11)))
	(up-compare-goal gl-DRUSH != YES)
	(idle-farm-count < 1)
	(dropsite-min-distance hunting > 10)
	(unit-type-count villager-hunter == 0)
	(unit-type-count villager-forager == 0)
	(up-compare-goal gl-my-villager-count-total > 21)
=>
	(set-goal gl-farming 1)
)

(defrule
	(goal gl-current-age gv-dark-up)
	(or	(and	(goal gl-strategy flush)
			(and	(wood-amount >= 375)
				(food-amount < 300)))
		(and	(goal gl-strategy sling)
			(goal DOCK 0)))
	(building-type-count-total farm g:< gl-max-farm-count)
	(building-type-count-total farm < 18)
=>
	(set-goal gl-farming 1)
)

(defrule
	(up-pending-objects c: mining-camp < 1)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(goal gl-strategy flush)
	(nand	(goal gl-feudal-infantry men-at-arms)
		(building-type-count-total barracks < 1))
	(strategic-number sn-skip-first-mining-camp == 0)
	(building-type-count-total barracks >= up-building-count)
	(building-type-count-total mining-camp < 2)
	(up-compare-goal gl-feudal-archery != skirmishers)
	(dropsite-min-distance gold > 3)
	(dropsite-min-distance gold < 255)
	(can-build mining-camp)
=>
	(up-modify-sn sn-allow-adjacent-dropsites g:= gl-mining-camp-backup)
	(build mining-camp)
)
#end-if

(defrule
	(or	(and	(goal gl-strategy uu-boom)
			(and	(up-compare-goal gl-current-age >= gv-feudal-up)
				(or	(strategic-number sn-gold-gatherer-percentage == 0)
					(and	(civ-selected aztec)
						(up-compare-goal gl-my-villager-count-total < 40)))))
		(and	(goal gl-feudal-infantry men-at-arms)
			(building-type-count-total barracks < 1)))
=>
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(or	(up-compare-goal gl-strategy != flush)
		(players-unit-type-count any-enemy militiaman-line > 2))
	(or	(strategic-number sn-skip-first-mining-camp == 0)
		(timer-triggered 8))
	(or	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
		(up-compare-goal gl-current-age >= gv-feudal-up))
	(building-type-count-total mining-camp < 2)
	(dropsite-min-distance gold > 3)
	(dropsite-min-distance gold < 255)
	(can-build mining-camp)
=>
	(up-modify-sn sn-allow-adjacent-dropsites g:= gl-mining-camp-backup)
	(build mining-camp)
)

(defrule
	(regicide-game)
	(up-compare-goal gl-my-villager-count-total >= 15)
	(building-type-count town-center > 0)
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total mining-camp < 2)
	(resource-found gold)
	(dropsite-min-distance gold > 3)
	(dropsite-min-distance gold < 255)
	(can-build mining-camp)
=>
	(up-modify-sn sn-allow-adjacent-dropsites g:= gl-mining-camp-backup)
	(build mining-camp)
)

(defrule
	(up-pending-objects c: mining-camp < 1)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-feudal-archery != skirmishers)
	(nand	(strategic-number sn-skip-first-mining-camp == 1)
		(up-compare-goal gl-current-age <= gv-feudal))
	(cc-players-unit-type-count 0 gold-mine > 2)
	(up-compare-goal gl-my-villager-count > 15)
	(building-type-count-total mining-camp < 13)
	(dropsite-min-distance gold > 4)
	(dropsite-min-distance gold < 255)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-dropsite-separation-distance 10)
	(build mining-camp)
)

(defrule
	(goal gl-current-age gv-dark)
	(strategic-number sn-nomad-style-start == 1)
	(building-type-count town-center > 0)
	(up-compare-goal gl-my-villager-count-total > 5)
	(dropsite-min-distance wood > 4)
	(dropsite-min-distance wood < 255)
	(building-type-count-total lumber-camp == 0)
	(up-compare-const gv-nomad-style == 1)
	(resource-found wood)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(up-modify-sn sn-lumber-camp-max-distance c:max 27)
	(build lumber-camp)
)

#load-if-not-defined WONDER-RACE
#load-if-not-defined DEFEND-WONDER
#load-if-defined KHMER-CIV
(defrule
	(up-compare-const all-techs-enabled == 0)
	(up-compare-goal gl-enemy-cavalry-count < 2)
	(goal gl-feudal-infantry 0)
	(or	(up-compare-goal gl-feudal-archery != skirmishers)
		(up-compare-flag gl-flag == meso-civ-focus))
=>
	(up-jump-rule 1)
)

#end-if

(defrule
	(goal gl-TC-lost NO)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(strategic-number sn-minimum-water-body-size-for-dock <= islands-map-landing-style)
	(or	(goal gl-strategy flush)
		(or	(goal gl-strategy heavy-krush)
			(or	(goal gl-strategy ranged-rush-strategy)
				(or	(goal gl-strategy knight-rush)
					(or	(goal gl-strategy knight-boom)
						(goal gl-strategy scrush))))))
	(building-type-count-total barracks < 1)
=>
	(up-modify-goal gl-barracks-build-priority c:max 988); 989 for houses above
)

#load-if-not-defined MIGRATION-MAP
(defrule
	(or	(up-compare-goal gl-current-age >= gv-dark-up)
		(goal gl-feudal-infantry men-at-arms))
	(or	(and	(game-time > 1800)
			(goal DOCK 2))
		(or	(goal gl-strategy ranged-boom-strategy)
			(goal gl-feudal-infantry men-at-arms)))
	(up-compare-goal gl-my-villager-count-total >= barracks-villagers); 22 with low resource start, 18 with medium, 14 with high/turbo random
	(building-type-count-total barracks < 1)
=>
	(up-modify-goal gl-barracks-build-priority c:max 988)
)
#end-if
#else
(defrule
	(goal gl-TC-lost NO)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(strategic-number sn-minimum-water-body-size-for-dock <= islands-map-landing-style)
	(game-time > 660)
	(or	(goal gl-strategy flush)
		(or	(goal gl-strategy heavy-krush)
			(goal gl-strategy ranged-boom-strategy)))
	(building-type-count-total barracks < 1)
=>
	(up-modify-goal gl-barracks-build-priority c:max 988)
)
#end-if

; ============== BUILDINGS - FEUDAL

(defrule
	(goal gl-TC-lost NO)
	(up-compare-goal gl-migration-notice >= min-migration-progress)
	(or	(and	(game-time > 2700)
			(and	(goal gl-strategy-class basic-class)
				(building-type-count town-center > 2)))
		(and	(building-type-count-total barracks < 1)
			(not	(building-available archery-range))))
	(game-time > 2400)
	(building-type-count-total barracks < extra-barracks-number)
=>
	(up-modify-goal gl-barracks-build-priority c:max 988)
)

#load-if-defined SARACEN-CIV
(defrule
	(goal gl-strategy heavy-krush)
	(building-type-count-total stable < 2)
	(building-type-count-total market > 0)
=>
	(up-modify-goal gl-stable-build-priority c:max 987)
)
#end-if

#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(or	(wood-amount < 175)
		(game-time < 180))
=>
	(up-jump-rule 8)
)

(defrule
	(or	(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)
		(and	(up-allied-goal any-computer-ally SLING == 5)
			(and	(goal SLING 3)
				(and	(goal gl-advanced-cavalry heavy-knights)
					(and	(civilian-population > 60)
						(up-research-status c: imperial-age >= research-available))))))
	(or	(building-type-count-total stable < 5)
		(wood-amount > 600))
	(building-type-count-total stable < 8)
=>
	(up-modify-goal gl-stable-build-priority c:max 987)
)

(defrule
	(game-time > 1400)
	(goal gl-strategy flush)
	(up-compare-const gv-maximum-age == feudal-age)
	(or	(up-research-status c: ri-bloodlines >= research-pending)
		(research-available ri-bloodlines))
	(or	(and	(building-type-count-total stable < 2)
			(nor	(civ-selected gothic)
				(civ-selected japanese)))
		(up-compare-goal gl-my-villager-count-total > 80))
	(building-type-count-total stable < 4)
=>
	(up-modify-goal gl-stable-build-priority c:max 987)
)

(defrule
	(or	(and	(goal gl-strategy heavy-krush)
			(or	(goal gl-strategy non-saracen-heavy-krush)
				(building-type-count-total market > 0)))
		(and	(building-type-count-total stable < 1)
			(goal gl-strategy knight-rush)))
	(or	(building-type-count-total stable < 1)
		(up-compare-goal gl-current-age >= gv-feudal-up))
	(building-type-count-total stable < 2)
=>
	(up-modify-goal gl-stable-build-priority c:max 987)
)

(defrule
	(population-cap > 140)
	(or	(civilian-population < 60)
		(building-type-count-total town-center < 3))
	(players-military-population focus-player < 5)
	(up-compare-goal gl-enemy-wall-count-total > 24)
	(building-type-count-total stable > 0)
=>
	(up-jump-rule 2)
)

(defrule
	(or	(up-compare-goal gl-advanced-cavalry != 0)
		(and	(up-compare-goal gl-current-age >= gv-castle-up)
			(and	(goal gl-strategy-class basic-class)
				(and	(research-completed ri-light-cavalry)
					(game-time > 3000)))))
	(or	(building-type-count-total stable < 1)
		(building-type-count-total town-center > 1))
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count-total stable < 2)
=>
	(up-modify-goal gl-stable-build-priority c:max 987)
)

#load-if-not-defined HUN-CIV
(defrule
	(or	(and	(up-compare-goal gl-advanced-cavalry != 0)
			(building-type-count-total stable < 2))
		(or	(and	(goal gl-strategy heavy-krush)
				(building-type-count-total town-center > 1))
			(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)))
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count-total stable < 4)
=>
	(up-modify-goal gl-stable-build-priority c:max 987)
)
#else
(defrule
	(goal gl-advanced-archery hun-CAs)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(strategic-number sn-allow-resource-spending > 0)
	(or	(building-type-count-total town-center > 2)
		(or	(building-type-count-total town-center >= preferred-TC-number)
			(civilian-population > 65)))
	(building-type-count-total archery-range > 1)
	(building-type-count-total stable < 1)
=>
	(up-modify-goal gl-stable-build-priority c:max 987)
)
#end-if

(defrule
	(goal gl-strategy-class basic-class)
	(game-time > 600)
	(nand	(up-compare-goal gl-current-age >= gv-feudal-up)
		(building-type-count-total town-center < 2))
	(or	(and	(players-unit-type-count focus-player monk > 5)
			(building-type-count-total stable < 1))
		(or	(and	(players-unit-type-count focus-player monk > 6)
				(building-type-count-total stable < 2))
			(research-completed ri-heavy-camel)))
	(building-type-count-total stable < 4)
=>
	(up-modify-goal gl-stable-build-priority c:max 987)
)


(defrule
	(goal gl-strategy default)
	(game-time > relative-gt-3000)
	(civilian-population > 100)
	(wood-amount > 650)
	(or	(and	(or	(research-completed ri-hussar)
				(research-completed ri-paladin))
			(strategic-number sn-allow-resource-spending > 5))
		(building-type-count-total stable < 2))
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(building-type-count-total stable < 8)
=>
	(up-modify-goal gl-stable-build-priority c:max 987)
)
#end-if
#end-if

(defrule
	(goal gl-strategy default)
	(civilian-population > 100)
	(or	(game-time > relative-gt-3000)
		(players-unit-type-count focus-player paladin > 10))
	(wood-amount > 600)
	(or	(research-completed ri-champion)
		(or	(research-completed ri-halberdier)
			(research-completed ri-elite-eagle-warrior)))
	(strategic-number sn-allow-resource-spending > 5)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(building-type-count-total barracks < 10)
=>
	(up-modify-goal gl-barracks-build-priority c:max 986)
)

(defrule
	(goal gl-strategy default)
	(civilian-population > 100)
	(or	(game-time > relative-gt-3000)
		(goal gl-strategy-selection-notice 1))
	(strategic-number sn-allow-resource-spending > 5)
	(up-compare-goal gl-advanced-archery != 0)
	(up-compare-goal gl-advanced-archery != scorpions)
	(wood-amount > 600)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(building-type-count-total archery-range < 10)
=>
	(up-modify-goal gl-range-build-priority c:max 985)
)

(defrule
	(goal gl-strategy default)
	(civilian-population > 100)
	(game-time > 3000)
	(strategic-number sn-allow-resource-spending > 3)
	(up-compare-goal gl-trade-unit-count-total < 10)
	(up-compare-const special-raid-unit != janissary-line)
	(or	(dropsite-min-distance gold == -1)
		(or	(cc-players-unit-type-count 0 gold-mine < 10)
			(up-compare-goal gl-skirmisher-count-total > 20)))
	(wood-amount > 500)
	(building-type-count-total archery-range < 10)
=>
	(up-modify-goal gl-range-build-priority c:max 985)
)


(defrule
	(or	(building-type-count-total lumber-camp >= 4)
		(or	(dropsite-min-distance wood < 0)
			(or	(dropsite-min-distance wood >= 255)
				(or	(up-compare-const gv-wonder-race == 1)
					(or	(up-compare-goal gl-current-age < gv-feudal)
						(or	(current-age-time < 40)
							(and	(goal gl-strategy uu-boom)
								(building-type-count-total town-center < 3))))))))
=>
	(up-jump-rule 3)
)

(defrule
	(building-type-count-total lumber-camp == 2)
	(or	(and	(goal gl-strategy flush)
			(and	(current-age == feudal-age)
				(and	(current-age-time > 270)
					(starting-age != feudal-age))))
		(dropsite-min-distance wood > 2))
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(up-modify-sn sn-lumber-camp-max-distance c:max 22)
	(up-modify-sn sn-lumber-camp-max-distance c:+ 3)
	(build lumber-camp)
)

(defrule
	(game-time < 1500)
	(goal gl-current-age gv-feudal-up)
	(up-compare-goal gl-strategy-type >= FC)
	(building-type-count lumber-camp == 2)
	(building-type-count-total lumber-camp == 2)
	(strategic-number sn-wood-gatherer-percentage >= 50)
	(up-research-status c: ri-horse-collar >= research-pending)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(up-modify-sn sn-lumber-camp-max-distance c:max 20)
	(up-modify-sn sn-lumber-camp-max-distance c:+ 3)
	(build lumber-camp)
	(disable-self)
)

(defrule
	(game-time < 1800)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count lumber-camp == 3)
	(building-type-count-total town-center > 2)
	(building-type-count-total farm > 17)
	(civilian-population > 52)
	(up-research-status c: ri-horse-collar >= research-pending)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(up-modify-sn sn-lumber-camp-max-distance c:max 24)
	(up-modify-sn sn-lumber-camp-max-distance c:+ 3)
	(build lumber-camp)
	(enable-timer 8 150)
	(disable-self)
)

(defrule
	(or	(up-compare-flag gl-flag != last-mill-full)
		(up-pending-objects c: mill > 0))

=>
	(up-jump-rule 1)
)

(defrule
	(building-type-count town-center > 0)
	(or	(building-type-count-total mill < 4)
		(or	(building-type-count-total farm > 60)
			(and	(building-type-count-total mill < 5)
				(building-type-count-total farm > 37))))
	(building-type-count-total mill < 7)
	(building-type-count-total farm > 28)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 6)
	(set-strategic-number sn-mill-max-distance 24)
	(up-modify-flag gl-flag c:- last-mill-full)
	(build mill)
)

(defrule
	(game-time > 2400)
	(up-compare-goal gl-my-villager-count > 130)
	(building-type-count-total mill < 9)
	(wood-amount > 500)
	(building-type-count town-center > 3)
	(strategic-number sn-food-gatherer-percentage > 42)
	(building-type-count-total farm > 80)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-mill-max-distance 30)
	(build mill)
)

(defrule
	(up-compare-flag gl-flag == last-mill-full)
	(building-type-count town-center > 0)
	(building-type-count-total blacksmith >= one-value)
	(building-type-count-total farm > 15)
	(research-completed ri-horse-collar)
	(or	(building-type-count-total mill == 1)
		(and	(building-type-count-total mill == 2)
			(building-type-count-total farm > 23)))
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mill)
)

(defrule
	(goal gl-TC-lost NO)
	(or	(and	(goal gl-advanced-infantry heavy-swordsmen)
			(building-type-count-total barracks < 3))
		(and	(goal gl-advanced-infantry pikemen)
			(or	(building-type-count-total town-center > 2)
				(goal gl-nothing-style-map YES))))
	(nand	(building-type-count-total barracks > 0)
		(building-type-count town-center < 2))
	(building-type-count-total barracks < 6)
=>
	(up-modify-goal gl-barracks-build-priority c:max 984)
)

#load-if-not-defined MIGRATION-MAP
(defrule
	(goal gl-TC-lost NO)
	(up-compare-goal gl-current-age >= gv-feudal)
	(goal gl-strategy-class basic-class)
	(strategic-number sn-allow-resource-spending > 0)
	(or	(building-type-count-total barracks < 1)
		(up-compare-goal gl-enable-pikemen >= 2))
	(or	(and	(up-compare-goal gl-enemy-heavy-cavalry-count > 4)
			(up-compare-goal gl-my-villager-count-total > 47))
		(and	(goal gl-advanced-infantry heavy-swordsmen)
			(town-under-attack)))
	(building-type-count-total barracks < barrackses-vs-knights); 2 for non-turks
=>
	(up-modify-goal gl-barracks-build-priority c:max 984)
)
#end-if
#load-if-defined TURKISH-CIV
(defrule
	(or	(goal gl-TC-lost YES)
		(building-type-count-total stable > 5))
=>
	(up-jump-rule 2)
)

(defrule
	(goal gl-strategy turkish-fast-imp)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(or	(and	(players-unit-type-count focus-player monk > 3)
			(building-type-count-total stable < 1))
		(or	(players-unit-type-count focus-player monk > 6)
			(game-time > 3600)))
	(building-type-count-total stable < 2)
=>
	(up-modify-goal gl-stable-build-priority c:max 983)
)

(defrule
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(strategic-number sn-allow-resource-spending > 0)
	(up-compare-goal gl-enemy-cavalry-count > 4)
	(or	(building-type-count-total stable < 3)
		(and	(up-compare-goal gl-enemy-heavy-cavalry-count > 9)
			(strategic-number sn-allow-resource-spending > 3)))
	(building-type-count-total stable < 6)
	(or	(and	(up-compare-goal gl-my-villager-count-total > 90)
			(strategic-number sn-allow-resource-spending > 2))
		(building-type-count-total stable < 1))
=>
	(up-modify-goal gl-stable-build-priority c:max 983)
)
#end-if

(defrule
	(or	(and	(goal gl-eagles heavy-eagles)
			(or	(research-completed ri-plate-mail)
				(goal gl-strategy default)))
		(and	(goal gl-advanced-infantry heavy-swordsmen)
			(up-compare-goal gl-my-villager-count-total > 95)))
	(up-compare-goal gl-my-villager-count-total > 55)
	(or	(building-type-count-total barracks < 6)
		(civilian-population > 115))
	(building-type-count-total barracks < 9)
=>
	(up-modify-goal gl-barracks-build-priority c:max 982)
)

#load-if-not-defined MIGRATION-MAP
(defrule
	(up-compare-goal gl-current-age <= gv-feudal)
	(up-compare-goal gl-strategy-type >= FC)
=>
	(up-jump-rule 1)
)

(defrule
	(goal gl-TC-lost NO)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(building-type-count-total barracks < 2)
	(or	(and	(goal gl-advanced-trash YES)
			(goal gl-enemy-strategy KNIGHT-RUSH))
		(and	(players-unit-type-count focus-player monk > 5)
			(and	(not	(building-available stable))
				(building-type-count-total barracks < 1))))
=>
	(up-modify-goal gl-barracks-build-priority c:max 982)
)
#end-if

(defrule
	(or	(up-compare-goal gl-my-villager-count-total > 40)
		(and	(or	(game-time > 1200)
				(and	(game-time > 360)
					(death-match-game)))
			(up-compare-goal gl-my-villager-count-total >= imperial-villager-cap)))
	(resource-found wood)
=>
	(enable-timer 8 0)
	(disable-self)
)

(defrule
	(goal gl-feudal-archery pure-archers)
	(building-type-count-total archery-range > 2)
	(up-compare-goal gl-soldier-percentage >= 80)
	(game-time > 1080)
	(building-type-count-total lumber-camp > 2)
	(building-type-count-total mining-camp == 1)
	(building-type-count mining-camp == 1)
	(can-build mining-camp)
=>
	(set-strategic-number sn-dropsite-separation-distance 2)
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(up-set-placement-data my-player-number mining-camp c: 0)
	(set-strategic-number sn-placement-zone-size 6)
	(up-build place-control 0 c: mining-camp)
	(disable-self); No looping forced placement at same position
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(building-type-count-total archery-range > 2)
	(game-time > 900)
	(building-type-count-total lumber-camp > 1)
	(building-type-count-total mining-camp == 1)
	(building-type-count mining-camp == 1)
	(can-build mining-camp)
=>
	(set-strategic-number sn-dropsite-separation-distance 2)
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(up-set-placement-data my-player-number mining-camp c: 0)
	(set-strategic-number sn-placement-zone-size 6)
	(up-build place-control 0 c: mining-camp)
	(disable-self)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(goal gl-strategy default)
	(wood-amount > 350)
	(civilian-population > 35)
	(up-compare-goal threat-time > 10000)
	(unit-type-count villager-gold > 2)
	(building-type-count-total lumber-camp > 3)
	(building-type-count-total mining-camp == 1)
	(building-type-count mining-camp == 1)
	(can-build mining-camp)
=>
	(set-strategic-number sn-dropsite-separation-distance 2)
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(up-set-placement-data my-player-number mining-camp c: 0)
	(set-strategic-number sn-placement-zone-size 6)
	(up-build place-control 0 c: mining-camp)
	(disable-self)
)

(defrule
	(or	(goal gl-strategy-class basic-class)
		(goal gl-eew-strategy-type boom))
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count-total town-center < preferred-TC-number)
	(strategic-number sn-stone-gatherer-percentage < 4)
	(or	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
		(stone-amount < 100))
	(stone-amount < 200)
	(or	(building-type-count-total town-center < 2)
		(stone-amount < 100))
	(building-type-count-total town-center < 3)
=>
	(set-strategic-number sn-stone-gatherer-percentage 7)
)

(defrule
	(or	(goal gl-strategy-class basic-class)
		(goal gl-eew-strategy-type boom))
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(goal CASTLE 0)
	(or	(stone-amount >= 200)
		(and	(stone-amount >= 100)
			(building-type-count-total town-center > 1)))
	(strategic-number sn-stone-gatherer-percentage == 7)
=>
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(up-retask-gatherers stone c: 6)
)

(defrule
	(or	(dropsite-min-distance stone == -1)
		(dropsite-min-distance stone == 255))
	(or	(dropsite-min-distance gold == -1)
		(dropsite-min-distance gold == 255))
=>
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(cc-players-unit-type-count 0 stone-mine > 0)
	(or	(and	(strategic-number sn-stone-gatherer-percentage > 0)
			(dropsite-min-distance stone > 3))
		(and	(building-type-count-total town-center > 2)
			(and	(game-time > 1800); 1600
				(strategic-number sn-mining-camp-max-distance >= 40))))
	(building-type-count-total mining-camp < relative-5-camps)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(build mining-camp)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(game-time > 1600)
	(strategic-number sn-mining-camp-max-distance >= 40)
	(building-type-count town-center > 0)
	(cc-players-unit-type-count 0 stone-mine > 0)
	(up-compare-goal gl-my-villager-count-total > 85)
	(or	(building-type-count-total mining-camp < 3)
		(and	(building-type-count town-center > 2)
			(soldier-count > 17)))
	(building-type-count-total mining-camp < relative-5-camps)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(build mining-camp)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(game-time > 1500)
	(or	(building-type-count-total mining-camp < 4)
		(game-time > 1800))
	(building-type-count-total mining-camp < relative-6-camps)
	(resource-found gold)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
)

#load-if-not-defined UP-MICHI-STYLE
(defrule
	(or	(building-type-count town-center == 0)
		(and	(up-compare-goal gl-my-villager-count > 34)
			(and	(food-amount >= 140)
				(and	(wood-amount < 110)
					(research-available ri-wheel-barrow)))))
=>
	(up-jump-rule 12)
)

(defrule
	(goal gl-strategy default)
	(game-time < 1200)
	(or	(up-compare-goal gl-current-age >= gv-castle)
		(and	(goal gl-current-age gv-feudal)
			(and	(building-type-count-total archery-range < 2)
				(and	(or	(or	(goal gl-feudal-infantry 0)
							(current-age-time > 60))
						(building-type-count-total archery-range < 1))
					(up-compare-goal gl-feudal-archery > 0)))))
=>
	(up-jump-rule 11)
)

(defrule
	(goal gl-strategy default)
	(goal gl-current-age gv-feudal)
	(building-type-count-total farm > 12)
	(wood-amount < 210)
	(or	(building-type-count-total blacksmith < 1)
		(and	(gold-amount < 200)
			(and	(food-amount > 1100)
				(building-type-count-total market < 1))))
=>
	(up-jump-rule 10)
)

(defrule
	(goal gl-strategy flush)
	(up-compare-goal gl-feudal-archery != pure-archers)
	(goal gl-current-age gv-feudal)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(wood-amount >= 90)
	(building-type-count-total farm < 10); Rather get farms up than build too early blacksmith
	(building-type-count-total archery-range > 0)
	(or	(building-type-count-total archery-range > 1)
		(goal gl-feudal-infantry men-at-arms))
	(unit-type-count villager-hunter == 0)
	(unit-type-count villager-shepherd == 0)
	(up-gaia-type-count c: forage-class < 3)
=>
	(set-goal gl-farming 1)
)

(defrule
	(goal gl-feudal-infantry men-at-arms)
	(goal gl-current-age gv-feudal)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(building-type-count-total farm < 8)
	(nand	(food-amount >= 175)
		(and	(research-available ri-wheel-barrow)
			(and	(up-compare-goal gl-my-villager-count > 30)
				(wood-amount < 110))))
=>
	(set-goal gl-farming 1)
)

(defrule
	(goal gl-strategy turkish-fast-imp)
	(building-type-count town-center > 0)
	(or	(up-compare-goal gl-current-age >= gv-feudal-up)
		(and	(building-type-count-total farm < 7)
			(building-type-count-total blacksmith > 0)))
	(or	(wood-amount > 235)
		(building-type-count-total farm < 9))
	(building-type-count-total farm g:< gl-max-farm-count)
=>
	(set-goal gl-farming 1)
)

(defrule
	(or	(up-compare-goal gl-current-age != gv-feudal)
		(strategic-number sn-minimum-water-body-size-for-dock != land-map-style))
=>
	(up-jump-rule 1)
)

(defrule
	(goal gl-strategy-type basic-flush)
	(current-age-time > 5)
	(or	(research-completed ri-horse-collar)
		(current-age-time > 30))
	(or	(building-type-count-total farm g:< gl-max-farm-count)
		(and	(building-type-count-total farm < 8)
			(or	(and	(building-type-count-total blacksmith > 0)
					(building-type-count-total farm < 6))
				(up-pending-objects c: archery-class > 2))))
=>
	(set-goal gl-farming 1)
)

(defrule
	(goal gl-strategy-type basic-flush)
	(current-age == feudal-age)
	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
	(building-type-count-total farm g:< gl-max-farm-count)
	(or	(building-type-count-total barracks >= up-building-count)
		(goal gl-strategy sling))
	(or	(building-type-count-total stable > 0)
		(or	(building-type-count-total archery-range > 1)
			(or	(goal gl-feudal-infantry men-at-arms)
				(goal gl-strategy sling))))
=>
	(set-goal gl-farming 1)
)

(defrule
	(current-age == feudal-age)
	(building-type-count town-center > 0)
	(game-time > 1200)
	(up-compare-goal gl-my-villager-count < 25)
	(or	(building-type-count-total farm g:< gl-max-farm-count)
		(building-type-count-total farm < 5))
=>
	(set-goal gl-farming 1)
)

(defrule
	(or	(up-compare-goal gl-current-age != gv-feudal)
		(or	(and	(unit-type-count villager-food > 11)
				(up-compare-goal gl-total-food-amount > 680))
			(and	(unit-type-count villager-food > 5)
				(up-compare-goal gl-total-food-amount > 750))))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-strategy-type >= FC)
	(or	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
		(or	(up-compare-goal gl-total-food-amount < 600)
			(unit-type-count villager-food < 7)))
	(up-compare-goal gl-total-food-amount < 800)
	(building-type-count-total farm g:< gl-max-farm-count)
	(building-type-count-total blacksmith > 0)
	(or	(building-type-count-total market > 0)
		(or	(building-type-count-total stable > 0)
			(building-type-count-total archery-range > 0)))
=>
	(set-goal gl-farming 1)
)

#load-if-not-defined FEUDAL-AGE-START
(defrule
	(or	(goal gl-strategy-class basic-class)
		(and	(building-type-count-total farm < 6)
			(up-compare-goal gl-strategy-type >= FC)))
	(nand	(building-type-count-total blacksmith == 0)
		(up-compare-goal gl-strategy-type >= FC))
	(goal DOCK 0)
	(up-compare-goal gl-current-age >= gv-feudal)
	(current-age-time g:> gl-current-age-time-for-farms)
	(building-type-count-total farm g:< gl-max-farm-count)
=>
	(set-goal gl-farming 1)
)

(defrule
	(or	(goal gl-strategy-class basic-class)
		(and	(building-type-count-total farm < 6)
			(up-compare-goal gl-strategy-type >= FC)))
	(goal gl-current-age gv-feudal-up)
	(research-completed ri-horse-collar)
	(building-type-count-total farm g:< gl-max-farm-count)
=>
	(set-goal gl-farming 1)
)
#else
(defrule
	(or	(goal gl-strategy-class basic-class)
		(and	(building-type-count-total farm < 6)
			(up-compare-goal gl-strategy-type >= FC)))
	(goal DOCK 0)
	(current-age == feudal-age)
	(up-compare-goal gl-current-age >= gv-feudal)
	(current-age-time > 150)
	(idle-farm-count < 1)
	(building-type-count-total farm < 8)
=>
	(set-goal gl-farming 1)
)
#end-if

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(building-type-count-total farm < 8)
		(or	(or	(up-research-status c: ri-bodkin-arrow < research-pending)
				(up-research-status c: first-main-ranged-unit-upgrade < research-pending))
			(or	(building-type-count-total town-center > 1)
				(goal gl-enemy-strategy KNIGHT-RUSH))))
	(building-type-count-total farm g:< gl-max-farm-count)
=>
	(set-goal gl-farming 1)
)
#else
(defrule
	(goal gl-strategy michi-boom)
	(goal gl-current-age gv-castle)
	(building-type-count-total farm > 30)
	(civilian-population > 80)
	(food-amount > 300)
	(or	(food-amount > 500)
		(civilian-population > 90))
	(wood-amount < 260)
	(or	(building-type-count-total siege-workshop < 1)
		(building-type-count-total monastery < 1))
	(building-type-count-total town-center >= michi-TCs)
=>
	(up-jump-rule 2)
)

(defrule
	(goal gl-strategy michi-boom)
	(goal gl-current-age gv-castle)
	(building-type-count-total farm > 16)
	(or	(building-type-count-total town-center == 3)
		(building-type-count-total farm > 22))
	(building-type-count-total town-center <= 4)
	(stone-amount >= 80)
	(wood-amount < 335)
	(building-type-count-total town-center < michi-TCs)
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(goal gl-current-age gv-castle)
		(and	(goal gl-resources-on-map regular)
			(research-completed ri-horse-collar)))
	(building-type-count-total farm g:< gl-max-farm-count)
	(up-pending-objects c: farm < 3)
	(current-age-time > 8)
	(up-research-status c: ri-heavy-plow != research-pending)
	(nand	(up-compare-goal gl-my-villager-count > 125)
		(building-type-count-total siege-workshop < 1))
=>
	(set-goal gl-farming 1)
)
#end-if

; ======== BUILDINGS - CASTLE

(defrule
	(goal gl-strategy default)
	(or	(game-time > 2100)
		(and	(building-type-count-total town-center > 2)
			(starting-age != dark-age)))
	(or	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
		(game-time > 3000))
	(building-type-count-total farm g:< gl-max-farm-count)
	(building-type-count town-center > 0)
	(or	(research-completed ri-heavy-plow)
		(food-amount < 125))
=>
	(set-goal gl-farming 1)
)
#end-if; Wonder Race

(load "Barbarian\MonksAndTrebs")
#end-if; DM
(load "Barbarian\MIX")
#load-if-not-defined DEATH-MATCH
#load-if-not-defined WONDER-RACE
(defrule
	(or	(dropsite-min-distance stone > 5)
		(dropsite-min-distance stone == -1))
	(or	(gold-amount < 1500)
		(or	(food-amount < 1500)
			(wood-amount < 1500)))
=>
	(up-jump-rule 1)
)

(defrule
	(game-time > 3000)
	(goal MILITARY 1)
	(or	(unit-type-count-total trade-cart > 8)
		(and	(strategic-number sn-allow-resource-spending > 5)
			(and	(gold-amount > 600)
				(food-amount > 1100))))
	(building-type-count-total castle > 0)
	(or	(goal CASTLE 0)
		(building-type-count-total castle > 2))
	(can-research ri-bombard-tower)
=>
	(research ri-bombard-tower)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(game-time > 3000)
	(game-time g:> gl-trade-tower-time)
	(or	(goal CASTLE 0)
		(building-type-count-total castle > 2))
	(building-type-count-total castle > 0)
	(unit-type-count-total trade-cart > 35)
	(building-type-count-total bombard-tower < 7)
	(can-build bombard-tower)
=>
	(up-set-placement-data my-player-number trade-cart c: 2)
	(up-build place-control 0 c: bombard-tower)
	(up-get-fact game-time 0 gl-trade-tower-time)
	(up-modify-goal gl-trade-tower-time c:+ 300)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(game-time > 3000)
	(up-compare-goal MILITARY != 1)
	(or	(goal CASTLE 0)
		(building-type-count-total castle > 2))
	(building-type-count-total castle > 0)
	(or	(unit-type-count-total trade-cart > 9)
		(and	(gold-amount > 500)
			(strategic-number sn-allow-resource-spending > 5)))
	(building-type-count-total bombard-tower < 7)
	(can-build bombard-tower)
=>
	(up-set-placement-data my-player-number -1 g: gl-my-town-size)
	(up-build place-control 0 c: bombard-tower)
)

#load-if-defined TURKISH-CIV
(defrule
	(building-type-count-total bombard-tower > 7)
	(research-available my-unique-research)
=>
	(up-jump-rule 2)
)
#end-if

(defrule
	(game-time > 2400)
	(up-compare-goal TSA >= 1)
	(unit-type-count-total unpacked-trebuchet > 0)
	(building-type-count-total castle > 0)
	(or	(goal CASTLE 0)
		(building-type-count-total castle > 2))
	(or	(unit-type-count-total trade-cart > 8)
		(and	(strategic-number sn-allow-resource-spending > 5)
			(gold-amount > 600)))
	(can-build bombard-tower)
=>
	(up-set-placement-data my-player-number unpacked-trebuchet c: 2)
	(up-build place-control 0 c: bombard-tower)
)

(defrule
	(game-time > 2400)
	(up-compare-goal TSA >= 1)
	(up-pending-objects c: bombard-tower < 2)
	(unit-type-count-total unpacked-trebuchet == 0)
	(building-type-count-total castle > 0)
	(or	(goal CASTLE 0)
		(building-type-count-total castle > 2))
	(or	(unit-type-count-total trade-cart > 8)
		(and	(strategic-number sn-allow-resource-spending > 5)
			(gold-amount > 600)))
	(can-build bombard-tower)
=>
	(set-strategic-number sn-placement-zone-size 20); Spread towers a bit so we can control a larger area
	(up-build place-forward 0 c: bombard-tower)
)

(defrule
	(or	(goal gl-strategy-class basic-class)
		(goal gl-eew-strategy-type boom))
	(current-age >= castle-age)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(strategic-number sn-stone-gatherer-percentage == 0)
	(game-time > stone-for-castle-time)
	(or	(current-age-time > 600)
		(or	(up-compare-goal gl-current-age >= gv-castle-up)
			(game-time > 2000)))
	(building-type-count-total town-center > 2)
	(building-type-count-total castle < 1)
	(stone-amount < castle-stone)
=>
	(set-strategic-number sn-stone-gatherer-percentage high-stone-mining-percentage)
)

(defrule
	(or	(and	(strategic-number sn-stone-gatherer-percentage > 8)
			(building-type-count-total castle > 1))
		(and	(strategic-number sn-stone-gatherer-percentage == 0)
			(and	(goal gl-strategy-class basic-class)
				(or	(game-time > 3000)
					(up-compare-goal CASTLE != 0)))))
	(game-time > 1500)
=>
	(set-strategic-number sn-stone-gatherer-percentage 8)
	(disable-self)
)
#end-if

#load-if-not-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-compare-const gv-wonder-race == 0)
=>
	(up-jump-rule 2)
)

(defrule
	(building-type-count town-center > 0)
	(up-compare-goal gl-current-age >= gv-castle)
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(or	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-landing-style)
		(or	(building-type-count-total farm < 10); 9
			(or	(unit-type-count-total fishing-ship < 6)
				(or	(up-compare-goal gl-current-age >= gv-castle-up)
					(wood-amount > 350)))))
	(building-type-count-total farm g:< gl-max-farm-count)
=>
	(set-goal gl-farming 1)
)

(defrule
	(or	(and	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
			(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion))
		(up-compare-const gv-wonder-race == 1))
=>
	(up-jump-rule 2)
)

(defrule
	(building-type-count town-center > 0)
	(up-compare-goal gl-current-age >= gv-castle)
	(goal gl-strategy-class basic-class)
	(nand	(goal gl-eagles flush-counter-eagles)
		(building-type-count-total barracks < 1))
	(or	(up-pending-objects c: farm < 3)
		(and	(game-time > 2400)
			(wood-amount > 300)))
	(building-type-count-total farm g:< gl-max-farm-count)
=>
	(set-goal gl-farming 1)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(goal gl-strategy-class basic-class)
	(or	(and	(research-completed ri-heavy-plow)
			(building-type-count-total town-center > 2))
		(goal SLING 1))
	(research-completed ri-horse-collar)
	(building-type-count-total farm g:< gl-max-farm-count)
=>
	(set-goal gl-farming 1)
)

(defrule
	(up-compare-goal gl-migration-notice >= min-migration-progress)
	(or	(and	(unit-type-count-total trade-cart > 10)
			(and	(game-time > 3600)
				(goal MILITARY 1)))
		(and	(or	(building-type-count-total town-center >= michi-TCs)
				(civilian-population > 95))
			(or	(building-type-count-total siege-workshop < 1)
				(goal gl-advanced-archery scorpions))))
	(building-type-count-total siege-workshop < 5)
=>
	(up-modify-goal gl-workshop-build-priority c:max 981)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(up-compare-goal gv-wonder-race == 0)
	(or	(and	(current-age == imperial-age)
			(research-completed ri-heavy-plow))
		(goal gl-strategy scorpion-rush))
	(building-type-count-total farm g:< gl-max-farm-count)
=>
	(set-goal gl-farming 1)
)

#load-if-defined POPULATION-CAP-200
(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(up-compare-goal gv-wonder-race == 0)
	(up-compare-goal gl-my-villager-count > 80)
	(strategic-number sn-gold-gatherer-percentage > 19)
	(research-completed ri-heavy-plow)
	(up-pending-objects c: farm < 2)
	(wood-amount > 450)
	(or	(food-amount < 300)
		(wood-amount > 700))
	(or	(food-amount < 500)
		(wood-amount > 1100))
	(idle-farm-count < 15)
=>
	(set-goal gl-farming 1)
)
#end-if

#end-if

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(and	(civilian-population > 35)
			(soldier-count > 17))
		(and	(game-time > 1200)
			(or	(wood-amount > 400)
				(and	(wood-amount > 250)
					(civ-selected briton)))))
	(building-type-count-total archery-range > 2)
	(building-type-count-total town-center < 4)
=>
	(set-goal TC 1)
)

#load-if-defined TINY-MAP
(defrule
	(goal gl-strategy ranged-rush-strategy)
	(or	(and	(or	(and	(wood-amount > 300)
					(building-type-count-total archery-range > 2))
				(game-time > 1800))
			(game-time > 1500))
		(players-building-type-count target-player castle > 0))
	(building-type-count-total town-center < 4)
=>
	(set-goal TC 1)
	(disable-self)
)

(defrule
	(soldier-count > 35)
	(players-military-population every-enemy < 33)
	(or	(up-compare-goal gl-eew-strategy-type >= fast-imp)
		(or	(goal gl-strategy ranged-rush-strategy)
			(or	(goal gl-strategy turkish-fast-imp)
				(goal gl-strategy scorpion-rush))))
	(game-time > 1800)
	(building-type-count-total town-center < 4)
=>
	(set-goal TC 1)
	(disable-self)
)

(defrule
	(soldier-count > 50)
	(or	(players-military-population every-enemy < 48)
		(soldier-count > 70))
	(or	(up-compare-goal gl-eew-strategy-type >= fast-imp)
		(or	(goal gl-strategy ranged-rush-strategy)
			(or	(goal gl-strategy turkish-fast-imp)
				(goal gl-strategy scorpion-rush))))
	(building-type-count-total town-center < 4)
=>
	(set-goal TC 1)
	(disable-self)
)
#else
(defrule
	(or	(goal gl-strategy default)
		(or	(game-time < 1300)
			(and	(goal MILITARY 1)
				(and	(goal SLING 0)
					(and	(game-time < 1500)
						(up-compare-goal gl-military-percentage < 130))))))
=>
	(up-jump-rule 1)
)

(defrule
	(or	(goal gl-strategy scorpion-rush)
		(or	(goal gl-strategy ranged-rush-strategy)
			(and	(or	(goal gl-strategy turkish-fast-imp)
					(up-compare-goal gl-eew-strategy-type >= fast-imp))
				(soldier-count > 30))))
	(building-type-count-total town-center < 4)
=>
	(set-goal TC 1)
	(disable-self)
)
#end-if

(defrule
	(game-time > 600)
	(up-pending-objects c: town-center == 0)
	(strategic-number sn-town-center-placement != 0)
=>
	(set-strategic-number sn-town-center-placement 0)
)

(defrule
	(game-time < 2500)
=>
	(up-get-fact sn-maximum-town-size 0 gl-my-town-size)
)

(defrule
	(game-time < relative-gt-1800)
=>
	(set-goal gl-my-town-size min-added-tc-distance)
)

(defrule
	(game-time >= relative-gt-1800)
	(game-time < relative-gt-2100)
	(up-compare-goal gl-my-town-size >= 23)
=>
	(set-goal gl-my-town-size 23)
)

(defrule
	(game-time >= relative-gt-2100)
	(up-compare-goal gl-my-town-size >= 26)
=>
	(set-goal gl-my-town-size 26)
)

(defrule
	(map-type gold-rush)
	(up-compare-goal gl-max-coordinate-value > 144); Enough large map
	(game-time > 1500)
	(building-type-count-total town-center > 2)
	(can-build town-center)
=>
	(up-copy-point gl-point-x gl-position-center-x)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal)
	(up-modify-sn sn-mining-camp-max-distance g:= temporary-goal)
	(up-modify-sn sn-mining-camp-max-distance c:+ 15)
	(up-lerp-tiles gl-point-x gl-position-self-x c: 10)
	(up-set-target-point gl-point-x)
	(set-strategic-number sn-town-center-placement mining-camp)
	(set-strategic-number sn-placement-zone-size 30)
	(up-build place-point 0 c: town-center)
	(chat-to-player my-player-number "Town center (middle)")
	(disable-self)
)

(defrule
	(or	(and	(up-compare-const gv-nomad-style == 1)
			(game-time < 20))
		(or	(and	(up-compare-const gv-wonder-race == 1)
				(game-time > 600))
			(game-time < 8)))
=>
	(up-jump-rule 2)
)

(defrule
	(strategic-number sn-nomad-style-start == 1)
	(building-type-count-total town-center < 1)
	(can-build-with-escrow town-center)
	(game-time >= 8)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage stone 0)
	(release-escrow wood)
	(release-escrow stone)
	(up-modify-sn sn-lumber-camp-max-distance g:= gl-my-town-size)
	(set-strategic-number sn-town-center-placement lumber-camp)
	(up-build place-normal 0 c: town-center)
	(chat-to-player my-player-number new-TC-chat)
	(enable-timer 10 5)
)

(defrule
	(strategic-number sn-nomad-style-start != 1)
	(building-type-count-total town-center < 1)
	(can-build-with-escrow town-center)
=>
	(set-strategic-number sn-maximum-town-size 255)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage stone 0)
	(release-escrow wood)
	(release-escrow stone)
	(up-modify-sn sn-lumber-camp-max-distance g:= gl-my-town-size)
	(set-strategic-number sn-town-center-placement lumber-camp)
	(build town-center)
	(chat-to-player my-player-number new-TC-chat)
	(enable-timer 10 5)
)

#load-if-not-defined MIGRATION-MAP
#load-if-not-defined WONDER-RACE
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(current-age-time < 10)
	(goal gl-strategy default)
	(goal gl-current-age gv-castle)
	(or	(town-under-attack)
		(military-population g:< gl-toughest-fought-enemy-military))
=>
	(up-jump-rule 7)
	(set-strategic-number sn-allow-resource-spending 1)
)
#end-if

(defrule
	(civ-selected mayan)
	(goal SLING 3)
	(building-type-count-total town-center > 1)
	(or	(building-type-count-total town-center > 2)
		(and	(goal gl-current-age gv-castle)
			(goal gl-strategy castle-drop)))
=>
	(up-jump-rule 6)
)

(defrule
	(or	(building-type-count-total town-center >= preferred-TC-number)
		(or	(and	(up-compare-goal victory-time > 0)
				(and	(game-time < 900); 600
					(building-type-count-total town-center >= DTW-TC-number))); 2
			(or	(goal gl-wonder-assault YES)
				(and	(strategic-number sn-allow-resource-spending < 6)
					(and	(civilian-population > 95)
						(goal gl-strategy-class basic-class))))))
=>
	(up-jump-rule 5)
)

(defrule
	(or	(and	(or	(goal gl-strategy castle-drop)
				(goal gl-strategy gothic-boom))
			(and	(current-age-time < 300)
				(goal gl-current-age gv-castle)))
		(and	(up-compare-goal CASTLE != 0)
			(and	(stone-amount >= castle-stone)
				(stone-amount < 750))))
	(building-type-count-total castle == 0)
=>
	(up-jump-rule 4)
)

(defrule
	(or	(goal gl-strategy-class basic-class)
		(or	(goal gl-eew-strategy-type boom)
			(up-compare-goal TC >= 1)))
	(game-time > 1750)
	(can-build-with-escrow town-center)
=>
	(set-strategic-number sn-town-center-placement 0)
	(release-escrow wood)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-modify-sn sn-placement-zone-size g:= gl-my-maximum-town-size)
	(up-build place-control 0 c: town-center)
	(chat-to-player my-player-number TC-chat)
)

(defrule
	(or	(goal gl-strategy-class basic-class)
		(or	(and	(goal gl-eew-strategy-type boom)
				(building-type-count-total town-center == 1))
			(up-compare-goal TC >= 1)))
	(or	(building-type-count-total town-center == 1)
		(building-type-count-total town-center == 3))
	(can-build town-center)
=>
	(set-strategic-number sn-dropsite-separation-distance 2)
	(up-modify-sn sn-mining-camp-max-distance g:= gl-my-town-size)
	(set-strategic-number sn-town-center-placement mining-camp)
	(build town-center)
	(chat-to-player my-player-number TC-chat)
)

(defrule
	(or	(goal gl-strategy-class basic-class)
		(or	(goal gl-eew-strategy-type boom)
			(or	(goal gl-strategy eagle-rush)
				(up-compare-goal TC >= 1))))
	(building-type-count-total town-center == 2)
	(can-build town-center)
=>
	(set-strategic-number sn-dropsite-separation-distance 2)
	(up-modify-sn sn-lumber-camp-max-distance g:= gl-my-town-size)
	(set-strategic-number sn-town-center-placement lumber-camp)
	(build town-center)
	(chat-to-player my-player-number TC-chat)
)

(defrule
	(up-compare-goal gl-strategy != war-galley-rush)
	(up-compare-goal gl-strategy != fire-ship-rush)
	(building-type-count-total dock > 1)
	(building-type-count-total town-center < 4)
	(can-build town-center)
=>
	(up-modify-sn sn-lumber-camp-max-distance g:= gl-my-town-size)
	(set-strategic-number sn-town-center-placement lumber-camp)
	(build town-center)
	(chat-to-player my-player-number TC-chat)
)
#end-if
#end-if

#load-if-not-defined WONDER-RACE
#load-if-defined ISLANDS-MAP
(defrule
	(goal gl-strategy default)
	(game-time > 2300)
	(building-type-count town-center > 0)
	(building-type-count-total town-center < gv-preferred-TC-number)
	(can-build town-center)
=>
	(up-modify-sn sn-lumber-camp-max-distance g:= gl-my-town-size)
	(set-strategic-number sn-town-center-placement lumber-camp)
	(build town-center)
	(chat-to-player my-player-number TC-chat)
)
#end-if
#load-if-defined UP-MICHI-STYLE
(defrule
	(goal gl-strategy michi-boom)
	(building-type-count-total town-center < michi-TCs)
	(can-build-with-escrow town-center)
=>
	(release-escrow wood)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-modify-sn sn-placement-zone-size g:= gl-my-maximum-town-size)
	(up-build place-control 0 c: town-center)
)
#end-if

#load-if-defined BYZANTINE-CIV
(defrule
	(goal CASTLE 0)
	(goal gl-strategy default)
	(goal gl-advanced-trash YES)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(civilian-population > 90)
	(or	(wood-amount > 700)
		(strategic-number sn-allow-resource-spending > 5))
	(building-type-count-total siege-workshop < 4)
=>
	(up-modify-goal gl-workshop-build-priority c:max 979)
)
#end-if

#load-if-defined TURKISH-CIV
(defrule
	(goal gl-strategy default)
	(up-compare-goal gl-trade-unit-count-total > 20)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(strategic-number sn-allow-resource-spending > 5)
	(civilian-population > 90)
	(wood-amount > 700)
	(or	(wood-amount > 1000)
		(building-type-count-total siege-workshop < 3))
	(building-type-count-total siege-workshop < 4)
=>
	(up-modify-goal gl-workshop-build-priority c:max 979)
)
#end-if

(defrule
	(or	(and	(building-type-count-total siege-workshop < 1)
			(and	(goal gl-eew-strategy-type fast-imp)
				(game-time > 2070)))
		(and	(building-type-count-total town-center > 2)
			(or	(goal gl-advanced-archery scorpions)
				(and	(research-completed ri-onager)
					(game-time > 2100)))))
	(building-type-count-total siege-workshop < 3)
=>
	(up-modify-goal gl-workshop-build-priority c:max 979)
)

(defrule
	(up-compare-goal gl-migration-notice >= min-migration-progress)
	(or	(and	(goal gl-strategy-class basic-class)
			(and	(up-compare-goal gl-enemy-scorpion-count > 7)
				(building-type-count-total town-center > 1)))
		(and	(up-compare-goal gl-eew-strategy-type >= fast-imp)
			(and	(building-type-count-total siege-workshop < 1)
				(and	(building-type-count-total castle == 0)
					(game-time > 1320)))))
	(building-type-count-total siege-workshop < 2)
=>
	(up-modify-goal gl-workshop-build-priority c:max 979)
)

(defrule
	(or	(game-time < 960)
		(or	(building-type-count-total siege-workshop > 0)
			(or	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
				(up-compare-goal gl-migration-notice < min-migration-progress))))
=>
	(up-jump-rule 3)
)

(defrule
	(current-age-time > 5)
	(or	(and	(players-building-type-count target-player watch-tower > 0)
			(and	(goal MILITARY 1)
				(nand	(building-type-count-total town-center < preferred-TC-number)
					(building-type-count-total town-center < 3))))
		(and	(building-type-count-total monastery > 0)
			(goal gl-eew-strategy-type plain-fast-imp)))
=>
	(up-modify-goal gl-workshop-build-priority c:max 979)
)

(defrule
	(nand	(current-age-time < 600)
		(soldier-count < 35))
	(goal MILITARY 1)
	(nand	(or	(goal POSITION POCKET)
			(and	(players-building-type-count target-player castle == 0)
				(up-compare-goal SLING != 3)))
		(and	(building-type-count-total town-center < 3)
			(building-type-count-total town-center < preferred-TC-number)))
=>
	(up-modify-goal gl-workshop-build-priority c:max 979)
)

(defrule
	(or	(and	(building-type-count-total monastery > 0)
			(or	(goal gl-strategy turkish-fast-imp)
				(goal SLING 1)))
		(and	(goal MILITARY 1)
			(and	(players-building-type-count target-player castle > 0)
				(nand	(goal POSITION POCKET)
					(building-type-count-total town-center < 3)))))
=>
	(up-modify-goal gl-workshop-build-priority c:max 979)
)

(defrule
	(game-time > 300)
	(or	(and	(unit-type-count-total trade-cart > 25)
			(and	(civ-selected aztec)
				(strategic-number sn-allow-resource-spending > 5)))
		(or	(and	(goal gl-enemy-strategy CASTLE-DROP)
				(and	(building-type-count-total monastery < 1)
					(goal gl-rush-suitability-on-map VERY-LOW)))
			(goal gl-advanced-monastery monks)))
	(building-type-count-total monastery < 6)
=>
	(up-modify-goal gl-monastery-build-priority c:max 978)
)

(defrule
	(strategic-number sn-town-center-start == 1)
=>
	(up-modify-goal temporary-goal g:= gl-gathered-relics)
	(up-modify-goal temporary-goal c:+ 2)
	(up-modify-goal temporary-goal c:z/ 10)
	(up-modify-goal temporary-goal c:+ 1)
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-filter-include -1 -1 -1 on-mainland)
	(up-find-remote c: relic c: 5)
	(up-get-search-state gl-local-total)
	(up-modify-goal gl-sighted-relic-count g:= gl-remote-last)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)

(defrule
	(goal temporary-goal 1)
	(goal gl-remote-total 0)
	(nand	(food-amount >= maximum-castle-queue-food)
		(gold-amount >= maximum-castle-queue-gold))
	(or	(goal gl-enemy-heavy-cavalry-count 0)
		(or	(and	(up-compare-goal gl-military-percentage > 200)
				(players-current-age focus-player <= castle-age))
			(and	(up-compare-goal gl-military-percentage > 140)
				(civilian-population < 65))))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-strategy != michi-boom)
	(up-compare-goal gl-strategy != turkish-bombardment)
	(or	(and	(building-type-count-total monastery g:< temporary-goal)
			(or	(building-type-count-total town-center >= 3)
				(building-type-count-total town-center >= gv-preferred-TC-number)))
		(and	(building-type-count-total monastery < 3)
			(and	(up-compare-goal gl-enemy-elephant-count > 4)
				(civilian-population > 90))))
=>
	(up-modify-goal gl-monastery-build-priority c:max 978)
)

(defrule
	(game-time > 300)
	(or	(goal gl-strategy eew-strategy)
		(or	(goal gl-strategy turkish-fast-imp)
			(game-time > monastery-time)))
	(up-compare-goal gl-eagles != flush-counter-eagles)
	(nand	(strategic-number sn-enemy-flush-notice == 1)
		(building-type-count-total siege-workshop < 1))
	(building-type-count-total monastery < 1)
=>
	(up-modify-goal gl-monastery-build-priority c:max 978)
)

(defrule
	(current-age == castle-age)
	(civilian-population > 30)
	(soldier-count < 4)
	(up-compare-goal gl-strategy != saracen-heavy-krush)
	(up-compare-goal gl-enemy-units-in-town > 2)
	(or	(up-compare-goal gl-enemy-heavy-cavalry-count > 3)
		(up-compare-goal gl-enemy-huskarl-count > 3))
	(or	(building-type-count-total monastery < 1)
		(and	(civilian-population > 40)
			(building-type-count-total town-center > 1)))
	(building-type-count-total monastery < 2)
=>
	(up-modify-goal gl-monastery-build-priority c:max 10000)
)

(defrule
	(current-age == castle-age)
	(civilian-population > 30)
	(or	(players-unit-type-count focus-player cavalier > 3)
		(or	(players-unit-type-count focus-player paladin > 1)
			(and	(up-compare-goal gl-enemy-huskarl-count > 4)
				(soldier-count < 40))))
	(or	(building-type-count-total monastery < 1)
		(and	(civilian-population > 60)
			(building-type-count-total town-center > 2)))
	(building-type-count-total monastery < 2)
=>
	(up-modify-goal gl-monastery-build-priority c:max 10000)
)

(defrule
	(goal gl-monastery-build-priority 10000)
	(can-build-with-escrow monastery)
=>
	(release-escrow wood)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data my-player-number -1 c: -7)
	(up-modify-sn sn-placement-zone-size g:= gl-my-maximum-town-size)
	(up-build place-control 0 c: monastery)
)

(defrule
	(up-compare-goal gl-enable-skirmishers < 2)
=>
	(up-jump-rule 3)
)

(defrule
	(goal gl-strategy default)
	(up-compare-goal gl-current-age >= gv-castle)
	(civilian-population > 120)
	(research-completed ri-elite-skirmisher)
	(research-completed ri-bodkin-arrow)
	(up-compare-goal gl-trade-unit-count-total < 10)
	(unit-type-count elite-eagle-warrior < 5)
	(unit-type-count huskarl-line < 5)
	(or	(up-compare-goal gl-enemy-archery-count > 30)
		(up-compare-goal gl-enemy-gunpowder-count > 25))
	(building-type-count-total archery-range < 6)
=>
	(up-modify-goal gl-range-build-priority c:max 991)
)

(defrule
	(goal gl-strategy default)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(game-time > 1500)
	(civilian-population > 110)
	(or	(up-compare-goal gl-enemy-archery-count > 4)
		(up-compare-goal gl-enemy-spearman-count > 4))
	(or	(building-type-count-total archery-range < 2)
		(building-type-count town-center > 2))
	(building-type-count-total archery-range < 3)
=>
	(up-modify-goal gl-range-build-priority c:max 977)
)

(defrule
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-current-age >= gv-feudal)
	(or	(and	(game-time > 2700)
			(civilian-population > 74))
		(and	(building-type-count-total archery-range < 1)
			(goal gl-feudal-infantry men-at-arms)))
	(building-type-count-total archery-range < 3)
=>
	(up-modify-goal gl-range-build-priority c:max 969)
)

(defrule
	(or	(and	(goal gl-strategy turkish-fast-imp)
			(and	(building-type-count-total siege-workshop > 0)
				(building-type-count-total monastery > 0)))
		(or	(goal gl-advanced-archery heavy-cannoneers)
			(goal gl-advanced-archery medium-cannoneers)))
	(building-type-count-total barracks < one-value)
=>
	(up-modify-goal gl-barracks-build-priority c:max 976)
)

#load-if-defined TURKISH-CIV
(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(building-type-count-total farm g:< gl-max-farm-count)
	(goal gl-strategy turkish-fast-imp)
	(building-type-count-total monastery > 0)
	(building-type-count-total farm < 17)
	(nand	(building-type-count-total farm > 12)
		(up-compare-goal gl-fire-ship-count-total > 0))
	(nand	(food-amount > 670)
		(building-type-count-total siege-workshop < 1))
=>
	(set-goal gl-farming 1)
)
#end-if

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(goal gl-strategy turkish-fast-imp)
	(building-type-count-total archery-range > 1)
	(building-type-count-total mining-camp < 3)
	(dropsite-min-distance gold >= 0)
	(dropsite-min-distance gold < 255)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(build mining-camp)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(goal gl-strategy-class basic-class)
	(building-type-count town-center >= preferred-TC-number)
	(up-compare-goal gl-my-villager-count > 45)
	(or	(up-compare-goal gl-my-villager-count > 80)
		(and	(map-type islands)
			(game-time > 2000)))
	(building-type-count-total mining-camp < 3)
	(dropsite-min-distance gold >= 0)
	(dropsite-min-distance gold < 255)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(build mining-camp)
)

(defrule
	(up-pending-objects c: mining-camp < 1)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(cc-players-unit-type-count 0 gold-mine > 11)
	(dropsite-min-distance gold > 6)
	(dropsite-min-distance gold < 255)
	(building-type-count-total mining-camp < 12)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(build mining-camp)
)
#end-if

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(or	(current-age >= castle-age)
		(goal gl-feudal-archery skirmishers))
	(strategic-number sn-gold-gatherer-percentage > 0)
	(or	(building-type-count-total mining-camp < relative-8-camps)
		(wood-amount > 600))
	(building-type-count-total mining-camp < 16)
	(up-pending-objects c: mining-camp < 1)
	(dropsite-min-distance gold < 255)
	(dropsite-min-distance gold > 4)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(build mining-camp)
)

#load-if-not-defined WONDER-RACE
(defrule
	(or	(not	(can-build castle))
		(or	(and	(goal gl-strategy castle-push)
				(or	(goal MILITARY 1)
					(and	(game-time < 1300)
						(building-type-count-total castle < 1))))
			(or	(up-compare-goal gl-migration-notice < min-migration-progress)
				(goal gl-wonder-build-attempt-stage saving-resources))))
=>
	(up-jump-rule 12)
)

(defrule
	(up-compare-goal gl-trade-unit-count-total > 19)
	(building-available bombard-tower)
	(or	(goal gl-strategy default)
		(goal gl-strategy turkish-bombardment))
	(or	(military-population > 40)
		(building-type-count castle > 3))
	(building-type-count castle > 2)
	(or	(goal CASTLE 0)
		(building-type-count castle > 0))
=>
	(up-jump-rule 11)
)

(defrule
	(or	(up-compare-goal gl-strategy != castle-drop)
		(not	(map-type oasis)))
=>
	(up-jump-rule 1)
)

(defrule
	(game-time < 1320)
	(goal POSITION FLANK)
	(building-type-count-total castle < 1)
	(players-military-population target-player < 2)
	(can-build castle)
=>
	(up-set-target-point gl-position-center-x)
	(set-strategic-number sn-placement-zone-size 5)
	(up-build place-point 0 c: castle)
	(chat-to-player my-player-number "Special castle")
	(set-goal gl-castle-placed YES)
	(set-goal gl-castle-control placed-forward)
	(set-goal gl-controlled-forward-castle next-to-wall)
	(set-goal castle-dropped-timer 10)
	(set-goal gl-defensive-castle-placed YES)
	(set-goal gl-arena-forward YES)
	(up-jump-rule 9)
)

(defrule
	(game-time < 2100)
	(goal SLING 3)
	(building-type-count castle > 0)
	(building-type-count castle < 5)
	(can-build castle)
=>
	(up-set-target-point gl-position-self-x)
	(set-strategic-number sn-placement-zone-size 10)
	(up-build place-point 0 c: castle)
	(chat-to-player my-player-number "Special castle")
	(set-goal gl-castle-placed YES)
	(set-goal gl-castle-control placed-forward)
	(set-goal gl-controlled-forward-castle placed-forward)
	(set-goal castle-dropped-timer 10)
	(set-goal gl-defensive-castle-placed YES)
	(set-goal gl-arena-forward YES)
	(up-jump-rule 8)
)

(defrule
	(goal TSA 0)
	(or	(goal gl-strategy-type FI2)
		(goal gl-strategy castle-push))
	(goal gl-arena-forward YES)
	(building-type-count castle > 0)
	(can-build castle)
=>
	(set-strategic-number sn-placement-fail-delta 1)
	(up-set-placement-data my-player-number castle c: 0)
	(set-strategic-number sn-placement-zone-size 8)
	(up-build place-control 0 c: castle)
	(chat-to-player my-player-number castle-chat)
	(set-goal gl-castle-placed YES)
	(set-goal gl-castle-control YES)
	(set-goal castle-dropped-timer 10)
	(set-goal gl-defensive-castle-placed YES)
)

(defrule
	(map-type gold-rush)
	(game-time g:> gl-castle-build-time)
	(or	(goal MILITARY 1)
		(building-type-count castle > 0))
	(cc-players-unit-type-count 0 gold-mine > 15)
;	(can-build castle)
=>
	(set-strategic-number sn-placement-zone-size 30)
	(up-copy-point gl-point-x gl-position-center-x)
	(up-lerp-tiles gl-point-x gl-position-center-x c: 10)
	(up-set-target-point gl-point-x)
	(up-build place-point 0 c: castle)
;	(chat-to-player my-player-number "Castle (middle)")
	(set-goal gl-castle-placed YES)
	(set-goal gl-castle-control YES)
	(set-goal castle-dropped-timer 20)
	(set-goal gl-defensive-castle-placed YES)
	(up-modify-goal gl-castle-build-time c:+ 600)
)

(defrule
	(up-compare-goal MILITARY != 1)
	(up-compare-goal threat-time < 20000)
	(soldier-count < 25)
	(goal gl-strategy castle-drop)
	(game-time < 1500)
	(or	(up-compare-goal gl-rush-suitability-on-map <= LOW)
		(or	(goal POSITION POCKET)
			(and	(building-type-count watch-tower > 1)
				(unit-type-count 504 > 0))))
	(not	(player-human focus-player))
=>
	(up-jump-rule 1)
)

(defrule
	(or	(building-type-count-total castle == 2)
		(and	(goal TSA 0)
			(and	(up-compare-goal gl-enemy-units-in-town > 2)
				(soldier-count < 35))))
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-modify-sn sn-placement-zone-size g:= gl-my-maximum-town-size)
	(up-build place-control 0 c: castle)
	(chat-to-player my-player-number castle-chat)
	(set-goal gl-castle-placed YES)
	(set-goal gl-castle-control YES)
	(set-goal castle-dropped-timer 20)
	(set-goal gl-defensive-castle-placed YES)
)

(defrule
	(or	(strategic-number sn-percent-attack-soldiers == 0)
		(strategic-number sn-percent-building-cancellation == 100))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal TSA >= 1)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(building-type-count-total castle >= min-defensive-castles)
	(or	(building-type-count-total castle > 1)
		(goal CASTLE 0))
	(players-building-count any-enemy > 0)
	(can-build castle)
=>
	(up-build place-forward 0 c: castle)
	(chat-to-player my-player-number "Forward castle!")
	(set-goal gl-castle-placed placed-forward)
	(set-goal gl-castle-control placed-forward)
	(set-goal castle-dropped-timer 40)
	(set-goal gl-defensive-castle-placed NO)
)

(defrule
	(game-time < 1300)
	(goal gl-strategy-type FI2)
	(or	(goal MILITARY 1)
		(or	(nor	(up-compare-goal gl-target-player-distance < 30)
				(players-military-population focus-player > 1))
			(goal gl-castle-placed placed-forward)))
	(building-type-count-total castle > 0)
	(players-building-count any-enemy > 0)
=>
	(up-jump-rule 1)
)

(defrule
	(nand	(goal gl-strategy turtle-rush)
		(building-type-count-total castle < 1))
	(can-build castle)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data my-player-number -1 c: 10)
	(set-strategic-number sn-placement-zone-size 5)
	(up-build place-control 0 c: castle)
	(chat-to-player my-player-number castle-chat)
	(set-goal gl-castle-placed YES)
	(set-goal gl-castle-control YES)
	(set-goal castle-dropped-timer 10)
	(set-goal gl-defensive-castle-placed YES)
)

(defrule
	(or	(building-type-count-total town-center > 2)
		(building-type-count-total barracks < 2))
	(or	(goal CASTLE 1)
		(or	(goal CASTLE 4)
			(goal CASTLE 6)))
	(or	(building-type-count-total barracks < 3)
		(up-compare-goal gl-my-villager-count-total > 80))
	(building-type-count-total barracks < 6)
=>
	(up-modify-goal gl-barracks-build-priority c:max 974)
)

(defrule
	(goal gl-advanced-trash YES)
	(building-type-count-total town-center > 2)
	(or	(up-compare-goal gl-my-villager-count-total > 95)
		(up-compare-goal gl-my-villager-count-total >= difficulty-villager-cap))
	(up-compare-flag gl-flag != meso-civ-focus)
	(or	(building-type-count-total barracks < 3)
		(up-compare-goal gl-my-villager-count-total > 120))
	(building-type-count-total barracks < 8)
=>
	(up-modify-goal gl-barracks-build-priority c:max 974)
)


(defrule
	(goal gl-advanced-trash YES)
	(building-type-count-total town-center > 2)
	(or	(up-compare-goal gl-my-villager-count-total > 95)
		(up-compare-goal gl-my-villager-count-total >= difficulty-villager-cap))
	(wood-amount > 500)
	(soldier-count > 60)
	(strategic-number sn-allow-resource-spending > 5)
	(building-type-count-total barracks < 7)
=>
	(up-modify-goal gl-barracks-build-priority c:max 974)
)

(defrule
	(goal gl-current-age gv-castle)
	(or	(building-type-count-total monastery < 1)
		(or	(building-type-count-total primary-up-building < 1)
			(and	(building-type-count-total market < 1)
				(player-in-game any-ally))))
	(food-amount > 500)
	(gold-amount > 400)
	(building-type-count castle < 1)
	(civilian-population > 80)
=>
	(up-jump-rule 6)
)

(defrule
	(up-compare-goal gl-advanced-cavalry != 0)
	(or	(building-type-count-total stable < 1)
		(and	(building-type-count town-center > 2)
			(civilian-population > 60)))
	(or	(building-type-count-total stable < 2)
		(civilian-population > 75))
	(or	(building-type-count-total stable < 3)
		(civilian-population > 90))
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count-total stable < 4)
=>
	(up-modify-goal gl-stable-build-priority c:max 973)
)

(defrule
	(up-compare-goal gl-advanced-cavalry != 0)
	(building-type-count town-center > 0)
	(civilian-population > 115)
	(or	(building-type-count-total stable < 5)
		(or	(civilian-population > 125)
			(population > 185)))
	(or	(building-type-count-total stable < 7)
		(wood-amount > 700))
	(building-type-count-total stable < 10)
	(up-compare-goal gl-current-age >= gv-feudal-up)
=>
	(up-modify-goal gl-stable-build-priority c:max 973)
)

(defrule
	(building-type-count-total archery-range > 1)
	(or	(wood-amount < 450)
		(current-age-time < 5))
	(goal gl-safe-in-town YES)
	(building-type-count-total town-center < 3)
	(or	(players-military-population focus-player < 10)
		(or	(and	(up-compare-goal gl-target-player-distance > 90)
				(or	(up-compare-goal TSA >= 1)
					(up-compare-goal gl-enemy-units-in-town < 5)))
			(up-compare-goal gl-military-percentage > 170)))
=>
	(up-jump-rule 3)
)

(defrule
	(goal gl-advanced-trash YES)
	(building-type-count-total town-center > 1)
	(or	(and	(building-type-count-total town-center > 2)
			(up-compare-goal gl-my-villager-count-total > 90))
		(building-type-count-total archery-range < 3))
	(or	(building-type-count-total archery-range < 7)
		(civilian-population > 115))
	(or	(building-type-count-total archery-range < 10)
		(wood-amount > 1200))
	(building-type-count-total archery-range < 13)
=>
	(up-modify-goal gl-range-build-priority c:max 972)
)

(defrule
	(goal gl-advanced-archery main-ranged)
	(or	(building-type-count-total town-center > 1)
		(building-type-count-total archery-range < 2))
	(or	(building-type-count-total archery-range < 3)
		(up-compare-goal gl-my-villager-count-total > 90))
	(or	(building-type-count-total archery-range < 7)
		(civilian-population > 115))
	(building-type-count-total archery-range < 10)
=>
	(up-modify-goal gl-range-build-priority c:max 972)
)

(defrule
	(or	(goal gl-advanced-archery light-archers)
		(goal gl-advanced-archery CAs))
	(building-type-count-total archery-range < 2)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(building-type-count-total archery-range < 2)
		(up-compare-goal gl-my-villager-count-total > 60))
	(or	(building-type-count-total archery-range < 3)
		(building-type-count-total town-center > 2))
	(building-type-count-total archery-range < 4)
=>
	(up-modify-goal gl-range-build-priority c:max 972)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(nor	(research-completed ri-chemistry)
		(civ-selected turkish))
	(building-type-count-total university < 1)
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(or	(goal gl-advanced-archery heavy-cannoneers)
		(or	(and	(goal gl-advanced-archery light-cannoneers)
				(building-type-count-total archery-range < 3))
			(and	(goal gl-advanced-archery medium-cannoneers)
				(building-type-count-total archery-range < 5))))
	(or	(building-type-count-total archery-range < 3)
		(civilian-population > 110))
	(building-type-count-total archery-range < 8)
=>
	(up-modify-goal gl-range-build-priority c:max 972)
)

;(defrule
;	(not	(taunt-detected 1 53))
;	(or	(strategic-number sn-focus-player-number < 0)
;		(or	(not	(player-valid focus-player))
;			(or	(strategic-number sn-focus-player-number == my-player-number)
;				(stance-toward focus-player ally))))
;=>
;	(up-chat-data-to-all "!!! FOCUS PLAYER (%d) !!! (6)" s: sn-focus-player-number)
;)

(defrule
	(or	(goal RAM 1)
		(and	(goal gl-strategy eew-strategy)
			(or	(building-type-count-total town-center > 2)
				(and	(up-compare-goal gl-eew-strategy-type >= fast-imp)
					(and	(building-type-count-total dock > 1)
						(goal gl-current-age gv-castle))))))
	(building-type-count-total siege-workshop < 1)
=>
	(up-modify-goal gl-workshop-build-priority c:max 971)
)

(defrule
	(up-compare-goal gl-migration-notice >= min-migration-progress)
	(or	(and	(or	(soldier-count > 40)
				(and	(goal gl-strategy-class basic-class)
					(and	(up-compare-goal gl-current-age >= gv-castle-up)
						(soldier-count > 20))))
			(building-type-count-total town-center > 2))
		(and	(enemy-buildings-in-town)
			(up-compare-goal gl-target-player-distance < 25)))
	(building-type-count-total siege-workshop < 1)
=>
	(up-modify-goal gl-workshop-build-priority c:max 971)
)

(defrule
	(up-compare-goal gl-migration-notice >= min-migration-progress)
	(or	(enemy-buildings-in-town)
		(and	(or	(goal MILITARY 1)
				(wood-amount > 1000))
			(game-time > 3000)))
	(building-type-count-total town-center > 2)
	(building-type-count-total siege-workshop < 3)
	(population >= 180)
=>
	(up-modify-goal gl-workshop-build-priority c:max 971)
)

#load-if-not-defined UP-MICHI-STYLE
(defrule
	(game-time > 300)
	(building-type-count town-center > 0)
	(up-compare-goal gl-strategy != saracen-heavy-krush)
	(up-compare-goal gl-strategy != turkish-bombardment)
	(or	(building-type-count-total town-center >= gv-preferred-TC-number)
		(or	(and	(up-compare-goal gl-sighted-relic-count > 0)
				(up-compare-const gv-1-player-team == 1))
			(building-type-count-total town-center >= 3)))
	(up-compare-goal gl-migration-notice >= min-migration-progress)
	(building-type-count-total monastery < 1)
=>
	(up-modify-goal gl-monastery-build-priority c:max 970)
)
#else
(defrule
	(or	(building-type-count-total town-center >= michi-TCs)
		(goal gl-strategy default))
	(building-type-count-total town-center > 3)
	(building-type-count-total monastery < 1)
=>
	(up-modify-goal gl-monastery-build-priority c:max 970)
)
#end-if

#load-if-defined TURKISH-CIV
(defrule
	(game-time > 300)
	(goal gl-strategy turkish-fast-imp)
	(building-type-count-total archery-range > 1)
	(or	(building-type-count-total monastery == 0)
		(and	(up-compare-goal gl-enemy-heavy-cavalry-count > 0)
			(and	(building-type-count-total monastery == 1)
				(building-type-count-total archery-range > 2))))
=>
	(up-modify-goal gl-monastery-build-priority c:max 970)
)

(defrule
	(goal gl-strategy turkish-fast-imp)
	(or	(building-type-count-total archery-range < 3)
		(and	(up-compare-goal gl-my-villager-count-total > 50)
			(players-unit-type-count focus-player monk < 7)))
	(building-type-count-total archery-range < 5)
=>
	(up-modify-goal gl-range-build-priority c:max 969)
)
#end-if

#load-if-defined FEUDAL-AGE-END
(defrule
	(goal gl-strategy flush)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-my-villager-count-total > 55)
	(or	(building-type-count-total archery-range < 5)
		(up-compare-goal gl-my-villager-count-total > 80))
	(building-type-count-total archery-range < 10)
=>
	(up-modify-goal gl-range-build-priority c:max 969)
)

(defrule
	(goal gl-strategy flush)
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-goal gl-my-villager-count-total > 45)
	(or	(building-type-count-total barracks < 3)
		(up-compare-goal gl-my-villager-count-total > 65))
	(or	(building-type-count-total barracks < 4)
		(up-compare-goal gl-my-villager-count-total > 90))
	(building-type-count-total barracks < 10)
=>
	(up-modify-goal gl-barracks-build-priority c:max 968)
)
#end-if

(defrule
	(up-compare-goal gl-current-age > gv-dark-up)
	(or	(and	(building-type-count town-center > 1)
			(and	(or	(wood-amount > 700)
					(gold-amount > 1300))
				(game-time > 1800)))
		(building-type-count-total town-center >= 4))
	(building-type-count-total market < 1)
	(can-build market)
=>
	(set-strategic-number sn-placement-zone-size 5)
	(up-set-placement-data my-player-number -1 c: -10)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-build place-control 0 c: market)
)

(defrule
	(up-compare-goal gl-current-age > gv-dark-up)
	(or	(goal gl-strategy saracen-heavy-krush)
		(or	(goal gl-strategy eagle-rush)
			(or	(goal gl-strategy sling)
				(or	(goal gl-strategy ew-boom)
					(and	(game-time > 1500)
						(up-gaia-type-count c: gold < 8))))))
	(building-type-count-total market < 1)
=>
	(up-modify-goal gl-market-build-priority c:max 967)
)

#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined DEFEND-WONDER
(defrule
	(research-completed ri-chemistry)
	(up-research-status c: ri-murder-holes != research-available)
	(up-research-status c: ri-masonry != research-available)
	(up-research-status c: ri-architecture != research-available)
	(up-research-status c: ri-ballistics != research-available)
	(up-research-status c: ri-bombard-tower != research-available)
	(up-research-status c: ri-stonecutting != research-available)
	(up-research-status c: ri-siege-engineers != research-available)
	(or	(and	(building-type-count-total victory-building == 0)
			(players-building-type-count every-ally victory-building == 0))
		(building-type-count-total watch-tower == 0))
=>
	(up-jump-rule 11)
)

(defrule
	(or	(building-type-count-total university > 0)
		(and	(game-time < 2200)
			(or	(and	(goal gl-current-age gv-castle)
					(and	(goal gl-strategy-class basic-class)
						(and	(up-compare-goal gl-my-villager-count < 100)
							(up-compare-const navy-TCs > 1))))
				(or	(goal gl-strategy turkish-bombardment)
					(goal gl-strategy knight-boom)))))
=>
	(up-jump-rule 10)
)

(defrule
	(building-type-count town-center > 0)
	(or	(building-type-count town-center > 2)
		(and	(or	(wood-amount > 600)
				(unit-type-count-total galley-line > 37))
			(up-compare-const navy-TCs == 1)))
	(or	(unit-type-count-total galley-line > 10)
		(and	(goal gl-advanced-trash YES)
			(up-compare-goal gl-current-age >= gv-castle-up)))
	(game-time > 1500)
=>
	(up-modify-goal gl-university-build-priority c:max 966)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(goal gl-advanced-archery main-ranged)
	(unit-type-count main-ranged-unit > 28)
	(nand	(up-compare-goal gl-military-percentage > 180)
		(goal gl-current-age gv-castle))
	(civilian-population > 50)
	(players-current-age focus-player == castle-age)
	(up-compare-goal gl-enemy-cavalry-count > 12)
	(building-type-count town-center > 2)
	(up-compare-goal gl-current-age >= gv-castle)
=>
	(up-modify-goal gl-university-build-priority c:max 966)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(or	(unit-type-count archery-class > 25)
		(unit-type-count cavalry-archer-class > 25))
	(civilian-population > 100)
	(building-type-count-total town-center > 2)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(not	(up-pending-placement c: university))
	(building-type-count-total university < 1)
=>
	(up-modify-escrow wood c:max 200)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(or	(unit-type-count archery-class > 25)
		(or	(unit-type-count cavalry-archer-class > 25)
			(goal gl-strategy sling)))
	(civilian-population > 100)
	(building-type-count-total town-center > 2)
	(or	(up-compare-goal gl-current-age >= gv-castle-up)
		(goal gl-strategy sling))
	(can-build-with-escrow university)
=>
	(release-escrow wood)
	(up-modify-sn sn-placement-zone-size g:= gl-my-maximum-town-size)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: university)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(or	(and	(or	(unit-type-count archery-class > 8)
				(unit-type-count cavalry-archer-class > 8))
			(and	(building-type-count-total town-center > 2)
				(or	(up-compare-goal gl-current-age >= gv-castle-up)
					(strategic-number sn-allow-resource-spending > 2))))
		(and	(goal gl-strategy scorpion-rush)
			(up-compare-goal gl-current-age >= gv-castle-up)))
=>
	(up-modify-goal gl-university-build-priority c:max 966)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(or	(and	(or	(goal gl-advanced-archery heavy-cannoneers)
				(or	(goal gl-advanced-archery light-cannoneers)
					(goal gl-advanced-archery medium-cannoneers)))
			(not	(civ-selected turkish)))
		(strategic-number sn-allow-resource-spending > 2))
	(up-compare-goal gl-strategy != eew-strategy)
=>
	(up-modify-goal gl-university-build-priority c:max 966)
)

(defrule

	(goal gl-advanced-archery heavy-cannoneers)
	(strategic-number sn-allow-resource-spending > 1)
	(civilian-population > 60)
	(current-age == imperial-age)
	(building-available university)
	(nor	(up-pending-placement c: university)
		(research-completed ri-chemistry))
	(building-type-count-total university < 1)
=>
	(up-modify-escrow wood c:max 200)
)

(defrule
	(goal gl-advanced-archery heavy-cannoneers)
	(strategic-number sn-allow-resource-spending > 1)
	(civilian-population > 60)
	(current-age == imperial-age)
	(building-available university)
	(nor	(up-pending-placement c: university)
		(research-completed ri-chemistry))
	(building-type-count-total university < 1)
	(can-build-with-escrow university)
=>
	(release-escrow wood)
	(up-modify-sn sn-placement-zone-size g:= gl-my-maximum-town-size)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: university)
)

(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(current-age == imperial-age)
	(research-completed my-unique-research)
	(goal gl-strategy eew-strategy)
	(or	(and	(unit-type-count-total battering-ram-line > 3)
			(and	(goal MILITARY 1)
				(soldier-count > 40)))
		(game-time > 2700))
=>
	(up-modify-goal gl-university-build-priority c:max 966)
)

(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(goal gl-strategy ranged-rush-strategy)
	(building-type-count-total university == 0)
	(nand	(up-compare-goal TC >= 1)
		(and	(building-type-count-total town-center < 3)
			(stone-amount >= 100)))
	(up-compare-goal gl-my-villager-count > 60)
	(unit-type-count-total main-ranged-unit > 60)
=>
	(up-modify-goal gl-university-build-priority c:max 966)
)
#end-if
#end-if

; =============== FARM FUNCTION

(defrule
	(up-compare-flag gl-flag == manual-farms)
	(game-time > 2400)
=>
	(up-assign-builders c: farm c: 1)
	(up-modify-flag gl-flag c:- manual-farms)
)

(defrule
	(up-compare-flag gl-flag != manual-farms)
	(game-time > 2400)
=>
	(up-jump-rule 4)
)

(defrule
	(true)
=>
	(set-goal temporary-goal2 0)
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: farm c: 240)
	(up-remove-objects search-local object-data-tasks-count > 0)
	(up-remove-objects search-local object-data-index > 0)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-get-object-data object-data-id temporary-goal)
	(up-reset-search 1 1 1 1)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-target == farm-class)
	(up-remove-objects search-local object-data-id g:== gl-boar-lurer-id)
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-remove-objects search-local object-data-index > 0)
	(set-goal temporary-goal2 1)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-set-target-by-id g: temporary-goal)
=>
	(up-target-objects 1 action-default -1 -1)
	(up-get-fact game-time 0 gl-farm-builder-time)
	(up-modify-goal gl-farm-builder-time c:+ 4)
)

(defrule
	(goal temporary-goal2 0)
	(up-compare-goal gl-farm-builder-time >= 0)
	(game-time g:> gl-farm-builder-time)
=>
	(set-goal gl-farm-builder-time -1)
	(up-assign-builders c: farm c: 1)
	(up-modify-flag gl-flag c:- manual-farms)
)

(defrule
	(up-compare-goal gl-farm-function > 0)
	(goal gl-farming 1)
	(can-build farm)
=>
	(up-get-rule-id temporary-goal4)
	(up-modify-goal temporary-goal4 c:+ 1)
	(up-jump-direct g: gl-farm-function)
)

(defrule
	(up-compare-goal gl-farm-function > 0)
=>
	(up-jump-rule 26)
)

(defrule
	(true)
=>
	(up-get-rule-id gl-farm-function)
	(up-jump-rule 25)
	(disable-self)
)

(defrule
	(up-compare-goal TC >= 1)
	(stone-amount >= 100)
	(or	(up-pending-objects c: villager-class > 0)
		(or	(up-research-status c: ri-wheel-barrow == research-pending)
			(or	(up-research-status c: ri-hand-cart == research-pending)
				(food-amount >= 50))))
	(wood-amount < town-center-wood)
	(building-type-count-total farm > 10)
=>
	(set-goal gl-farming 0)
)

(defrule
	(game-time > 2100)
=>
	(up-jump-rule 6)
)

(defrule
	(goal gl-strategy eew-strategy)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(wood-amount < 235)
	(building-type-count-total farm > 30)
	(building-type-count-total barracks < 6)
=>
	(set-goal gl-farming 0)
)

(defrule
	(or	(and	(map-type migration)
			(and	(goal gl-current-age gv-feudal)
				(and	(wood-amount > 450)
					(building-type-count market > 0))))
		(and	(up-compare-const gv-baltic-style == 1)
			(unit-type-count villager-food < 5)))
	(up-compare-goal gl-total-food-amount < 650)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(map-type migration)
		(up-compare-const gv-baltic-style == 1))
	(game-time < 1200)
	(unit-type-count-total fishing-ship > 6)
	(or	(up-compare-goal gl-current-age < gv-feudal-up)
		(unit-type-count fishing-ship > 10))
	(up-compare-goal gl-strategy-type >= FC)
	(or	(building-type-count-total market < 1)
		(or	(building-type-count-total blacksmith < 1)
			(up-compare-const gv-baltic-style == 1)))
=>
	(set-goal gl-farming 0)
)

(defrule
	(goal gl-current-age gv-dark)
	(or	(goal gl-strategy castle-drop)
		(or	(up-compare-goal gl-strategy-type >= FI2)
			(or	(goal gl-eew-strategy-type fast-imp)
				(goal gl-strategy castle-push))))
	(up-compare-goal gl-total-food-amount > 420)
	(dropsite-min-distance stone > 4)
	(building-type-count-total mining-camp < 2)
	(building-type-count-total farm > 4)
	(unit-type-count villager-food > 10)
=>
	(set-goal gl-farming 0)
)

(defrule
	(goal gl-strategy-class basic-class)
	(goal gl-current-age gv-castle)
	(up-compare-goal gl-patrol-defence != patrol-on)
	(food-amount > 300)
	(wood-amount < 335)
	(population-cap >= 175)
	(goal SLING 0)
	(building-type-count-total farm > 12)
	(or	(building-type-count-total farm > 17)
		(building-type-count-total town-center < 2))
	(building-type-count-total town-center < 3)
=>
	(set-goal gl-farming 0)
)

(defrule
	(goal gl-strategy castle-drop)
	(goal gl-current-age gv-castle)
	(goal SLING 0)
	(food-amount > 100)
	(wood-amount < 335)
	(population-cap >= 175)
	(or	(up-compare-const uu-food-buffer == 0)
		(food-amount > 200))
	(unit-type-count villager-food > 7)
	(building-type-count-total farm > 5)
	(or	(building-type-count-total farm > 13)
		(building-type-count-total town-center < 2))
	(building-type-count-total town-center < 3)
=>
	(set-goal gl-farming 0)
)

(defrule
	(or	(game-time >= 2000)
		(and	(up-compare-goal gl-enemy-units-in-town > 1)
			(goal TSA 0)))
=>
	(up-modify-flag gl-flag c:+ last-mill-full)
	(up-jump-rule 14)
)

(defrule
	(true)
=>
	(set-goal temporary-goal2 town-center)
	(set-goal temporary-goal3 3)
	(set-goal gl-point3-x -1)
	(set-goal gl-point3-y 3)
	(set-goal gl-point4-x -3)
	(set-goal gl-point4-y 0)
	(up-copy-point gl-point5-x gl-point4-x)
	(up-copy-point gl-point6-x gl-point3-x)
	(set-goal temporary-goal7 7)
	(set-goal temporary-goal8 0)
	(set-goal temporary-goal9 7)
	(set-goal temporary-goal10 30)
	(up-modify-flag gl-flag c:+ last-mill-full)
)

(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(set-goal temporary-goal5 0)
	(set-goal gl-point2-x 0)
	(set-goal gl-point2-y 0)
	(up-full-reset-search)
	(up-find-local g: temporary-goal2 c: 4)
	(up-set-target-point gl-position-self-x)
	(up-remove-objects search-local object-data-distance g:> temporary-goal10)
	(up-clean-search search-local object-data-distance search-order-asc)
)

(defrule
	(up-set-target-object search-local g: temporary-goal)
=>
	(up-get-point position-object gl-point-x)
	(up-modify-goal gl-point-x g:+ temporary-goal3)
	(set-goal temporary-goal5 1)
)

(defrule
	(goal temporary-goal5 1)
	(up-can-build-line 0 gl-point-x c: farm)
=>
	(up-build-line gl-point-x gl-point-x c: farm)
	(set-goal gl-farming 0)
	(up-modify-flag gl-flag c:+ farm-dropped)
	(up-modify-flag gl-flag c:- last-mill-full)
	(up-modify-flag gl-flag c:+ manual-farms)
	(up-get-fact game-time 0 gl-farm-builder-time)
	(up-modify-goal gl-farm-builder-time c:+ 2)
	(up-assign-builders c: farm c: -1)
	(up-jump-rule 10)
)

(defrule
	(goal temporary-goal5 1)
	(up-compare-goal temporary-goal3 >= 5)
	(or	(goal gl-point2-x 3)
		(goal gl-point2-x -3))
	(or	(goal gl-point2-y 3)
		(goal gl-point2-y -3))
=>
	(up-copy-point gl-point2-x gl-point7-x)
	(up-modify-goal temporary-goal6 g:= gl-point7-x)
	(up-modify-goal gl-point7-x g:= gl-point7-y)
	(up-modify-goal gl-point7-x c:* -1)
	(up-modify-goal gl-point7-y g:= temporary-goal6)
	(up-jump-rule 3)
)

(defrule
	(goal temporary-goal5 1)
	(goal temporary-goal3 5)
	(nand	(goal gl-point2-x 0)
		(goal gl-point2-y 0))
	(up-compare-goal gl-point2-x != 1)
	(up-compare-goal gl-point2-x != -1)
	(up-compare-goal gl-point2-y != 1)
	(up-compare-goal gl-point2-y != -1)
=>
	(up-jump-rule 1)
)

(defrule
	(goal temporary-goal5 1)
	(or	(goal gl-point2-x 0)
		(or	(goal gl-point2-y 0)
			(goal temporary-goal2 mill)))
=>
	(up-copy-point gl-point2-x gl-point3-x)
	(up-modify-goal temporary-goal6 g:= gl-point3-x)
	(up-modify-goal gl-point3-x g:= gl-point3-y)
	(up-modify-goal gl-point3-x c:* -1)
	(up-modify-goal gl-point3-y g:= temporary-goal6)
	(up-jump-rule 1)
)

(defrule
	(goal temporary-goal5 1)
=>
	(up-copy-point gl-point2-x gl-point4-x)
	(up-modify-goal temporary-goal6 g:= gl-point4-x)
	(up-modify-goal gl-point4-x g:= gl-point4-y)
	(up-modify-goal gl-point4-x c:* -1)
	(up-modify-goal gl-point4-y g:= temporary-goal6)
)

(defrule
	(goal temporary-goal5 1)
	(up-compare-goal temporary-goal7 > 0)
=>
	(up-modify-goal temporary-goal7 c:- 1)
	(up-add-point gl-point-x gl-point2-x c: 1)
	(up-jump-rule -6)
)

(defrule
	(goal temporary-goal2 mill)
	(goal gl-point4-x 0)
	(goal gl-point4-y 0)
=>
	(set-goal temporary-goal3 2)
	(up-modify-goal gl-point-y c:+ 3)
	(set-goal gl-point3-x -6)
	(set-goal gl-point3-y -1)
	(set-goal gl-point4-x 1)
	(up-modify-goal temporary-goal7 g:= temporary-goal9)
	(up-jump-rule -7)
)

(defrule
	(up-set-target-object search-local g: temporary-goal)
=>
	(up-copy-point gl-point4-x gl-point5-x); for mills
	(up-copy-point gl-point3-x gl-point6-x)
	(up-copy-point gl-point7-x gl-temporary-point-x)
	(up-modify-goal temporary-goal c:+ 1)
	(set-goal temporary-goal5 0)
	(up-modify-goal temporary-goal7 g:= temporary-goal9)
	(up-jump-rule -9)
)

(defrule
	(goal temporary-goal3 3)
=>
	(set-goal temporary-goal2 mill)
	(set-goal temporary-goal3 2)
	(set-goal gl-point3-x -3)
	(set-goal gl-point3-y 2)
	(set-goal gl-point5-x 0)
	(set-goal gl-point5-y 0)
	(up-copy-point gl-point6-x gl-point3-x)
	(up-copy-point gl-point4-x gl-point5-x)
	(set-goal temporary-goal7 4)
	(set-goal temporary-goal9 4)
	(set-goal temporary-goal10 20)
	(up-modify-goal temporary-goal10 g:max gl-my-town-size)
	(up-modify-goal temporary-goal10 c:min 30)
	(up-jump-rule -11)
)

(defrule
	(goal temporary-goal3 2)
=>
	(set-goal temporary-goal2 town-center)
	(set-goal temporary-goal3 6)
	(set-goal gl-point3-x -1)
	(set-goal gl-point3-y 3)
	(set-goal gl-point5-x -3)
	(set-goal gl-point5-y 3)
	(set-goal gl-point7-x -3)
	(set-goal gl-point7-y 0)
	(up-copy-point gl-point6-x gl-point3-x)
	(up-copy-point gl-point4-x gl-point5-x)
	(up-copy-point gl-temporary-point-x gl-point7-x)
	(set-goal temporary-goal7 11)
	(set-goal temporary-goal9 11)
	(set-goal temporary-goal10 30)
	(up-jump-rule -12)
)

(defrule
	(goal temporary-goal3 6)
=>
	(set-goal temporary-goal2 mill)
	(set-goal temporary-goal3 5)
	(set-goal gl-point3-x 0)
	(set-goal gl-point3-y 3)
	(set-goal gl-point5-x -3)
	(set-goal gl-point5-y 3)
	(set-goal gl-point7-x -3)
	(set-goal gl-point7-y -1)
	(up-copy-point gl-point6-x gl-point3-x)
	(up-copy-point gl-point4-x gl-point5-x)
	(up-copy-point gl-temporary-point-x gl-point7-x)
	(set-goal temporary-goal10 20)
	(up-modify-goal temporary-goal10 g:max gl-my-town-size)
	(up-modify-goal temporary-goal10 c:min 30)
	(up-jump-rule -13)
)

(defrule
	(goal gl-farming 1)
	(strategic-number sn-farm-block == 0)
	(building-type-count town-center > 0)
	(nand	(building-type-count-total farm > 19)
		(and	(building-type-count-total town-center < 2)
			(building-type-count-total mill < 2)))
	(can-build farm)
=>
	(build farm)
	(up-modify-flag gl-flag c:+ farm-dropped)
)

(defrule
	(true)
=>
	(up-jump-direct g: temporary-goal4)
)

; ======== UNITS - ARMY

(defrule
	(goal gl-current-age gv-feudal)
	(nand	(unit-type-count-total militiaman-line > 2)
		(research-available ri-man-at-arms))
	(nand	(unit-type-count-total scout-cavalry-line > 4)
		(research-available ri-bloodlines))
	(nand	(up-compare-goal gl-my-villager-count > 36)
		(research-available ri-wheel-barrow))
	(strategic-number sn-age-up-castle != 1)
	(up-research-status c: ri-fletching >= research-pending)
=>
	(set-strategic-number sn-enable-training-queue 1)
)

(defrule
	(up-compare-goal gl-migration-notice >= min-migration-progress)
	(strategic-number sn-minimum-water-body-size-for-dock <= islands-map-water-style)
	(or	(and	(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
				(strategic-number sn-monk-trained != 1))
			(and	(unit-type-count-total monk-set < 1)
				(can-train monk)))
		(goal gl-my-villager-count 0))
	(can-train-with-escrow monk)
=>
	(release-escrow gold)
	(train monk)
	(set-strategic-number sn-monk-trained 1)
)

(defrule
	(or	(and	(up-compare-goal gl-population >= pop-to-full-pop-attack)
			(unit-type-count-total trebuchet-set < 4))
		(and	(unit-type-count-total battering-ram-line < 1)
			(and	(up-compare-goal gl-target-player-distance < 25)
				(enemy-buildings-in-town))))
	(unit-type-count-total battering-ram-line < 7)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)

(defrule
	(goal gl-current-age gv-castle)
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-military-percentage >= 200)
	(soldier-count > 27)
	(or	(strategic-number sn-percent-attack-soldiers == 0)
		(and	(goal TSA 1)
			(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)))
	(unit-type-count-total battering-ram-line < 4)
	(building-type-count town-center > 2)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)

(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
	(up-get-fact civilian-population 0 temporary-goal3)
	(up-get-target-fact civilian-population 0 temporary-goal4)
	(up-modify-goal temporary-goal3 g:- temporary-goal4)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(set-goal temporary-goal6 0)
)

#load-if-not-defined DEATH-MATCH
#load-if-defined POPULATION-CAP-200
#load-if-defined IMPERIAL-AGE-END
(defrule
	(or	(up-compare-goal gl-current-age >= gv-castle-up)
		(or	(up-compare-goal gl-current-age <= gv-feudal)
			(or	(up-compare-goal gl-strategy-class != basic-class)
				(goal gl-panic-xbow-counter YES))))
=>
	(up-jump-rule 6)
)

(defrule
	(goal gl-strategy default)
	(up-compare-goal gl-enemy-units-in-town < 5)
	(up-compare-goal gl-patrol-defence != patrol-on)
	(or	(up-compare-goal gl-soldier-percentage > 80)
		(game-time > 2300))
	(soldier-count > 30)
	(nand	(up-compare-goal TSA >= 1)
		(soldier-count < 40))
	(up-compare-goal gl-target-player-distance > 70)
	(or	(player-in-game any-ally)
		(up-compare-goal gl-target-player-distance > 110))
=>
	(set-goal temporary-goal 1)
)

(defrule
	(goal gl-strategy default)
	(up-compare-goal gl-soldier-percentage > 200)
	(soldier-count > 27)
	(or	(strategic-number sn-percent-attack-soldiers == 0)
		(and	(up-compare-goal TSA >= 1)
			(or	(soldier-count > 35)
				(unit-type-count-total cavalry-class > 17))))
=>
	(set-goal temporary-goal 1)
)

(defrule
	(goal gl-strategy default)
	(civilian-population > 85)
	(up-compare-goal gl-soldier-percentage > 125)
	(soldier-count > 40)
	(players-current-age focus-player == imperial-age)
	(up-compare-goal gl-patrol-defence != patrol-on)
	(up-compare-goal gl-enemy-units-in-town < 5)
	(goal TSA 0)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(or	(and	(goal gl-safe-in-town YES)
			(goal TSA 0))
		(up-compare-goal gl-soldier-percentage >= 160))
	(up-compare-goal gl-soldier-percentage >= 87)
	(military-population > 40)
	(or	(military-population > 60)
		(up-compare-goal gl-soldier-percentage >= 93))
	(or	(strategic-number sn-percent-attack-soldiers == 0)
		(up-compare-goal temporary-goal3 > -6)); Not too much behind in boom war
=>
	(set-goal temporary-goal 1)
)

(defrule
	(or	(civilian-population < 86)
		(and	(or	(and	(goal POSITION FLANK)
					(military-population g:>= gl-toughest-fought-enemy-military))
				(and	(up-compare-goal threat-time < 10000)
					(up-compare-goal gl-military-percentage < 120)))
			(up-compare-goal gl-target-player-distance < 80))); If we retarget far, no point going full army
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-target-player-distance > 35)
	(goal gl-gathering-inside NO)
	(goal TSA 0)
	(up-compare-goal gl-attacking-with-ally != YES)
	(up-compare-goal gl-defending-ally != YES)
	(or	(military-population > 30)
		(unit-type-count-total cavalry-class > 19))
=>
	(set-goal temporary-goal 1)
)

(defrule
	(up-compare-goal gl-population > almost-full-pop)
	(or	(and	(unit-type-count-total battering-ram-line < 5)
			(and	(unit-type-count-total trebuchet-set < 3)
				(up-compare-goal gl-population > pop-to-full-pop-attack)))
		(and	(unit-type-count-total transport-ship < relative-3-units)
			(and	(soldier-count > 2)
				(strategic-number sn-minimum-water-body-size-for-dock == islands-map-landing-style))))
=>
	(set-goal temporary-goal 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-compare-goal gl-panic-xbow-counter != YES)
	(goal gl-strategy-class basic-class)
	(or	(up-compare-goal gl-population > pop-to-full-pop-attack)
		(and	(population-cap <= 210)
			(military-population > 90)))
	(nand	(food-amount > 1600)
		(and	(wood-amount > 1000)
			(gold-amount > 500)))
	(civilian-population < 105)
	(military-population > 40)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(or	(and	(population-cap > 275)
			(gold-amount > 500))
		(or	(and	(up-compare-goal gl-trade-unit-count-total > 20)
				(up-compare-goal gl-population <= pop-space-for-trade))
			(and	(goal SLING 3)
				(game-time < 3000))))
=>
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-compare-goal gl-panic-xbow-counter != YES)
	(up-compare-goal gl-target-player-distance > 35)
	(up-compare-goal gl-population >= pop-space-for-trade)
	(or	(and	(players-building-type-count any-ally market > 0)
			(and	(building-type-count market > 0)
				(up-compare-goal gl-trade-unit-count-total < 35)))
		(and	(up-compare-goal gl-my-villager-count-total < 85)
			(food-amount < 1000)))
	(military-population > 40)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(goal gl-current-age gv-feudal)
	(players-current-age any-enemy >= castle-age)
	(game-time > 1800)
	(or	(soldier-count > 5)
		(civilian-population < 10))
	(up-compare-goal gl-my-villager-count > 0)
	(or	(civilian-population < 30)
		(military-population > 9))
=>
	(set-goal temporary-goal 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(goal gl-current-age gv-castle)
	(civilian-population > 65)
	(research-available imperial-age)
	(food-amount > 700)
	(gold-amount > 550)
	(or	(up-compare-goal TSA >= 1)
		(and	(up-compare-goal gl-enemy-units-in-town < 5)
			(up-compare-goal gl-patrol-defence != patrol-on)))
=>
	(set-goal temporary-goal 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(players-population any-ally > 150)
	(players-current-age any-ally == imperial-age)
	(players-current-age any-enemy == imperial-age)
	(game-time > 2880)
	(soldier-count > 5)
	(up-compare-goal gl-my-villager-count > 0)
	(or	(civilian-population < 60)
		(military-population > 15))
	(or	(civilian-population < 100)
		(military-population > 30))
	(up-compare-goal gl-current-age <= gv-castle)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(players-population any-ally > 150)
	(players-current-age any-ally == imperial-age)
	(players-current-age any-enemy == imperial-age)
	(up-compare-goal gl-defending-ally != YES)
	(up-compare-goal gl-patrol-defence != patrol-on)
	(up-compare-goal gl-target-player-distance > 80)
	(game-time > 2700)
	(up-compare-goal gl-enemy-units-in-town < 5)
	(up-compare-goal gl-my-villager-count > 0)
	(or	(civilian-population < 130)
		(military-population > 10))
	(up-compare-goal gl-current-age <= gv-castle)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(or	(and	(players-population any-ally > 150)
			(game-time > 2400))
		(game-time == 0))
	(up-compare-goal gl-my-villager-count > 0)
	(or	(civilian-population < 25)
		(soldier-count > 4))
	(or	(civilian-population < 35)
		(military-population > 8))
	(civilian-population < 50)
=>
	(set-goal temporary-goal 1)
)
#end-if
#end-if

(defrule
	(or	(or	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
			(and	(population > 270)
				(strategic-number sn-allow-resource-spending < 6)))
		(or	(goal gl-TC-lost YES)
			(or	(goal gl-cutter IN-PROGRESS)
				(or	(and	(building-type-count town-center == 0)
						(up-compare-goal gl-current-age >= gv-dark-up))
					(goal temporary-goal 1)))))
=>
	(up-jump-rule rules-to-be-jumped)
)

#load-if-defined BRITON-CIV
(defrule
	(goal gl-strategy default)
	(goal CASTLE 2)
	(strategic-number sn-allow-resource-spending > 5)
	(or	(up-compare-goal gl-trade-unit-count-total > 30)
		(gold-amount > 1000))
	(or	(players-unit-type-count focus-player battering-ram-line > 1)
		(players-unit-type-count target-player battering-ram-line > 1))
	(unit-type-count militiaman-line < 7)
	(unit-type-count-total mangonel-line < 5)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
#end-if

#load-if-not-defined TURKISH-CIV
(defrule
	(up-research-status c: ri-paladin < research-available)
	(up-research-status c: ri-onager >= research-available)
	(or	(up-compare-goal gl-enemy-scorpion-count > 2)
		(and	(civ-selected briton)
			(and	(goal gl-strategy default)
				(and	(up-compare-goal gl-enemy-skirmisher-count > 15)
					(and	(strategic-number sn-allow-resource-spending > 5)
						(unit-type-count militiaman-line < 5))))))
	(unit-type-count-total mangonel-line < 5)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
#else
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(or	(up-compare-goal gl-enemy-scorpion-count > 3)
		(and	(or	(up-compare-goal gl-enemy-onager-count > 2)
				(players-unit-type-count focus-player bombard-cannon > 4))
			(and	(unit-type-count-total bombard-cannon < 2)
				(up-compare-goal gl-trade-unit-count-total >= 40))))
	(or	(unit-type-count-total bombard-cannon < 5)
		(soldier-count > 65))
	(unit-type-count-total bombard-cannon < 8)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)
#else
(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(or	(unit-type-count-total trade-cart > 5)
		(gold-amount > 800))
	(soldier-count > 25)
	(or	(unit-type-count-total bombard-cannon < 5)
		(soldier-count > 45))
	(or	(unit-type-count-total bombard-cannon < 8)
		(gold-amount > 1200))
	(unit-type-count-total bombard-cannon < max-cannons)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)
#end-if

#end-if

#load-if-not-defined UP-MICHI-STYLE
#load-if-defined BLACK-FOREST-MAP
(defrule
	(game-time > 2400)
	(goal MILITARY 1)
	(goal gl-strategy-class basic-class)
	(unit-type-count-total trade-cart > 20)
	(strategic-number sn-allow-resource-spending > 5)
	(unit-type-count-total trebuchet-set < 4)
	(soldier-count > 45)
	(can-train trebuchet)
=>
	(train trebuchet)
)

#load-if-defined CELTIC-CIV
(defrule
	(goal gl-strategy-class basic-class)
	(nand	(goal MILITARY 1)
		(unit-type-count-total battering-ram-line < 4))
	(or	(goal MILITARY 1)
		(gold-amount > 650))
	(unit-type-count-total trade-cart > 15)
	(strategic-number sn-allow-resource-spending > 5)
	(soldier-count > 50)
	(unit-type-count-total mangonel-line < 6)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
#else
(defrule
	(goal gl-strategy default)
	(or	(and	(goal MILITARY 1)
			(and	(or	(player-in-game any-human-enemy)
					(gold-amount > 1200))
				(gold-amount > 600)))
		(up-compare-goal gl-enemy-onager-count > 2))
	(strategic-number sn-allow-resource-spending > 5)
	(unit-type-count-total trade-cart > 25)
	(soldier-count > 45)
	(unit-type-count-total bombard-cannon < 5)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)
#end-if
#end-if
(defrule
	(or	(and	(goal MILITARY 1)
			(and	(gold-amount > 1200)
				(and	(game-time > 3600)
					(up-compare-goal gl-trade-unit-count-total > 30))))
		(and	(up-compare-goal gl-enemy-onager-count > 2)
			(strategic-number sn-allow-resource-spending > 5)))
	(player-in-game any-human-enemy)
	(soldier-count > 15)
	(unit-type-count-total bombard-cannon < 3)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)
#end-if

#load-if-defined TURKISH-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(or	(map-type black-forest)
		(up-compare-const gv-michi-style == 1))
	(or	(unit-type-count-total trade-cart > 15)
		(gold-amount > 1200))
	(or	(soldier-count > 45)
		(up-compare-goal gl-population > almost-full-pop))
	(or	(unit-type-count-total bombard-cannon < 8)
		(gold-amount > 800))
	(unit-type-count-total bombard-cannon < max-cannons)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)

(defrule
	(goal gl-strategy default)
	(strategic-number sn-allow-resource-spending > 5)
	(or	(unit-type-count-total bombard-cannon < 5)
		(gold-amount > 700))
	(or	(up-compare-goal gl-trade-unit-count-total > 30)
		(gold-amount > 2000))
	(or	(up-compare-goal gl-enemy-scorpion-count > 4)
		(or	(up-compare-goal gl-enemy-onager-count > 1)
			(players-unit-type-count focus-player battering-ram-line > 8)))
	(unit-type-count-total bombard-cannon < max-cannons)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)

(defrule
	(goal gl-strategy default)
	(strategic-number sn-allow-resource-spending > 5)
	(or	(unit-type-count-total bombard-cannon < 3)
		(gold-amount > 700))
	(or	(up-compare-goal gl-trade-unit-count-total > 30)
		(gold-amount > 2000))
	(or	(up-compare-goal gl-enemy-archery-count > 10)
		(or	(players-unit-type-count focus-player bombard-cannon > 3)
			(up-compare-goal gl-enemy-gunpowder-count > 10)))
	(unit-type-count-total bombard-cannon < max-cannons)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)
#end-if

#load-if-defined PORTUGUESE-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(or	(map-type black-forest)
		(up-compare-const gv-michi-style == 1))
	(or	(unit-type-count-total trade-cart > 15)
		(gold-amount > 1200))
	(or	(soldier-count > 45)
		(up-compare-goal gl-population > almost-full-pop))
	(or	(unit-type-count-total bombard-cannon < 8)
		(gold-amount > 800))
	(unit-type-count-total bombard-cannon < max-cannons)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)

(defrule
	(goal gl-strategy default)
	(strategic-number sn-allow-resource-spending > 5)
	(or	(unit-type-count-total bombard-cannon < 5)
		(gold-amount > 800))
	(or	(up-compare-goal gl-trade-unit-count-total > 30)
		(gold-amount > 2000))
	(research-completed ri-arquebus)
	(unit-type-count-total bombard-cannon < max-cannons)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)
#end-if

(defrule
	(or	(goal threat-source warship-class)
		(up-compare-goal gl-target-navy-count > 4))
	(strategic-number sn-allow-resource-spending > 5)
	(military-population > 40)
	(unit-type-count-total bombard-cannon < 2)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)

(defrule
	(up-research-status c: ri-paladin < research-available)
	(up-research-status c: ri-onager <= research-available)
	(up-compare-goal gl-enemy-onager-count > 3)
	(strategic-number sn-allow-resource-spending > 5)
	(military-population > 40)
	(unit-type-count-total bombard-cannon < 3)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)

(defrule
	(game-time > 2400)
	(up-compare-const gv-handicap == 0)
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(goal MILITARY 1)
	(strategic-number sn-allow-resource-spending > 5)
	(or	(players-building-type-count target-player castle > 0)
		(players-building-type-count target-player stone-wall-line > 4))
	(unit-type-count trade-cart > 15)
	(player-in-game any-human-enemy)
	(unit-type-count-total trebuchet-set < 3)
	(soldier-count > 45)
	(can-train trebuchet)
=>
	(train trebuchet)
)

(defrule
	(game-time > 2400)
	(up-compare-const gv-handicap == 0)
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(or	(and	(or	(unit-type-count trade-cart > 20)
				(unit-type-count villager-gold > 20))
			(unit-type-count-total trebuchet-set < 4))
		(gold-amount > 3000))
	(players-building-type-count target-player bombard-tower > 0)
	(unit-type-count-total trebuchet-set < 7)
	(soldier-count > 45)
	(can-train trebuchet)
=>
	(train trebuchet)
)

(defrule
	(or	(and	(soldier-count < 10)
			(unit-type-count-total battering-ram-line > 3))
		(and	(up-compare-goal gl-enemy-castle-distance >= 40)
			(up-compare-goal gl-enemy-tower-distance >= 36)))
=>
	(up-jump-rule 1)
)

(defrule
	(unit-type-count-total battering-ram-line < large-army-rams); Spam rams
	(or	(unit-type-count-total battering-ram-line < 7)
		(soldier-count > 25))
	(or	(up-compare-goal gl-enemy-tower-count > 2)
		(or	(and	(unit-type-count-total battering-ram-line < 3)
				(population > 65))
			(up-projectile-detected projectile-castle < 60000)))
	(can-train-with-escrow battering-ram-line)
=>
	(release-escrow wood)
	(release-escrow gold)
	(train battering-ram-line)
)

(defrule
	(goal gl-eew-strategy-type boom)
	(goal gl-panic-xbow-counter YES)
	(unit-type-count-total scorpion-line < 7)
	(can-train-with-escrow scorpion-line)
=>
	(release-escrow wood)
	(release-escrow gold)
	(train scorpion-line)
	(set-goal gl-panic-xbow-counter 0)
)

(defrule
	(up-compare-goal gl-panic-xbow-counter != YES)
	(up-compare-const gv-x-vs-one-challenge == 0)
	(goal POSITION POCKET)
	(or	(up-compare-goal gl-enemy-units-in-town < 5)
		(and	(up-compare-goal TSA >= 1)
			(and	(building-type-count-total town-center < 3)
				(building-type-count-total town-center < preferred-TC-number))))
=>
	(up-jump-rule 1)
)

(defrule
	(or	(goal gl-panic-xbow-counter YES)
		(and	(or	(soldier-count < 15)
				(up-compare-goal gl-enemy-archery-count > 38))
			(and	(up-compare-goal gl-enemy-archery-count > 18)
				(and	(goal gl-current-age gv-castle)
					(unit-type-count-total mangonel-line < 5)))))
	(can-train-with-escrow mangonel-line)
=>
	(release-escrow wood)
	(release-escrow gold)
	(train mangonel-line)
	(set-goal gl-panic-xbow-counter 0)
)

(defrule
	(game-time > 2400)
	(or	(players-building-type-count any-enemy bombard-tower > 0)
		(and	(player-in-game any-human-enemy)
			(and	(goal MILITARY 1)
				(strategic-number sn-allow-resource-spending > 5))))
	(soldier-count > 45)
	(or	(unit-type-count-total battering-ram-line < medium-army-rams)
		(soldier-count > 65))
	(unit-type-count-total battering-ram-line < large-army-rams)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)

(defrule
	(goal gl-strategy default)
	(goal gl-advanced-cavalry 0)
	(goal gl-advanced-infantry 0)
	(goal gl-eagles 0)
	(or	(and	(goal CASTLE 0)
			(up-compare-goal archery-goal != 0)); gl-advanced-archery for non-byz
		(and	(up-compare-const dm-UU-type == archer-type)
			(goal CASTLE 2)))
	(up-compare-goal gl-current-age >= gv-castle-up)
	(soldier-count > 45)
	(unit-type-count-total battering-ram-line < 4)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)

(defrule
	(goal MILITARY 1)
	(up-compare-const gv-handicap == 0)
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(strategic-number sn-allow-resource-spending > 3)
	(or	(unit-type-count-total trebuchet-set < 3)
		(gold-amount > 10000))
	(unit-type-count-total trebuchet-set < 16)
	(soldier-count > 65)
	(or	(game-time < 3000)
		(gold-amount > 900))
	(can-train trebuchet)
=>
	(train trebuchet)
)

#load-if-defined BYZANTINE-CIV
(defrule
	(goal CASTLE 0)
	(goal gl-strategy default)
	(strategic-number sn-allow-resource-spending > 5)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(soldier-count > 60)
	(wood-amount > 500)
	(nand	(unit-type-count-total spearman-line < 33)
		(up-compare-goal gl-enemy-cavalry-count > 10))
	(or	(unit-type-count-total battering-ram-line < 9)
		(wood-amount > 700))
	(unit-type-count-total battering-ram-line < 12)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)
#end-if

#load-if-defined MAYAN-CIV
(defrule
	(goal CASTLE 2)
	(goal gl-eagles 0)
	(goal gl-strategy default)
	(strategic-number sn-allow-resource-spending > 5)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(soldier-count > 30)
	(wood-amount > 500)
	(or	(unit-type-count-total battering-ram-line < 6)
		(wood-amount > 700))
	(unit-type-count-total battering-ram-line < 9)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)
#end-if

#load-if-defined UP-MICHI-STYLE
(defrule
	(or	(game-time < 3000)
		(unit-type-count-total trade-cart > 15))
	(gold-amount > 800)
	(unit-type-count-total trebuchet-set < 7)
	(can-train trebuchet)
=>
	(train trebuchet)
)

(defrule
	(or	(unit-type-count-total trade-cart > 20)
		(and	(civ-selected turkish)
			(gold-amount > 1000)))
	(gold-amount > 800)
	(unit-type-count-total bombard-cannon < 10)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)

#load-if-not-defined CHINESE-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined FRANKISH-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined INDIAN-CIV
#load-if-not-defined PERSIAN-CIV
#load-if-not-defined SPANISH-CIV
#load-if-not-defined TURKISH-CIV
(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(or	(unit-type-count-total trade-cart > 20)
		(or	(unit-type-count-total battering-ram-line > 3)
			(or	(not	(research-available ri-onager))
				(unit-type-count-total trebuchet-set > 0))))
	(or	(unit-type-count-total mangonel-line < 10)
		(research-completed ri-siege-onager))
	(unit-type-count-total mangonel-line < 15)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

#end-if

(defrule
	(up-compare-goal gl-strategy != monk-mango-push)
	(current-age == imperial-age)
	(soldier-count > 30)
	(strategic-number sn-allow-resource-spending > 5)
	(players-building-type-count target-player castle > 0)
	(unit-type-count-total battering-ram-line < 7)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)

(defrule
	(up-compare-goal gl-strategy != monk-mango-push)
	(up-compare-goal gl-strategy != trush-push)
	(or	(goal MILITARY 1)
		(or	(enemy-buildings-in-town)
			(and	(players-building-type-count target-player castle > 0)
				(soldier-count > 20))))
	(or	(soldier-count > 55)
		(unit-type-count-total battering-ram-line < 4))
	(unit-type-count-total battering-ram-line < 7)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)

(defrule
	(up-compare-goal gl-strategy != monk-mango-push)
	(up-compare-goal gl-strategy != trush-push)
	(or	(and	(goal RAM 1)
			(unit-type-count-total battering-ram-line < 4))
		(and	(building-type-count-total town-center > 2)
			(or	(and	(soldier-count > 45)
					(goal gl-eagles heavy-eagles))
				(up-compare-goal gl-enemy-tower-count > 4))))
	(unit-type-count-total battering-ram-line < 7)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)

#load-if-not-defined UP-MICHI-STYLE
(defrule
	(or	(goal gl-nothing-style-map YES)
		(and	(strategic-number sn-monk-trained != 0)
			(or	(and	(goal gl-strategy-class basic-class)
					(up-compare-goal gl-current-age >= gv-castle-up))
				(and	(nand	(goal TSA 0)
						(up-compare-goal gl-enemy-units-in-town > 3))
					(food-amount >= maximum-castle-queue-food)))))
	(up-compare-goal gl-strategy != turkish-fast-imp)
	(up-compare-goal gl-my-villager-count > 0)
=>
	(up-jump-rule 4)
)

(defrule
	(current-age >= castle-age)
	(nand	(goal gl-strategy eagle-rush)
		(civ-selected mayan))
	(building-type-count monastery > 0)
	(strategic-number sn-monk-trained == 0)
	(unit-available monk)
	(up-compare-goal gl-sighted-relic-count > 0)
	(current-age-time > 60)
	(or	(soldier-count > 5)
		(goal gl-nothing-style-map YES))
	(gold-amount < 100)
=>
	(up-modify-escrow gold c:max 100)
	(up-add-object-cost c: monk c: -1)
)

(defrule
	(current-age-time > 60)
	(or	(and	(soldier-count > 5)
			(strategic-number sn-monk-trained == 0))
		(and	(goal gl-strategy castle-sling)
			(and	(up-compare-goal gl-enemy-units-in-town > 0)
				(unit-type-count-total monk-set < 7))))
	(can-train-with-escrow monk)
=>
	(release-escrow gold)
	(train monk)
	(set-strategic-number sn-monk-trained 1)
)

(defrule
	(current-age <= castle-age)
	(or	(and	(up-compare-goal gl-current-age <= gv-castle)
			(and	(or	(up-compare-goal gl-enemy-cataphract-count > 1)
					(or	(goal gl-enemy-strategy KNIGHT-RUSH)
						(up-compare-goal gl-enemy-huskarl-count > 1)))
				(unit-type-count-total monk-set < 5)))
		(players-unit-type-count focus-player cavalier > 1))
	(unit-type-count-total monk-set < 7)
	(can-train monk)
=>
	(train monk)
	(set-strategic-number sn-monk-trained 1)
)

(defrule
	(or	(up-compare-goal gl-current-age <= gv-castle)
		(goal gl-strategy turkish-fast-imp))
	(or	(unit-type-count-total monk-set < 2)
		(or	(players-unit-type-count focus-player war-wagon-line > 1)
			(or	(up-compare-goal gl-enemy-gunpowder-count > 1)
				(or	(up-compare-goal gl-enemy-mameluke-count > 1)
					(up-compare-goal gl-enemy-heavy-cavalry-count > 1)))))
	(unit-type-count-total monk-set < 5)
	(can-train monk)
=>
	(train monk)
	(set-strategic-number sn-monk-trained 1)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(current-age-time < 240)
	(building-type-count monastery > 0)
	(unit-type-count-total spearman-line < 25)
	(unit-type-count-total camel-line < 17)
	(unit-type-count-total monk-set < 9)
	(players-unit-type-count focus-player paladin > 9)
=>
	(up-modify-escrow gold c:max 100)
	(up-add-object-cost c: monk c: -1)
	(set-goal temporary-goal2 1632)
)

(defrule
	(current-age == castle-age)
	(nand	(food-amount > 600)
		(and	(gold-amount < 900)
			(goal gl-current-age gv-castle)))
	(building-type-count monastery > 0)
	(unit-type-count-total spearman-line < 25)
	(unit-type-count-total camel-line < 17)
	(unit-type-count-total monk-set < 9)
	(or	(players-unit-type-count focus-player cavalier > 3)
		(players-unit-type-count focus-player paladin > 1))
=>
	(up-modify-escrow gold c:max 100)
	(up-add-object-cost c: monk c: -1)
	(set-goal temporary-goal2 1632)
)
#end-if

(defrule
	(or	(and	(soldier-count > 30)
			(and	(unit-type-count-total monk-set < 1)
				(and	(dropsite-min-distance gold != -1)
					(game-time < 2700))))
		(unit-type-count-total monk-set g:< gl-sighted-relic-count))
	(unit-type-count-total monk-set < 2)
	(can-train monk)
=>
	(train monk)
	(set-strategic-number sn-monk-trained 1)
)

(defrule
	(goal gl-current-age gv-castle)
	(building-type-count monastery > 0)
	(unit-type-count cavalry-class < 5)
	(unit-type-count infantry-class < 6)
	(soldier-count < 40)
	(up-pending-objects c: monastery-class < 1)
	(unit-type-count-total monk-set < 8)
	(up-compare-goal gl-enemy-huskarl-count > 4)
=>
	(up-modify-escrow gold c:max 100)
	(up-add-object-cost c: monk c: -1)
	(set-goal temporary-goal2 1632)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(building-type-count monastery > 0)
	(up-compare-goal gl-enemy-elephant-count > 7)
	(civilian-population > 80)
	(nand	(goal TSA 1)
		(unit-type-count-total battering-ram-line < 3))
	(up-pending-objects c: monastery-class < 1)
	(unit-type-count-total monk-set < 7)
	(or	(unit-type-count villager-gold > 15)
		(up-compare-goal gl-trade-unit-count-total > 25))
=>
	(up-modify-escrow gold c:max 100)
	(up-add-object-cost c: monk c: -1)
)

(defrule
	(or	(up-compare-goal gl-enemy-elephant-count > 2)
		(and	(unit-type-count-total monk-set < 9)
			(goal temporary-goal2 1632)))
	(unit-type-count-total monk-set < 14)
	(can-train-with-escrow monk)
=>
	(release-escrow gold)
	(train monk)
	(set-strategic-number sn-monk-trained 1)
)

#load-if-defined AZTEC-CIV
(defrule
	(goal gl-advanced-monastery monks)
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(and	(goal gl-current-age gv-castle)
			(or	(unit-type-count-total monk < 10)
				(and	(unit-type-count-total monk < 25)
					(or	(gold-amount > 900)
						(food-amount < 500)))))
		(up-compare-const gv-maximum-age == castle-age))
	(can-train monk)
=>
	(train monk)
)

(defrule
	(goal gl-advanced-monastery monks)
	(strategic-number sn-allow-resource-spending >= 0)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(or	(unit-type-count-total monk < 10)
		(or	(and	(unit-type-count-total monk < 25)
				(gold-amount > 500))
			(and	(up-research-status c: ri-theocracy >= research-pending)
				(and	(up-research-status c: ri-illumination >= research-pending)
					(up-research-status c: ri-block-printing >= research-pending)))))
	(can-train monk)
=>
	(train monk)
)
#end-if

#load-if-defined KOREAN-CIV
(defrule
	(not	(research-completed ri-onager))
	(up-compare-const gv-michi-style == 0)
	(up-compare-goal gl-enemy-infantry-count < 5)
	(up-compare-goal gl-enemy-archery-count < 5)
	(up-compare-goal gl-enemy-gunpowder-count < 5)
	(up-compare-goal gl-enemy-scorpion-count < 3)
	(up-compare-goal gl-enemy-onager-count < 2)
	(up-compare-goal gl-enemy-mameluke-count < 4)
	(nand	(unit-type-count-total mangonel-line < 1)
		(players-unit-type-count focus-player battering-ram-line > 2))
=>
	(up-jump-rule 2)
)

(defrule
	(map-size tiny)
	(not	(research-completed ri-onager))
	(or	(goal CASTLE 4)
		(goal gl-advanced-infantry heavy-swordsmen))
=>
	(up-jump-rule 1)
)

(defrule
	(goal gl-strategy default)
	(or	(strategic-number sn-allow-resource-spending > 1)
		(and	(unit-type-count-total mangonel-line < 1)
			(players-unit-type-count focus-player battering-ram-line > 0)))
	(or	(food-amount < 600)
		(up-compare-goal gl-current-age >= gv-castle-up))
	(or	(unit-type-count-total mangonel-line < 6)
		(research-completed ri-onager))
	(unit-type-count-total mangonel-line < 9)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
#end-if

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(or	(and	(unit-type-count-total mangonel-line < 1)
			(or	(players-unit-type-count focus-player battering-ram-line > 0)
				(up-compare-goal gl-enemy-scorpion-count > 0)))
		(or	(up-compare-goal gl-enemy-archery-count > 2)
			(up-compare-goal gl-enemy-scorpion-count > 2)))
	(unit-type-count-total mangonel-line < 2)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)

(defrule
	(up-compare-goal gl-enemy-scorpion-count > 1)
	(goal gl-strategy-class basic-class)
	(current-age == castle-age)
	(game-time < 3000)
	(strategic-number sn-allow-resource-spending > 0)
	(unit-type-count-total mangonel-line < 2)
	(unit-type-count-total galley-line < 1)
	(up-compare-goal gl-fire-ship-count-total < 1)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)

(defrule
	(nor	(civ-selected celtic)
		(civ-selected slavic))
	(or	(research-available ri-heavy-scorpion)
		(and	(or	(goal gl-advanced-cavalry heavy-knights)
				(civ-selected persian))
			(and	(up-compare-goal gl-enemy-spearman-count < 45)
				(and	(up-compare-goal gl-enemy-camelry-count < 30)
					(unit-type-count-total scorpion-line > 12)))))
=>
	(up-jump-rule 2)
)

(defrule
	(goal gl-advanced-archery scorpions)
	(nand	(or	(goal MILITARY 1)
			(players-building-type-count target-player castle > 0))
		(unit-type-count-total battering-ram-line < 1))
	(or	(unit-type-count-total scorpion-line < 4)
		(building-type-count-total town-center > 2))
	(or	(unit-type-count-total scorpion-line < 17)
		(research-completed ri-heavy-scorpion))
	(unit-type-count-total scorpion-line < 21)
	(can-train scorpion-line)
=>
	(train scorpion-line)
)

(defrule
	(research-completed ri-heavy-scorpion)
	(nand	(or	(goal MILITARY 1)
			(players-building-type-count target-player castle > 0))
		(unit-type-count-total battering-ram-line < 2))
	(or	(unit-type-count-total scorpion-line < 16)
		(and	(or	(civ-selected celtic)
				(civ-selected slavic))
			(goal gl-advanced-archery scorpions)))
	(can-train scorpion-line)
=>
	(train scorpion-line)
)

(defrule
	(goal gl-current-age gv-castle)
	(goal gl-strategy-class basic-class)
	(goal TSA 0)
	(town-under-attack)
	(up-compare-goal gl-enemy-archery-count > 20)
	(up-compare-goal gl-enemy-cavalry-count < 5)
	(up-compare-goal gl-enemy-eagle-count < 10)
	(up-compare-goal gl-enemy-huskarl-count < 5)
	(nand	(players-building-type-count target-player castle > 0)
		(unit-type-count-total battering-ram-line < 3))
	(unit-type-count-total scorpion-line < 4)
	(can-train scorpion-line)
=>
	(train scorpion-line)
)

(defrule
	(current-age == castle-age)
	(goal gl-eew-strategy-type boom)
	(goal SLING 0)
	(or	(town-under-attack)
		(and	(up-compare-goal gl-enemy-archery-count > 7)
			(goal POSITION FLANK)))
	(unit-type-count-total scorpion-line < 4)
	(can-train scorpion-line)
=>
	(train scorpion-line)
)

(defrule
	(or	(and	(goal gl-strategy ranged-rush-strategy)
			(up-compare-goal gl-enemy-archery-count > 5))
		(and	(goal gl-strategy castle-drop)
			(game-time < 1400)))
	(nand	(goal RAM 1)
		(unit-type-count-total battering-ram-line < 1))
	(unit-type-count-total scorpion-line < 3)
	(can-train scorpion-line)
=>
	(train scorpion-line)
)

(defrule
	(or	(goal gl-advanced-cavalry heavy-knights)
		(or	(goal gl-strategy krush)
			(goal gl-strategy knight-rush)))
	(up-research-status c: ri-horse-collar >= research-pending)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(strategic-number sn-number-explore-groups > 0)
	(soldier-count == 0)
	(unit-type-count-total scout-cavalry-line < 1)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)

#load-if-not-defined TURKISH-CIV
(defrule
	(food-amount > 74)
	(or	(goal gl-strategy-class basic-class)
		(goal gl-strategy eew-strategy))
	(unit-type-count-total spearman-line < 50)
	(nand	(research-available ri-pikeman)
		(unit-type-count-total spearman-line > 5))
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-enemy-elephant-count > 4)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if

(defrule
	(or	(game-time > 1200)
		(or	(up-compare-goal gl-rush-suitability-on-map != GOOD)
			(or	(and	(goal POSITION FLANK)
					(unit-type-count-total archer-line > 3))
				(up-compare-goal gl-enemy-pocket <= 0))))
=>
	(up-jump-rule 3)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= gl-enemy-pocket)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(players-current-age focus-player == feudal-age)
	(or	(and	(unit-type-count-total spearman-line < 1)
			(or	(players-unit-type-count focus-player scout-cavalry-line > 1)
				(and	(game-time < 980)
					(and	(players-building-type-count focus-player stable > 0)
						(players-current-age-time focus-player > 300))))); Something suspicious
		(players-unit-type-count focus-player scout-cavalry-line > 2))
	(unit-type-count-total spearman-line < 2)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(true)
=>
	(up-get-fact building-type-count-total farm temporary-goal8)
	(up-modify-goal temporary-goal8 c:+ 4)
	(up-modify-goal temporary-goal8 g:- gl-max-farm-count)
	(up-get-fact wood-amount 0 temporary-goal)
	(up-modify-goal temporary-goal c:- 95)
	(up-modify-goal temporary-goal c:min 0)
	(up-modify-goal temporary-goal8 g:* temporary-goal); >0 -> block training for farms
)

(defrule
	(or	(goal CASTLE 0)
		(or	(goal gl-strategy uu-block-strategy)
			(and	(goal gl-strategy castle-drop)
				(and	(up-compare-const uu-food-buffer > 0)
					(and	(military-population g:> gl-toughest-fought-enemy-military)
						(and	(goal TSA 0)
							(and	(player-human focus-player)
								(goal gl-rush-suitability-on-map VERY-LOW))))))))
=>
	(up-jump-rule 3)
)

(defrule
	(or	(and	(current-age == castle-age)
			(and	(current-age-time < 200)
				(civ-selected persian)))
		(and	(or	(up-compare-goal gl-my-UU-count-total > 19)
				(and	(up-compare-goal gl-my-UU-count-total > 14)
					(up-compare-const dm-UU-type != archer-type)))
			(research-available my-unique-unit-upgrade)))
=>
	(up-jump-rule 2)
)

(defrule
	(game-time > 5)
	(or	(and	(up-compare-goal gl-my-UU-count-total < 20)
			(up-compare-goal gl-strategy != castle-drop))
		(and	(up-research-status c: my-unique-unit-upgrade >= research-pending-stage)
			(up-compare-goal CASTLE != 5)))
	(nand	(goal CASTLE 3)
		(up-compare-goal gl-my-UU-count-total > 26))
	(nand	(up-compare-goal gl-my-UU-count-total > 13)
		(strategic-number sn-allow-resource-spending < 2))
	(can-train my-UU)
=>
	(train my-UU)
)

(defrule
	(goal CASTLE 2)
	(or	(and	(up-compare-goal gl-my-UU-count-total < 35)
			(up-compare-goal gl-strategy != castle-drop))
		(and	(up-compare-goal gl-my-UU-count-total < castle-drop-uu-amount)
			(and	(food-amount >= uu-food-buffer)
				(goal gl-strategy castle-drop))))
	(can-train my-UU)
=>
	(train my-UU)
)

#load-if-defined TURKISH-CIV
(defrule
	(goal gl-strategy turkish-fast-imp)
	(or	(and	(unit-type-count-total scorpion-line < 3)
			(goal gl-current-age gv-castle))
		(goal gl-current-age gv-castle-up))
	(unit-type-count-total scorpion-line < 4)
	(or	(up-compare-goal gl-enemy-infantry-count > 3)
		(or	(up-compare-goal gl-enemy-eagle-count > 2)
			(or	(up-compare-goal gl-enemy-spearman-count > 7)
				(up-compare-goal gl-enemy-archery-count > 3))))
	(can-train scorpion-line)
=>
	(train scorpion-line)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(food-amount > 104)
	(or	(unit-type-count-total camel-line < 5)
		(up-timer-status 7 != timer-disabled))
	(or	(up-compare-goal gl-enemy-cavalry-count > 6)
		(or	(up-compare-goal gl-enemy-heavy-cavalry-count > 3)
			(goal gl-enemy-strategy KNIGHT-RUSH)))
	(unit-type-count-total camel-line < 15)
	(can-train camel-line)
=>
	(train camel-line)
)
#end-if
#load-if-defined CELTIC-CIV
(defrule
	(goal gl-strategy default)
	(food-amount > 75)
	(up-compare-goal temporary-goal8 <= 0)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(strategic-number sn-allow-resource-spending > 2)
	(up-compare-flag gl-flag != pikeman-upgrade-notice)
	(or	(up-compare-goal gl-enemy-cavalry-count > 5)
		(or	(up-compare-goal gl-enemy-cataphract-count > 5)
			(players-unit-type-count focus-player boyar > 5)))
	(unit-type-count-total spearman-line < 43)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if

#load-if-not-defined AZTEC-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(or	(game-time >= 2200)
		(up-compare-const gv-michi-style == 1))
	(players-unit-type-count focus-player monk < high-monks)
	(players-unit-type-count focus-player missionary < high-monks)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(goal gl-strategy-class basic-class)
		(goal gl-strategy heavy-krush))
	(or	(players-unit-type-count focus-player monk > 5)
		(players-unit-type-count focus-player missionary > 5))
	(nand	(unit-type-count-total scout-cavalry-line > 5)
		(research-available ri-light-cavalry))
	(or	(unit-type-count-total scout-cavalry-line < 13)
		(players-unit-type-count focus-player monk > 12))
	(unit-type-count-total scout-cavalry-line < 30)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)

(defrule
	(goal gl-current-age gv-castle)
	(game-time > 1590)
	(goal POSITION POCKET)
	(soldier-count > 20)
	(civilian-population > 85)
	(nand	(goal TSA 0)
		(up-compare-goal gl-enemy-units-in-town > 4))
	(up-compare-goal gl-patrol-defence != patrol-on)
	(up-compare-goal gl-defending-ally != YES)
	(up-compare-goal gl-military-percentage2 > 85)
	(unit-type-count-total cavalry-class > 15)
	(up-compare-goal gl-military-percentage > 35); Flank's job to match enemy flank
=>
	(up-jump-rule 20)
)

(defrule
	(or	(and	(game-time < 2100)
			(and	(unit-type-count-total knight-unit < 23)
				(and	(up-compare-goal gl-pair-player-military < 40)
					(up-compare-goal gl-units-in-ally-town > 4))))
		(or	(up-compare-goal gl-current-age != gv-castle)
			(goal POSITION FLANK)))
=>
	(up-jump-rule 3)
)

(defrule
	(unit-type-count-total knight-unit > 13)
	(up-compare-goal gl-patrol-defence != patrol-on)
	(civilian-population > 90)
	(goal TSA 0)
	(or	(game-time > 1800)
		(and	(up-compare-goal gl-enemy-camelry-count > 7)
			(up-compare-goal gl-military-percentage3 < 150)))
	(up-compare-goal gl-pair-player-military > 33)
	(up-compare-goal gl-military-percentage > 35)
	(up-compare-goal gl-military-percentage3 > 70)
	(up-compare-goal gl-defending-ally != YES)
	(up-compare-goal gl-units-in-ally-town < 5)
=>
	(up-jump-rule 18)
)

(defrule
	(unit-type-count-total knight-unit > preferred-knight-count)
	(up-compare-goal gl-patrol-defence != patrol-on)
	(civilian-population > 75)
	(nand	(goal gl-defending-ally YES)
		(up-compare-goal gl-military-percentage < 100))
	(goal gl-fixed-target-player YES)
	(or	(game-time > 2000)
		(and	(goal gl-assisting-ally YES)
			(game-time > 1920)))
=>
	(up-jump-rule 17)
)

(defrule
	(unit-type-count-total knight-unit > preferred-knight-count)
	(up-compare-goal gl-patrol-defence != patrol-on)
	(civilian-population > 75)
	(nand	(goal gl-defending-ally YES)
		(up-compare-goal gl-military-percentage < 100))
	(or	(goal TSA 0)
		(and	(up-compare-goal gl-military-percentage > 150)
			(players-civilian-population focus-player < 67)))
=>
	(up-jump-rule 16)
)

(defrule
	(civ-selected persian)
	(or	(food-amount < 2000)
		(population-cap < 275))
	(building-type-count castle > 2)
	(up-compare-goal CASTLE != 0)
=>
	(up-jump-rule 15)
)

(defrule
	(goal gl-current-age gv-castle)
	(game-time > 1590)
	(goal POSITION POCKET)
	(goal gl-safe-in-town YES)
	(soldier-count > 10)
	(civilian-population > 60)
	(up-compare-goal gl-pair-player-military > 30)
	(up-compare-goal gl-military-percentage2 > 50)
	(or	(and	(or	(unit-type-count-total knight-unit > 9)
				(soldier-count > 20))
			(up-compare-goal gl-military-percentage > 55))
		(up-compare-goal gl-closest-enemy-military < 20))
=>
	(up-jump-rule 14)
)

(defrule
	(goal gl-current-age gv-castle-up)
	(unit-type-count-total knight-unit > 19)
	(or	(unit-type-count-total knight-unit > 24)
		(food-amount < 500))
	(up-compare-goal gl-patrol-defence != patrol-on)
	(up-compare-goal gl-defending-ally != YES)
	(nand	(goal TSA 0)
		(up-compare-goal gl-enemy-units-in-town > 4))
	(or	(food-amount < 750)
		(gold-amount < 600))
=>
	(up-jump-rule 13)
)

(defrule
	(or	(food-amount < 110)
		(or	(up-compare-goal gl-strategy-class != basic-class)
			(or	(and	(unit-type-count-total knight-unit > 14)
					(or	(research-available ri-1st-knight-upgrade)
						(or	(and	(unit-type-count-total knight-unit > 20)
								(research-available ri-2nd-knight-upgrade))
							(research-available ri-plate-barding))))
				(goal gl-advanced-cavalry LC))))
=>
	(up-jump-rule 2)
)

(defrule
	(nand	(up-research-status c: ri-crossbow == research-available)
		(unit-type-count-total archer-line > 8))
	(or	(unit-type-count-total knight-unit < 10)
		(up-research-status c: ri-chain-barding >= research-pending))
	(goal gl-advanced-cavalry heavy-knights)
	(or	(unit-type-count-total knight-unit < 16)
		(strategic-number sn-allow-resource-spending > 1))
	(unit-type-count-total knight-unit < 40)
	(can-train knight-unit)
=>
	(train knight-unit)
)

(defrule
	(or	(research-completed ri-paladin)
		(and	(goal gl-current-age gv-castle)
			(and	(up-research-status c: ri-required-armor-upgrade >= research-pending); Chain barding for non-byz
				(and	(game-time < 2280)
					(unit-type-count-total knight-unit < 15)))))
	(or	(unit-type-count-total knight-unit < 14)
		(and	(up-research-status c: ri-required-armor-upgrade >= research-pending)
			(strategic-number sn-allow-resource-spending > 1)))
	(can-train knight-unit)
=>
	(train knight-unit)
)

(defrule
	(or	(goal gl-strategy krush)
		(goal gl-advanced-cavalry heavy-knights))
	(up-compare-goal gl-current-age <= gv-castle)
	(up-compare-goal gl-military-percentage >= 67)
	(nand	(goal TSA 0)
		(up-compare-goal gl-enemy-units-in-town > 4))
	(up-compare-goal gl-patrol-defence != patrol-on)
	(up-compare-goal gl-defending-ally != YES)
	(civilian-population > 95)
	(unit-type-count-total knight-unit > 25)
=>
	(up-jump-rule 9)
)

(defrule
	(or	(goal gl-strategy krush)
		(goal gl-advanced-cavalry heavy-knights))
	(up-compare-goal gl-current-age <= gv-castle)
	(goal gl-rush-suitability-on-map VERY-LOW)
	(soldier-count g:>= gl-toughest-fought-enemy-military)
	(or	(players-military-population focus-player < 15)
		(players-building-type-count target-player castle > 0))
	(up-compare-goal gl-enemy-castle-distance >= 36)
	(up-compare-goal gl-enemy-tower-distance >= 36)
	(goal TSA 0)
=>
	(up-jump-rule 8)
)

(defrule
	(goal gl-strategy krush)
	(or	(and	(up-compare-const dm-pala-in-tech-tree == 0)
			(and	(unit-type-count-total knight-unit > 14); Start reducing knights at late castle age with civs that lack palas
				(game-time > 2160)))
		(and	(food-amount < 235)
			(or	(research-available ri-bow-saw)
				(research-available ri-wheel-barrow))))
=>
	(up-jump-rule 2)
)

(defrule
	(or	(and	(or	(goal gl-enemy-strategy MONK-RUSH)
				(or	(players-unit-type-count focus-player monk > 5)
					(players-unit-type-count focus-player missionary > 5)))
			(unit-type-count scout-cavalry-line < 10))
		(and	(unit-type-count-total knight-unit > 13)
			(and	(or	(research-available ri-bloodlines)
					(research-available ri-scale-barding))
				(strategic-number sn-allow-resource-spending > 0))))
=>
	(up-jump-rule 1)
)

(defrule
	(or	(goal gl-strategy krush)
		(and	(unit-type-count-total trade-cart > 25)
			(and	(research-completed ri-paladin)
				(research-completed ri-blast-furnace))))
	(food-amount > 109)
	(or	(unit-type-count-total knight-unit < 10)
		(or	(up-research-status c: ri-chain-barding >= research-pending)
			(strategic-number sn-allow-resource-spending < 1)))
	(can-train knight-unit)
=>
	(train knight-unit)
)

(defrule
	(or	(and	(up-compare-goal gl-current-age >= gv-castle-up)
			(up-compare-const gv-maximum-age == imperial-age))
		(or	(up-compare-goal gl-strategy != default)
			(up-compare-goal gl-advanced-cavalry != heavy-knights)))
=>
	(up-jump-rule 4)
)

(defrule
	(food-amount > 109)
	(or	(and	(goal gl-current-age gv-castle)
			(unit-type-count-total knight-line < 50))
		(goal gl-current-age gv-imperial)); Only true if castle age end due to jump rule above
	(research-completed ri-chain-barding)
	(or	(unit-type-count-total knight-line < 20)
		(strategic-number sn-allow-resource-spending > 1))
	(can-train knight-line)
=>
	(train knight-line)
)

(defrule
	(or	(game-time >= 2200)
		(or	(building-type-count castle >= castles-to-disable-support-archers)
			(or	(up-compare-goal gl-strategy != default)
				(or	(up-compare-goal gl-current-age >= gv-castle-up)
					(or	(and	(up-compare-goal gl-advanced-cavalry != heavy-knights)
							(up-compare-goal gl-advanced-cavalry != heavy-elephants))
						(up-compare-goal temporary-goal8 > 0))))))
=>
	(up-jump-rule 2)
)

(defrule
	(goal gl-current-age gv-castle)
	(up-compare-const gv-pocket-position == 0)
	(up-research-status c: ri-crossbow >= research-available)
	(up-compare-goal gl-enemy-spearman-count > 5)
	(or	(research-completed ri-crossbow)
		(up-research-status c: ri-elite-skirmisher <= research-available))
	(or	(up-compare-goal gl-enemy-spearman-count > 15)
		(unit-type-count-total archery-class < 16))
	(unit-type-count-total archer-line g:< gl-enemy-spearman-count)
	(unit-type-count-total archer-line < 23)
	(can-train archer-line)
=>
	(train archer-line)
)

(defrule
	(up-compare-const special-raid-unit != conquistador-line)
	(up-compare-const gv-pocket-position == 0)
	(up-compare-goal gl-current-age <= gv-castle)
	(players-current-age focus-player <= castle-age)
	(or	(and	(goal gl-current-age gv-feudal-up)
			(and	(players-military-population every-enemy > 25)
				(and	(soldier-count < 32)
					(gold-amount > 300))))
		(goal gl-enemy-strategy EAGLERUSH))
	(unit-type-count-total archer-line < 23)
	(can-train archer-line)
=>
	(train archer-line)
)

(defrule
	(or	(up-compare-const elephants-available == 0)
		(and	(up-compare-goal gl-battle-elephant-count-total > 7)
			(or	(research-available ri-scale-barding)
				(and	(up-compare-goal gl-battle-elephant-count-total > 11)
					(or	(research-available ri-chain-barding)
						(or	(research-available ri-plate-barding)
							(goal gl-advanced-cavalry light-elephants)))))))
=>
	(up-jump-rule 3)
)

(defrule
	(or	(goal gl-advanced-cavalry light-elephants)
		(goal gl-advanced-cavalry heavy-elephants))
	(food-amount >= ele-food-buffer)
	(or	(up-compare-goal gl-battle-elephant-count-total < 15)
		(or	(up-compare-goal gl-military-percentage < 70)
			(or	(and	(up-compare-goal TSA >= 1)
					(up-compare-goal gl-target-player-distance < 90))
				(up-compare-goal gl-current-age >= gv-castle-up))))
	(up-compare-goal gl-battle-elephant-count-total < 23)
	(can-train battle-elephant)
=>
	(train battle-elephant)
)

(defrule
	(or	(goal gl-advanced-cavalry heavy-elephants)
		(goal gl-strategy eles))
	(food-amount >= ele-food-buffer)
	(up-compare-goal gl-current-age >= gv-castle)
	(up-compare-goal gl-current-age <= gv-castle-up)
	(or	(goal gl-current-age gv-castle)
		(food-amount > 1000))
	(or	(up-compare-goal gl-military-percentage < 70)
		(up-compare-goal gl-battle-elephant-count-total < 10))
	(up-compare-goal gl-battle-elephant-count-total < 36)
	(can-train battle-elephant)
=>
	(train battle-elephant)
)

(defrule
	(goal gl-advanced-cavalry heavy-elephants)
	(goal gl-current-age gv-imperial)
	(up-research-status c: ri-elite-battle-elephant != research-available)
	(up-research-status c: ri-bloodlines != research-available)
	(up-research-status c: ri-blast-furnace != research-available)
	(or	(up-compare-goal gl-battle-elephant-count-total < 30)
		(and	(research-completed ri-iron-casting)
			(up-research-status c: elephant-ut >= research-pending)))
	(can-train battle-elephant)
=>
	(train battle-elephant)
)
#end-if
#end-if
#end-if

#load-if-defined TURKISH-CIV
(defrule
	(goal gl-strategy turkish-fast-imp)
	(or	(players-unit-type-count focus-player monk > 3)
		(players-unit-type-count focus-player missionary > 3))
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
#end-if

#load-if-defined GOTHIC-CIV
(defrule
	(or	(up-compare-goal CASTLE != 0)
		(goal gl-strategy gothic-boom))
	(or	(and	(unit-type-count-total huskarl2 < 20)
			(not	(research-completed ri-elite-huskarl)))
		(research-completed ri-elite-huskarl))
	(or	(can-train huskarl2)
		(can-train elite-huskarl2))
=>
	(train huskarl2)
	(train elite-huskarl2)
)
#end-if

#load-if-not-defined UP-MICHI-STYLE
(defrule
	(goal gl-strategy-class basic-class)
	(goal gl-current-age gv-castle)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(current-age-time < 200)
	(town-under-attack)
	(goal gl-strategy castle-drop); To save persians
	(can-train my-unique-unit-line)
=>
	(train my-unique-unit-line)
)
#end-if

#load-if-defined INCAN-CIV
(defrule
	(goal gl-advanced-archery slingers)
	(or	(unit-type-count-total slinger < 10)
		(strategic-number sn-allow-resource-spending > 1))
	(or	(unit-type-count-total slinger < 38)
		(strategic-number sn-allow-resource-spending > 2))
	(or	(or	(current-age == imperial-age)
			(unit-type-count-total slinger < 18))
		(strategic-number sn-allow-resource-spending > 5))
	(unit-type-count-total slinger < 50)
	(can-train slinger)
=>
	(train slinger)
)
#end-if

#load-if-defined TEUTONIC-CIV
#load-if-defined TINY-MAP
(defrule
	(goal gl-strategy-class basic-class)
	(goal CASTLE 0)
	(strategic-number sn-allow-resource-spending > 0)
	(or	(up-compare-goal gl-enemy-eagle-count > 6)
		(or	(up-compare-goal gl-enemy-spearman-count > 9)
			(or	(up-compare-goal gl-enemy-huskarl-count > 2)
				(or	(up-compare-goal gl-enemy-cavalry-count > 5)
					(players-unit-type-count focus-player kamayuk > 5)))))
	(up-compare-goal gl-my-UU-count-total < 17)
	(can-train my-unique-unit-line)
=>
	(train my-unique-unit-line)
)
#end-if
#end-if

#load-if-not-defined AZTEC-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-advanced-archery != heavy-cannoneers)
	(up-compare-goal gl-advanced-archery != medium-cannoneers)
	(up-compare-goal gl-advanced-archery != light-cannoneers)
	(building-type-count castle > 0)
	(up-compare-goal gl-population > 163)
	(or	(research-completed ri-elite-cataphract)
		(research-completed ri-elite-samurai))
=>
	(up-jump-rule 3)
)

(defrule
	(food-amount > 70)
	(or	(goal gl-advanced-archery heavy-cannoneers)
		(or	(and	(or	(up-compare-goal gl-enemy-huskarl-count > 1)
					(up-compare-goal gl-enemy-eew-count > 1))
				(and	(unit-type-count-total hand-cannoneer < 15)
					(up-research-status c: ri-paladin <= research-available)))
			(and	(goal gl-advanced-archery medium-cannoneers)
				(unit-type-count-total hand-cannoneer < 27))))
	(can-train hand-cannoneer)
=>
	(train hand-cannoneer)
)

(defrule
	(food-amount > 70)
	(or	(goal gl-advanced-archery light-cannoneers)
		(or	(players-unit-type-count focus-player teutonic-knight-line > 4)
			(or	(and	(up-compare-goal gl-enemy-infantry-count > 4)
					(and	(building-type-count castle == 0)
						(goal gl-advanced-trash YES)))
				(goal gl-strategy turkish-fast-imp))))
	(unit-type-count-total hand-cannoneer < 17)
	(can-train hand-cannoneer)
=>
	(train hand-cannoneer)
)

#load-if-defined SARACEN-CIV
(defrule
	(goal gl-advanced-archery 0)
	(or	(up-compare-goal gl-enemy-spearman-count > 6)
		(or	(players-unit-type-count focus-player samurai-line > 4)
			(or	(up-compare-goal gl-enemy-cataphract-count > 4)
				(players-unit-type-count focus-player kamayuk > 5))))
	(unit-type-count-total hand-cannoneer < 15)
	(can-train hand-cannoneer)
=>
	(train hand-cannoneer)
)
#end-if

#load-if-defined TURKISH-CIV
(defrule
	(goal gl-strategy turkish-fast-imp)
	(nand	(research-available ri-ring-archer-armor)
		(up-compare-goal gl-enemy-archery-count > 3))
	(or	(or	(unit-type-count-total scout-cavalry-line > 2)
			(building-type-count-total stable < 2))
		(not	(research-available ri-heresy)))
	(can-train hand-cannoneer)
=>
	(train hand-cannoneer)
)
#end-if

#end-if
#end-if
#end-if

(defrule
	(or	(current-age != feudal-age)
		(or	(and	(or	(goal gl-DRUSH-CONTROL MILITIAS-DONE)
					(goal gl-DRUSH-CONTROL DRUSH-OVER))
				(up-compare-const gv-maximum-age != feudal-age))
			(and	(food-amount < militia-dark-food)
				(goal gl-current-age gv-dark))))
=>
	(up-jump-rule 1)
)

(defrule
	(current-age <= feudal-age)
	(or	(current-age == feudal-age)
		(up-compare-const militia-food == 110))
	(nand	(up-compare-goal gl-my-villager-count-total > 35)
		(research-available ri-wheel-barrow))
	(goal gl-feudal-infantry men-at-arms)
	(food-amount >= militia-food)
	(unit-type-count-total militiaman-line < max-feudal-maa)
	(or	(research-completed ri-man-at-arms)
		(unit-type-count-total militiaman-line < 3))
	(can-train militiaman-line)
=>
	(train militiaman-line)
)

(defrule
	(or	(goal gl-advanced-infantry heavy-swordsmen)
		(goal CASTLE 4))
	(food-amount >= militia-food)
	(or	(up-research-status c: ri-long-swordsman >= research-pending)
		(current-age == feudal-age))
	(up-research-status c: ri-man-at-arms >= research-pending)
	(unit-type-count-total militiaman-line < 20)
	(or	(and	(strategic-number sn-allow-resource-spending > 1)
			(up-research-status c: ri-chain-mail >= research-pending))
		(unit-type-count-total militiaman-line < 13))
	(can-train militiaman-line)
=>
	(train militiaman-line)
)

(defrule
	(goal gl-advanced-infantry heavy-swordsmen)
	(or	(and	(current-age == castle-age)
			(unit-type-count-total militiaman-line < 30))
		(up-research-status c: last-militia-up >= research-pending))
	(food-amount >= militia-food)
	(up-research-status c: ri-chain-mail >= research-pending)
	(can-train militiaman-line)
=>
	(train militiaman-line)
)

(defrule
	(goal CASTLE 4)
	(food-amount >= militia-food)
	(or	(unit-type-count-total militiaman-line < 20)
		(up-compare-goal gl-current-age >= gv-castle-up))
	(up-research-status c: ri-long-swordsman >= research-pending)
	(up-research-status c: ri-chain-mail >= research-pending)
	(up-research-status c: ri-two-handed-swordsman != research-available)
	(up-research-status c: ri-plate-mail != research-available)
	(or	(and	(unit-type-count-total militiaman-line < 40)
			(goal gl-current-age gv-castle-up))
		(up-research-status c: last-militia-up >= research-pending))
	(can-train militiaman-line)
=>
	(train militiaman-line)
)

#load-if-defined GOTHIC-CIV
(defrule
	(goal gl-strategy default)
	(current-age >= castle-age)
	(food-amount > 88)
	(civilian-population > 90)
	(or	(players-unit-type-count focus-player militiaman-line > 13)
		(players-unit-type-count target-player militiaman-line > 13))
	(or	(unit-type-count-total militiaman-line < 25)
		(up-compare-goal gl-current-age >= gv-castle-up))
	(nor	(research-available ri-long-swordsman)
		(research-available ri-chain-mail))
	(unit-type-count-total militiaman-line < 40)
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
#end-if

#load-if-not-defined TURKISH-CIV
(defrule
	(goal gl-advanced-trash YES)
	(up-compare-goal temporary-goal8 <= 0)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(or	(and	(unit-type-count-total spearman-line < 20)
			(nand	(up-compare-goal gl-enemy-archery-count > 10)
				(up-compare-goal gl-enemy-cavalry-count < 5)))
		(and	(up-compare-goal gl-skirmisher-count-total >= 40)
			(strategic-number sn-allow-resource-spending > 5)))
	(food-amount > 84)
	(up-compare-const gv-meso-civ-enemy == 0)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(goal gl-advanced-trash YES)
	(up-compare-goal temporary-goal8 <= 0)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(nand	(up-compare-goal gl-enemy-archery-count > 10)
		(up-compare-goal gl-enemy-cavalry-count < 5))
	(building-type-count town-center > 2)
	(unit-type-count-total spearman-line < 30)
	(food-amount > 84)
	(up-compare-const gv-meso-civ-enemy == 0)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(food-amount > 84)
	(map-size tiny)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(goal gl-enemy-strategy KNIGHT-RUSH)
		(up-compare-goal gl-enemy-cavalry-count > 6))
	(nand	(unit-type-count-total spearman-line > 5)
		(up-research-status c: ri-pikeman < research-pending))
	(up-research-status c: ri-bodkin-arrow < research-pending)
	(up-research-status c: first-main-ranged-unit-upgrade < research-pending)
	(unit-type-count-total spearman-line < 35)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(or	(goal gl-strategy default)
		(goal gl-eew-strategy-type boom))
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-goal gl-current-age <= gv-castle)
	(food-amount > 74)
	(unit-type-count-total camel-line < 2)
	(nand	(unit-available camel)
		(and	(goal gl-strategy krush)
			(goal POSITION POCKET)))
	(up-compare-goal gl-enemy-heavy-cavalry-count > 0)
	(unit-type-count-total spearman-line < 6)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if

(defrule
	(goal gl-strategy-class basic-class)
	(food-amount > militia-food)
	(not	(research-completed my-unique-unit-upgrade))
	(strategic-number sn-allow-resource-spending > 3)
	(research-completed ri-champion)
	(unit-type-count-total militiaman-line < 30)
	(can-train militiaman-line)
=>
	(train militiaman-line)
)

(defrule
	(current-age == imperial-age)
	(food-amount > 88)
	(or	(goal gl-advanced-infantry heavy-swordsmen)
		(goal CASTLE 4))
	(or	(strategic-number sn-allow-resource-spending > 2)
		(unit-type-count-total militiaman-line < 18))
	(research-completed ri-two-handed-swordsman)
	(or	(up-research-status c: ri-champion >= research-pending)
		(unit-type-count-total militiaman-line < 23))
	(unit-type-count-total militiaman-line < 120)
	(can-train militiaman-line)
=>
	(train militiaman-line)
)

(defrule
	(or	(up-compare-goal gl-current-age != gv-feudal)
		(or	(goal gl-strategy sling)
			(and	(or	(and	(unit-type-count villager-food < 7)
						(and	(food-amount < 300)
							(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)))
					(up-compare-goal temporary-goal8 > 0))
				(wood-amount < 95))))
=>
	(up-jump-rule 20)
)

(defrule
	(wood-amount < 185)
	(soldier-count > 4)
	(or	(and	(research-available ri-wheel-barrow)
			(up-compare-goal gl-my-villager-count > 38))
		(and	(building-type-count-total blacksmith < 1)
			(or	(and	(or	(players-building-type-count target-player stone-wall-line > 4)
						(up-compare-goal gl-enemy-wall-count-total > 17))
					(players-military-population focus-player < 3))
				(soldier-count > 20))))
=>
	(up-jump-rule 19)
)

(defrule
	(goal gl-strategy flush)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-find-player enemy find-closest temporary-goal2)
	(up-find-next-player enemy find-closest temporary-goal2)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
	(up-get-focus-fact player-distance 0 temporary-goal3)
	(up-get-focus-fact building-type-count stable temporary-goal4)
	(up-get-focus-fact unit-type-count knight-line temporary-goal5)
	(up-modify-sn sn-focus-player-number g:= threat-player)
	(up-get-focus-fact unit-type-count knight-line temporary-goal6)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(goal gl-strategy flush)
	(food-amount > 74)
	(up-compare-goal gl-enable-pikemen != 0)
	(or	(up-compare-goal gl-enemy-cavalry-count > 3)
		(and	(or	(up-compare-goal gl-enemy-heavy-cavalry-count > 0)
				(goal gl-enemy-strategy KNIGHT-RUSH))
			(unit-type-count-total spearman-line < 6)))
	(or	(unit-type-count-total spearman-line < 7)
		(up-compare-goal gl-enemy-cavalry-count > 5))
	(unit-type-count-total spearman-line < 10)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(goal gl-strategy default)
	(food-amount > 74)
	(unit-type-count-total archer-line < 16)
	(up-compare-goal gl-feudal-archery != pure-archers)
	(up-compare-goal gl-enable-pikemen != 0)
	(up-compare-goal temporary-goal6 > 5)
	(food-amount < 500)
	(unit-type-count-total spearman-line < 12)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(up-compare-goal gl-enable-pikemen != 0)
	(or	(food-amount > 74)
		(unit-type-count-total spearman-line < 2))
	(or	(goal gl-enemy-strategy SCORPION-RUSH)
		(and	(up-compare-goal gl-enemy-scorpion-count > 0)
			(game-time < 960)))
	(unit-type-count-total scout-cavalry-line < 3)
	(up-research-status c: ri-man-at-arms <= research-pending)
	(unit-type-count-total spearman-line < 7)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(goal gl-strategy default)
	(food-amount > 74)
	(up-compare-goal gl-enable-pikemen != 0)
	(or	(up-compare-goal gl-enemy-cavalry-count > 1)
		(and	(or	(players-building-type-count focus-player stable > 1)
				(and	(players-building-type-count focus-player stable > 0)
					(unit-type-count-total spearman-line < 4)))
			(game-time < 1200)))
	(unit-type-count-total spearman-line < 7)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(goal gl-strategy flush)
	(food-amount > 74)
	(up-compare-goal gl-enable-pikemen != 0)
	(or	(unit-type-count-total spearman-line < 10)
		(and	(food-amount < 500)
			(up-compare-goal gl-enemy-heavy-cavalry-count > 7)))
	(or	(unit-type-count-total spearman-line < 15)
		(up-compare-goal gl-enemy-heavy-cavalry-count > 11))
	(unit-type-count-total spearman-line < 27)
	(up-compare-goal gl-enemy-heavy-cavalry-count > 3)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(or	(and	(up-compare-goal gl-enemy-wall-count-total >= 5)
			(and	(players-military-population focus-player < 10)
				(and	(up-compare-goal gl-enemy-archery-count < 2)
					(or	(soldier-count < 6)
						(up-compare-goal gl-soldier-percentage > 190)))))
		(or	(and	(research-available ri-wheel-barrow)
				(up-compare-goal gl-my-villager-count > 36))
			(up-compare-goal gl-strategy != flush)))
=>
	(up-jump-rule 4)
)

(defrule
	(food-amount > 75)
	(up-compare-const boom-type != hand-cannoneer); Not turks
	(up-compare-goal gl-feudal-archery != pure-archers)
	(or	(and	(up-compare-goal gl-enemy-archery-count > 10)
			(and	(players-military-population focus-player > 33)
				(military-population g:< gl-toughest-fought-enemy-military)))
		(goal gl-enemy-strategy XBOW-RUSH))
	(up-compare-goal gl-military-percentage < 125)
	(up-compare-goal gl-enemy-infantry-count < 2)
	(up-compare-goal gl-enemy-cavalry-count < 2)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(food-amount > 74)
	(up-compare-goal gl-feudal-archery != pure-archers)
	(or	(food-amount < 450)
		(players-unit-type-count focus-player archer-line > 15))
	(military-population g:< gl-toughest-fought-enemy-military)
	(up-compare-goal gl-skirmisher-count-total < 25)
	(up-compare-goal gl-enemy-archery-count > 3)
	(up-compare-goal gl-enemy-cavalry-count < 2)
	(up-compare-goal gl-enemy-infantry-count < 2)
	(up-compare-goal gl-enemy-eagle-count < 2)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(food-amount > 74)
	(up-compare-goal gl-feudal-archery != pure-archers)
	(up-compare-goal gl-skirmisher-count-total < 5)
	(or	(up-compare-goal gl-enemy-archery-count > 2)
		(and	(town-under-attack)
			(and	(players-building-type-count target-player stone-wall-line < 5)
				(up-compare-goal gl-feudal-archery != 0))))
	(up-compare-goal gl-enemy-strategy != KNIGHT-RUSH)
	(up-compare-goal gl-enemy-cavalry-count < 2)
	(up-compare-goal gl-enemy-eagle-count < 2)
	(players-building-type-count focus-player stable == 0)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(goal gl-feudal-archery archers)
	(food-amount > 74)
	(up-compare-goal gl-enemy-strategy != KNIGHT-RUSH)
	(up-compare-goal gl-enemy-eagle-count < 2)
	(or	(up-compare-goal gl-enemy-cavalry-count < 2)
		(up-compare-goal gl-enemy-archery-count > 2))
	(or	(up-compare-goal gl-skirmisher-count-total < 5)
		(or	(up-compare-goal gl-enemy-skirmisher-count > 7)
			(not	(can-train archer-line))))
	(up-compare-goal gl-skirmisher-count-total < 13)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(goal gl-feudal-archery skirmishers)
	(or	(gold-amount >= 95)
		(and	(or	(up-research-status c: ri-fletching >= research-pending)
				(unit-type-count archery-class < 15))
			(and	(up-research-status c: ri-loom >= research-pending)
				(goal gl-feudal-infantry 0))))
	(up-compare-goal gl-enemy-tower-count < 3)
	(up-compare-goal gl-enemy-strategy != TRUSH)
	(strategic-number sn-gold-gatherer-percentage > 0)
	(can-train archer-line)
=>
	(train archer-line)
)

(defrule
	(goal gl-feudal-archery archer-skirm)
	(up-compare-goal gl-enemy-strategy != TRUSH)
	(or	(and	(or	(unit-type-count archery-class < 15)
				(up-research-status c: ri-fletching >= research-pending))
			(up-research-status c: ri-loom >= research-pending))
		(gold-amount >= 95))
	(or	(and	(up-compare-goal gl-enemy-tower-count < 3)
			(unit-type-count-total archer-line < 18))
		(up-compare-const gv-maximum-age == feudal-age))
	(can-train archer-line)
=>
	(train archer-line)
)

(defrule
	(goal gl-strategy default)
	(up-compare-const gv-maximum-age == feudal-age)
	(nand	(civ-selected gothic)
		(up-compare-goal gl-my-villager-count-total < 80))
	(up-research-status c: ri-wheel-barrow >= research-pending)
	(or	(up-research-status c: ri-bloodlines >= research-pending)
		(and	(research-available ri-bloodlines)
			(unit-type-count-total scout-cavalry-line < 5)))
	(food-amount > 129)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)

(defrule
	(civ-selected spanish)
	(gold-amount < 550)
	(strategic-number sn-age-up-castle == 1)
	(nand	(and	(or	(goal gl-patrol-defence patrol-on)
				(up-compare-goal gl-enemy-units-in-town > 2))
			(goal TSA 0))
		(up-compare-goal gl-soldier-percentage < 75))
=>
	(up-jump-rule 1)
)

(defrule
	(goal gl-strategy flush)
	(up-compare-goal gl-enemy-strategy != TRUSH)
	(or	(and	(or	(unit-type-count archery-class < 15)
				(up-research-status c: ri-fletching >= research-pending))
			(up-research-status c: ri-loom >= research-pending))
		(gold-amount >= 95))
	(up-compare-goal gl-feudal-archery != skirmishers)
	(or	(gold-amount > 244)
		(food-amount < 400))
	(can-train archer-line)
=>
	(train archer-line)
)

(defrule
	(or	(and	(research-available ri-wheel-barrow)
			(and	(up-compare-goal gl-my-villager-count > 34)
				(or	(up-compare-goal gl-my-villager-count > 36)
					(food-amount >= 140))))
		(or	(up-compare-const feudal-extra-skirms == 0)
			(or	(food-amount < 75)
				(up-compare-goal gl-enemy-eagle-count >= 2))))
=>
	(up-jump-rule 2)
)

(defrule
	(or	(goal gl-feudal-archery archer-skirm)
		(and	(players-building-type-count target-player archery-range > 1)
			(goal gl-feudal-archery archers)))
	(nand	(up-compare-goal gl-enemy-wall-count-total >= 5)
		(up-compare-goal gl-enemy-archer-count < 2))
	(or	(up-compare-goal gl-skirmisher-count-total < 25)
		(unit-type-count-total archer-line > 10))
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(or	(goal gl-feudal-archery skirmishers)
		(and	(up-compare-goal gl-skirmisher-count-total > 15)
			(and	(building-type-count mining-camp == 0)
				(and	(food-amount < 450)
					(game-time < 1400)))))
	(nand	(strategic-number sn-gold-gatherer-percentage > 0)
		(building-type-count-total mining-camp == 0))
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(or	(goal gl-enable-camels 0)
		(or	(and	(up-compare-const gv-michi-style == 1)
				(or	(civ-selected persian)
					(up-research-status c: ri-paladin >= research-pending)))
			(or	(and	(dropsite-min-distance gold == -1)
					(unit-type-count trade-cart == 0))
				(research-available ri-heavy-camel))))
=>
	(up-jump-rule 3)
)

(defrule
	(goal gl-strategy default)
	(current-age == imperial-age)
	(food-amount > 104)
	(up-compare-goal gl-trade-unit-count-total > 19)
	(up-compare-const anti-mangudai-camels == 1)
	(or	(players-unit-type-count focus-player mangudai-line > 10)
		(players-unit-type-count target-player mangudai-line > 10))
	(unit-type-count-total camel-line < 25)
	(can-train camel-line)
=>
	(train camel-line)
)

(defrule
	(goal gl-strategy default)
	(current-age == imperial-age)
	(food-amount > 104)
	(up-compare-goal gl-trade-unit-count-total > 19)
	(not	(civ-selected persian))
	(or	(players-unit-type-count focus-player war-wagon-line > 10)
		(players-unit-type-count target-player war-wagon-line > 10))
	(unit-type-count-total camel-line < 25)
	(can-train camel-line)
=>
	(train camel-line)
)

(defrule
	(goal gl-strategy-class basic-class)
	(food-amount > 104)
	(nand	(unit-type-count-total camel-line > 24)
		(up-compare-goal gl-trade-unit-count-total < 30))
	(nand	(unit-type-count-total camel-line > 9)
		(up-research-status c: ri-chain-barding <= research-available))
	(or	(unit-type-count-total camel-line g:< gl-enemy-heavy-cavalry-count)
		(and	(up-compare-goal gl-advanced-cavalry != heavy-knights)
			(up-compare-goal gl-strategy != krush)))
	(unit-type-count-total camel-line g:< gl-enemy-cavalry-count)
	(can-train camel-line)
=>
	(train camel-line)
)

(defrule
	(goal gl-advanced-cavalry heavy-camels)
	(food-amount > 104)
	(nand	(unit-type-count-total camel-line > 9)
		(or	(up-research-status c: ri-chain-barding <= research-available)
			(up-research-status c: ri-heavy-camel == research-available)))
	(or	(unit-type-count-total camel-line < 17)
		(up-research-status c: ri-plate-barding >= research-pending))
	(unit-type-count-total camel-line < 33)
	(can-train camel-line)
=>
	(train camel-line)
)

(defrule
	(goal gl-strategy default)
	(building-type-count castle == 0)
	(up-compare-goal temporary-goal8 <= 0)
	(goal gl-eagles extra-eagles)
	(goal gl-advanced-archery 0)
	(research-completed ri-crossbow)
	(goal gl-current-age gv-castle)
	(game-time < 2700)
	(up-compare-goal gl-enemy-infantry-count > 4)
	(unit-type-count archer-line < 15)
	(can-train archer-line)
=>
	(train archer-line)
)

#load-if-not-defined TURKISH-CIV
(defrule
	(or	(goal gl-enable-pikemen 0)
		(or	(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)
			(or	(goal gl-enable-pikemen 2)
				(or	(goal gl-enable-pikemen 4)
					(or	(up-compare-goal temporary-goal8 > 0)
						(up-compare-flag gl-flag == pikeman-upgrade-notice))))))
=>
	(up-jump-rule 8)
)

(defrule
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-current-age >= gv-castle)
	(food-amount > 74)
	(unit-type-count-total spearman-line < 30)
	(or	(strategic-number sn-allow-resource-spending > 1)
		(unit-type-count-total spearman-line < 17))
	(up-compare-goal gl-enemy-cavalry-count > 6)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(goal gl-strategy-class basic-class)
	(goal gl-current-age gv-imperial)
	(food-amount > 74)
	(up-compare-goal gl-enemy-cavalry-count > 30)
	(or	(unit-type-count spearman-line g:< gl-enemy-cavalry-count)
		(and	(unit-type-count-total spearman-line < 70)
			(up-compare-goal gl-enemy-cavalry-count > 45)))
	(up-research-status c: last-spearman-up >= research-pending)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-current-age >= gv-castle)
	(food-amount > 74)
	(up-compare-goal gl-enemy-cavalry-count > 14)
	(unit-type-count-total spearman-line < 50)
	(nand	(unit-type-count-total spearman-line > 20)
		(research-available ri-halberdier))
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(goal gl-eew-strategy-type boom)
	(up-compare-goal gl-current-age >= gv-castle)
	(food-amount > 84)
	(or	(up-compare-goal gl-enemy-cavalry-count > 6)
		(goal gl-enemy-strategy KNIGHT-RUSH))
	(or	(up-compare-goal gl-enemy-cavalry-count > 11)
		(unit-type-count-total spearman-line < 17))
	(unit-type-count-total spearman-line < 30)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(food-amount > 74)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(unit-type-count-total spearman-line < 7)
	(up-compare-goal gl-enemy-cavalry-count > 2)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(food-amount > 74)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(unit-type-count-total spearman-line < 9)
	(up-compare-goal gl-enemy-cataphract-count > 2)
	(up-compare-const gv-imperial-pikemen == 1)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(goal gl-current-age gv-imperial)
	(up-research-status c: last-spearman-up >= research-pending)
	(food-amount > 74)
	(or	(unit-type-count-total spearman-line < 35)
		(goal gl-advanced-trash YES))
	(or	(up-compare-goal gl-enemy-cavalry-count > 6)
		(up-compare-goal gl-enemy-cataphract-count > 5))
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-strategy != default)
	(or	(players-building-type-count target-player stable > 1)
		(and	(map-size tiny)
			(and	(goal gl-enemy-strategy KNIGHT-RUSH)
				(current-age-time < 600))))
	(unit-type-count-total spearman-line < 10)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if

(defrule
	(or	(goal gl-advanced-archery light-archers)
		(goal gl-advanced-archery light-CAs))
	(up-compare-goal temporary-goal8 <= 0)
	(up-compare-goal gl-military-percentage < 180)
	(up-compare-goal gl-castle-age-style >= mangonel-push)
	(unit-type-count-total main-ranged-unit < 40)
	(gold-amount > 244)
	(can-train main-ranged-unit)
=>
	(train main-ranged-unit)
)

(defrule
	(or	(goal gl-strategy xbow-boom)
		(goal gl-advanced-archery light-archers))
	(up-compare-goal temporary-goal8 <= 0)
	(unit-type-count-total archer-line < 20)
	(nand	(gold-amount < 120)
		(and	(unit-type-count-total archer-line > 4)
			(research-available ri-crossbow)))
	(or	(gold-amount > 244)
		(up-compare-goal gl-current-age >= gv-feudal-up))
	(can-train archer-line)
=>
	(train archer-line)
)

(defrule
	(or	(goal gl-strategy default)
		(or	(and	(or	(goal gl-strategy krush)
					(goal gl-strategy knight-rush))
				(and	(food-amount >= maximum-castle-queue-food)
					(or	(up-compare-goal TSA >= 1)
						(up-compare-goal gl-enemy-units-in-town < 4))))
			(up-compare-goal temporary-goal8 > 0)))
=>
	(up-jump-rule 5)
)

(defrule
	(or	(goal gl-strategy krush)
		(goal gl-strategy knight-rush))
	(nand	(goal MILITARY 1)
		(unit-type-count-total battering-ram-line == 0))
	(building-type-count-total town-center > 2)
	(unit-type-count-total scorpion-line < 4)
	(or	(players-unit-type-count focus-player crossbowman > 7)
		(up-compare-goal gl-enemy-spearman-count > 6))
	(can-train scorpion-line)
=>
	(train scorpion-line)
)

(defrule
	(goal gl-strategy xbow-boom)
	(research-completed ri-crossbow)
	(building-type-count-total town-center > 1)
	(or	(building-type-count-total town-center > 2)
		(or	(goal POSITION FLANK)
			(strategic-number sn-allow-resource-spending > 0)))
	(or	(unit-type-count-total archer-line < 34)
		(and	(food-amount < 800)
			(gold-amount > 550)))
	(can-train archer-line)
=>
	(train archer-line)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(food-amount > 84)
	(or	(and	(goal SLING 3)
			(up-compare-goal gl-skirmisher-count-total g:< gl-enemy-skirmisher-count))
		(and	(unit-type-count villager-gold < 3)
			(up-compare-goal gl-enemy-archery-count > 12)))
	(goal gl-current-age gv-feudal-up)
	(or	(food-amount > 300)
		(up-compare-goal gl-skirmisher-count-total < 6))
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(food-amount > 84)
	(up-research-status c: ri-elite-skirmisher >= research-available)
	(up-compare-goal gl-enemy-skirmisher-count > 2)
	(up-compare-goal gl-enemy-eagle-count < 6)
	(up-compare-goal gl-enemy-archery-count > 7)
	(building-type-count-total town-center > 2)
	(up-compare-goal gl-military-percentage < 130)
	(players-current-age focus-player >= castle-age)
	(up-compare-goal gl-target-player-distance < 100)
	(or	(up-compare-goal gl-skirmisher-count-total < 10)
		(up-research-status c: ri-elite-skirmisher >= research-pending))
	(up-compare-goal gl-skirmisher-count-total < 20)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(nor	(research-available ri-bodkin-arrow)
		(research-available first-main-ranged-unit-upgrade))
	(nand	(goal RAM 1)
		(unit-type-count-total battering-ram-line < 1))
	(nand	(up-compare-goal gl-enemy-scorpion-count > 1)
		(unit-type-count-total mangonel-line < 1))
	(up-compare-flag gl-flag != pikeman-upgrade-notice)
	(can-train main-ranged-unit)
=>
	(train main-ranged-unit); Last rule jumped
)

(defrule
	(up-compare-goal temporary-goal8 > 0)
=>
	(up-jump-rule 9)
)

(defrule
	(goal gl-advanced-archery main-ranged)
	(goal gl-current-age gv-castle)
	(or	(strategic-number sn-allow-resource-spending <= 0)
		(or	(and	(food-amount > 600)
				(soldier-count > 40))
			(and	(strategic-number sn-percent-attack-soldiers == 0)
				(and	(up-compare-goal gl-soldier-percentage > 200)
					(up-compare-goal threat-time > 10000)))))
	(unit-type-count-total main-ranged-unit >= 30)
=>
	(up-jump-rule 3)
)

(defrule
	(soldier-count > 15)
	(or	(and	(strategic-number sn-percent-attack-soldiers == 0)
			(soldier-count > 40))
		(and	(stone-amount >= 100)
			(and	(building-type-count-total town-center < 3)
				(wood-amount < 300))))
	(goal gl-current-age gv-castle)
	(up-compare-goal gl-soldier-percentage > 125)
	(or	(goal gl-safe-in-town YES)
		(up-compare-goal gl-soldier-percentage > 200))
=>
	(up-jump-rule 2)
)

(defrule
	(goal gl-advanced-archery main-ranged)
	(or	(and	(strategic-number sn-allow-resource-spending > 0)
			(current-age == castle-age))
		(unit-type-count-total main-ranged-unit < 20))
	(up-research-status c: first-main-ranged-unit-upgrade != research-available)
	(or	(and	(unit-type-count-total main-ranged-unit < 35)
			(soldier-count < 60))
		(strategic-number sn-allow-resource-spending > 2))
	(unit-type-count-total main-ranged-unit < 60)
	(can-train main-ranged-unit)
=>
	(train main-ranged-unit)
)

(defrule
	(or	(and	(goal gl-advanced-archery main-ranged)
			(or	(current-age == imperial-age)
				(gold-amount > 300)))
		(and	(goal gl-strategy ranged-rush-strategy); Will do
			(gold-amount >= 145)))
	(or	(up-compare-goal gl-current-age >= gv-feudal-up)
		(gold-amount >= 245))
	(up-research-status c: main-ranged-unit-upgrade != research-available)
	(unit-type-count-total main-ranged-unit < 70)
	(can-train main-ranged-unit)
=>
	(train main-ranged-unit)
)

(defrule
	(goal gl-advanced-trash YES)
	(up-compare-goal gl-skirmisher-count-total > 14)
	(or	(unit-type-count-total spearman-line < 25)
		(or	(up-compare-goal gl-enemy-cavalry-count >= 15)
			(up-compare-goal gl-enemy-cataphract-count >= 15)))
	(or	(up-compare-goal gl-enemy-cavalry-count >= 5)
		(up-compare-goal gl-enemy-cataphract-count >= 5))
	(unit-type-count-total spearman-line < 45)
=>
	(up-jump-rule 4)
)

(defrule
	(goal gl-advanced-trash YES)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(nand	(up-compare-goal gl-skirmisher-count-total > 14)
		(or	(building-type-count-total town-center == 1)
			(research-available ri-elite-skirmisher)))
	(nand	(up-compare-goal gl-enemy-archery-count < 5)
		(or	(up-compare-goal gl-enemy-cavalry-count > 5)
			(goal gl-enemy-strategy KNIGHT-RUSH)))
	(food-amount > 84)
	(up-compare-goal gl-skirmisher-count-total < 40)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(goal gl-advanced-trash YES)
	(up-compare-goal gl-skirmisher-count-total > 30)
	(or	(up-compare-goal gl-skirmisher-count-total >= 45)
		(and	(unit-type-count-total spearman-line < 19)
			(nand	(up-compare-goal gl-enemy-archery-count > 10)
				(and	(up-compare-goal gl-enemy-cavalry-count < 5)
					(up-compare-goal gl-enemy-cataphract-count < 5)))))
	(unit-type-count-total spearman-line < 35)
	(up-compare-const gv-meso-civ-enemy == 0)
=>
	(up-jump-rule 2)
)

(defrule
	(goal gl-advanced-trash YES)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(or	(and	(unit-type-count-total spearman-line > 18)
			(up-compare-goal gl-skirmisher-count-total < 40))
		(strategic-number sn-allow-resource-spending > 5))
	(up-research-status c: ri-elite-skirmisher >= research-pending)
	(nand	(up-compare-goal gl-skirmisher-count-total >= 40)
		(or	(research-available ri-chemistry)
			(research-available ri-ring-archer-armor)))
	(food-amount > 84)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(goal gl-advanced-trash YES)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(food-amount > 84)
	(or	(up-compare-goal gl-skirmisher-count-total < 14)
		(and	(research-completed ri-elite-skirmisher)
			(or	(and	(building-type-count-total town-center > 2)
					(soldier-count g:< gl-toughest-fought-enemy-military))
				(up-compare-goal TSA >= 1))))
	(up-compare-goal gl-skirmisher-count-total < 100)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

#load-if-defined BYZANTINE-CIV
(defrule
	(goal gl-strategy default)
	(up-compare-goal temporary-goal8 <= 0)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count castle == 0)
	(or	(up-compare-goal gl-enemy-infantry-count > 2)
		(and	(up-compare-goal gl-enemy-eagle-count > 2)
			(players-current-age focus-player == castle-age)))
	(cc-players-unit-type-count 0 gold-mine > 2)
	(or	(unit-type-count-total archer-line < 13)
		(building-type-count-total town-center > 2))
	(unit-type-count-total archer-line < 22)
	(can-train archer-line)
=>
	(train archer-line)
)

(defrule
	(goal gl-strategy default)
	(up-compare-goal temporary-goal8 <= 0)
	(goal gl-current-age gv-feudal-up)
	(soldier-count g:< gl-toughest-fought-enemy-military)
	(gold-amount > 400)
	(unit-type-count-total archer-line > 3)
	(can-train archer-line)
=>
	(train archer-line)
)
#end-if

#load-if-not-defined TURKISH-CIV
(defrule
	(or	(goal gl-enable-skirmishers 0)
		(or	(up-compare-goal gl-current-age <= gv-feudal)
			(or	(food-amount < 85)
				(or	(goal gl-enable-skirmishers 2)
					(or	(up-compare-goal gl-strategy-class != basic-class)
						(up-compare-goal temporary-goal8 > 0))))))
=>
	(up-jump-rule 9)
)

(defrule
	(up-compare-goal gl-castle-age-style >= mangonel-push)
	(soldier-count < 63)
	(soldier-count > 25)
	(up-compare-goal gl-military-percentage > 80)
	(up-compare-goal gl-skirmisher-count-total > 7)
	(or	(up-compare-goal gl-skirmisher-count-total > 12)
		(soldier-count < 40))
	(or	(up-compare-goal gl-skirmisher-count-total > 17)
		(soldier-count < 50))
=>
	(up-jump-rule 8)
)

(defrule
	(goal gl-strategy default)
	(strategic-number sn-allow-resource-spending > 0)
	(soldier-count < 45)
	(unit-type-count-total battering-ram-line > 2)
	(or	(up-compare-goal gl-enemy-castle-distance < 33)
		(up-compare-goal gl-enemy-tower-distance < 33))
	(or	(up-compare-goal gl-enemy-tower-count > 2)
		(players-building-type-count target-player castle > 0))
	(up-compare-goal gl-enemy-cavalry-count < 8)
	(up-projectile-detected projectile-fortification < 10000)
	(up-compare-goal gl-skirmisher-count-total < 25)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(up-compare-goal gl-enemy-gunpowder-count < 4)
	(up-compare-goal gl-enemy-archer-count < 35)
	(or	(up-compare-goal gl-enemy-archer-count < 16)
		(and	(unit-type-count-total anti-skirmisher-unit > 17)
			(up-compare-goal gl-skirmisher-count-total > 20)))
	(unit-type-count-total anti-skirmisher-unit >= 10)
=>
	(up-jump-rule 3)
)

(defrule
	(up-research-status c: ri-elite-skirmisher != research-available)
	(or	(research-completed ri-elite-skirmisher)
		(goal gl-strategy default))
	(or	(up-compare-goal gl-enemy-archery-count > 10)
		(up-compare-goal gl-enemy-gunpowder-count > 8))
	(or	(up-compare-goal gl-skirmisher-count-total < 22)
		(or	(up-compare-goal gl-enemy-archery-count > 16)
			(up-compare-goal gl-enemy-gunpowder-count > 14)))
	(up-compare-goal gl-skirmisher-count-total < 37)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(or	(strategic-number sn-allow-resource-spending > 0)
		(soldier-count < 6))
	(up-compare-goal gl-enemy-archery-count > 8)
	(up-compare-goal gl-skirmisher-count-total < 16)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(up-compare-goal gl-enemy-archery-count > 4)
		(up-compare-goal gl-enemy-gunpowder-count > 3))
	(up-compare-goal gl-skirmisher-count-total < 10)
	(up-compare-goal gl-enemy-archery-count > 35)
	(research-completed ri-bracer)
	(up-compare-goal gl-skirmisher-count-total < 60)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(or	(and	(up-compare-goal gl-enemy-spearman-count > 6)
			(unit-type-count cavalry-class > 4))
		(up-compare-goal gl-enemy-mameluke-count > 6))
	(unit-type-count anti-spearman-unit < 5)
	(unit-type-count-total archery-class < 17)
	(unit-type-count archer-line < 10)
	(unit-type-count archery-cannon-class < 6)
	(unit-type-count cavalry-archer-class < 6)
	(unit-type-count scorpion-class < 5)
	(up-research-status c: ri-elite-skirmisher >= research-pending)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(strategic-number sn-allow-resource-spending > 0)
	(goal gl-advanced-archery elite-skirmishers)
	(up-compare-goal gl-skirmisher-count-total < 70)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(or	(research-completed ri-bracer)
		(strategic-number sn-allow-resource-spending > 2))
	(or	(and	(up-compare-goal gl-enemy-archery-count > 17)
			(or	(up-compare-goal gl-enemy-archer-count > 17)
				(unit-type-count-total anti-skirmisher-unit < 10)))
		(or	(up-compare-goal gl-enemy-mameluke-count > 15)
			(up-compare-goal gl-enemy-gunpowder-count > 15)))
	(up-compare-goal gl-skirmisher-count-total < 37)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
#end-if

#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV

#load-if-defined HUN-CIV
(defrule
	(goal gl-strategy default)
	(up-compare-goal temporary-goal8 <= 0)
	(goal gl-current-age gv-feudal-up)
	(or	(up-compare-goal gl-enemy-heavy-cavalry-count >= 4)
		(or	(up-compare-goal gl-enemy-eagle-count >= 4)
			(unit-type-count-total archer-line > 6))); There are already some archers so xbow is taken anyway
	(players-military-population focus-player > 10)
	(soldier-count g:< gl-toughest-fought-enemy-military)
	(gold-amount > 300)
	(soldier-count < 32)
	(can-train archer-line)
=>
	(train archer-line)
)

(defrule
	(goal gl-strategy CA-boom)
	(up-compare-goal temporary-goal8 <= 0)
	(nand	(unit-type-count-total cavalry-archer-line > 14)
		(building-type-count-total town-center < 2))
	(or	(unit-type-count-total cavalry-archer-line < 35)
		(building-type-count-total town-center > 2))
	(unit-type-count-total cavalry-archer-line < 45)
	(can-train cavalry-archer-line)
=>
	(train cavalry-archer-line)
)

(defrule
	(up-compare-goal temporary-goal8 <= 0)
	(up-compare-goal gl-advanced-archery != 0)
	(up-compare-goal gl-advanced-archery != elite-skirmishers)
	(nand	(up-compare-goal gl-population >= almost-full-pop)
		(unit-type-count-total battering-ram-line < 3))
	(research-completed ri-bracer)
	(research-completed ri-chemistry)
	(research-completed ri-heavy-cavalry-archer)
	(or	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
		(or	(warboat-count > 25)
			(population < 160)))
	(can-train cavalry-archer-line)
=>
	(train cavalry-archer-line)
)

(defrule
	(up-compare-goal temporary-goal8 <= 0)
	(or	(goal gl-strategy CA-boom)
		(and	(goal gl-advanced-archery light-CAs)
			(unit-type-count-total cavalry-archer-line < 17)))
	(or	(unit-type-count-total cavalry-archer-line < 15)
		(or	(and	(unit-type-count-total cavalry-archer-line < 45)
				(building-type-count-total town-center > 1))
			(up-compare-goal gl-current-age >= gv-castle-up)))
	(unit-type-count-total cavalry-archer-line < 60)
	(can-train cavalry-archer-line)
=>
	(train cavalry-archer-line)
)
#end-if

#load-if-defined MAGYAR-CIV
(defrule
	(up-compare-goal temporary-goal8 <= 0)
	(goal gl-advanced-archery CAs)
	(or	(unit-type-count-total cavalry-archer-line < 12)
		(or	(and	(unit-type-count-total cavalry-archer-line < 20)
				(building-type-count-total town-center > 1))
			(up-compare-goal gl-current-age >= gv-castle-up)))
	(unit-type-count-total cavalry-archer-line < 40)
	(can-train cavalry-archer-line)
=>
	(train cavalry-archer-line)
)
#end-if

#load-if-defined MONGOL-CIV
(defrule
	(up-compare-goal temporary-goal8 <= 0)
	(goal gl-advanced-archery CAs)
	(or	(unit-type-count-total cavalry-archer-line < 25)
		(or	(and	(unit-type-count-total cavalry-archer-line < 45)
				(building-type-count-total town-center > 1))
			(up-compare-goal gl-current-age >= gv-castle-up)))
	(unit-type-count-total cavalry-archer-line < 60)
	(can-train cavalry-archer-line)
=>
	(train cavalry-archer-line)
)
#end-if

#load-if-not-defined INDIAN-CIV
(defrule
	(or	(food-amount > 109)
		(goal gl-strategy saracen-heavy-krush))
	(or	(and	(goal gl-strategy heavy-krush)
			(unit-type-count-total knight-line < 4))
		(and	(up-research-status c: ri-chain-barding >= research-pending)
			(goal gl-strategy heavy-krush)))
	(can-train knight-line)
=>
	(train knight-line)
)
#end-if
#load-if-defined UP-ALLY-IN-GAME
(defrule
	(or	(and	(current-age-time >= 300)
			(current-age != castle-age))
		(up-compare-goal gl-strategy != default))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-const extra-knights == 1)
	(goal gl-advanced-infantry 0)
	(goal gl-advanced-archery 0)
	(soldier-count < 35)
	(up-compare-goal gl-population < almost-full-pop)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(building-type-count stable > 1)
	(nand	(unit-type-count-total knight-line > 15)
		(or	(research-available ri-cavalier)
			(research-available ri-plate-barding)))
	(building-type-count castle == 0)
	(can-train knight-line)
=>
	(train knight-line)
)
#end-if

(defrule
	(or	(goal gl-advanced-cavalry LC)
		(and	(goal gl-enemy-strategy MONK-RUSH)
			(unit-type-count-total scout-cavalry-line < 12)))
	(food-amount > 129)
	(nand	(unit-type-count-total scout-cavalry-line > 5)
		(research-available ri-light-cavalry))
	(or	(unit-type-count-total scout-cavalry-line < 17)
		(food-amount > 1300))
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)

(defrule
	(goal gl-advanced-cavalry LC)
	(food-amount > 129)
	(or	(and	(strategic-number sn-allow-resource-spending > 5)
			(up-research-status c: ri-hussar != research-available))
		(and	(food-amount > 1100)
			(unit-type-count-total scout-cavalry-line < 30)))
	(research-completed ri-chain-barding)
	(research-completed ri-iron-casting)
	(up-research-status c: ri-light-cavalry != research-available)
	(up-research-status c: ri-blast-furnace != research-available)
	(up-research-status c: ri-plate-barding != research-available)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)

(defrule
	(or	(up-compare-goal gl-strategy != default)
		(or	(up-compare-goal gl-current-age != gv-imperial)
			(or	(and	(up-compare-goal gl-trade-unit-count-total >= 10)
					(up-compare-goal gl-gold-income-per-minute >= 600))
				(and	(unit-type-count-total scout-cavalry-line > 10)
					(and	(gold-amount >= 50)
						(research-available ri-light-cavalry))))))
=>
	(up-jump-rule 2)
)

(defrule
	(or	(and	(current-age-time > 300)
			(and	(unit-type-count-total scout-cavalry-line < late-game-scout-amount)
				(gold-amount < 50)))
		(and	(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)
			(up-compare-goal gl-trade-unit-count-total < 25)))
	(food-amount > 129)
	(strategic-number sn-allow-resource-spending > 2)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)

(defrule
	(current-age-time > 300)
	(gold-amount < 100)
	(food-amount > 129)
	(strategic-number sn-allow-resource-spending > 2)
	(unit-type-count-total scout-cavalry-line < upgraded-scout-amount)
	(research-completed ri-chain-barding)
	(research-completed ri-iron-casting)
	(nor	(research-available ri-light-cavalry)
		(research-available ri-hussar))
	(up-research-status c: ri-blast-furnace != research-available)
	(up-research-status c: ri-plate-barding != research-available)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
#end-if
#end-if

(defrule
	(or	(and	(unit-type-count-total monk-set < 8)
			(or	(and	(goal gl-strategy ranged-rush-strategy)
					(up-compare-goal gl-enemy-huskarl-count > 0))
				(strategic-number sn-monk-trained == 0)))
		(and	(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)
			(gold-amount > 500)))
	(can-train monk)
=>
	(train monk)
	(set-strategic-number sn-monk-trained 1)
)

(defrule
	(up-compare-goal gl-nothing-style-map != YES)
	(goal gl-current-age gv-castle)
	(or	(and	(goal gl-strategy eew-strategy)
			(soldier-count g:< gl-toughest-fought-enemy-military))
		(up-compare-goal gl-enemy-heavy-cavalry-count > 0))
	(up-compare-const gv-meso-civ-enemy == 0)
	(players-military-population any-enemy > 4)
	(players-current-age any-enemy >= castle-age)
	(unit-type-count-total monk-set < 6)
	(can-train monk)
=>
	(train monk)
	(set-strategic-number sn-monk-trained 1)
)

#load-if-defined TURKISH-CIV
(defrule
	(goal gl-strategy turkish-fast-imp)
	(current-age == castle-age)
	(research-completed ri-sanctity)
	(up-compare-const gv-meso-civ-enemy == 0)
	(players-military-population any-enemy > 4)
	(players-current-age any-enemy == castle-age)
	(unit-type-count-total monk-set < 6)
	(can-train monk)
=>
	(train monk)
	(set-strategic-number sn-monk-trained 1)
)
#else
(defrule
	(or	(up-compare-goal gl-strategy-class != basic-class)
		(and	(up-compare-goal gl-skirmisher-count-total > 35)
			(and	(food-amount > 129)
				(and	(unit-type-count-total scout-cavalry-line < 25)
					(or	(goal gl-advanced-cavalry LC)
						(and	(current-age-time > 1200)
							(up-compare-const late-game-scout-amount >= 25)))))))
=>
	(up-jump-rule 3)
)

#load-if-not-defined UP-2-PLAYER-GAME
(defrule
	(up-compare-goal gl-gold-income-per-minute >= 300)
	(up-compare-goal gl-enemy-archery-count < 5)
	(up-compare-goal gl-enemy-gunpowder-count < 5)
	(or	(up-compare-goal gl-enemy-spearman-count < 10)
		(unit-type-count cavalry-class < 5))
=>
	(up-jump-rule 1)
)

(defrule
	(or	(and	(gold-amount < 50)
			(up-compare-goal gl-skirmisher-count-total < 30))
		(wood-amount > 500))
	(gold-amount < 100)
	(up-compare-goal gl-current-age >= gv-castle)
	(up-compare-goal gl-trade-unit-count-total < 7)
	(up-compare-goal gl-gold-income-per-minute < 300)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(food-amount > 500)
	(current-age-time > 1200)
	(up-compare-goal gl-skirmisher-count-total < 70)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(or	(and	(gold-amount < 50)
			(unit-type-count-total spearman-line < 30))
		(wood-amount > 500))
	(gold-amount < 100)
	(up-compare-goal gl-trade-unit-count-total < 7)
	(up-compare-goal gl-gold-income-per-minute < 300)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(food-amount > 500)
	(up-compare-goal gl-current-age >= gv-castle)
	(current-age-time > 1200)
	(unit-type-count-total spearman-line < 50)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#else
(defrule
	(up-compare-goal gl-gold-income-per-minute >= 300)
	(up-compare-goal gl-enemy-archery-count < 5)
	(up-compare-goal gl-enemy-gunpowder-count < 5)
	(or	(up-compare-goal gl-enemy-spearman-count < 10)
		(unit-type-count cavalry-class < 5))
=>
	(up-jump-rule 2)
)

(defrule
	(or	(and	(gold-amount < 50)
			(up-compare-goal gl-skirmisher-count-total < 30))
		(and	(food-amount > 500)
			(wood-amount > 500)))
	(gold-amount < 100)
	(up-compare-goal gl-current-age >= gv-castle)
	(strategic-number sn-allow-resource-spending > 2)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(food-amount > 84)
	(current-age-time > 1200)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(or	(gold-amount < 50)
		(food-amount > 500))
	(food-amount > 84)
	(wood-amount > 500)
	(up-compare-goal gl-current-age >= gv-castle)
	(military-population < 70)
	(or	(cc-players-unit-type-count 0 tree > 20)
		(up-compare-const scout-unit == eagle-warrior-line))
	(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)
	(or	(wood-amount > 600)
		(up-compare-goal gl-skirmisher-count-total < 30))
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(or	(unit-type-count-total scout-cavalry-line > 10)
		(up-compare-const late-game-scout-amount >= 25))
	(up-compare-goal gl-enemy-cavalry-count < 5)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(gold-amount < 50)
		(food-amount > 500))
	(food-amount > 75)
	(wood-amount > 500)
	(up-compare-goal gl-current-age >= gv-castle)
	(military-population < 70)
	(or	(cc-players-unit-type-count 0 tree > 20)
		(up-compare-const scout-unit == eagle-warrior-line))
	(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)
	(or	(wood-amount > 600)
		(unit-type-count-total spearman-line < 30))
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(food-amount > 500)
	(or	(gold-amount < 50)
		(and	(wood-amount > 500)
			(unit-type-count-total spearman-line < 30)))
	(gold-amount < 100)
	(up-compare-goal gl-current-age >= gv-castle)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(nand	(unit-type-count-total scout-cavalry-line > 10)
		(up-compare-goal gl-enemy-cavalry-count < 5))
	(current-age-time > 1200)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if
#end-if

#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined INCAN-CIV
(defrule
	(up-compare-goal gl-strategy != CA-rush)
	(or	(gold-amount < 50)
		(and	(food-amount > 500)
			(wood-amount > 400)))
	(strategic-number sn-allow-resource-spending > 2)
	(gold-amount < 350)
	(up-compare-goal gl-trade-unit-count-total < 20)
	(or	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
		(warboat-count > 25))
	(unit-type-count-total scout-cavalry-line < late-game-scout-amount)
	(current-age-time > 1200)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)

(defrule
	(or	(dropsite-min-distance wood > 12)
		(dropsite-min-distance wood == -1))
	(game-time > 3600)
	(or	(and	(food-amount > 500)
			(wood-amount < 400))
		(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion))
	(up-compare-goal gl-trade-unit-count-total < 25)
	(nand	(unit-type-count-total scout-cavalry-line > 12)
		(research-available ri-light-cavalry))
	(strategic-number sn-allow-resource-spending > 2)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
#end-if
#end-if

#load-if-not-defined SARACEN-CIV
#load-if-not-defined TURKISH-CIV
(defrule
	(or	(goal CASTLE 1)
		(goal gl-advanced-infantry pikemen))
	(food-amount > 74)
	(up-compare-goal temporary-goal8 <= 0)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(unit-type-count-total spearman-line < 25)
	(nand	(research-available ri-halberdier)
		(unit-type-count-total spearman-line > 20))
	(or	(up-research-status c: ri-pikeman >= research-pending)
		(unit-type-count-total spearman-line < 6))
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(or	(and	(goal CASTLE 1)
			(unit-type-count-total spearman-line < 40))
		(goal gl-advanced-infantry pikemen))
	(up-compare-goal temporary-goal8 <= 0)
	(food-amount > 74)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(nand	(research-available ri-halberdier)
		(unit-type-count-total spearman-line > 20))
	(up-research-status c: ri-pikeman >= research-pending)
	(unit-type-count-total spearman-line < 60)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(goal CASTLE 1)
	(food-amount > 74)
	(up-compare-goal temporary-goal8 <= 0)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(or	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
		(or	(warboat-count > 25)
			(and	(unit-type-count-total spearman-line < 35)
				(population < 185))))
	(research-completed ri-halberdier)
	(unit-type-count-total spearman-line < 65)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if
#end-if
#end-if

(defrule
	(soldier-count > 30)
	(or	(strategic-number sn-allow-resource-spending > 3)
		(players-building-type-count any-enemy castle > 1))
	(or	(players-building-type-count any-enemy castle > 0)
		(soldier-count > 45))
	(unit-type-count-total trebuchet-set < 1)
	(or	(unit-type-count trade-cart > 15)
		(or	(unit-type-count villager-gold > 15)
			(gold-amount > 1000)))
	(can-train trebuchet)
=>
	(train trebuchet)
)
#end-if

(defrule
	(goal gl-current-age gv-feudal)
	(nand	(unit-type-count-total militiaman-line > 2)
		(research-available ri-man-at-arms))
	(nand	(unit-type-count-total scout-cavalry-line > 4)
		(research-available ri-bloodlines))
	(nand	(up-compare-goal gl-my-villager-count > 36)
		(research-available ri-wheel-barrow))
	(strategic-number sn-age-up-castle != 1)
	(up-research-status c: ri-fletching >= research-pending)
=>
	(set-strategic-number sn-enable-training-queue 0)
)
#end-if; DM

; =========== OPTIMISING VILLAGERS

(load "Barbarian\RuleBuffer")

(defrule
	(strategic-number sn-town-center-start != 0)
	(or	(up-compare-goal gl-my-villager-count > 20)
		(civilian-population >= imperial-villager-cap))
	(current-age > feudal-age)
	(up-compare-goal gl-current-age > gv-feudal-up)
=>
	(up-jump-rule 11)
)

(defrule
	(strategic-number sn-town-center-start == 0)
	(strategic-number sn-nomad-style-start == 1)
	(wood-amount > 23)
	(or	(wood-amount > 256)
		(and	(wood-amount < 30)
			(building-type-count-total town-center > 0)))
	(wood-amount < 275)
=>
	(up-drop-resources wood c: 6)
)

(defrule
	(or	(up-pending-objects c: villager-class >= 2)
		(or	(building-type-count town-center > 1)
			(or	(up-research-status c: feudal-age == research-pending)
				(or	(up-research-status c: castle-age == research-pending)
					(or	(up-research-status c: imperial-age == research-pending)
						(up-research-status c: ri-wheel-barrow == research-pending))))))
=>
	(enable-timer 2 21)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal)
	(up-timer-status 6 != timer-running)
	(up-compare-goal gl-total-food-amount >= 50)
	(up-compare-goal gl-my-villager-count < 50)
	(food-amount < 50)
	(timer-triggered 2)
	(building-type-count town-center > 0)
	(up-compare-goal gl-nothing-style-map != YES)
=>
	(up-drop-resources farm-food c: 5)
	(up-drop-resources forage-food c: 5)
	(up-drop-resources deer-food c: 20)
	(up-drop-resources boar-food c: 10)
	(enable-timer 6 7)
)

(defrule
	(nand	(up-compare-goal gl-loomless-boar-hunting != YES)
		(and	(research-available ri-loom)
			(up-compare-goal gl-my-villager-count-total g:>= gl-villagers-to-start-boar-hunt)))
	(timer-triggered 2)
	(up-compare-goal gl-my-villager-count < 50)
	(nand	(civ-selected chinese)
		(game-time < 75))
	(up-compare-goal gl-total-food-amount >= 50)
	(food-amount < 50)
	(building-type-count town-center > 0)
	(up-compare-goal gl-nothing-style-map != YES)
=>
	(up-drop-resources food c: 5)
)

(defrule
	(current-age == dark-age)
	(nand	(up-compare-goal gl-loomless-boar-hunting != YES)
		(and	(research-available ri-loom)
			(up-compare-goal gl-my-villager-count-total g:>= gl-villagers-to-start-boar-hunt)))
	(up-compare-goal gl-total-food-amount >= 50)
	(food-amount > 36)
	(food-amount < 50)
	(timer-triggered 2)
	(building-type-count town-center > 0)
	(up-compare-goal gl-nothing-style-map != YES)
=>
	(up-drop-resources farm-food c: 2)
	(up-drop-resources forage-food c: 2)
	(up-drop-resources sheep-food c: 2)
)

(defrule
	(current-age == dark-age)
	(up-compare-goal gl-total-food-amount >= 50)
	(food-amount > 36)
	(food-amount < 50)
	(strategic-number sn-enable-boar-hunting == 1)
	(timer-triggered 2)
	(dropsite-min-distance hunting < 5)
	(building-type-count town-center > 0)
=>
	(up-drop-resources boar-food c: 2)
	(up-drop-resources deer-food c: 2)
)

(defrule
	(or	(up-compare-goal gl-current-age != gv-dark)
		(up-compare-goal gl-total-food-amount < 500))
=>
	(up-jump-rule 1)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-feudal-infantry 0)
	(up-compare-goal gl-my-villager-count-total >= flush-villagers3)
	(food-amount > 400)
	(food-amount < 500)
	(up-pending-objects c: villager-class < 2)
	(timer-triggered 2)
	(strategic-number sn-sheep-count >= 6)
	(up-compare-goal gl-boar-eaten >= 2)
	(up-compare-goal gl-lured-deer-count >= 2)
	(or	(up-compare-goal gl-lured-deer-count >= 3)
		(or	(up-compare-goal gl-deer-luring >= 1)
			(strategic-number sn-sheep-count >= 8)))
=>
	(up-drop-resources food c: 5)
)

(defrule
	(goal gl-current-age gv-dark)
	(food-amount > 400)
	(food-amount < 500)
	(up-compare-goal gl-total-food-amount >= 500)
	(up-pending-objects c: villager-class < 2)
	(timer-triggered 2)
	(up-compare-goal gl-my-villager-count-total >= flush-villagers1)
=>
	(up-drop-resources food c: 5)
)

(defrule
	(goal gl-current-age gv-feudal)
	(or	(up-compare-goal gl-strategy-type >= FC)
		(and	(game-time > 1300)
			(food-amount >= 800)))
	(gold-amount < 200)
	(gold-amount > 180)
	(or	(current-age-time > 72)
		(goal gl-FC-type gv-2-villagers))
	(current-age-time > 47)
	(building-type-count town-center > 0)
=>
	(up-drop-resources gold c: 4)
)

(defrule
	(goal gl-current-age gv-feudal)
	(up-compare-goal gl-strategy != default)
	(food-amount < 800)
	(food-amount > 550)
	(up-compare-goal gl-total-food-amount >= 800)
	(current-age-time g:>= gl-required-current-age-time)
	(building-type-count town-center > 0)
=>
	(up-drop-resources farm-food c: 4)
	(up-drop-resources forage-food c: 4)
	(up-drop-resources boar-food c: 4)
	(up-drop-resources deer-food c: 4)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(up-compare-goal threat-time > 20000)
	(unit-type-count monastery-class > 7)
	(can-research ri-fervor)
=>
	(research ri-fervor)
)

; ============== FIRST LUMBER CAMP DISTANCE

(defrule
	(or	(building-type-count-total lumber-camp > 0)
		(and	(game-time > 600)
			(strategic-number sn-wood-found >= 2)))
=>
	(up-jump-rule 28)
)

(defrule
	(strategic-number sn-wood-found < 0)
	(strategic-number sn-lumber-camp-max-distance == 20)
	(resource-found wood)
	(not	(map-type arena))
	(game-time < 2)
	(or	(building-count > 7)
		(or	(building-type-count wall-class > 0)
			(building-type-count gate-class > 0)))
=>
	(set-strategic-number sn-lumber-camp-max-distance 23)
	(set-strategic-number sn-wood-found 2)
)

(defrule
	(strategic-number sn-wood-found == 2)
=>
	(up-jump-rule 26)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-modify-goal gl-point-x c:+ scout-los)
	(up-modify-goal gl-point-y c:+ scout-los)
	(set-goal temporary-goal 3)
	(set-goal temporary-goal2 scout-los2)
	(set-goal temporary-goal3 scout-los2)
	(set-goal temporary-goal4 scout-los)
	(set-goal temporary-goal6 300)
	(set-goal temporary-goal7 0)
	(up-copy-point gl-point2-x gl-position-self-x)
)

(defrule
	(true)
=>
	(set-goal gl-local-total 1)
	(set-goal gl-local-last 0)
	(set-goal gl-remote-total scout-los2)
	(set-goal gl-remote-last scout-los3)
	(set-goal gl-object-point-x scout-unit)
;	(set-goal gl-object-point-y 0); search limit - not used any more
	(set-goal temporary-goal8 scout-los)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-copy-point gl-temporary-point-x gl-point-x)
	(up-add-point gl-temporary-point-x gl-saved-point-x c: -1)
	(up-modify-goal gl-temporary-point-x g:* gl-temporary-point-x)
	(up-modify-goal gl-temporary-point-y g:* gl-temporary-point-y)
	(up-modify-goal gl-temporary-point-x g:+ gl-temporary-point-y)
	(up-modify-goal temporary-goal7 c:max 1)
)

(defrule
	(up-compare-goal temporary-goal7 >= 1)
	(up-compare-goal temporary-goal > 0)
	(up-compare-goal temporary-goal2 > 0)
	(up-compare-goal gl-temporary-point-x g:<= gl-remote-last)
	(up-point-contains gl-point-x c: tree)
=>
	(up-modify-goal temporary-goal c:- 1)
	(up-get-point-distance gl-point-x gl-point2-x temporary-goal5)
	(up-modify-goal temporary-goal6 g:min temporary-goal5)
	(up-get-point-distance gl-point-x gl-saved-point-x temporary-goal5)
)

(defrule
	(up-compare-goal temporary-goal7 >= 1)
	(up-compare-goal temporary-goal > 0)
	(up-compare-goal temporary-goal2 > 0)
	(or	(not	(up-point-contains gl-point-x c: tree))
		(up-compare-goal gl-temporary-point-x g:> gl-remote-last))
=>
	(set-goal temporary-goal 3)
	(set-goal temporary-goal6 300)
)

(defrule
	(up-compare-goal temporary-goal7 >= 1)
	(up-compare-goal temporary-goal7 <= 2)
	(up-compare-goal temporary-goal > 0)
	(up-compare-goal temporary-goal2 > 0)
=>
	(up-modify-goal temporary-goal2 c:- 1)
	(up-modify-goal gl-point-x g:+ gl-local-total)
	(up-modify-goal gl-point-y g:+ gl-local-last)
	(up-jump-rule -4)
)

(defrule
	(goal temporary-goal7 1)
	(up-compare-goal temporary-goal > 0)
	(up-compare-goal temporary-goal3 > 0)
=>
	(set-goal temporary-goal 3)
	(up-modify-goal temporary-goal2 g:= gl-remote-total)
	(set-goal temporary-goal6 300)
	(up-modify-goal temporary-goal3 c:- 1)
	(up-modify-goal temporary-goal4 c:+ 1)
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-modify-goal gl-point-x g:+ temporary-goal8)
	(up-modify-goal gl-point-y g:+ temporary-goal4)
	(up-jump-rule -5)
)

(defrule
	(goal temporary-goal7 1)
	(up-compare-goal temporary-goal > 0)
=>
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-modify-goal gl-point-x g:+ temporary-goal8)
	(up-modify-goal gl-point-y g:+ temporary-goal8)
	(set-goal temporary-goal 3)
	(up-modify-goal temporary-goal2 g:= gl-remote-total)
	(up-modify-goal temporary-goal3 g:= gl-remote-total)
	(up-modify-goal temporary-goal4 g:= temporary-goal8)
	(set-goal temporary-goal6 300)
	(set-goal temporary-goal7 2)
	(set-goal gl-local-total 0)
	(set-goal gl-local-last 1)
	(up-jump-rule -6)
)

(defrule
	(goal temporary-goal7 2)
	(up-compare-goal temporary-goal3 > 0)
	(up-compare-goal temporary-goal > 0)
=>
	(set-goal temporary-goal 3)
	(up-modify-goal temporary-goal2 g:= gl-remote-total)
	(set-goal temporary-goal6 300)
	(up-modify-goal temporary-goal3 c:- 1)
	(up-modify-goal temporary-goal4 c:+ 1)
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-modify-goal gl-point-x g:+ temporary-goal4)
	(up-modify-goal gl-point-y g:+ temporary-goal8)
	(up-jump-rule -7)
)

(defrule
	(goal temporary-goal7 2)
	(up-compare-goal temporary-goal > 0)
=>
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-modify-goal gl-point-x g:+ temporary-goal8)
	(up-modify-goal gl-point-y g:+ temporary-goal8)
	(set-goal temporary-goal 4)
	(up-modify-goal temporary-goal2 g:= gl-remote-total)
	(up-modify-goal temporary-goal2 c:* 2)
	(up-modify-goal temporary-goal2 c:- 1)
	(up-modify-goal temporary-goal3 g:= gl-remote-total)
	(up-modify-goal temporary-goal4 g:= temporary-goal8)
	(set-goal temporary-goal6 300)
	(set-goal temporary-goal7 7)
	(up-jump-rule -8)
)

(defrule
	(goal temporary-goal7 7)
	(up-compare-goal temporary-goal > 0)
	(up-compare-goal temporary-goal2 > 0)
=>
	(set-goal temporary-goal7 4)
	(up-modify-goal temporary-goal2 c:- 1)
	(up-modify-goal gl-point-y c:+ 1)
	(up-jump-rule -9)
)

(defrule
	(or	(goal temporary-goal7 4)
		(goal temporary-goal7 6))
	(up-compare-goal temporary-goal > 0)
	(up-compare-goal temporary-goal2 > 0)
=>
	(up-modify-goal temporary-goal7 c:+ 1)
	(up-modify-goal temporary-goal2 c:- 1)
	(up-modify-goal gl-point-x c:+ 1)
	(up-jump-rule -10)
)

(defrule
	(goal temporary-goal7 5)
	(up-compare-goal temporary-goal > 0)
	(up-compare-goal temporary-goal2 > 0)
=>
	(set-goal temporary-goal7 6)
	(up-modify-goal temporary-goal2 c:- 1)
	(up-modify-goal gl-point-y c:- 1)
	(up-jump-rule -11)
)

(defrule
	(up-compare-goal temporary-goal7 >= 4)
	(up-compare-goal temporary-goal3 > 0)
	(up-compare-goal temporary-goal > 0)
	(up-compare-goal 497 < 10000)
=>
	(up-modify-goal 497 c:+ 1)
	(set-goal temporary-goal 4)
	(up-modify-goal temporary-goal2 g:= gl-remote-total)
	(up-modify-goal temporary-goal2 c:* 2)
	(up-modify-goal temporary-goal2 c:- 1)
	(set-goal temporary-goal6 300)
	(up-modify-goal temporary-goal3 c:- 1)
	(up-modify-goal temporary-goal4 c:+ 1)
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-modify-goal gl-point-x g:+ temporary-goal8)
	(up-modify-goal gl-point-y g:+ temporary-goal4)
	(up-jump-rule -12)
)

(defrule
	(up-compare-goal temporary-goal7 >= 1)
	(strategic-number sn-nomad-style-start == 1)
	(goal temporary-goal 0)
=>
	(up-copy-point gl-nomad-wood-point-x gl-point-x)
	(disable-self)
)

(defrule
	(up-compare-goal temporary-goal7 >= 1)
	(goal temporary-goal 0)
	(building-type-count town-center > 0)
=>
	(up-modify-sn sn-forest-distance g:min temporary-goal6)
)

(defrule
	(up-set-target-object search-local c: 0)
;	(up-compare-goal gl-object-point-y < 30); <-- this limit would no longer reset search and lead to a neverending loop
=>
;	(up-modify-goal gl-object-point-y c:+ 1)
	(up-reset-search 0 1 0 0)
	(up-find-local g: gl-object-point-x c: 1)
)

(defrule
	(goal gl-object-point-x scout-unit)
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-modify-goal gl-point-x c:+ scout-los)
	(up-modify-goal gl-point-y c:+ scout-los)
	(set-goal temporary-goal 3)
	(set-goal temporary-goal2 scout-los2)
	(set-goal temporary-goal3 scout-los2)
	(set-goal temporary-goal4 scout-los)
	(set-goal temporary-goal6 300)
	(set-goal temporary-goal7 0)
	(set-goal gl-local-total 1)
	(set-goal gl-local-last 0)
	(up-jump-rule -16)
)

(defrule
	(goal gl-object-point-x scout-unit)
=>
	(up-reset-search 1 1 1 1)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-modify-goal gl-point-x c:+ villager-los)
	(up-modify-goal gl-point-y c:+ villager-los)
	(set-goal temporary-goal 3)
	(set-goal temporary-goal2 villager-los2)
	(set-goal temporary-goal3 villager-los2)
	(set-goal temporary-goal4 villager-los)
	(set-goal temporary-goal6 300)
	(set-goal temporary-goal7 0)
)

(defrule
	(goal gl-object-point-x scout-unit)
=>
	(set-goal gl-object-point-x villager-class)
	(set-goal gl-remote-total villager-los2)
	(set-goal gl-remote-last villager-los3)
	(set-goal temporary-goal8 villager-los)
	(up-jump-rule -18)
)

(defrule
	(goal gl-object-point-x villager-class)
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-modify-goal gl-point-x c:+ villager-los)
	(up-modify-goal gl-point-y c:+ villager-los)
	(set-goal temporary-goal 3)
	(set-goal temporary-goal2 villager-los2)
	(set-goal temporary-goal3 villager-los2)
	(set-goal temporary-goal4 villager-los)
	(set-goal temporary-goal6 300)
	(set-goal temporary-goal7 0)
	(set-goal gl-local-total 1)
	(set-goal gl-local-last 0)
	(up-jump-rule -19)
)

(defrule
	(goal gl-object-point-x villager-class)
=>
	(up-reset-search 1 1 1 1)
	(up-find-local c: sheep c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-modify-goal gl-point-x c:- 2)
	(up-modify-goal gl-point-y c:- 2)
	(set-goal temporary-goal 3)
	(set-goal temporary-goal2 5)
	(set-goal temporary-goal3 5)
	(set-goal temporary-goal4 -2)
	(set-goal temporary-goal6 300)
	(set-goal temporary-goal7 0)
)

(defrule
	(goal gl-object-point-x villager-class)
=>
	(set-goal gl-object-point-x sheep)
	(set-goal gl-remote-total 5)
	(set-goal gl-remote-last 7)
	(set-goal temporary-goal8 -2)
	(up-jump-rule -21)
)

(defrule
	(goal gl-object-point-x sheep)
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-modify-goal gl-point-x c:- 2)
	(up-modify-goal gl-point-y c:- 2)
	(set-goal temporary-goal 3)
	(set-goal temporary-goal2 5)
	(set-goal temporary-goal3 5)
	(set-goal temporary-goal4 -2)
	(set-goal temporary-goal6 300)
	(set-goal temporary-goal7 0)
	(set-goal gl-local-total 1)
	(set-goal gl-local-last 0)
	(up-jump-rule -22)
)

(defrule
	(strategic-number sn-forest-distance < 300)
=>
	(up-modify-goal temporary-goal s:= sn-forest-distance)
	(up-modify-goal temporary-goal c:+ 1)
)

(defrule
	(strategic-number sn-forest-distance < 300)
	(strategic-number sn-lumber-camp-max-distance != 255)
	(or	(strategic-number sn-wood-found < 3)
		(and	(strategic-number sn-lumber-camp-max-distance g:> temporary-goal)
			(and	(strategic-number sn-lumber-camp-max-distance > 10)
				(nand	(goal gl-mining-camp-backup 1)
					(up-compare-goal temporary-goal <= 24)))))
=>
	(set-strategic-number sn-wood-found 10)
	(up-modify-sn sn-lumber-camp-max-distance s:= sn-forest-distance)
	(up-modify-sn sn-lumber-camp-max-distance c:+ 1)
	(up-modify-sn sn-lumber-camp-max-distance c:max 10)
	(up-chat-data-to-player my-player-number "Closest forest: %d" s: sn-forest-distance)
)

; ============== PLACEMENT BACK UP

(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total town-center > 0)
	(strategic-number sn-lumber-camp-max-distance == 255)
=>
	(set-strategic-number sn-lumber-camp-max-distance 24)
	(set-strategic-number sn-maximum-town-size 9)
	(set-goal 484 -1)
)

(defrule
	(timer-triggered 10)
	(building-type-count-total town-center == 0)
	(building-type-count-total lumber-camp == 0)
	(up-pending-placement c: lumber-camp)
=>
	(set-strategic-number sn-lumber-camp-max-distance 255)
	(set-strategic-number sn-maximum-town-size 255)
	(chat-to-player my-player-number placement-failure-chat)
	(up-reset-placement c: lumber-camp)
	(disable-timer 10)
)

(defrule
	(timer-triggered 10)
	(building-type-count-total town-center == 0)
	(up-pending-placement c: town-center)
=>
	(set-strategic-number sn-lumber-camp-max-distance 255)
	(set-strategic-number sn-maximum-town-size 255)
	(chat-to-player my-player-number placement-failure-chat)
	(up-reset-placement c: town-center)
	(disable-timer 10)
)

(defrule
	(timer-triggered 10)
	(goal gl-enemy-units-in-town 0)
	(goal gl-town-center-placed safe-TC)
	(building-type-count town-center > 0)
	(up-pending-placement c: town-center)
=>
	(chat-to-player my-player-number placement-failure-chat)
	(up-reset-placement c: town-center)
	(set-goal gl-town-center-placed -1)
	(disable-timer 10)
)

(defrule
	(timer-triggered 10)
	(goal gl-current-age gv-dark)
	(building-type-count-total lumber-camp == 0)
	(up-pending-placement c: lumber-camp)
;	(strategic-number sn-lumber-camp-security == 1)
	(strategic-number sn-maximum-wood-drop-distance == 6)
	(strategic-number sn-lumber-camp-max-distance < 255)
=>
	(set-strategic-number sn-lumber-camp-max-distance 255)
	(set-strategic-number sn-maximum-town-size 255)
	(chat-to-player my-player-number placement-failure-chat)
	(set-strategic-number sn-lumber-camp-security 0)
)

(defrule
	(game-time > 2400)
	(or	(dropsite-min-distance wood == -1)
		(cc-players-unit-type-count 0 tree < 150))
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock wood-exhaustion)
	(set-strategic-number sn-allow-resource-spending 6)
	(chat-to-player my-player-number "24Wood panic!")
)

(defrule
	(or	(strategic-number sn-stone-gatherer-percentage > 0)
		(game-time > 1770))
	(strategic-number sn-stone-dropsite-distance > 3)
=>
	(set-strategic-number sn-stone-dropsite-distance 3)
)

; ============== RATING MILITARY

(defrule
	(or	(current-age != feudal-age)
		(or	(goal gl-current-age gv-dark)
			(up-timer-status 15 == timer-running)))
=>
	(up-jump-rule 8)
)

(defrule
	(game-time g:> gl-military-rating-time)
=>
	(set-goal gl-military-rating 0)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-find-remote c: archery-class c: 5)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-find-remote c: archery-class c: 5)
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal6 0)
)

(defrule
	(up-set-target-object search-remote g: temporary-goal)
=>
	(up-get-object-data object-data-range temporary-goal5)
	(up-modify-goal temporary-goal2 g:max temporary-goal5)
	(up-get-object-data object-data-maxhp temporary-goal5)
	(up-modify-goal temporary-goal4 g:max temporary-goal5)
	(up-get-object-data object-data-strike-armor temporary-goal5)
	(up-modify-goal temporary-goal6 g:max temporary-goal5)
	(up-modify-goal temporary-goal c:+ 1)
	(up-jump-rule -1)
)

(defrule
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(or	(up-compare-goal temporary-goal2 >= 5)
		(and	(up-research-status c: ri-fletching == research-complete)
			(and	(nor	(players-current-age focus-player >= castle-age)
					(up-compare-goal gl-enemy-heavy-cavalry-count > 1))
				(goal gl-military-rating -1))))
=>
	(set-goal gl-military-rating 0)
)

(defrule
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(up-research-status c: ri-fletching == research-complete)
	(up-compare-goal gl-enemy-cavalry-count < 5)
	(up-compare-goal temporary-goal2 > 0)
	(up-compare-goal temporary-goal2 < 5)
=>
	(set-goal gl-military-rating 1)
	(set-goal temporary-goal3 1)
)

(defrule
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(up-research-status c: ri-fletching == research-complete)
	(or	(up-research-status c: ri-padded-archer-armor >= research-pending)
		(soldier-count > 14))
	(goal gl-military-rating 1)
=>
	(set-goal gl-military-rating 2)
)

(defrule
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(or	(and	(up-research-status c: ri-fletching != research-complete)
			(up-compare-goal temporary-goal2 >= 5))
		(or	(players-current-age focus-player >= castle-age)
			(up-compare-goal gl-enemy-heavy-cavalry-count > 1)))
=>
	(set-goal gl-military-rating -1)
	(set-goal temporary-goal3 1)
)

(defrule
	(goal temporary-goal3 1)
=>
	(up-get-fact game-time 0 gl-military-rating-time)
	(up-modify-goal gl-military-rating-time c:+ 90)
)

; ============== THREAT LEVEL

(defrule
	(or	(current-age != feudal-age)
		(goal gl-assisting-ally YES))
=>
	(up-jump-rule 13)
)

(defrule
	(soldier-count > 12)
	(or	(up-research-status c: ri-fletching >= research-pending)
		(up-research-status c: ri-scale-mail >= research-pending))
	(game-time < 1260)
	(players-building-type-count target-player stable < 1)
	(players-unit-type-count every-enemy scout-cavalry-line < 2)
	(nand	(strategic-number sn-threat-level == 1)
		(unit-type-count archer-line < 3))
	(players-current-age every-enemy <= feudal-age)
=>
	(set-strategic-number sn-threat-level -1)
	(disable-self)
)

(defrule
	(goal gl-strategy flush)
	(or	(and	(goal gl-feudal-archery skirmishers)
			(and	(goal gl-enemy-strategy XBOW-RUSH)
				(game-time < 1260)))
		(and	(strategic-number sn-threat-level == 1)
			(and	(research-completed ri-fletching)
				(and	(unit-type-count archer-line > 5)
					(players-current-age focus-player <= feudal-age)))))
=>
	(set-strategic-number sn-threat-level 0)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(players-current-age focus-player == feudal-age)
	(research-completed ri-fletching)
	(unit-type-count militiaman-line > 6)
	(research-completed ri-scale-mail)
	(players-unit-type-count focus-player militiaman-line < 2)
	(players-unit-type-count focus-player scout-cavalry-line < 2)
	(players-building-type-count focus-player stable == 0)
=>
	(up-modify-sn sn-threat-level c:min -2)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(up-compare-goal gl-military-rating >= 2)
	(unit-type-count archery-class > 13)
	(players-current-age focus-player == feudal-age)
=>
	(up-modify-sn sn-threat-level c:min -4)
	(up-jump-rule 4)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(up-compare-goal gl-military-rating >= 1)
	(or	(up-compare-goal gl-military-rating >= 2)
		(or	(up-compare-goal TSA >= 1)
			(unit-type-count archery-class > 8)))
	(unit-type-count archery-class > 5)
	(players-current-age focus-player == feudal-age)
=>
	(up-modify-sn sn-threat-level c:min -3)
	(up-jump-rule 3)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(game-time < 930)
	(or	(goal TSA 1)
		(unit-type-count militiaman-line > 6))
	(goal gl-feudal-infantry men-at-arms)
	(players-current-age focus-player == feudal-age)
=>
	(up-modify-sn sn-threat-level c:min -2)
	(up-jump-rule 2)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(or	(and	(game-time < 930)
			(and	(or	(goal TSA 1)
					(unit-type-count militiaman-line > 6))
				(goal gl-feudal-infantry men-at-arms)))
		(and	(up-compare-goal gl-military-rating >= 1)
			(unit-type-count archery-class > 5)))
	(players-current-age focus-player == feudal-age)
=>
	(up-modify-sn sn-threat-level c:min -2)
	(up-jump-rule 1)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(game-time >= 930)
	(or	(nor	(research-completed ri-fletching)
			(research-completed ri-scale-mail))
		(unit-type-count militiaman-line < 7))
	(players-current-age focus-player == feudal-age)
=>
	(up-modify-sn sn-threat-level c:max -1)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(game-time < 1140)
	(unit-type-count skirmisher-line > 6)
	(players-current-age focus-player == feudal-age)
	(or	(and	(players-unit-type-count focus-player militiaman-line > 1)
			(unit-type-count archer-line < 3))
		(and	(players-unit-type-count focus-player scout-cavalry-line > 2)
			(up-research-status c: ri-fletching <= research-pending)))
=>
	(set-strategic-number sn-threat-level 1)
	(disable-self)
)

(defrule
	(goal gl-strategy flush)
	(goal gl-current-age gv-feudal)
	(players-current-age focus-player == feudal-age)
	(strategic-number sn-threat-level >= -2)
	(strategic-number sn-threat-level <= -1)
	(or	(and	(players-unit-type-count focus-player militiaman-line > 1)
			(strategic-number sn-threat-level == -2))
		(or	(players-unit-type-count focus-player scout-cavalry-line > 1)
			(players-building-type-count focus-player stable > 0)))
=>
	(set-strategic-number sn-threat-level 0)
)

(defrule
	(or	(players-current-age focus-player > feudal-age)
		(and	(goal gl-feudal-archery pure-archers)
			(and	(up-compare-goal gl-enemy-skirmisher-count > 6)
				(up-compare-goal gl-military-rating <= 0))))
	(nand	(goal gl-feudal-archery skirmishers)
		(and	(goal gl-enemy-strategy XBOW-RUSH)
			(game-time < 1260)))
	(up-compare-goal gl-assisting-ally != YES)
	(players-current-age-time focus-player > 35)
=>
	(up-modify-sn sn-threat-level c:max 1)
)

(defrule
	(players-current-age focus-player > feudal-age)
	(or	(up-compare-goal gl-enemy-heavy-cavalry-count > 2)
		(or	(up-compare-goal gl-enemy-onager-count > 0)
			(or	(up-compare-goal gl-enemy-scorpion-count > 0)
				(and	(players-current-age-time focus-player > 180)
					(goal TSA 0)))))
	(up-compare-goal gl-assisting-ally != YES)
=>
	(set-strategic-number sn-threat-level 2)
)

(defrule
	(players-current-age focus-player == castle-age)
	(goal gl-enemy-strategy MONK-RUSH)
	(up-compare-goal gl-enemy-eagle-count < 3)
	(up-compare-goal gl-enemy-scorpion-count < 2)
	(up-compare-goal gl-enemy-onager-count < 1)
	(strategic-number sn-threat-level > 0)
=>
	(set-strategic-number sn-threat-level 0); Last rule jumped
)

(defrule
	(players-current-age every-enemy <= feudal-age)
	(current-age == castle-age)
=>
	(set-strategic-number sn-threat-level -2)
	(disable-self)
)

(defrule
	(goal gl-attack-notice 2)
	(players-current-age focus-player == castle-age)
	(current-age == castle-age)
	(or	(and	(or	(up-research-status c: ri-elite-skirmisher >= research-pending)
				(up-research-status c: ri-bodkin-arrow >= research-pending))
			(and	(up-compare-goal gl-enemy-cavalry-count <= 2)
				(up-compare-goal gl-enemy-strategy != KNIGHT-RUSH)))
		(up-research-status c: ri-pikeman >= research-pending))
	(strategic-number sn-threat-level == 1)
=>
	(set-strategic-number sn-threat-level 0)
)

(defrule
	(players-current-age-time focus-player > 30)
	(players-current-age-time focus-player < 60)
	(game-time > 1200)
	(up-compare-goal TSA >= 1)
	(up-compare-goal gl-assisting-ally != YES)
	(players-current-age focus-player == castle-age)
	(current-age == castle-age)
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-enemy-cavalry-count < 6)
	(or	(up-research-status c: ri-elite-skirmisher >= research-pending)
		(unit-type-count knight-line > 4))
	(strategic-number sn-threat-level <= -2)
=>
	(set-strategic-number sn-threat-level -2)
	(set-goal gl-attack-notice 1)
	(up-jump-rule 1)
)

(defrule
	(or	(players-current-age-time focus-player > 30)
		(goal TSA 0))
	(players-current-age focus-player == castle-age)
	(current-age == castle-age)
	(or	(goal gl-strategy-class basic-class)
		(or	(goal gl-strategy ranged-rush-strategy)
			(goal gl-eew-strategy-type boom)))
	(unit-type-count-total knight-line < 10)
=>
	(set-strategic-number sn-threat-level 0)
	(disable-self)
)

(defrule
	(goal gl-attack-notice 1)
	(players-current-age focus-player == castle-age)
	(current-age == castle-age)
	(goal gl-strategy-class basic-class)
	(or	(up-compare-goal gl-enemy-heavy-cavalry-count >= 3)
		(or	(up-compare-goal gl-enemy-cavalry-count >= 6)
			(or	(goal TSA 0)
				(players-current-age-time focus-player >= 60))))
=>
	(set-strategic-number sn-threat-level 0)
	(set-goal gl-attack-notice 0)
)

(defrule
	(players-current-age target-player < castle-age)
	(players-current-age focus-player < castle-age)
	(current-age == castle-age)
	(or	(unit-type-count knight-line > 3)
		(or	(up-research-status c: ri-bodkin-arrow >= research-pending)
			(or	(up-research-status c: ri-long-swordsman >= research-pending)
				(or	(up-compare-goal gl-my-UU-count-total > 4)
					(up-research-status c: ri-elite-skirmisher >= research-pending)))))
	(strategic-number sn-threat-level > -3)
=>
	(set-strategic-number sn-threat-level -3)
)

(defrule
	(players-current-age target-player < castle-age)
	(players-current-age focus-player < castle-age)
	(current-age == castle-age)
	(or	(goal gl-strategy-class basic-class)
		(goal gl-strategy ranged-rush-strategy))
	(or	(unit-type-count knight-line > 10)
		(and	(up-research-status c: ri-bodkin-arrow >= research-pending)
			(and	(or	(research-completed ri-elite-skirmisher)
					(research-completed first-main-ranged-unit-upgrade)); Xbow for non-huns
				(soldier-count > 20))))
=>
	(up-modify-sn sn-threat-level c:min -4)
)

(defrule
	(players-current-age target-player < castle-age)
	(players-current-age focus-player < castle-age)
	(current-age >= castle-age)
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-my-UU-count-total > 10)
	(or	(and	(up-research-status c: ri-bodkin-arrow >= research-pending)
			(up-compare-const dm-UU-type == archer-type))
		(up-compare-const dm-UU-type == gunpowder-type))
=>
	(up-modify-sn sn-threat-level c:min -4)
)

(defrule
	(players-current-age target-player < castle-age)
	(players-current-age focus-player < castle-age)
	(current-age >= castle-age)
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-enemy-infantry-count < 6)
	(unit-type-count gl-eagle-warrior-count-total > 10)
	(up-research-status c: ri-chain-mail >= research-pending)
=>
	(up-modify-sn sn-threat-level c:min -4)
)

(defrule
	(up-compare-goal gl-assisting-ally != YES)
	(current-age == castle-age)
	(goal TSA 0)
	(players-current-age focus-player == feudal-age)
	(goal gl-enemy-strategy UP-TO-CASTLE)
	(game-time g:> gl-enemy-up-game-time); No point to be very aggressive any more
	(strategic-number sn-threat-level < -2)
=>
	(set-strategic-number sn-threat-level -2)
)

(defrule
	(game-time < 2100)
	(current-age == castle-age)
	(goal gl-strategy-class basic-class)
	(players-current-age focus-player <= castle-age)
	(soldier-count > 5)
	(goal gl-enemy-strategy XBOW-RUSH)
	(unit-type-count mangonel-line > 1)
	(up-compare-goal gl-enemy-eagle-count < 2)
	(up-compare-goal gl-enemy-cavalry-count < 2)
	(players-building-type-count target-player castle == 0)
	(strategic-number sn-threat-level > -3)
=>
	(set-strategic-number sn-threat-level -3)
)

(defrule
	(up-compare-goal gl-assisting-ally != YES)
	(players-current-age any-enemy >= castle-age)
	(current-age == castle-age)
	(goal gl-strategy ranged-rush-strategy)
	(or	(and	(players-unit-type-count any-enemy knight-line > 3)
			(and	(unit-type-count-total monk-set < 5)
				(map-size tiny)))
		(soldier-count < 30))
	(strategic-number sn-threat-level < 0)
=>
	(set-strategic-number sn-threat-level 0)
)

(defrule
	(players-current-age every-enemy < imperial-age)
	(current-age == castle-age)
	(goal gl-strategy ranged-rush-strategy)
	(soldier-count >= 30)
	(or	(players-unit-type-count any-enemy elite-skirmisher < 5); Rule below will overwrite this if fighting with a player who has skirms
		(or	(unit-type-count mangonel-line > 0)
			(or	(unit-type-count scorpion-line > 1)
				(up-compare-goal gl-eagle-warrior-count > 3))))
	(or	(up-compare-goal gl-enemy-heavy-cavalry-count < 4)
		(unit-type-count-total pikeman > 7))
	(strategic-number sn-threat-level > -1)
=>
	(set-strategic-number sn-threat-level -1)
)

(defrule
	(up-compare-goal gl-assisting-ally != YES)
	(players-current-age-time focus-player > 20)
	(players-current-age any-enemy >= castle-age)
	(game-time < 1900)
	(current-age == castle-age)
	(goal gl-strategy ranged-rush-strategy)
	(or	(players-unit-type-count focus-player elite-skirmisher > 4)
		(players-unit-type-count target-player elite-skirmisher > 4))
	(unit-type-count mangonel-line < 1)
	(unit-type-count scorpion-line < 2)
	(up-compare-goal gl-eagle-warrior-count < 4)
	(strategic-number sn-threat-level < 0)
=>
	(set-strategic-number sn-threat-level 0)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(players-current-age focus-player <= feudal-age)
	(soldier-count > 12)
	(current-age == castle-age)
	(or	(unit-type-count mangonel-line > 1)
		(unit-type-count scorpion-line > 1))
	(or	(up-compare-goal gl-enemy-infantry-count < 4)
		(soldier-count > 20))
	(up-compare-goal gl-enemy-cavalry-count < 3)
	(strategic-number sn-threat-level > -5)
=>
	(set-strategic-number sn-threat-level -5)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(players-current-age focus-player <= castle-age)
	(soldier-count > 30)
	(current-age == castle-age)
	(or	(unit-type-count mangonel-line > 2)
		(unit-type-count scorpion-line > 4))
	(up-compare-goal gl-enemy-cavalry-count < 5)
	(strategic-number sn-threat-level > -2)
=>
	(set-strategic-number sn-threat-level -2)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(players-current-age focus-player <= castle-age)
	(current-age == castle-age)
	(unit-type-count battering-ram-line > 2)
	(up-compare-goal gl-enemy-onager-count < 1)
	(up-compare-goal gl-enemy-scorpion-count < 3)
	(up-compare-goal gl-enemy-cavalry-count < 4)
	(up-compare-goal gl-enemy-huskarl-count < 1)
	(up-compare-goal TSA >= 1)
	(strategic-number sn-threat-level > -1)
=>
	(set-strategic-number sn-threat-level -1)
)

(defrule
	(players-current-age focus-player == castle-age)
	(players-current-age target-player <= castle-age)
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-enemy-cavalry-count < 5)
	(up-compare-goal gl-enemy-huskarl-count < 5)
	(up-compare-goal gl-enemy-cataphract-count < 5)
	(players-building-type-count target-player castle == 0)
	(or	(research-completed ri-bodkin-arrow)
		(unit-type-count knight-line > 10))
	(strategic-number sn-threat-level == 0)
=>
	(set-strategic-number sn-threat-level -1)
)

(defrule
	(players-current-age focus-player == castle-age)
	(players-current-age target-player <= castle-age)
	(goal gl-strategy-class basic-class)
	(or	(up-compare-goal gl-enemy-cavalry-count >= 5)
		(or	(up-compare-goal gl-enemy-huskarl-count >= 5)
			(or	(up-compare-goal gl-enemy-cataphract-count >= 5)
				(or	(goal gl-strategy ew-boom)
					(players-building-type-count target-player castle > 0)))))
	(strategic-number sn-threat-level == -1)
=>
	(set-strategic-number sn-threat-level 0)
)

(defrule
	(players-current-age any-enemy == castle-age)
	(players-current-age every-enemy < imperial-age)
	(strategic-number sn-threat-level > -1)
	(up-compare-goal gl-enemy-heavy-cavalry-count < 3)
	(goal gl-strategy-class basic-class)
	(or	(unit-type-count-total knight-line > 7)
		(or	(unit-type-count-total huskarl-line > 8)
			(or	(unit-type-count-total conquistador-line > 2)
				(or	(unit-type-count-total janissary-line > 5)
					(unit-type-count-total war-wagon-line > 4)))))
=>
	(set-strategic-number sn-threat-level -1)
)

(defrule
	(players-current-age any-enemy == castle-age)
	(players-current-age every-enemy < imperial-age)
	(strategic-number sn-threat-level > -1)
	(goal gl-strategy-class basic-class)
	(or	(unit-type-count-total knight-line > 10)
		(or	(unit-type-count-total conquistador-line > 7)
			(or	(unit-type-count-total janissary-line > 9)
				(or	(unit-type-count-total war-wagon-line > 8)
					(or	(research-completed ri-eagle-warrior)
						(up-compare-goal gl-battle-elephant-count-total > 6))))))
=>
	(set-strategic-number sn-threat-level -1)
)

(defrule
	(players-current-age focus-player == castle-age)
	(strategic-number sn-threat-level > -2)
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-enemy-heavy-cavalry-count < 10)
	(or	(and	(unit-type-count-total knight-line > 16)
			(and	(up-compare-goal gl-enemy-camelry-count < 8)
				(up-compare-goal gl-enemy-spearman-count < 10)))
		(or	(and	(research-completed ri-eagle-warrior)
				(up-compare-goal gl-eagle-warrior-count > 22))
			(up-compare-goal gl-battle-elephant-count-total > 11)))
=>
	(set-strategic-number sn-threat-level -2)
)

(defrule
	(players-current-age focus-player >= feudal-age)
	(or	(and	(players-current-age focus-player >= castle-age)
			(and	(current-age == castle-age)
				(or	(players-current-age-time focus-player > 30)
					(goal TSA 0))))
		(and	(current-age == feudal-age)
			(up-compare-goal gl-military-rating <= 0)))
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-assisting-ally != YES)
	(strategic-number sn-threat-level < -3)
=>
	(set-strategic-number sn-threat-level -1)
)

(defrule
	(goal gl-attack-notice 3)
	(strategic-number sn-threat-level < -1)
=>
	(set-strategic-number sn-threat-level -1)
	(set-goal gl-attack-notice 0)
)

(defrule
	(current-age == castle-age)
	(players-current-age focus-player == castle-age)
	(players-current-age focus-player > 35)
	(goal gl-strategy-class basic-class)
	(or	(up-timer-status 34 == timer-disabled)
		(game-time > 2500))
	(strategic-number sn-threat-level < -4)
=>
	(set-strategic-number sn-threat-level -4)
)

(defrule
	(or	(goal gl-current-age gv-imperial)
		(or	(players-building-type-count target-player castle > 0)
			(or	(up-compare-goal gl-enemy-tower-count > 4)
				(or	(and	(game-time > 2400)
						(player-valid 3))
					(or	(up-compare-goal gl-strategy != default)
						(players-current-age any-enemy == imperial-age))))))
=>
	(up-jump-rule 2)
)

(defrule
	(unit-type-count mangonel-line > 1)
	(up-compare-goal gl-enemy-heavy-cavalry-count < 5)
	(up-compare-goal gl-enemy-cavalry-count < 8)
	(up-compare-goal gl-enemy-huskarl-count < 3)
	(up-compare-goal gl-enemy-onager-count < 5)
	(or	(unit-type-count mangonel-line > 2)
		(up-compare-goal gl-castle-age-style >= mangonel-push))
	(or	(unit-type-count mangonel-line > 3)
		(up-compare-goal TSA >= 1))
	(strategic-number sn-threat-level > -2)
=>
	(set-strategic-number sn-threat-level -2)
	(set-goal gl-attack-notice 3)
)

(defrule
	(up-compare-goal gl-enemy-scorpion-count < 5)
	(up-compare-goal gl-enemy-cataphract-count < 5)
	(up-compare-goal gl-enemy-heavy-cavalry-count < 5)
	(up-compare-goal gl-enemy-cavalry-count < 8)
	(up-compare-goal gl-enemy-huskarl-count < 3)
	(or	(up-compare-goal gl-enemy-eagle-count < 9)
		(unit-type-count archer-line > 25))
	(up-compare-goal gl-enemy-onager-count < 2)
	(unit-type-count mangonel-line > 2)
	(or	(unit-type-count mangonel-line > 3)
		(up-compare-goal TSA >= 1))
	(strategic-number sn-threat-level > -3)
=>
	(set-strategic-number sn-threat-level -3)
	(set-goal gl-attack-notice 3)
)

#load-if-defined TINY-MAP
(defrule
	(or	(up-compare-goal gl-current-age != gv-castle)
		(or	(or	(players-building-type-count target-player castle > 0)
				(players-building-type-count target-player stone-wall-line > 0))
			(or	(up-compare-goal gl-enemy-tower-count > 4)
				(game-time < 1700))))
=>
	(up-jump-rule 1)
)

(defrule
	(players-current-age every-enemy == castle-age)
	(or	(and	(goal gl-strategy ranged-rush-strategy)
			(goal gl-enemy-strategy EAGLERUSH))
		(or	(unit-type-count-total knight-line > 13)
			(or	(unit-type-count-total conquistador-line > 8)
				(up-compare-goal gl-battle-elephant-count-total > 7))))
	(players-unit-type-count every-enemy knight-line < 4)
	(players-unit-type-count every-enemy war-wagon-line < 4)
	(goal MILITARY 0)
=>
	(set-strategic-number sn-threat-level -2)
	(chat-to-player my-player-number aggressive-chat)
	(disable-self)
)

#load-if-defined GOTHIC-CIV
(defrule
	(current-age == castle-age)
	(goal gl-strategy-class basic-class)
	(game-time > 2100)
	(unit-type-count-total huskarl-line > 8)
	(players-current-age every-enemy == castle-age)
	(players-unit-type-count every-enemy militiaman-line > 2)
=>
	(set-strategic-number sn-threat-level -1)
	(disable-self)
)

(defrule
	(current-age == castle-age)
	(goal gl-strategy-class basic-class)
	(game-time > 2100)
	(unit-type-count-total huskarl-line > 8)
	(players-current-age every-enemy == castle-age)
	(strategic-number sn-threat-level == 0)
	(players-unit-type-count every-enemy knight-line < 2)
	(players-building-type-count every-enemy stable == 0)
	(players-building-type-count every-enemy archery-range > 0)
=>
	(set-strategic-number sn-threat-level -2)
	(disable-self)
)

(defrule
	(current-age == castle-age)
	(goal gl-strategy-class basic-class)
	(game-time > 2100)
	(unit-type-count-total huskarl-line > 8)
	(players-current-age every-enemy <= castle-age)
	(strategic-number sn-threat-level > -2)
	(players-unit-type-count every-enemy eagle-warrior-line > 2)
=>
	(set-strategic-number sn-threat-level -2)
	(disable-self)
)

(defrule
	(current-age == castle-age)
	(goal gl-strategy-class basic-class)
	(game-time > 2100)
	(unit-type-count-total huskarl-line > 8)
	(players-current-age every-enemy <= castle-age)
	(strategic-number sn-threat-level > -4)
	(or	(players-unit-type-count every-enemy archer-line > 2)
		(players-unit-type-count every-enemy cavalry-archer-line > 2))
	(players-unit-type-count every-enemy knight-line < 2)
	(players-unit-type-count every-enemy scout-cavalry-line < 3)
	(players-unit-type-count every-enemy militiaman-line < 3)
	(players-unit-type-count every-enemy jaguar-man-line < 3)
	(players-unit-type-count every-enemy teutonic-knight-line < 3)
=>
	(set-strategic-number sn-threat-level -4)
)

(defrule
	(current-age == castle-age)
	(goal gl-strategy-class basic-class)
	(game-time > 2100)
	(unit-type-count-total huskarl-line > 8)
	(players-current-age every-enemy <= castle-age)
	(strategic-number sn-threat-level < 0)
	(unit-type-count-total monk-set < 5)
	(players-unit-type-count every-enemy knight-line > 1)
	(players-unit-type-count every-enemy archer-line < 3)
	(players-unit-type-count every-enemy cavalry-archer-line < 3)
=>
	(set-strategic-number sn-threat-level 0)
)

(defrule
	(current-age == castle-age)
	(goal gl-strategy-class basic-class)
	(game-time > 2100)
	(unit-type-count-total huskarl-line > 8)
	(strategic-number sn-threat-level < 0)
	(players-unit-type-count every-enemy knight-line > 1)
	(or	(players-unit-type-count every-enemy archer-line > 2)
		(or	(players-unit-type-count every-enemy cavalry-archer-line > 2)
			(unit-type-count-total monk > 4)))
=>
	(set-strategic-number sn-threat-level 0)
)
#end-if

(defrule
	(players-current-age every-enemy == castle-age)
	(current-age == castle-age)
	(goal gl-strategy-class basic-class)
	(game-time > 2700)
	(or	(strategic-number sn-threat-level == -2)
		(strategic-number sn-threat-level == -3))
=>
	(set-strategic-number sn-threat-level -1)
	(disable-self)
)
#end-if

(defrule
	(players-current-age focus-player < imperial-age)
	(current-age == castle-age)
	(goal gl-strategy ranged-rush-strategy)
	(game-time > 1800)
	(unit-type-count-total archer-line > 50)
	(or	(civ-selected celtic)
		(or	(civ-selected frankish)
			(or	(civ-selected persian)
				(civ-selected teutonic)))); Better suicide xbows at castle age than have them useless later
	(strategic-number sn-threat-level > -3)
=>
	(set-strategic-number sn-threat-level -3)
)

(defrule
	(players-current-age every-enemy < imperial-age)
	(current-age == castle-age)
	(up-compare-goal gl-enemy-camelry-count < 10)
	(up-compare-goal gl-enemy-spearman-count < 10)
	(players-unit-type-count focus-player teutonic-knight-line < 8)
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-enemy-skirmisher-count > 15)
	(or	(unit-type-count-total knight-line > 11)
		(up-compare-goal gl-battle-elephant-count-total > 8))
	(strategic-number sn-threat-level > -3)
=>
	(set-strategic-number sn-threat-level -3)
	(chat-to-player my-player-number aggressive-chat)
	(disable-self)
)

(defrule
	(players-current-age every-enemy < imperial-age)
	(current-age == castle-age)
	(up-compare-goal gl-enemy-camelry-count < 10)
	(players-unit-type-count focus-player teutonic-knight-line < 8)
	(goal gl-strategy-class basic-class)
	(or	(unit-type-count-total knight-line > 21)
		(up-compare-goal gl-battle-elephant-count-total > 14))
	(strategic-number sn-threat-level > -3)
=>
	(set-strategic-number sn-threat-level -3)
	(chat-to-player my-player-number aggressive-chat)
	(disable-self)
)

#load-if-defined TURKISH-CIV
(defrule
	(players-current-age focus-player >= castle-age)
	(current-age == imperial-age)
	(goal gl-strategy turkish-fast-imp)
	(or	(soldier-count < 35)
		(and	(players-current-age any-enemy == imperial-age)
			(soldier-count >= 35)))
	(strategic-number sn-threat-level != -3)
=>
	(set-strategic-number sn-threat-level -3)
)

(defrule
	(players-current-age any-enemy == imperial-age)
	(current-age == imperial-age)
	(goal gl-strategy turkish-fast-imp)
	(soldier-count < 35)
	(strategic-number sn-threat-level != -2)
=>
	(set-strategic-number sn-threat-level -2)
)

(defrule
	(current-age == imperial-age)
	(goal gl-strategy turkish-fast-imp)
	(soldier-count >= 35)
	(strategic-number sn-threat-level > -4)
=>
	(set-strategic-number sn-threat-level -4)
)
#end-if

(defrule
	(players-current-age focus-player <= castle-age)
	(players-current-age target-player <= castle-age)
	(or	(and	(current-age == imperial-age)
			(or	(research-completed ri-chemistry)
				(research-completed ri-hussar)))
		(and	(up-compare-const gv-maximum-age == feudal-age)
			(game-time > 1200)))
=>
	(up-modify-sn sn-threat-level c:min gv-threat-level)
)

(defrule
	(players-current-age focus-player <= castle-age)
	(players-current-age target-player <= castle-age)
	(current-age == imperial-age)
	(or	(up-research-status c: ri-bracer >= research-pending)
		(or	(research-completed ri-halberdier)
			(or	(research-completed ri-plate-barding)
				(or	(research-completed ri-two-handed-swordsman)
					(or	(research-completed ri-cavalier)
						(research-completed ri-heavy-cavalry-archer))))))
=>
	(up-modify-sn sn-threat-level c:min -3)
)

(defrule
	(players-current-age focus-player <= castle-age)
	(players-current-age target-player <= castle-age)
	(current-age == imperial-age)
	(or	(and	(up-research-status c: ri-plate-barding >= research-pending)
			(research-completed ri-cavalier))
		(and	(or	(up-research-status c: main-ranged-unit-upgrade >= research-pending)
				(players-current-age focus-player <= feudal-age))
			(up-research-status c: ri-bracer >= research-pending)))
=>
	(up-modify-sn sn-threat-level c:min -4)
)

(defrule
	(players-current-age focus-player <= castle-age)
	(players-current-age target-player <= castle-age)
	(current-age == imperial-age)
	(up-research-status c: ri-plate-mail >= research-pending)
	(or	(and	(up-compare-goal CASTLE != 0)
			(and	(up-compare-const UU-type == infantry-class)
				(up-compare-goal gl-my-UU-count-total > 9)))
		(and	(unit-type-count-total militiaman-line > 9)
			(up-research-status c: ri-champion >= research-pending)))
=>
	(up-modify-sn sn-threat-level c:min -4)
)

(defrule
	(players-current-age focus-player <= castle-age)
	(players-current-age target-player <= castle-age)
	(current-age == imperial-age)
	(up-research-status c: ri-plate-mail >= research-pending)
	(up-research-status c: ri-halberdier >= research-pending)
	(up-compare-goal gl-enemy-cavalry-count > 9)
=>
	(up-modify-sn sn-threat-level c:min -5)
)

(defrule
	(goal gl-strategy default)
	(players-current-age focus-player <= castle-age)
	(players-current-age target-player <= castle-age)
	(current-age == imperial-age)
	(or	(research-completed ri-heavy-scorpion)
		(or	(and	(up-research-status c: ri-elite-eagle-warrior >= research-pending)
				(up-research-status c: ri-plate-mail >= research-pending))
			(or	(strategic-number sn-allow-resource-spending > 5)
				(and	(up-research-status c: ri-cavalier >= research-pending)
					(up-research-status c: ri-blast-furnace >= research-pending)))))
=>
	(up-modify-sn sn-threat-level c:min -5)
)

(defrule
	(players-current-age focus-player <= castle-age)
	(players-current-age target-player <= castle-age)
	(current-age == imperial-age)
	(or	(research-completed my-unique-unit-upgrade)
		(or	(and	(research-completed ri-bracer)
				(research-completed ri-chemistry))
			(or	(research-completed ri-champion)
				(or	(research-completed ri-paladin)
					(research-completed ri-elite-eagle-warrior)))))
=>
	(up-modify-sn sn-threat-level c:min -5)
)

(defrule
	(goal gl-strategy default)
	(players-current-age focus-player <= castle-age)
	(players-current-age target-player <= castle-age)
	(current-age == imperial-age)
	(strategic-number sn-allow-resource-spending > 5)
=>
	(up-modify-sn sn-threat-level c:min -6)
)

(defrule
	(goal gl-strategy default)
	(up-compare-goal gl-assisting-ally != YES)
	(players-current-age focus-player == imperial-age)
	(players-current-age-time focus-player < 150)
	(nand	(players-current-age focus-player == imperial-age)
		(players-current-age-time focus-player > 150))
	(current-age == imperial-age)
	(strategic-number sn-allow-resource-spending > 5)
=>
	(up-modify-sn sn-threat-level c:max -3)
	(up-jump-rule 1)
)

(defrule
	(or	(and	(players-current-age focus-player == imperial-age)
			(players-current-age-time focus-player > 30))
		(and	(players-current-age target-player == imperial-age)
			(players-current-age-time target-player > 30)))
	(current-age == imperial-age)
	(or	(and	(strategic-number sn-allow-resource-spending < 6)
			(up-compare-goal gl-assisting-ally != YES))
		(strategic-number sn-threat-level < -4))
=>
	(up-modify-sn sn-threat-level c:max -2)
)

(defrule
	(game-time < 2600)
	(research-completed ri-elite-eagle-warrior)
	(research-completed ri-plate-mail)
	(up-compare-goal gl-enemy-archery-count > 25)
	(up-compare-goal gl-enemy-eagle-count < 10)
	(up-compare-goal gl-enemy-infantry-count < 5)
	(up-compare-goal gl-enemy-heavy-cavalry-count < 5)
	(up-compare-goal gl-enemy-gunpowder-count < 5)
	(up-compare-goal gl-enemy-scorpion-count < 10)
	(up-compare-goal gl-enemy-cataphract-count < 5)
	(up-compare-goal gl-enemy-huskarl-count < 10)
	(players-unit-type-count focus-player plumed-archer-line < 5)
	(players-unit-type-count focus-player elite-mangudai < 5)
=>
	(up-modify-sn sn-threat-level c:min -3)
	(set-goal gl-attack-notice 4)
	(up-jump-rule 1)
)

(defrule
	(goal gl-attack-notice 4)
	(strategic-number sn-threat-level == -3)
=>
	(set-strategic-number sn-threat-level -1)
	(set-goal gl-attack-notice 0)
)

(defrule
	(strategic-number sn-threat-level < 1)
	(or	(and	(players-current-age focus-player == imperial-age)
			(and	(players-current-age-time focus-player > 150)
				(and	(players-military-population focus-player > 25)
					(players-population focus-player > 120))))
		(and	(goal gl-strategy xbow-boom)
			(players-unit-type-count target-player huskarl-line > 4)))
	(current-age == castle-age)
=>
	(set-strategic-number sn-threat-level 1)
)

(defrule
	(players-current-age focus-player == castle-age)
	(goal gl-strategy-class basic-class)
	(strategic-number sn-threat-level < -3)
	(players-current-age-time focus-player > 150)
	(players-military-population focus-player > 10)
	(not	(goal gl-assisting-ally YES))
	(current-age == castle-age)
=>
	(set-strategic-number sn-threat-level -2)
)

(defrule
	(players-current-age focus-player < imperial-age)
	(players-current-age target-player < imperial-age)
	(players-building-type-count target-player castle == 0)
	(players-building-type-count target-player watch-tower < 5)
	(current-age == castle-age)
	(up-compare-goal gl-enemy-spearman-count < 15)
	(up-compare-goal gl-enemy-cavalry-count < 10)
	(players-unit-type-count focus-player teutonic-knight-line < 6)
	(players-unit-type-count focus-player monk < 6)
	(up-compare-goal gl-enemy-archer-count < 30)
	(goal gl-strategy-class basic-class)
	(unit-type-count knight-line > 30)
	(strategic-number sn-threat-level > -4)
=>
	(set-strategic-number sn-threat-level -4)
)

(defrule
	(or	(players-current-age target-player == imperial-age)
		(players-current-age focus-player == imperial-age))
	(goal MILITARY 1)
	(strategic-number sn-threat-level < 1)
	(players-current-age-time focus-player > 20)
	(current-age == castle-age)
=>
	(set-strategic-number sn-threat-level 1)
	(disable-self)
)

(defrule
	(or	(players-current-age target-player == imperial-age)
		(players-current-age focus-player == imperial-age))
	(or	(not	(goal MILITARY 1))
		(players-building-type-count target-player castle > 1))
	(current-age == castle-age)
=>
	(set-strategic-number sn-threat-level 2)
)

(defrule
	(or	(players-current-age every-enemy <= feudal-age)
		(and	(players-current-age every-enemy < imperial-age)
			(or	(and	(players-current-age any-enemy == castle-age)
					(current-age-time > 900))
				(or	(research-completed ri-galleon)
					(research-completed ri-fast-fire-ship)))))
	(current-age == imperial-age)
=>
	(set-strategic-number sn-threat-level -4)
)

(defrule
	(current-age == imperial-age)
	(current-age-time > 300)
	(or	(strategic-number sn-threat-level == 2)
		(and	(strategic-number sn-threat-level == 1)
			(and	(current-age-time > 900); Rather be passive than suicidal
				(population > pop-to-full-pop-attack))))
=>
	(set-strategic-number sn-threat-level 0)
)

(defrule
	(current-age == imperial-age)
	(or	(up-research-status c: ri-bracer >= research-pending)
		(or	(research-completed ri-halberdier)
			(or	(research-completed ri-plate-barding)
				(or	(research-completed ri-two-handed-swordsman)
					(research-completed ri-cavalier)))))
=>
	(up-modify-sn sn-threat-level c:min 1)
)

(defrule
	(current-age == imperial-age)
	(or	(and	(research-completed ri-bracer)
			(research-completed ri-chemistry))
		(research-completed ri-elite-eagle-warrior))
=>
	(up-modify-sn sn-threat-level c:min 0)
)

(defrule
	(or	(and	(research-completed ri-bracer)
			(and	(research-completed ri-chemistry)
				(or	(research-completed ri-arbalest)
					(and	(up-compare-goal CASTLE != 0)
						(or	(up-compare-const UU-type == archery-class)
							(up-compare-const UU-type == cavalry-archer-class))))))
		(or	(research-completed my-unique-unit-upgrade)
			(research-completed ri-champion)))
=>
	(up-modify-sn sn-threat-level c:min -1)
)

(defrule
	(or	(and	(research-completed ri-plate-barding)
			(or	(research-completed ri-cavalier)
				(research-completed ri-hussar)))
		(or	(research-completed ri-paladin)
			(or	(research-completed ri-heavy-scorpion)
				(or	(and	(research-completed ri-elite-eagle-warrior)
						(up-research-status c: ri-blast-furnace >= research-pending))
					(research-completed ri-heavy-cavalry-archer)))))
=>
	(up-modify-sn sn-threat-level c:min -1)
)

#load-if-defined UP-2-PLAYER-GAME
(defrule
	(or	(and	(or	(goal gl-strategy-class basic-class)
				(goal gl-strategy gothic-boom))
			(and	(strategic-number sn-allow-resource-spending > 4)
				(strategic-number sn-threat-level > -1)))
		(and	(goal gl-strategy-class basic-class)
			(and	(strategic-number sn-threat-level < -1)
				(current-age-time < 180))))
	(players-current-age any-enemy == imperial-age)
	(current-age == imperial-age)
=>
	(set-strategic-number sn-threat-level -1)
)
#else
(defrule
	(or	(goal gl-strategy-class basic-class)
		(goal gl-strategy gothic-boom))
	(or	(and	(strategic-number sn-allow-resource-spending > 4)
			(strategic-number sn-threat-level > -2))
		(and	(up-compare-goal gl-assisting-ally != YES)
			(and	(strategic-number sn-threat-level < -2)
				(and	(players-current-age focus-player == imperial-age)
					(players-current-age-time focus-player > 35)))))
	(current-age == imperial-age)
=>
	(set-strategic-number sn-threat-level -2)
)

#load-if-defined PERSIAN-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(unit-type-count-total trade-cart > 15)
	(unit-type-count-total elite-war-elephant > 15)
	(strategic-number sn-threat-level > -4)
	(current-age == imperial-age)
=>
	(set-strategic-number sn-threat-level -4)
)
#end-if
#end-if

(defrule
	(players-current-age focus-player == imperial-age)
	(players-current-age-time focus-player > 30)
	(current-age == imperial-age)
	(strategic-number sn-threat-level < -2)
=>
	(set-strategic-number sn-threat-level -2)
	(disable-self)
)

(defrule
	(goal gl-strategy scrush)
	(up-compare-goal gl-assisting-ally != YES); If not attacking with ally another superiority code should be used
=>
	(set-strategic-number sn-threat-level -2)
)

; ============= RESOURCE SPENDING LEVEL

(defrule
	(or	(current-age == feudal-age)
		(goal MILITARY 1))
	(goal gl-strategy-class basic-class)
	(or	(and	(up-compare-goal gl-current-age >= gv-feudal-up)
			(game-time > 1260))
		(or	(goal MILITARY 1)
			(or	(up-compare-goal gl-enemy-units-in-town > 2)
				(goal gl-patrol-defence patrol-on))))
	(strategic-number sn-allow-resource-spending == 0)
=>
	(set-strategic-number sn-allow-resource-spending 1)
)

(defrule
	(goal gl-current-age gv-feudal)
	(goal gl-strategy-class basic-class)
	(or	(and	(players-military-population focus-player < 3)
			(and	(up-compare-goal gl-enemy-wall-count-total > 4)
				(not	(up-projectile-detected projectile-watch-tower < 10000))))
		(and	(research-available ri-wheel-barrow)
			(up-compare-goal gl-my-villager-count > 36)))
	(up-compare-goal gl-target-player-distance > 35)
	(strategic-number sn-allow-resource-spending == 1)
=>
	(set-strategic-number sn-allow-resource-spending 0)
)

(defrule
	(current-age >= castle-age); Also resets the high spending level of special strategies after returning to the basic strategy
	(goal gl-strategy-class basic-class)
	(strategic-number sn-allow-resource-spending >= 0)
=>
	(set-strategic-number sn-allow-resource-spending 0)
	(disable-self)
)

(defrule
	(goal gl-strategy-class basic-class)
	(goal gl-current-age gv-castle)
	(goal MILITARY 0)
	(or	(and	(strategic-number sn-allow-resource-spending < 1)
			(or	(building-type-count-total town-center > 2)
				(goal gl-early-raid YES)))
		(and	(strategic-number sn-allow-resource-spending == 2)
			(not	(town-under-attack))))
	(current-age-time < 1300); A rule below will set it to 2 after >1300 anyway
	(strategic-number sn-allow-resource-spending >= 0)
=>
	(set-strategic-number sn-allow-resource-spending 1)
)

(defrule
	(current-age == castle-age)
	(up-compare-goal gl-strategy != knight-rush)
	(or	(nor	(goal gl-strategy-class basic-class)
			(goal gl-strategy ranged-rush-strategy))
		(and	(game-time > 2700)
			(civilian-population > 50)))
	(current-age-time > 240)
	(strategic-number sn-allow-resource-spending >= 0)
=>
	(up-modify-sn sn-allow-resource-spending c:max 2)
)

(defrule
	(current-age >= castle-age)
	(or	(and	(goal gl-strategy ranged-rush-strategy)
			(and	(research-completed ri-bodkin-arrow)
				(and	(up-research-status c: ri-wheel-barrow >= research-pending)
					(up-research-status c: ri-bow-saw >= research-pending))))
		(goal gl-strategy scorpion-rush))
	(current-age-time > 120)
	(strategic-number sn-allow-resource-spending >= 0)
=>
	(up-modify-sn sn-allow-resource-spending c:max 6)
)

(defrule
	(current-age >= castle-age)
	(goal gl-strategy-class basic-class)
	(or	(current-age-time >= 1300)
		(or	(goal gl-patrol-defence patrol-on)
			(and	(goal MILITARY 1)
				(soldier-count > 25))))
	(strategic-number sn-allow-resource-spending >= 0)
=>
	(up-modify-sn sn-allow-resource-spending c:max 2)
)

(defrule
	(current-age >= castle-age)
	(goal gl-strategy-class basic-class)
	(or	(and	(population > 135)
			(or	(up-compare-goal gl-enemy-units-in-town > 5)
				(goal MILITARY 1)))
		(or	(game-time > 3000)
			(or	(players-military-population focus-player > 80)
				(up-compare-goal gl-current-age >= gv-castle-up))))
	(strategic-number sn-allow-resource-spending >= 0)
=>
	(up-modify-sn sn-allow-resource-spending c:max 3)
)

(defrule
	(goal gl-strategy-class basic-class)
	(goal gl-current-age gv-castle)
	(player-in-game any-ally)
	(population > 70)
	(up-compare-goal gl-my-villager-count-total < 80)
	(building-type-count-total town-center < 3)
	(or	(and	(players-military-population focus-player < 10)
			(players-population focus-player < 55))
		(game-time > 2000))
	(or	(goal MILITARY 1)
		(up-compare-goal threat-time > 10000))
=>
	(up-modify-sn sn-allow-resource-spending c:min 0); Boom instead of army
)

(defrule
	(goal gl-strategy-class basic-class)
	(goal gl-current-age gv-castle)
	(goal MILITARY 0)
	(up-compare-goal threat-time > 10000)
	(or	(and	(population > 200)
			(research-available imperial-age))
		(and	(or	(goal POSITION POCKET)
				(up-compare-goal gl-rush-suitability-on-map <= LOW))
			(game-time < 1600)))
=>
	(up-modify-sn sn-allow-resource-spending c:min 0); Go up instead of army
)

(defrule
	(goal gl-strategy krush)
	(goal gl-current-age gv-castle)
	(goal POSITION POCKET)
	(unit-type-count-total knight-unit > preferred-knight-count)
	(up-compare-const preferred-knight-count < 20)
	(up-compare-goal gl-patrol-defence != patrol-on)
	(up-compare-goal gl-defending-ally != YES)
	(civilian-population > 75)
	(up-compare-goal gl-military-percentage2 > 80)
	(or	(and	(goal TSA 0)
			(up-compare-goal gl-enemy-units-in-town < 5))
		(up-compare-goal gl-military-percentage > 170))
=>
	(up-modify-sn sn-allow-resource-spending c:min 0)
)

(defrule
	(goal gl-strategy-class basic-class)
	(goal gl-current-age gv-castle)
	(or	(and	(goal MILITARY 0)
			(up-compare-goal gl-enemy-units-in-town < 5))
		(up-compare-const gv-pocket-position == 1))
	(up-compare-goal gl-pair-player-military > 30)
	(or	(up-compare-goal gl-closest-enemy-military < 17)
		(and	(up-compare-goal gl-pair-player-military > 45)
			(game-time > 2000))); Trust in ally (and die?)
	(up-compare-goal gl-defending-ally != YES)
	(up-compare-goal gl-patrol-defence != patrol-on)
=>
	(up-modify-sn sn-allow-resource-spending c:min 0)
)

#load-if-defined IMPERIAL-AGE-END
#load-if-defined POPULATION-CAP-200
(defrule
	(goal gl-strategy-class basic-class)
	(goal gl-current-age gv-castle)
	(goal gl-rush-suitability-on-map GOOD)
	(or	(civilian-population < 80)
		(or	(building-type-count-total town-center < 3)
			(and	(goal TSA 0)
				(soldier-count > 20))))
	(up-compare-goal gl-target-player-distance > 37)
	(players-military-population focus-player < 5)
	(or	(players-building-type-count target-player stone-wall-line > 6)
		(up-compare-goal gl-enemy-wall-count-total > 17))
=>
	(up-modify-sn sn-allow-resource-spending c:min 0); Boom
)
#end-if
#end-if

(defrule
	(current-age == castle-age)
	(up-compare-goal gl-strategy != knight-rush)
	(or	(goal gl-defending-ally YES)
		(or	(goal gl-attacking-with-ally YES)
			(and	(goal gl-strategy krush)
				(and	(unit-type-count-total knight-line > 13)
					(and	(players-military-population focus-player > 20)
						(civilian-population > 60))))))
	(strategic-number sn-allow-resource-spending == 0)
=>
	(set-strategic-number sn-allow-resource-spending 1)
)

#load-if-defined TINY-MAP
(defrule
	(current-age == castle-age)
	(players-current-age every-enemy >= castle-age)
	(goal gl-strategy default)
	(military-population < 42)
	(game-time < 2400)
	(or	(players-military-population every-enemy > 48)
		(military-population < 34))
	(or	(players-military-population every-enemy > 37)
		(military-population < 26))
	(players-military-population every-enemy > 30)
	(strategic-number sn-allow-resource-spending >= 0)
=>
	(set-strategic-number sn-allow-resource-spending 3)
	(chat-to-player my-player-number "1Enemy has larger army - allow spending more resources")
	(disable-self)
)

(defrule
	(current-age == castle-age)
	(players-current-age every-enemy >= castle-age)
	(goal gl-strategy-class basic-class)
	(game-time < 2400)
	(players-civilian-population every-enemy < 75)
	(or	(players-civilian-population every-enemy < 60)
		(players-military-population every-enemy > 75))
	(or	(players-military-population every-enemy > 60)
		(players-civilian-population every-enemy < 45))
	(players-military-population every-enemy > 50)
	(strategic-number sn-allow-resource-spending >= 0)
=>
	(set-strategic-number sn-allow-resource-spending 3)
	(chat-to-player my-player-number "1Enemy has a large army but low eco - allow spending more resources")
	(disable-self)
)
#end-if

(defrule
	(or	(and	(population > 190)
			(or	(current-age-time > 1500)
				(up-compare-goal gl-current-age >= gv-castle-up)))
		(or	(game-time > 3600)
			(and	(current-age == imperial-age)
				(current-age-time > 500))))
	(strategic-number sn-allow-resource-spending < 3)
	(strategic-number sn-allow-resource-spending >= 0)
=>
	(set-strategic-number sn-allow-resource-spending 3)
)

(defrule
	(or	(game-time > 3600)
		(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))
	(or	(goal gl-current-age gv-castle)
		(and	(goal gl-current-age gv-imperial)
			(or	(current-age-time > 900)
				(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))))
	(strategic-number sn-allow-resource-spending < 4)
	(strategic-number sn-allow-resource-spending >= 0)
=>
	(set-strategic-number sn-allow-resource-spending 4)
)

(defrule
	(or	(and	(food-amount > 2000)
			(and	(wood-amount > 1300)
				(and	(gold-amount > 1300)
					(and	(goal gl-current-age gv-imperial)
						(current-age-time > 600)))))
		(and	(goal gl-strategy-type FI2)
			(research-completed my-unique-unit-upgrade)))
	(strategic-number sn-allow-resource-spending < 6)
=>
	(set-strategic-number sn-allow-resource-spending 6)
)

#load-if-not-defined IMPERIAL-AGE-END
(defrule
	(or	(civilian-population > 120)
		(or	(and	(civilian-population > 80)
				(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))
			(population > almost-full-pop)))
	(current-age == gv-maximum-age)
	(strategic-number sn-allow-resource-spending >= 0)
=>
	(set-strategic-number sn-allow-resource-spending 6)
)
#end-if

(defrule
	(player-in-game any-ally)
	(up-compare-goal gl-my-villager-count-total < 35)
	(population-cap >= 100)
	(or	(players-civilian-population any-enemy > 75)
		(players-population any-enemy > 100))
=>
	(up-modify-sn sn-allow-resource-spending c:min 0); To not waste all res when trying to rebuild
)


;(defrule
;	(not	(taunt-detected 1 53))
;	(or	(strategic-number sn-focus-player-number < 0)
;		(or	(not	(player-valid focus-player))
;			(or	(strategic-number sn-focus-player-number == my-player-number)
;				(stance-toward focus-player ally))))
;=>
;	(up-chat-data-to-all "!!! FOCUS PLAYER (%d) !!! (62)" s: sn-focus-player-number)
;)

; =========== DOUBLING THE ENEMY

#load-if-defined UP-ALLY-IN-GAME
#load-if-not-defined UP-2-PLAYER-TEAM
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(or	(and	(or	(game-time > 2000)
				(up-compare-goal gl-enemy-units-in-town > 2))
			(up-timer-status 34 == timer-disabled))
		(or	(up-compare-goal gl-rush-suitability-on-map <= LOW)
			(or	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
				(goal gl-early-raid YES))))
=>
	(up-jump-rule 12)
	(set-goal gl-doubling NO)
)

(defrule
	(or	(goal gl-strategy trush)
		(or	(goal gl-strategy-aggressiveness-level VERY-LOW)
			(or	(and	(players-current-age target-player == imperial-age)
					(current-age < imperial-age))
				(or	(strategic-number sn-percent-attack-soldiers == 0)
					(or	(players-building-type-count target-player castle > 0)
						(up-compare-goal gl-enemy-scorpion-count > 1))))))
=>
	(up-jump-rule 11)
	(set-goal gl-doubling NO)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= gl-my-flank1)
	(up-get-focus-fact allied-goal gl-doubling-time temporary-goal)
	(up-modify-sn sn-focus-player-number g:= gl-enemy-attacker)
	(set-goal gl-doubling NO)
)

(defrule
	(up-compare-goal gl-enemy-attacker > 0)
	(strategic-number sn-target-player-number g:!= threat-player)
	(up-compare-goal threat-time < 5000)
	(stance-toward focus-player enemy)
=>
	(up-get-fact game-time 0 gl-doubling-time)
	(up-modify-goal gl-doubling-time c:+ 60)
	(up-modify-sn sn-threat-level g:= saved-threat-level2)
	(disable-timer 34)
)

(defrule
	(or	(game-time g:< temporary-goal)
		(game-time g:< gl-doubling-time))
=>
	(up-jump-rule 7)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal4 g:= gl-toughest-fought-enemy-military)
	(up-modify-goal temporary-goal4 c:* 3)
	(up-modify-goal temporary-goal4 c:/ 5)
	(up-modify-goal temporary-goal4 c:+ 3)
	(up-modify-goal temporary-goal3 g:= temporary-goal4)
	(up-modify-sn sn-focus-player-number g:= gl-my-flank1)
	(set-goal gl-doubling NO)
)

(defrule
	(players-current-age target-player <= feudal-age)
=>
	(up-modify-goal temporary-goal4 g:= gl-toughest-fought-enemy-military)
	(up-modify-goal temporary-goal4 c:/ 4)
	(up-modify-goal temporary-goal4 c:+ 3)
)

(defrule
;	(up-compare-goal MILITARY != 1)
	(game-time < 2000)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(goal gl-safe-to-assist-ally YES)
	(military-population > 4)
	(military-population g:> temporary-goal3)
	(players-current-age focus-player >= castle-age)
	(players-military-population focus-player g:> temporary-goal4)
	(players-military-population focus-player > 4)
	(up-allied-goal focus-player gl-identity == Barbarian)
	(up-allied-goal focus-player gl-strategy-aggressiveness-level >= LOW)
	(up-allied-sn focus-player sn-target-player-number s:== sn-target-player-number)
	(up-allied-sn focus-player sn-focus-player-number s:== sn-target-player-number)
	(up-allied-goal focus-player gl-defending-ally != YES)
=>
	(set-goal gl-doubling YES)
)

(defrule
	(or	(and	(up-allied-goal focus-player gl-enemy-units-in-town > 1)
			(up-allied-goal focus-player TSA == 0))
		(or	(up-allied-sn focus-player sn-percent-attack-soldiers == 0)
			(or	(and	(up-allied-goal focus-player gl-my-flank1 != my-player-number)
					(up-compare-const gv-3-player-team == 0))
				(up-allied-goal focus-player gl-enemy-scorpion-count > 1))))
=>
	(set-goal gl-doubling NO)
)

(defrule
	(goal gl-doubling YES)
	(or	(up-compare-goal MILITARY != 1)
		(up-timer-status 34 == timer-disabled))
	(up-timer-status 34 != timer-running)
=>
	(enable-timer 34 11)
	(enable-timer 7 0)
	(up-modify-goal saved-threat-level2 s:= sn-threat-level)
	(up-modify-goal saved-threat-level s:= sn-threat-level)
	(chat-to-allies "1Requesting to double the enemy")
)

(defrule
	(up-timer-status 34 == timer-running)
	(strategic-number sn-threat-level != -4)
=>
	(set-strategic-number sn-threat-level -4)
)

(defrule
	(timer-triggered 34)
	(or	(up-compare-goal TSA != 1)
		(or	(up-allied-sn focus-player sn-threat-level > -4)
			(up-allied-sn focus-player sn-target-player-number s:!= sn-target-player-number)))
=>
	(up-modify-sn sn-threat-level g:= saved-threat-level2)
	(disable-timer 34)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
)
#else
(defrule
	(or	(and	(game-time >= 2100)
			(or	(up-timer-status 34 == timer-disabled)
				(game-time > 2500)))
		(or	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
			(or	(goal gl-early-raid YES)
				(or	(strategic-number sn-percent-attack-soldiers == 0)
					(current-age < castle-age)))))
=>
	(up-jump-rule 12)
	(set-goal gl-doubling NO)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= gl-my-flank1)
	(up-get-focus-fact allied-goal gl-doubling-time temporary-goal)
	(up-modify-sn sn-focus-player-number g:= gl-enemy-attacker)
	(set-goal gl-doubling NO)
)

(defrule
	(up-compare-goal gl-enemy-attacker > 0)
	(strategic-number sn-target-player-number g:!= threat-player)
	(up-compare-goal threat-time < 5000)
	(stance-toward focus-player enemy)
=>
	(up-get-fact game-time 0 gl-doubling-time)
	(up-modify-goal gl-doubling-time c:+ 60)
	(up-modify-sn sn-threat-level g:= saved-threat-level2)
	(disable-timer 34)
)

(defrule
	(or	(game-time g:< temporary-goal)
		(or	(game-time g:< gl-doubling-time)
			(or	(up-compare-goal gl-enemy-scorpion-count > 1)
				(goal gl-defending-ally YES))))
=>
	(up-jump-rule 8)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal4 g:= gl-toughest-fought-enemy-military)
	(up-modify-goal temporary-goal4 c:* 3)
	(up-modify-goal temporary-goal4 c:/ 5)
	(up-modify-goal temporary-goal4 c:+ 3)
	(up-modify-goal temporary-goal3 g:= temporary-goal4)
	(up-modify-sn sn-focus-player-number g:= gl-my-flank1)
)

(defrule
	(players-current-age target-player <= feudal-age)
=>
	(up-modify-goal temporary-goal4 g:= gl-toughest-fought-enemy-military)
	(up-modify-goal temporary-goal4 c:/ 4)
	(up-modify-goal temporary-goal4 c:+ 3)
)

(defrule
	(up-compare-goal gl-strategy != sling)
	(up-compare-goal gl-strategy != castle-sling)
	(up-compare-goal MILITARY != 1)
	(game-time < 2000)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(goal gl-safe-to-assist-ally YES)
	(military-population > 4)
	(military-population g:> temporary-goal4)
	(players-military-population focus-player g:> temporary-goal3)
	(players-military-population focus-player > 4)
	(up-allied-goal focus-player gl-identity == Barbarian)
	(up-allied-goal focus-player gl-strategy-aggressiveness-level >= LOW)
	(up-allied-sn focus-player sn-target-player-number s:== sn-target-player-number)
	(up-allied-sn focus-player sn-focus-player-number s:== sn-target-player-number)
	(up-allied-sn focus-player sn-percent-attack-soldiers > 0)
=>
	(set-goal gl-doubling YES)
)

(defrule
	(goal gl-doubling YES)
	(up-allied-goal focus-player gl-doubling == YES)
	(up-timer-status 34 != timer-running)
=>
	(enable-timer 39 10)
	(enable-timer 34 11)
	(enable-timer 7 0)
	(up-modify-goal saved-threat-level2 s:= sn-threat-level)
	(up-modify-goal saved-threat-level s:= sn-threat-level)
	(chat-to-allies "1Request accepted!")
)

(defrule
	(up-timer-status 34 == timer-running)
	(strategic-number sn-threat-level != -4)
=>
	(set-strategic-number sn-threat-level -4)
)

(defrule
	(players-current-age target-player <= feudal-age)
	(up-timer-status 34 == timer-running)
	(strategic-number sn-threat-level != -6); -5
=>
	(set-strategic-number sn-threat-level -6)
)

(defrule
	(timer-triggered 34)
	(or	(up-compare-goal TSA != 1)
		(and	(or	(up-allied-sn focus-player sn-threat-level > -4)
				(up-allied-goal focus-player gl-doubling == NO))
			(or	(up-compare-const gv-3-player-team == 0)
				(not	(up-allied-goal any-computer-ally gl-doubling == YES)))))
=>
	(up-modify-sn sn-threat-level g:= saved-threat-level2)
	(disable-timer 34)
)

(defrule
	(up-compare-const gv-3-player-team == 1)
	(strategic-number sn-focus-player-number g:== gl-my-flank1)
	(strategic-number sn-focus-player-number g:!= gl-my-flank2)
=>
	(up-modify-sn sn-focus-player-number g:= gl-my-flank2)
	(up-jump-rule -6)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
)
#end-if
#end-if
#end-if

; =========== HIT AND RUN

(defrule
	(or	(unit-type-count fire-ship-line > 0)
		(goal gl-strategy turtle-rush))
	(or	(unit-type-count galley-line < 5)
		(unit-type-count fire-ship-line >= 8))
	(current-age >= castle-age)
=>
	(set-difficulty-parameter ability-to-maintain-distance 100)
	(up-jump-rule 2)
)

(defrule
	(unit-type-count galley-line > 4)
	(unit-type-count fire-ship-line < 8)
	(current-age >= castle-age)
=>
	(set-difficulty-parameter ability-to-maintain-distance 90)
	(up-jump-rule 1)
)

(defrule
	(unit-type-count hit-and-run-unit > 0)
	(current-age >= castle-age)
=>
	(set-difficulty-parameter ability-to-maintain-distance 80)
)

; ======== ATTACKING

(defrule
	(or	(up-timer-status 1 == timer-running)
		(or	(up-compare-const gv-maximum-age <= feudal-age)
			(strategic-number sn-hitting-pop-cap == YES)))
=>
	(up-jump-rule 14)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-full-reset-search)
	(up-find-remote c: castle c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(strategic-number sn-percent-attack-soldiers == 0)
	(timer-triggered 1)
	(goal TSA 1)
	(or	(up-projectile-detected projectile-watch-tower < 5000000)
		(or	(up-projectile-detected projectile-bombard-tower < 5000000)
			(up-projectile-detected projectile-castle < 5000000)))
=>
	(set-goal MILITARY 0)
	(set-goal TSA 0)
	(set-strategic-number sn-maximum-town-size 10)
	(up-update-targets)
	(set-goal gl-enemy-units-in-town 0)
	(chat-to-player my-player-number "Stop TSA (attacking disabled)")
)

(defrule
	(or	(unit-type-count battering-ram-line > 0)
		(or	(unit-type-count trebuchet-set > 0)
			(or	(unit-type-count elite-eagle-warrior > 7)
				(or	(and	(or	(goal gl-safe-to-assist-ally YES)
							(and	(unit-type-count cavalry-class > 10)
								(research-completed ri-chain-barding)))
						(up-compare-goal gl-enemy-tower-count < 4))
					(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)))))
=>
	(up-jump-rule 1)
)

(defrule
	(population < almost-full-pop)
	(unit-type-count huskarl-set < 8)
	(or	(up-compare-goal gl-enemy-tower-count > 4)
		(military-population < 30))
	(or	(up-compare-goal gl-enemy-tower-count > 2)
		(and	(up-research-status c: ri-chain-mail <= research-pending)
			(and	(up-research-status c: ri-scale-barding <= research-pending)
				(up-compare-goal gl-direct-attacking != YES))))
	(up-compare-goal gl-enemy-tower-count > 0)
	(timer-triggered 1)
=>
	(enable-timer 1 30)
	(set-strategic-number sn-percent-attack-soldiers 0)
)

(defrule
	(current-age == castle-age)
	(population < almost-full-pop)
	(soldier-count < 50)
	(goal TSA 0)
	(unit-type-count knight-line < 12)
	(or	(players-military-population focus-player > 10)
		(up-compare-goal gl-enemy-onager-count > 0))
	(goal gl-remote-last 1); Target has >0 castles
	(unit-type-count battering-ram-line < 3); Gather some rams before attacking if not much army
	(unit-type-count trebuchet-set < 1)
	(timer-triggered 1)
=>
	(enable-timer 1 30)
	(set-strategic-number sn-percent-attack-soldiers 0)
)

(defrule
	(current-age >= castle-age)
	(or	(population < pop-to-full-pop-attack)
		(and	(population-headroom > 0)
			(and	(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)
				(gold-amount < 300))))
	(or	(goal gl-remote-last 1)
		(up-projectile-detected projectile-castle < 30000))
	(unit-type-count battering-ram-line < 1)
	(unit-type-count trebuchet-set < 1)
	(timer-triggered 1)
=>
	(enable-timer 1 30)
	(set-strategic-number sn-percent-attack-soldiers 0)
)

(defrule
	(current-age == castle-age)
	(up-compare-const gv-maximum-age != castle-age)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(population > 120)
	(players-population any-ally > 130)
	(players-population target-player < 80)
	(players-military-population target-player < 20)
	(players-building-type-count target-player stone-wall-line < 5)
	(goal gl-safe-to-assist-ally YES)
	(game-time < 2400)
=>
	(up-jump-rule 5)
)

(defrule
	(or	(up-compare-const gv-maximum-age == castle-age)
		(goal gl-remote-last 0))
=>
	(up-jump-rule 4)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(current-age == castle-age)
	(goal TSA 1)
	(players-military-population focus-player < 35)
	(military-population > 45)
	(or	(players-building-type-count target-player stone-wall-line < 5)
		(military-population > 60))
	(unit-type-count battering-ram-line > 1)
	(nand	(players-current-age target-player == imperial-age)
		(player-valid any-human-enemy))
=>
	(up-jump-rule 3)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(current-age == castle-age)
	(population > 140)
	(players-population any-ally > 160)
	(players-population target-player < 150)
	(players-military-population target-player < 30)
	(nand	(players-building-type-count target-player stone-wall-line > 4)
		(up-compare-goal gl-enemy-onager-count > 0))
	(goal gl-safe-to-assist-ally YES)
	(game-time < 2400)
=>
	(up-jump-rule 2)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(current-age == castle-age)
	(or	(players-military-population focus-player > 10)
		(players-building-type-count target-player stone-wall-line > 10))
	(or	(unit-type-count battering-ram-line < 6)
		(and	(or	(players-current-age target-player == imperial-age)
				(up-compare-goal gl-enemy-onager-count > 0))
			(player-valid any-human-enemy)))
	(players-building-type-count target-player castle > 1); Block attacking if target has multiple castles
=>
	(enable-timer 1 30)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(up-jump-rule 3)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(current-age == castle-age)
	(goal gl-remote-last 1)
	(or	(unit-type-count battering-ram-line < 6)
		(and	(or	(players-current-age target-player == imperial-age)
				(players-building-type-count target-player stone-wall-line > 10))
			(player-valid any-human-enemy)))
	(players-building-type-count target-player castle > 2)
=>
	(enable-timer 1 30)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(up-jump-rule 2)
)

(defrule
	(current-age >= feudal-age)
	(strategic-number sn-percent-attack-soldiers == 0)
	(or	(unit-type-count battering-ram-line > 0)
		(or	(unit-type-count trebuchet-set > 0)
			(population >= pop-to-full-pop-attack)))
=>
	(set-strategic-number sn-percent-attack-soldiers 100)
	(enable-timer 1 15)
)

(defrule
	(current-age >= feudal-age)
	(strategic-number sn-percent-attack-soldiers == 0)
	(nor	(up-projectile-detected projectile-castle < 60000)
		(up-projectile-detected projectile-bombard-tower < 60000))
	(goal gl-remote-last 0); Target has no castles up
	(players-building-type-count target-player bombard-tower == 0)
=>
	(set-strategic-number sn-percent-attack-soldiers 100)
	(enable-timer 1 5)
)
#else; Skip a lot of stuff for DM
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(unit-type-count battering-ram-line < 6)
	(unit-type-count trebuchet-set < 3)
	(population < almost-full-pop)
	(strategic-number sn-percent-attack-soldiers != 0)
	(or	(players-building-type-count target-player castle > 1)
		(players-building-type-count target-player bombard-tower > 0))
	(or	(up-projectile-detected projectile-castle < 500000)
		(up-projectile-detected projectile-bombard-tower < 500000))
	(game-time < 420)
	(timer-triggered 1)
=>
	(enable-timer 1 30)
	(set-strategic-number sn-percent-attack-soldiers 0)
)

(defrule
	(current-age >= feudal-age)
	(strategic-number sn-percent-attack-soldiers == 0)
	(or	(unit-type-count battering-ram-line > 0)
		(or	(unit-type-count trebuchet-set > 0)
			(population >= almost-full-pop)))
	(or	(game-time > 420)
		(or	(unit-type-count battering-ram-line > 5)
			(unit-type-count trebuchet-set > 2)))
	(up-timer-status 1 != timer-running)
=>
	(enable-timer 1 15)
	(set-strategic-number sn-percent-attack-soldiers 100)
)
#end-if

(defrule
	(current-age >= castle-age)
	(current-age-time > 120)
	(strategic-number sn-percent-attack-soldiers != 0)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(timer-triggered 1)
	(goal MILITARY 1)
=>
	(enable-timer 1 5)
	(set-strategic-number sn-percent-attack-soldiers 100)
)

#load-if-not-defined DEATH-MATCH

#load-if-not-defined SPANISH-CIV
(defrule
	(up-compare-goal gl-strategy != ranged-rush-strategy)
=>
	(up-jump-rule 3)
)

(defrule
	(soldier-count > 12)
	(or	(players-military-population focus-player < 4)
		(soldier-count > 18))
	(or	(players-military-population focus-player < 6)
		(soldier-count > 26))
	(players-military-population focus-player < 11)
	(or	(nand	(game-time < 1700)
			(soldier-count < 35))
		(players-building-type-count target-player watch-tower > 0))
	(unit-type-count-total battering-ram-line < 2)
=>
	(set-goal RAM 1)
)

(defrule
	(or	(and	(soldier-count > 50)
			(players-military-population focus-player < 18))
		(or	(and	(soldier-count > 70)
				(players-military-population focus-player < 26))
			(or	(players-building-type-count target-player castle > 0)
				(up-compare-goal gl-enemy-tower-count > 1))))
	(unit-type-count-total battering-ram-line < 2)
=>
	(set-goal RAM 1)
)

(defrule
	(players-building-type-count target-player castle == 0)
	(or	(and	(players-military-population focus-player >= 18)
			(soldier-count < 50))
		(or	(and	(players-military-population focus-player >= 26)
				(soldier-count < 70))
			(or	(unit-type-count-total battering-ram-line > 1)
				(and	(game-time < 1700)
					(soldier-count < 35)))))
=>
	(set-goal RAM 0)
)
#end-if

#load-if-defined TURKISH-CIV
(defrule
	(goal gl-strategy turkish-fast-imp)
	(or	(and	(soldier-count > 12)
			(players-military-population focus-player < 4))
		(or	(and	(soldier-count > 18)
				(players-military-population focus-player < 6))
			(players-building-type-count target-player castle > 0)))
	(unit-type-count-total battering-ram-line < 2)
	(not	(goal RAM 1))
=>
	(set-goal RAM 1)
)

(defrule
	(goal gl-strategy turkish-fast-imp)
	(players-building-type-count target-player castle == 0)
	(or	(and	(players-military-population focus-player >= 4)
			(soldier-count < 13))
		(or	(and	(players-military-population focus-player >= 6)
				(soldier-count < 19))
			(unit-type-count-total battering-ram-line > 1)))
	(not	(goal RAM 0))
=>
	(set-goal RAM 0)
)
#end-if

(defrule
	(or	(and	(goal gl-strategy turkish-fast-imp)
			(unit-type-count-total hand-cannoneer > 6))
		(and	(goal gl-strategy ranged-rush-strategy)
			(and	(research-completed ri-bodkin-arrow)
				(and	(research-completed first-main-ranged-unit-upgrade)
					(up-compare-goal gl-early-raid != YES)))))
	(up-timer-status 44 == timer-disabled)
	(up-timer-status 7 == timer-disabled)
=>
	(enable-timer 1 60)
	(enable-timer 7 0)
	(set-strategic-number sn-percent-attack-soldiers 100)
)

(defrule
	(current-age >= feudal-age)
	(nand	(up-compare-goal gl-strategy-type >= FC)
		(current-age < castle-age))
	(goal gl-strategy-class basic-class)
=>
	(enable-timer 1 60)
	(enable-timer 7 0)
	(set-strategic-number sn-percent-attack-soldiers 100)
	(disable-self)
)

(defrule
	(or	(and	(up-compare-goal gl-current-age >= gv-feudal-up)
			(current-age > feudal-age))
		(or	(and	(goal gl-strategy sling)
				(and	(up-timer-status 7 == timer-disabled)
					(up-compare-goal MILITARY <= 0)))
			(or	(up-compare-const gv-maximum-age == feudal-age)
				(or	(goal gl-strategy forward)
					(goal gl-strategy trush)))))
=>
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal gl-strategy != grush)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(or	(and	(up-compare-goal gl-target-player-distance < 35)
			(and	(up-projectile-detected projectile-fortification < 5000)
				(up-compare-goal gl-enemy-tower-count > 1)))
		(and	(up-projectile-detected projectile-castle < 10000)
			(players-building-type-count target-player castle > 0)))
	(current-age == feudal-age)
	(up-timer-status 7 != timer-disabled)
=>
	(disable-timer 7)
	(set-goal MILITARY 0)
)

(defrule
	(up-compare-goal gl-strategy != grush)
	(or	(and	(goal gl-current-age gv-feudal-up)
			(up-projectile-detected projectile-siege < 5000))
		(or	(up-compare-goal gl-enemy-tower-count > 2)
			(goal gl-strategy sling)))
	(current-age == feudal-age)
	(up-timer-status 7 != timer-disabled)
=>
	(disable-timer 7)
	(set-goal MILITARY 0)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal)
	(up-compare-goal gl-current-age <= gv-feudal-up)
	(or	(up-compare-goal gl-target-player-distance < 25)
		(goal gl-current-age gv-feudal-up))
	(goal gl-strategy-type basic-flush)
	(players-building-type-count target-player watch-tower > 0)
	(up-compare-goal gl-enemy-wall-count-total > 3)
	(up-projectile-detected projectile-watch-tower < 30000)
	(current-age == feudal-age)
	(up-timer-status 7 != timer-disabled)
=>
	(disable-timer 7)
	(set-goal MILITARY 0)
)

(defrule
	(goal gl-strategy-class basic-class)
	(current-age >= castle-age)
=>
	(enable-timer 1 10)
	(enable-timer 7 10)
	(disable-self)
)

(defrule
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(up-compare-goal gl-strategy != scrush)
	(current-age >= feudal-age)
=>
	(enable-timer 1 30)
	(enable-timer 7 10)
	(disable-self)
)

#load-if-defined DARK-AGE-END
(defrule
	(game-time > 800)
	(up-timer-status 7 == timer-disabled)
=>
	(enable-timer 7 0)
	(set-strategic-number sn-threat-level -1)
	(up-set-attack-stance militiaman-line c: aggressive)
	(set-strategic-number sn-number-attack-groups 0)
)

(defrule
	(goal MILITARY 1)
	(up-timer-status 7 != timer-disabled)
	(strategic-number sn-number-attack-groups == 0)
=>
	(up-set-attack-stance militiaman-line c: aggressive)
	(set-strategic-number sn-number-attack-groups 195)
)

(defrule
	(up-compare-goal MILITARY != 1)
	(up-timer-status 7 != timer-disabled)
	(strategic-number sn-number-attack-groups == 195)
=>
	(up-set-attack-stance militiaman-line c: aggressive)
	(set-strategic-number sn-number-attack-groups 0)
)
#end-if
#end-if; DM

#load-if-defined UP-HUMAN-IN-GAME
(defrule
	(game-time > time-to-allow-blind-attack); 60 in DM, otherwise 1200
	(taunt-detected any-human-ally 31)
=>
	(set-goal MILITARY 1)
	(disable-timer 7)
	(enable-timer 1 300)
	(chat-to-allies "1I'll attack now!")
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-hitting-pop-cap YES)
	(acknowledge-taunt every-ally 19)
	(acknowledge-taunt every-ally 31)
	(acknowledge-taunt every-ally 36)
	(disable-timer 44)
	(enable-timer 36 300)
)
#end-if

(defrule
	(taunt-detected any-human-ally 36)
=>
	(up-jump-rule 4)
)

(defrule
	(or	(up-timer-status 44 != timer-disabled)
		(or	(and	(up-compare-flag gl-flag == wonder-build-attempt)
				(and	(nor	(players-building-type-count any-enemy wonder > 0)
						(enemy-captured-relics))
					(nor	(and	(goal gl-wonder-build-attempt-stage placed)
							(up-compare-const victory-building == wonder))
						(players-building-type-count any-human-ally wonder > 0))))
			(current-age != gv-maximum-age)))
=>
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal MILITARY != 1)
	(up-compare-goal gl-population >= pop-to-full-pop-attack)
	(population > almost-full-pop)
	(up-compare-goal gl-defending-ally != YES)
	(gold-amount > blind-attack-gold); 700 if no allies, 400 in TGs
	(up-compare-goal gl-trade-unit-count-total > 5)
	(strategic-number sn-allow-resource-spending > 5)
=>
	(set-goal MILITARY 1)
	(disable-timer 7)
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-hitting-pop-cap YES)
	(acknowledge-taunt every-ally 19)
	(acknowledge-taunt every-ally 31)
	(acknowledge-taunt every-ally 36)
)

(defrule
	(up-compare-goal MILITARY != 1)
	(population >= pop-to-full-pop-attack)
	(up-compare-goal gl-defending-ally != YES)
	(or	(gold-amount > blind-attack-gold); 700 if no allies, 400 in TGs
		(up-compare-goal gl-trade-unit-count-total > 12))
	(strategic-number sn-allow-resource-spending > 4)
=>
	(set-goal MILITARY 1)
	(disable-timer 7)
	(chat-to-player my-player-number "Huge army, so better attack anyway")
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-hitting-pop-cap YES)
	(acknowledge-taunt every-ally 19)
	(acknowledge-taunt every-ally 31)
	(acknowledge-taunt every-ally 36)
)

(defrule
	(goal MILITARY 1)
	(population >= 150)
	(or	(population >= pop-to-full-pop-attack)
		(and	(military-population > 45)
			(population-cap < 220)))
	(up-compare-goal gl-trade-unit-count-total > 20)
	(strategic-number sn-allow-resource-spending > 5)
=>
	(disable-timer 7)
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-hitting-pop-cap YES)
	(acknowledge-taunt every-ally 19)
	(acknowledge-taunt every-ally 31)
	(acknowledge-taunt every-ally 36)
	(up-jump-rule 1)
)

#load-if-not-defined DEFEND-WONDER
(defrule
	(or	(and	(up-timer-status 36 != timer-running)
			(population < pop-to-stop-full-pop-attack))
		(or	(taunt-detected any-human-ally 19)
			(taunt-detected any-human-ally 36)))
	(game-time > time-to-allow-blind-attack)
	(strategic-number sn-hitting-pop-cap == YES)
=>
	(enable-timer 7 5)
	(chat-to-player my-player-number "Stop the blind attack")
	(set-strategic-number sn-hitting-pop-cap NO)
	(acknowledge-taunt every-ally 19)
	(acknowledge-taunt every-ally 36)
	(disable-timer 36)
)
#else
(defrule
	(up-timer-status 7 != timer-disabled)
	(up-timer-status 44 == timer-disabled)
	(up-compare-goal MILITARY != 1)
	(game-time >= dtw-blind-attack-time)
=>
	(set-goal MILITARY 1)
	(disable-timer 7)
	(chat-to-player my-player-number "Years are running out so better attack anyway")
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-hitting-pop-cap YES)
)

(defrule
	(goal MILITARY 1)
	(game-time >= dtw-blind-attack-time)
	(strategic-number sn-maximum-town-size < 250)
=>
	(set-strategic-number sn-maximum-town-size 250)
)

(defrule
	(or	(and	(up-timer-status 36 != timer-running)
			(population < pop-to-stop-full-pop-attack))
		(or	(taunt-detected any-human-ally 19)
			(taunt-detected any-human-ally 36)))
	(game-time < dtw-blind-attack-time)
	(strategic-number sn-hitting-pop-cap == YES)
=>
	(enable-timer 7 5)
	(chat-to-player my-player-number "Stop the blind attack")
	(chat-to-player this-any-ally "1I'll stop the blind attack")
	(set-strategic-number sn-hitting-pop-cap NO)
	(acknowledge-taunt every-ally 19)
	(disable-timer 36)
)
#end-if

(defrule
	(game-time > time-to-allow-blind-attack); 60 in DM, otherwise 1200
	(taunt-detected any-human-ally 36)
=>
	(disable-timer 1)
	(disable-timer 7)
	(disable-timer 14)
	(enable-timer 44 180)
	(chat-to-allies "1I won't attack for 3 minutes!")
	(acknowledge-taunt every-ally 36)
	(set-strategic-number sn-hitting-pop-cap NO)
	(set-goal MILITARY 0)
)

(defrule
	(timer-triggered 44)
=>
	(enable-timer 1 5)
	(enable-timer 7 5)
	(enable-timer 14 5)
	(disable-timer 44)
	(acknowledge-taunt every-ally 19)
	(acknowledge-taunt every-ally 22)
	(acknowledge-taunt every-ally 36)
	(set-strategic-number sn-disable-defend-groups 0)
	(up-reset-unit c: -1)
)

(defrule
	(timer-triggered 7)
	(goal MILITARY 1)
	(current-age == gv-maximum-age)
	(population >= pop-to-stop-full-pop-attack)
	(or	(gold-amount > 700)
		(or	(up-compare-goal gl-trade-unit-count-total > 12)
			(or	(unit-type-count battering-ram-line > 1)
				(unit-type-count trebuchet-set > 0))))
	(strategic-number sn-allow-resource-spending > 4)
=>
	(enable-timer 7 20)
)

(defrule
	(taunt-detected any-human-ally 22)
=>
	(enable-timer 1 45)
	(enable-timer 7 45)
	(enable-timer 14 45)
	(disable-timer 44)
	(set-strategic-number sn-retreating 0)
	(set-strategic-number sn-unit-spreading2 1)
	(acknowledge-taunt every-ally 19)
	(acknowledge-taunt every-ally 22)
	(acknowledge-taunt every-ally 36)
	(set-strategic-number sn-disable-defend-groups 0)
	(set-goal gl-water-retreating YES)
	(up-reset-unit c: -1)
	(chat-to-allies "Taking control over my army.")
)

; =========== MORE UP GOODIES

(defrule
	(game-time > 1200)
	(not	(death-match-game))
	(up-compare-goal gl-current-age >= gv-castle)
=>
	(up-jump-rule 6)
)

(defrule
	(up-compare-goal gl-uncommon-settings != YES)
	(strategic-number sn-nomad-style-start == 0)
	(game-time > 600)
	(game-time <= 700)
	(civilian-population < 20)
	(difficulty == hard)
	(up-compare-goal SLING >= 1)
	(up-compare-goal SLING <= 3)
=>
	(set-goal SLING 0)
	(set-goal gl-slinging 1002)
	(disable-self)
)

(defrule
	(up-compare-goal gl-uncommon-settings != YES)
	(strategic-number sn-nomad-style-start == 0)
	(game-time > 700)
	(game-time <= 800)
	(civilian-population < 22)
	(difficulty == hard)
	(up-compare-goal SLING >= 1)
	(up-compare-goal SLING <= 3)
=>
	(set-goal SLING 0)
	(set-goal gl-slinging 1002)
	(disable-self)
)

(defrule
	(up-compare-goal gl-uncommon-settings != YES)
	(strategic-number sn-nomad-style-start == 0)
	(game-time > 800)
	(game-time <= 900)
	(civilian-population < 23)
	(difficulty == hard)
	(up-compare-goal SLING >= 1)
	(up-compare-goal SLING <= 3)
=>
	(set-goal SLING 0)
	(set-goal gl-slinging 1002)
	(disable-self)
)

(defrule
	(up-compare-goal gl-uncommon-settings != YES)
	(strategic-number sn-nomad-style-start == 0)
	(game-time > 900)
	(game-time <= 1200)
	(civilian-population < 24)
	(difficulty == hard)
	(up-compare-goal SLING >= 1)
	(up-compare-goal SLING <= 3)
=>
	(set-goal SLING 0)
	(set-goal gl-slinging 1002)
	(disable-self)
)

(defrule
	(up-compare-goal gl-uncommon-settings != YES)
	(strategic-number sn-nomad-style-start == 0)
	(goal gl-strategy sling)
	(game-time > 30)
	(game-time <= 1200)
	(or	(taunt-detected any-computer-ally 93)
		(taunt-detected any-human-ally 33))
	(up-compare-goal gl-current-age <= gv-feudal)
=>
	(chat-to-player my-player-number "Badly hurt ally - I stop slinging now")
	(chat-to-allies-using-id 22074)
	(chat-to-allies "96")
	(set-goal gl-strategy regicide-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal SLING 0)
)

(defrule
	(strategic-number sn-livestock-to-town-center != 1)
=>
	(set-strategic-number sn-enable-boar-hunting 0)
	(set-strategic-number sn-retreating 0)
	(set-strategic-number sn-percent-building-cancellation 30)
	(set-strategic-number sn-enable-new-building-system 1)
	(set-strategic-number sn-enable-offensive-priority 1)
	(set-strategic-number sn-livestock-to-town-center 1)
	(set-strategic-number sn-number-civilian-militia 0)
	(set-strategic-number sn-wall-targeting-mode 1)
	(up-assign-builders c: bombard-tower c: 1)
	(enable-timer 6 75)
)

#load-if-not-defined DEATH-MATCH
(defrule
	(goal gl-current-age gv-feudal)
	(building-type-count town-center > 0)
	(up-compare-goal gl-strategy-type >= FC)
	(goal gl-FC-type gv-2-villagers)
	(game-time < 1200)
=>
	(up-assign-builders c: market c: 3)
	(up-assign-builders c: archery-range c: 2)
	(up-assign-builders c: stable c: 2)
	(disable-self)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count town-center > 0)
=>
	(up-assign-builders c: market c: 1)
	(up-assign-builders c: archery-range c: 1)
	(up-assign-builders c: stable c: 1)
	(up-assign-builders c: town-center-foundation c: 4)
	(disable-self)
)

(defrule
	(strategic-number sn-town-center-start == 0)
=>
	(up-assign-builders c: town-center-foundation c: land-nomad-TC-villagers)
	(disable-self)
)

(defrule
	(strategic-number sn-town-center-start == 0)
	(building-type-count-total town-center > 0)
	(building-type-count town-center == 0)
	(nand	(goal gl-nothing-style-map YES)
		(civ-selected chinese))
	(or	(wood-amount >= 30)
		(civ-selected hun))
=>
	(up-assign-builders c: town-center-foundation c: 20)
	(disable-self)
)

(defrule
	(strategic-number sn-town-center-start == 0)
	(goal gl-nothing-style-map YES)
	(civ-selected chinese)
=>
	(up-assign-builders c: town-center-foundation c: 1)
	(disable-self)
)

(defrule
	(strategic-number sn-town-center-start == 1)
	(strategic-number sn-nomad-style-start == 1)
=>
	(up-assign-builders c: town-center-foundation c: 4)
	(disable-self)
)

(defrule
	(game-time > 5)
	(up-compare-goal gl-my-villager-count > 25)
	(not	(death-match-game))
	(or	(up-compare-goal gl-nothing-style-map != YES)
		(building-type-count town-center > 0))
	(strategic-number sn-town-center-start == 1)
=>
	(up-assign-builders c: town-center-foundation c: 4)
	(disable-self)
)

#load-if-defined UP-2-PLAYER-GAME
(defrule
	(goal gl-strategy eagle-rush)
	(game-time < 1200)
	(building-type-count town-center > 0)
	(up-compare-const gv-meso-civ-enemy == 1)
	(commodity-selling-price stone < default-stone-price)
=>
	(up-assign-builders c: town-center-foundation c: 1); Keep most villagers at work so we don't get outnumbered
	(disable-self)
)

(defrule
	(goal gl-strategy eagle-rush)
	(game-time > 1800)
	(up-compare-const gv-meso-civ-enemy == 1)
=>
	(up-assign-builders c: town-center-foundation c: 4)
	(disable-self)
)
#end-if

#end-if; DM

(defrule
	(or	(taunt-detected any-human 239)
		(taunt-detected any-computer 239))
=>
	(up-chat-data-to-player this-any-human "My target player is %d" s: sn-target-player-number)
	(up-chat-data-to-player this-any-computer "My target player is %d" s: sn-target-player-number)
	(up-chat-data-to-player this-any-human "My focus player is %d" s: sn-focus-player-number)
	(up-chat-data-to-player this-any-computer "My focus player is %d" s: sn-focus-player-number)
	(up-chat-data-to-player this-any-human "Threat level is %d" s: sn-threat-level)
	(up-chat-data-to-player this-any-computer "Threat level is %d" s: sn-threat-level)
	(acknowledge-taunt this-any-human-ally 239)
	(acknowledge-taunt this-any-computer 239)
)

(defrule
	(goal target-system aggressive-raid)
	(or	(unit-type-count battering-ram-line > 0)
		(or	(unit-type-count trebuchet-set > 0)
			(unit-type-count cannon-galleon-line > 0)))
	(up-compare-flag gl-flag != target-system-rewriting)
=>
	(set-goal target-system basic)
	(up-modify-flag gl-flag c:+ target-system-rewriting)
)

(defrule
	(goal target-system raid)
	(or	(unit-type-count cannon-galleon-line > 0)
		(players-military-population focus-player >= 30))
	(up-compare-flag gl-flag != target-system-rewriting)
=>
	(set-goal target-system basic)
	(up-modify-flag gl-flag c:+ target-system-rewriting)
)

(defrule
	(up-compare-goal target-system != siege)
	(or	(unit-type-count battering-ram-line > 0)
		(or	(unit-type-count trebuchet-set > 0)
			(or	(unit-type-count cannon-galleon-line > 2)
				(or	(unit-type-count scorpion-line > 10)
					(unit-type-count mangonel-line > 2)))))
	(up-compare-flag gl-flag != target-system-rewriting)
=>
	(set-goal target-system siege)
	(up-modify-flag gl-flag c:+ target-system-rewriting)
)

(defrule
	(up-compare-goal target-system != raid)
	(up-compare-goal target-system != siege)
	(goal gl-rush-suitability-on-map GOOD)
	(research-completed ri-scale-barding)
	(soldier-count > 25)
	(unit-type-count battering-ram-line == 0)
	(unit-type-count trebuchet-set == 0)
	(unit-type-count cannon-galleon-line == 0)
	(players-military-population focus-player < 8)
	(players-building-type-count target-player castle == 0)
	(up-compare-flag gl-flag != target-system-rewriting)
=>
	(set-goal target-system raid)
	(up-modify-flag gl-flag c:+ target-system-rewriting)
)

(defrule
	(up-compare-goal target-system != raid)
	(up-compare-goal target-system != siege)
	(goal gl-strategy eew-strategy)
	(goal SLING 0)
	(goal gl-eagles heavy-eagles)
	(players-military-population focus-player < 30)
	(up-compare-flag gl-flag != target-system-rewriting)
=>
	(set-goal target-system raid)
	(up-modify-flag gl-flag c:+ target-system-rewriting)
)

(defrule
	(up-compare-goal target-system != aggressive-raid)
	(up-compare-goal target-system != siege)
	(goal gl-strategy eew-strategy)
	(goal SLING 1)
	(goal gl-eagles heavy-eagles)
	(up-compare-flag gl-flag != target-system-rewriting)
=>
	(set-goal target-system aggressive-raid)
	(up-modify-flag gl-flag c:+ target-system-rewriting)
)

(defrule
	(enemy-captured-relics)
	(goal target-system siege)
=>
	(up-set-defense-priority c: monastery c: 25000)
	(up-set-offense-priority c: monastery c: 11)
	(disable-self)
)

(defrule
	(up-compare-flag gl-flag != target-system-rewriting)
=>
	(up-jump-rule 10)
)

(defrule
	(goal target-system basic)
=>
	(up-set-offense-priority c: town-center c: 2)
	(up-set-offense-priority c: castle c: 2)
	(up-set-offense-priority c: watch-tower c: 2)
	(up-set-offense-priority c: house c: 1)
	(up-set-offense-priority c: bombard-tower c: 2)
	(up-set-offense-priority c: lumber-camp c: 8)
	(up-set-offense-priority c: mining-camp c: 8)
	(up-set-offense-priority c: barracks c: 5)
	(up-set-offense-priority c: mill c: 2)
	(up-set-offense-priority c: stable c: 5)
	(up-set-offense-priority c: archery-range c: 5)
	(up-set-offense-priority c: monastery c: 5)
	(up-set-offense-priority c: siege-workshop c: 5)
)

(defrule
	(goal target-system basic)
=>
	(up-set-defense-priority c: town-center c: 500)
	(up-set-defense-priority c: castle c: 500)
	(up-set-defense-priority c: watch-tower c: 500)
	(up-set-defense-priority c: house c: 5)
	(up-set-defense-priority c: bombard-tower c: 500)
	(up-set-defense-priority c: lumber-camp c: 10000)
	(up-set-defense-priority c: mining-camp c: 11000)
	(up-set-defense-priority c: barracks c: 7000)
	(up-set-defense-priority c: mill c: 500)
	(up-set-defense-priority c: stable c: 7000)
	(up-set-defense-priority c: archery-range c: 7000)
	(up-set-defense-priority c: monastery c: 7000)
	(up-set-defense-priority c: siege-workshop c: 7000)
	(up-modify-flag gl-flag c:- target-system-rewriting)
)

(defrule
	(goal target-system siege)
=>
	(up-set-offense-priority c: town-center c: 8)
	(up-set-offense-priority c: castle c: 11)
	(up-set-offense-priority c: watch-tower c: 8)
	(up-set-offense-priority c: house c: 1)
	(up-set-offense-priority c: bombard-tower c: 11)
	(up-set-offense-priority c: lumber-camp c: 3)
	(up-set-offense-priority c: mining-camp c: 3)
	(up-set-offense-priority c: barracks c: 4)
	(up-set-offense-priority c: mill c: 2)
	(up-set-offense-priority c: stable c: 4)
	(up-set-offense-priority c: archery-range c: 4)
	(up-set-offense-priority c: monastery c: 5)
	(up-set-offense-priority c: siege-workshop c: 4)
)

(defrule
	(goal target-system siege)
=>
	(up-set-defense-priority c: town-center c: 12000)
	(up-set-defense-priority c: castle c: 15000)
	(up-set-defense-priority c: watch-tower c: 12000)
	(up-set-defense-priority c: house c: 5)
	(up-set-defense-priority c: bombard-tower c: 15000)
	(up-set-defense-priority c: lumber-camp c: 1000)
	(up-set-defense-priority c: mining-camp c: 1000)
	(up-set-defense-priority c: barracks c: 4000)
	(up-set-defense-priority c: mill c: 500)
	(up-set-defense-priority c: stable c: 4000)
	(up-set-defense-priority c: archery-range c: 4000)
	(up-set-defense-priority c: monastery c: 5000)
	(up-set-defense-priority c: siege-workshop c: 4000)
	(up-modify-flag gl-flag c:- target-system-rewriting)
)

(defrule
	(goal target-system rush)
=>
	(up-set-offense-priority c: town-center c: 2)
	(up-set-offense-priority c: castle c: 2)
	(up-set-offense-priority c: watch-tower c: 2)
	(up-set-offense-priority c: house c: 1)
	(up-set-offense-priority c: bombard-tower c: 2)
	(up-set-offense-priority c: lumber-camp c: 11)
	(up-set-offense-priority c: mining-camp c: 11)
	(up-set-offense-priority c: barracks c: 7)
	(up-set-offense-priority c: mill c: 10)
	(up-set-offense-priority c: stable c: 7)
	(up-set-offense-priority c: archery-range c: 7)
	(up-set-offense-priority c: monastery c: 7)
	(up-set-offense-priority c: siege-workshop c: 7)
)

(defrule
	(goal target-system rush)
=>
	(up-set-defense-priority c: town-center c: 500)
	(up-set-defense-priority c: castle c: 500)
	(up-set-defense-priority c: watch-tower c: 500)
	(up-set-defense-priority c: house c: 5)
	(up-set-defense-priority c: bombard-tower c: 500)
	(up-set-defense-priority c: lumber-camp c: 11000)
	(up-set-defense-priority c: mining-camp c: 11000)
	(up-set-defense-priority c: barracks c: 7000)
	(up-set-defense-priority c: mill c: 10000)
	(up-set-defense-priority c: stable c: 7000)
	(up-set-defense-priority c: archery-range c: 7000)
	(up-set-defense-priority c: monastery c: 7000)
	(up-set-defense-priority c: siege-workshop c: 7000)
	(up-modify-flag gl-flag c:- target-system-rewriting)
)

; ...

(defrule
	(goal target-system raid)
=>
	(up-set-offense-priority c: town-center c: 5)
	(up-set-offense-priority c: castle c: -1)
	(up-set-offense-priority c: watch-tower c: -1)
	(up-set-offense-priority c: house c: -1)
	(up-set-offense-priority c: bombard-tower c: -1)
	(up-set-offense-priority c: lumber-camp c: 11)
	(up-set-offense-priority c: mining-camp c: 11)
	(up-set-offense-priority c: barracks c: -1)
	(up-set-offense-priority c: mill c: -1)
	(up-set-offense-priority c: stable c: -1)
	(up-set-offense-priority c: archery-range c: -1)
	(up-set-offense-priority c: monastery c: -1)
	(up-set-offense-priority c: siege-workshop c: -1)
)

(defrule
	(goal target-system raid)
=>
	(up-set-defense-priority c: town-center c: 1000); Attack TCs if nothing else to attack any more
	(up-set-defense-priority c: castle c: -1)
	(up-set-defense-priority c: watch-tower c: -1)
	(up-set-defense-priority c: house c: -1)
	(up-set-defense-priority c: bombard-tower c: -1)
	(up-set-defense-priority c: lumber-camp c: 10000)
	(up-set-defense-priority c: mining-camp c: 10000)
	(up-set-defense-priority c: barracks c: -1)
	(up-set-defense-priority c: mill c: -1)
	(up-set-defense-priority c: stable c: -1)
	(up-set-defense-priority c: archery-range c: -1)
	(up-set-defense-priority c: monastery c: -1)
	(up-set-defense-priority c: siege-workshop c: -1)
	(up-modify-flag gl-flag c:- target-system-rewriting)
)

; ...

(defrule
	(goal target-system aggressive-raid)
=>
	(up-set-offense-priority c: town-center c: 11)
	(up-set-offense-priority c: castle c: -1)
	(up-set-offense-priority c: watch-tower c: -1)
	(up-set-offense-priority c: house c: -1)
	(up-set-offense-priority c: bombard-tower c: -1)
	(up-set-offense-priority c: lumber-camp c: 11)
	(up-set-offense-priority c: mining-camp c: 11)
	(up-set-offense-priority c: barracks c: -1)
	(up-set-offense-priority c: mill c: 10)
	(up-set-offense-priority c: stable c: -1)
	(up-set-offense-priority c: archery-range c: -1)
	(up-set-offense-priority c: monastery c: -1)
	(up-set-offense-priority c: siege-workshop c: -1)
)

(defrule
	(goal target-system aggressive-raid)
=>
	(up-set-defense-priority c: town-center c: 10000)
	(up-set-defense-priority c: castle c: -1)
	(up-set-defense-priority c: watch-tower c: -1)
	(up-set-defense-priority c: house c: -1)
	(up-set-defense-priority c: bombard-tower c: -1)
	(up-set-defense-priority c: lumber-camp c: 10000)
	(up-set-defense-priority c: mining-camp c: 10000)
	(up-set-defense-priority c: barracks c: -1)
	(up-set-defense-priority c: mill c: 10000)
	(up-set-defense-priority c: stable c: -1)
	(up-set-defense-priority c: archery-range c: -1)
	(up-set-defense-priority c: monastery c: -1)
	(up-set-defense-priority c: siege-workshop c: -1)
	(up-modify-flag gl-flag c:- target-system-rewriting)
)

(defrule
	(game-time > 3000)
	(players-unit-type-count any-enemy trade-cart > 6)
	(up-compare-goal target-system >= aggressive-raid)
=>
	(up-set-defense-priority c: market c: 10000)
	(up-set-offense-priority c: market c: 10)
	(up-set-offense-priority c: trade-cart c: 10)
	(disable-self)
)

#load-if-not-defined DEATH-MATCH

#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE

#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined WONDER-RACE
(defrule
	(up-compare-goal gl-current-age >= gv-castle)
=>
	(up-jump-rule 15)
)

(defrule
	(civ-selected malay)
	(up-compare-const all-techs-enabled == 0)
=>
	(up-modify-goal gl-my-villager-count-total c:- 2)
	(up-modify-goal temporary-goal g:= gl-strategy-type)
	(up-modify-goal temporary-goal c:- 1)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal c:min 1)
	(up-modify-goal temporary-goal c:* 2)
	(up-modify-goal gl-my-villager-count-total g:- temporary-goal)
)

(defrule
	(or	(and	(up-compare-goal gl-DRUSH != YES)
			(food-amount >= 410))
		(up-compare-goal gl-my-villager-count-total > 25))
	(up-compare-goal gl-my-villager-count-total >= flush-villagers2)
	(goal gl-strategy flush)
	(or	(goal gl-feudal-infantry 0)
		(or	(up-compare-goal gl-my-villager-count-total >= maa1-villagers)
			(goal gl-resources-on-map plenty)))
	(up-compare-goal gl-total-food-amount >= 410)
=>
	(set-strategic-number sn-enable-training-queue 0)
)

(defrule
	(or	(and	(up-compare-goal gl-DRUSH != YES)
			(or	(goal gl-strategy trush)
				(goal gl-strategy forward)))
		(and	(goal gl-DRUSH YES)
			(and	(research-available ri-loom)
				(and	(up-compare-goal gl-my-villager-count-total > 25)
					(up-compare-goal gl-total-food-amount > 350)))))
	(up-compare-goal gl-my-villager-count-total >= forward-villagers)
=>
	(set-strategic-number sn-enable-training-queue 0)
)

(defrule
	(or	(map-type fortress)
		(goal gl-strategy monk-mango-push))
	(up-compare-goal gl-boar-eaten > 1)
	(strategic-number sn-nomad-style-start == 0)
	(up-compare-goal gl-my-villager-count-total > 25)
	(or	(and	(up-compare-goal gl-my-villager-count-total > 27)
			(or	(goal gl-close-deer YES)
				(map-type fortress)))
		(up-compare-const gv-regicide == 1))
	(food-amount >= 430)
=>
	(set-strategic-number sn-enable-training-queue 0)
	(disable-self)
)

(defrule
	(goal gl-strategy saracen-heavy-krush)
	(goal gl-resources-on-map plenty)
	(up-compare-goal gl-my-villager-count-total > 27)
	(strategic-number sn-nomad-style-start == 0)
	(food-amount >= 430)
=>
	(set-strategic-number sn-enable-training-queue 0)
	(disable-self)
)

(defrule
	(up-compare-goal gl-my-villager-count-total > 17)
	(or	(and	(goal gl-DRUSH YES)
			(building-type-count-total barracks > 0))
		(or	(and	(up-compare-goal gl-my-villager-count-total > 24)
				(goal gl-strategy wall-boom))
			(and	(up-compare-goal gl-my-villager-count-total >= 29)
				(goal gl-strategy castle-push))))
=>
	(set-strategic-number sn-enable-training-queue 0)
	(disable-self)
)

(defrule
	(or	(and	(goal gl-current-age gv-dark)
			(and	(goal gl-DRUSH YES)
				(and	(building-type-count-total barracks > 0)
					(unit-type-count-total militiaman-line > drush-militias))))
		(and	(goal gl-strategy sling)
			(and	(research-completed ri-wheel-barrow)
				(current-age-time > 15))))
=>
	(set-strategic-number sn-enable-training-queue 1)
	(disable-self)
)

(defrule
	(up-compare-goal gl-my-villager-count-total > 27)
	(not	(map-type migration))
	(or	(goal gl-strategy-type controlled-flush)
		(and	(up-compare-goal gl-my-villager-count-total > 29)
			(and	(or	(goal gl-strategy war-galley-rush)
					(or	(goal gl-strategy fire-ship-rush)
						(goal gl-strategy turtle-rush)))
				(up-compare-goal gl-total-food-amount >= 500))))
=>
	(set-strategic-number sn-enable-training-queue 0)
	(disable-self)
)

(defrule
	(goal gl-current-age gv-dark)
	(nand	(difficulty == hardest)
		(up-compare-goal gl-my-villager-count-total > 20))
	(up-compare-goal gl-my-villager-count-total < 24)
	(starting-resources == low-resources)
	(or	(not	(research-available ri-loom))
		(and	(goal gl-loomless-boar-hunting YES)
			(unit-type-count villager-hunter > 0)))
=>
	(set-strategic-number sn-enable-training-queue 1)
	(disable-self)
)

(defrule
	(goal gl-current-age gv-dark)
	(up-compare-goal gl-my-villager-count-total >= 28)
	(strategic-number sn-sheep-count >= 8)
	(or	(up-compare-goal gl-lured-deer-count >= 3)
		(building-type-count-total mill > 1))
	(up-compare-goal gl-boar-eaten > 1)
	(or	(and	(or	(strategic-number sn-lumber-camp-max-distance < 16)
				(building-type-count-total lumber-camp < 2))
			(strategic-number sn-lumber-camp-max-distance < 18))
		(strategic-number sn-wood-found == 2))
=>
	(set-strategic-number sn-enable-training-queue 0)
	(disable-self)
)

(defrule
	(civ-selected malay)
	(up-compare-const all-techs-enabled == 0)
=>
	(up-modify-goal gl-my-villager-count-total c:+ 2)
	(up-modify-goal temporary-goal g:= gl-strategy-type)
	(up-modify-goal temporary-goal c:- 1)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal c:min 0)
	(up-modify-goal temporary-goal c:* 2)
	(up-modify-goal gl-my-villager-count-total g:+ temporary-goal)
)
#end-if
(defrule
	(up-compare-goal gl-loomless-boar-hunting != YES)
	(up-compare-goal gl-my-villager-count-total g:>= gl-villagers-to-start-boar-hunt)
=>
	(up-set-target-point gl-position-self-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 33)
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: boar-class c: 240)
	(up-remove-objects search-remote object-data-hitpoints >= 100)
	(up-remove-objects search-remote object-data-base-attack < 5)
	(up-remove-objects search-remote object-data-carry < 200)
)

(defrule
	(up-compare-goal gl-loomless-boar-hunting != YES)
	(up-compare-goal gl-my-villager-count-total g:>= gl-villagers-to-start-boar-hunt)
	(research-available ri-loom)
	(gold-amount >= 20)
	(or	(gold-amount >= 50)
		(unit-type-count villager-gold > 0))
	(up-set-target-object search-remote c: 0)
=>
	(set-strategic-number sn-enable-training-queue 0)
)

(defrule
	(goal gl-current-age gv-dark)
	(or	(up-compare-goal gl-my-villager-count-total < 24)
		(up-compare-goal gl-strategy-type >= FC2))
	(nand	(difficulty == hardest)
		(up-compare-goal gl-my-villager-count-total > 20))
	(starting-resources == low-resources)
	(not	(research-available ri-loom))
=>
	(set-strategic-number sn-enable-training-queue 1)
	(disable-self)
)

(defrule
	(goal gl-current-age gv-dark)
	(up-compare-goal gl-my-villager-count-total < 25)
	(nand	(difficulty == hardest)
		(up-compare-goal gl-my-villager-count-total > 20))
	(goal gl-loomless-boar-hunting YES)
	(up-compare-goal gl-uncommon-settings != YES)
	(starting-resources == low-resources)
=>
	(set-strategic-number sn-enable-training-queue 1)
)

(defrule
	(players-military-population focus-player > 2)
	(game-time > 360)
	(gold-amount >= 50)
	(research-available ri-loom)
=>
	(set-strategic-number sn-enable-training-queue 0)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(strategic-number sn-enable-training-queue == 1)
	(nand	(goal gl-strategy sling)
		(and	(up-research-status c: ri-wheel-barrow >= research-pending)
			(or	(up-compare-goal gl-strategy-type < FC)
				(up-research-status c: ri-hand-cart >= research-pending))))
	(up-compare-goal SLING != 5)
=>
	(set-strategic-number sn-enable-training-queue 0)
)
#end-if
#end-if
#end-if
#end-if

#end-if

(defrule
	(game-time < 1600)
	(up-compare-goal gl-anti-trush != YES)
	(or	(research-completed ri-hand-cart)
		(or	(players-unit-type-count focus-player cavalry-archer-line > 2)
			(or	(up-compare-goal gl-enemy-units-in-town > 4)
				(or	(game-time > 1400)
					(or	(and	(players-military-population any-enemy > 6)
							(up-compare-goal gl-strategy != sling))
						(goal gl-enemy-strategy scorpion-rush))))))
=>
	(set-strategic-number sn-allow-civilian-defense civilian-defense-value)
)

(defrule
	(current-age > feudal-age)
	(up-compare-goal gl-current-age > gv-feudal-up)
	(game-time > 2100)
=>
	(up-jump-rule 13)
)

(defrule
	(research-completed ri-loom)
	(players-current-age focus-player == dark-age)
	(players-military-population focus-player > 1)
	(nand	(strategic-number sn-allow-civilian-defense == 3)
		(strategic-number sn-allow-civilian-offense == 0))
	(game-time < 900)
=>
	(set-strategic-number sn-allow-civilian-offense 2)
	(set-strategic-number sn-allow-civilian-defense 3)
)

(defrule
	(or	(up-compare-goal threat-time > 5000)
		(up-projectile-detected projectile-watch-tower < 3000))
	(or	(up-compare-goal threat-player > 0)
		(and	(strategic-number sn-allow-civilian-defense == 3)
			(strategic-number sn-allow-civilian-offense == 0)))
	(or	(strategic-number sn-allow-civilian-defense == 3)
		(strategic-number sn-allow-civilian-offense == 2))
=>
	(set-strategic-number sn-allow-civilian-offense 0)
	(set-strategic-number sn-allow-civilian-defense 1)
)

(defrule
	(or	(game-time >= 900)
		(or	(players-current-age focus-player > dark-age)
			(and	(up-compare-goal threat-time > 5000)
				(or	(up-compare-goal threat-player > 0)
					(and	(strategic-number sn-allow-civilian-defense == 3)
						(strategic-number sn-allow-civilian-offense == 0))))))
	(or	(strategic-number sn-allow-civilian-defense == 3)
		(strategic-number sn-allow-civilian-offense == 2))
=>
	(set-strategic-number sn-allow-civilian-offense 0)
	(set-strategic-number sn-allow-civilian-defense 1)
)

(defrule
	(strategic-number sn-allow-civilian-defense <= 1)
	(strategic-number sn-allow-civilian-offense == 0)
=>
	(set-strategic-number sn-number-civilian-militia 0)
)

(defrule
	(goal gl-nothing-style-map YES)
	(players-building-type-count every-enemy watch-tower == 0)
	(players-current-age focus-player <= feudal-age)
	(soldier-count < 7)
=>
	(set-strategic-number sn-allow-civilian-defense 3)
)

(defrule
	(goal gl-current-age gv-dark-up)
	(not	(death-match-game))
=>
	(enable-timer 6 barracks-support-time)
	(set-strategic-number sn-placement-fail-delta 0)
	(disable-self)
)

(defrule
	(or	(goal gl-current-age gv-dark-up)
		(goal gl-current-age gv-feudal))
	(up-compare-goal gl-strategy != grush)
	(building-type-count-total barracks < 1)
	(or	(timer-triggered 6)
		(goal gl-feudal-infantry men-at-arms))
=>
	(up-assign-builders c: barracks c: 3)
	(disable-self)
)

(defrule
	(or	(building-available archery-range)
		(building-type-count-total market > 0))
	(current-age >= feudal-age)
=>
	(up-assign-builders c: barracks c: 1)
	(disable-self)
)

(defrule
	(up-compare-goal gl-strategy-type >= FC)
	(current-age == feudal-age)
	(current-age-time > 10)
	(or	(current-age-time > 20)
		(goal gl-FC-type gv-2-villagers))
	(building-type-count-total blacksmith < 1)
=>
	(up-assign-builders c: blacksmith c: 2)
	(disable-self)
)

(defrule
	(up-compare-goal gl-strategy-type >= FC)
	(current-age == feudal-age)
	(current-age-time > 17)
	(or	(current-age-time > 30)
		(goal gl-FC-type gv-2-villagers))
	(building-type-count-total blacksmith < 1)
=>
	(up-assign-builders c: blacksmith c: 3)
	(disable-self)
)

(defrule
	(or	(up-compare-goal gl-current-age >= gv-feudal-up)
		(and	(current-age == feudal-age)
			(and	(current-age-time > 30)
				(goal gl-nothing-style-map YES))))
=>
	(up-assign-builders c: blacksmith c: 1)
	(disable-self)
)

(defrule
	(game-time > 540)
=>
	(set-strategic-number sn-maximum-fish-boat-drop-distance 27)
	(disable-self)
)

(defrule
	(game-time < 1000)
	(or	(cc-players-unit-type-count 0 deep-fish < 4)
		(and	(unit-type-count fishing-ship > 1)
			(or	(map-type custom)
				(up-gaia-type-count-total c: deep-fish < 1))))
	(strategic-number sn-maximum-fish-boat-drop-distance < 200)
	(strategic-number sn-maximum-fish-boat-drop-distance >= 0)
=>
	(set-strategic-number sn-maximum-fish-boat-drop-distance 200)
)

(defrule
	(game-time > 900)
	(strategic-number sn-maximum-fish-boat-drop-distance != -1)
=>
	(set-strategic-number sn-maximum-fish-boat-drop-distance -1)
)

(defrule
	(goal gl-strategy castle-drop)
	(game-time > 120)
	(building-type-count-total castle < 2)
	(strategic-number sn-percent-building-cancellation > 20)
	(strategic-number sn-percent-building-cancellation < 100)
	(not	(player-in-game any-human-enemy))
=>
	(set-strategic-number sn-percent-building-cancellation 10)
)

(defrule
	(building-type-count-total castle > 1)
=>
	(set-strategic-number sn-percent-building-cancellation 20)
	(disable-self)
)

(defrule
	(or	(and	(game-time > 2700)
			(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))
		(game-time > 4800))
=>
	(set-strategic-number sn-dropsite-separation-distance 10)
	(disable-self)
)

(defrule
	(building-type-count-total mining-camp > 16)
	(strategic-number sn-dropsite-separation-distance < 15)
=>
	(set-strategic-number sn-dropsite-separation-distance 15)
)

(defrule
	(game-time > 3600)
	(dropsite-min-distance gold == -1)
	(dropsite-min-distance stone == -1)
	(dropsite-min-distance wood == -1)
=>
	(set-strategic-number sn-dropsite-separation-distance 50)
	(disable-self)
)

#load-if-defined SPANISH-CIV
(defrule
	(research-completed my-unique-research)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(or	(strategic-number sn-allow-civilian-defense < 3)
		(strategic-number sn-allow-civilian-offense > 0))
=>
	(set-strategic-number sn-allow-civilian-offense 0)
	(set-strategic-number sn-allow-civilian-defense 3)
	(set-strategic-number sn-number-civilian-militia 0)
)
#end-if

(defrule
	(goal TSA 1)
	(or	(dropsite-min-distance wood == -1)
		(dropsite-min-distance wood == 255))
	(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)
=>
	(up-modify-goal temporary-goal g:= gl-my-villager-count)
	(up-get-fact building-type-count farm temporary-goal2)
	(up-modify-goal temporary-goal c:- 30)
	(up-modify-goal temporary-goal g:- temporary-goal2)
)

(defrule
	(up-compare-goal TSA != 1)
	(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)
	(strategic-number sn-number-civilian-militia != 0)
=>
	(set-strategic-number sn-allow-civilian-offense 0)
	(set-strategic-number sn-allow-civilian-defense 3)
	(set-strategic-number sn-number-civilian-militia 0)
)

(defrule
	(goal TSA 1)
	(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)
	(or	(dropsite-min-distance wood == -1)
		(dropsite-min-distance wood == 255))
	(or	(strategic-number sn-allow-civilian-offense != 2)
		(strategic-number sn-number-civilian-militia g:!= temporary-goal))
=>
	(set-strategic-number sn-allow-civilian-offense 2)
	(set-strategic-number sn-allow-civilian-defense 3)
	(up-modify-sn sn-number-civilian-militia g:= temporary-goal)
)

; ============== SOME BUILDINGS

(defrule
	(goal gl-current-age gv-feudal)
	(up-compare-goal gl-strategy <= controlled-flush)
	(game-time > 1200)
	(civilian-population > 35)
	(food-amount < 550)
	(building-type-count-total blacksmith > 0)
	(gold-amount > 430)
	(or	(up-compare-goal gl-military-percentage > 80)
		(or	(building-type-count watch-tower > 1)
			(gold-amount > 500)))
	(building-type-count-total market < 1)
=>
	(up-modify-escrow wood c:max 175)
	(up-modify-goal gl-market-build-priority c:max 10000)
)

(defrule
	(goal gl-market-build-priority 10000)
	(can-build-with-escrow market)
=>
	(set-goal gl-market-build-priority -1)
	(release-escrow wood)
	(up-set-placement-data my-player-number -1 c: -10)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-build place-control 0 c: market)
)

(defrule
	(goal gl-current-age gv-feudal)
	(food-amount >= 800)
	(building-type-count-total blacksmith > 0)
	(gold-amount < 200)
	(or	(and	(food-amount >= 1000)
			(current-age-time g:> gl-required-current-age-time))
		(and	(gold-amount <= 100)
			(game-time > 600)))
	(building-type-count-total market < 1)
=>
	(up-modify-goal gl-market-build-priority c:max 1)
)

#load-if-not-defined WONDER-RACE
(defrule
	(player-in-game any-ally)
	(or	(and	(game-time > 2000)
			(civilian-population > 80))
		(and	(cc-players-unit-type-count 0 gold-mine < large-number-deer)
			(and	(up-compare-goal gl-current-age >= gv-feudal-up)
				(up-compare-goal gl-gathered-relics < 4))))
	(building-type-count-total market < 1)
	(can-build-with-escrow market)
=>
	(release-escrow wood)
	(set-strategic-number sn-placement-zone-size 5)
	(up-set-placement-data my-player-number -1 c: -15)
	(up-build place-control 0 c: market)
)
#end-if

(defrule
	(goal gl-current-age gv-feudal)
	(up-compare-const gv-maximum-age >= castle-age)
	(dropsite-min-distance gold s:> sn-maximum-gold-drop-distance)
	(building-type-count-total mining-camp > 1)
	(or	(food-amount >= 800)
		(and	(up-compare-goal gl-strategy-type >= FC)
			(building-type-count-total blacksmith > 0)))
	(gold-amount < 200)
	(building-type-count-total market < 1)
=>
	(up-modify-goal gl-market-build-priority c:max 1)
)

(defrule
	(game-time > 1300)
	(or	(and	(goal gl-current-age gv-feudal)
			(and	(game-time > 1560)
				(food-amount > 600)))
		(and	(up-compare-goal gl-target-player-distance < 30)
			(up-projectile-detected projectile-fortification < 10000)))
	(gold-amount < 200)
	(unit-type-count villager-gold < 5)
	(building-type-count-total market < 1)
=>
	(up-modify-goal gl-market-build-priority c:max 1)
)

(defrule
	(or	(population-headroom < 5)
		(or	(and	(death-match-game)
				(game-time < 120))
			(building-type-count town-center == 0)))
=>
	(up-jump-rule 12)
)

(defrule
	(or	(building-type-count-total house >= 8)
		(and	(or	(up-pending-objects c: house > 0)
				(housing-headroom > 4))
			(up-compare-const gv-wonder-race == 1)))
	(goal SLING 0)
	(up-compare-goal gl-strategy != non-saracen-heavy-krush)
	(or	(building-type-count-total town-center < 2)
		(up-compare-goal gl-current-age >= gv-castle-up))
	(or	(goal gl-strategy wonder-race-blocked-vills)
		(goal gl-strategy wonder-race-fi))
=>
	(up-jump-rule 11)
)

(defrule
	(strategic-number sn-town-center-start == 1)
	(up-pending-objects c: house < 1)
	(population-headroom > 4)
	(housing-headroom < 6)
	(building-type-count-total barracks > 0)
	(up-compare-goal gl-my-villager-count-total > 19)
	(goal gl-DRUSH YES)
=>
	(up-modify-goal gl-house-build-priority c:max 1)
)

(defrule
	(up-pending-objects c: house < 1)
	(or	(and	(up-compare-goal gl-strategy-type >= FC)
			(and	(current-age == feudal-age)
				(housing-headroom < 5)))
		(and	(goal gl-strategy scorpion-boom)
			(building-type-count-total town-center > 3)))
	(housing-headroom < 20)
	(population-headroom > 4)
=>
	(up-modify-goal gl-house-build-priority c:max 1)
)

(defrule
	(up-compare-goal gl-strategy != scrush)
	(up-pending-objects c: house < 2)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(current-age == feudal-age)
	(up-compare-goal gl-current-age >= gv-feudal)
	(population-headroom > 4)
	(or	(and	(housing-headroom < 11)
			(up-pending-objects c: house < 1))
		(or	(up-compare-goal gl-my-villager-count-total > 33)
			(building-type-count-total blacksmith > 0)))
	(housing-headroom < 16)
=>
	(up-modify-goal gl-house-build-priority c:max 1)
)

(defrule
	(up-compare-goal gl-my-villager-count > 45)
	(up-compare-goal gl-strategy != scrush)
	(up-pending-objects c: house < 3)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(current-age == feudal-age)
	(up-compare-goal gl-current-age >= gv-feudal)
	(population-headroom > 4)
	(or	(and	(housing-headroom < 20)
			(up-pending-objects c: house < 2))
		(up-compare-goal gl-my-villager-count > 58))
	(housing-headroom < 25)
=>
	(up-modify-goal gl-house-build-priority c:max 1)
)

(defrule
	(or	(goal gl-strategy uu-boom)
		(or	(goal gl-strategy castle-sling)
			(goal gl-strategy knight-boom)))
	(building-type-count-total town-center < 3)
	(stone-amount >= 100)
=>
	(up-jump-rule 1)
)

(defrule
	(up-pending-objects c: house < 2)
	(up-compare-goal gl-current-age >= gv-castle)
	(population-headroom > 4)
	(or	(housing-headroom < 10)
		(or	(and	(goal gl-strategy castle-sling)
				(building-type-count-total town-center > 3))
			(and	(goal gl-strategy-class special-class)
				(game-time > 1400))))
	(housing-headroom < 17)
=>
	(up-modify-goal gl-house-build-priority c:max 1)
)

(defrule
	(up-compare-goal gl-current-age > gv-dark-up)
	(up-pending-objects c: house < 3)
	(or	(goal gl-strategy-class basic-class)
		(up-compare-goal gl-current-age >= gv-castle-up))
	(or	(population > 90)
		(and	(housing-headroom < 14)
			(up-pending-objects c: house < 2)))
	(current-age >= castle-age)
	(population-headroom > 4)
	(housing-headroom < 19)
=>
	(up-modify-goal gl-house-build-priority c:max 1)
)

(defrule
	(up-compare-goal gl-current-age > gv-dark-up)
	(or	(and	(goal gl-strategy eagle-rush)
			(building-type-count-total barracks > 3))
		(and	(goal gl-strategy ranged-rush-strategy)
			(building-type-count-total archery-range > 3)))
	(up-pending-objects c: house < 3)
	(current-age >= castle-age)
	(population-headroom > 4)
	(housing-headroom < 18)
=>
	(up-modify-goal gl-house-build-priority c:max 1)
)

(defrule
	(game-time > 1800)
	(up-pending-objects c: house < 7)
	(or	(up-pending-objects c: house < 3)
		(population > 250))
	(or	(and	(goal gl-strategy-class basic-class)
			(building-type-count-total town-center > 2))
		(up-compare-goal gl-current-age >= gv-castle-up))
	(current-age >= castle-age)
	(population-headroom > 4)
	(housing-headroom < 20)
=>
	(up-modify-goal gl-house-build-priority c:max 1)
)

(defrule
	(up-pending-objects c: house < 1)
	(current-age <= feudal-age)
	(game-time > 180)
	(or	(building-type-count-total town-center > 1); DoubleArabia etc.
		(or	(building-type-count-total dock > 1)
			(and	(housing-headroom < 5)
				(building-type-count-total dock > 0))))
	(population-headroom > 4)
	(housing-headroom < 8)
=>
	(up-modify-goal gl-house-build-priority c:max 1)
)

(defrule
	(up-pending-objects c: house < 3)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(up-compare-const gv-migration == 0)
	(or	(goal SLING 1)
		(goal SLING 3))
	(or	(and	(housing-headroom < 16)
			(up-pending-objects c: house < 2))
		(game-time > 1300))
	(housing-headroom < 22)
	(population-headroom > 4)
=>
	(up-modify-goal gl-house-build-priority c:max 1)
)

(defrule
	(or	(building-type-count town-center == 0)
		(or	(and	(population < extra-market-pop)
				(or	(population < 100)
					(up-gaia-type-count c: gold > 7)))
			(or	(and	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
					(unit-type-count-total trade-cart < 2))
				(goal gl-migration-notice 0))))
=>
	(up-jump-rule 2)
)

(defrule
	(up-compare-goal gl-disable-market-placing != YES)
	(or	(game-time > 2300)
		(population > 167))
	(population > extra-market-pop)
	(building-type-count-total market < 1)
	(players-building-type-count any-ally market > 0)
	(building-type-count town-center > 2)
	(not	(up-pending-placement c: market))
=>
	(up-modify-escrow wood c:max 175)
)

(defrule
	(up-compare-goal gl-disable-market-placing != YES)
	(or	(game-time > extra-market-time); 2000 normally, 1740 in michi
		(population > 162))
	(building-type-count-total market < 4)
	(players-building-type-count any-ally market > 0)
	(can-build-with-escrow market)
=>
	(release-escrow wood)
	(set-strategic-number sn-placement-zone-size 50)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: -120)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-build place-control 0 c: market)
	(set-strategic-number sn-object-repair-level 20611)
	(up-jump-rule 1)
)

(defrule
	(nor	(up-pending-placement c: watch-tower)
		(up-pending-placement c: market))
	(or	(strategic-number sn-placement-fail-delta == -1)
		(and	(strategic-number sn-placement-to-center == 1)
			(nor	(up-pending-placement c: town-center)
				(up-pending-placement c: castle))))
=>
	(set-strategic-number sn-placement-to-center 0)
	(set-strategic-number sn-placement-fail-delta 0)
)

(defrule
	(strategic-number sn-object-repair-level < 20000)
=>
	(up-modify-sn sn-object-repair-level c:+ 16384)
)

(defrule
	(up-compare-goal gl-target-player-distance < 36)
	(strategic-number sn-object-repair-level >= 20000)
=>
	(up-modify-sn sn-object-repair-level c:- 16384)
)

(defrule
	(or	(unit-type-count dead-builder1 > 2)
		(or	(unit-type-count dead-builder2 > 2)
			(or	(and	(unit-type-count dead-builder1 > 0)
					(unit-type-count dead-builder2 > 1))
				(or	(and	(unit-type-count dead-builder1 > 1)
						(unit-type-count dead-builder2 > 0))
					(up-compare-goal TSA >= 1)))))
	(strategic-number sn-object-repair-level >= 20000)
=>
	(up-modify-sn sn-object-repair-level c:- 16384)
)

; ================ STRATEGY SELECTION

#load-if-not-defined WONDER-RACE

#load-if-not-defined DARK-AGE-END
#load-if-not-defined FEUDAL-AGE-END

(defrule
	(or	(up-compare-goal gl-nothing-style-map != YES)
		(and	(player-valid any-ally)
			(and	(up-compare-goal gl-strategy-selection-notice != 1)
				(or	(up-compare-goal gl-strategy != nothing-FC-rush)
					(building-type-count-total town-center < 2)))))
=>
	(up-jump-rule 4)
	(up-modify-goal gl-strategy-selection-notice c:max 2)
)

(defrule
	(goal gl-nothing-style-map YES)
	(or	(and	(building-type-count monastery > 0)
			(unit-type-count-total monk > 0))
		(goal gl-strategy-selection-notice 1))
	(not	(civ-selected turkish))
=>
	(set-goal CASTLE 0)
	(set-goal gl-advanced-cavalry 0)
	(set-goal gl-eagles 0)
	(set-goal gl-advanced-monastery 0)
	(set-goal gl-advanced-infantry pikemen)
	(set-goal gl-advanced-archery elite-skirmishers)
	(set-goal gl-strategy-selection-notice 1)
	(up-modify-sn sn-allow-resource-spending c:max 1)
)

(defrule
	(goal gl-nothing-style-map YES)
	(or	(and	(building-type-count monastery > 0)
			(unit-type-count-total monk > 0))
		(goal gl-strategy-selection-notice 1))
	(civ-selected turkish)
=>
	(set-goal CASTLE 0)
	(set-goal gl-advanced-cavalry LC)
	(set-goal gl-advanced-infantry 0)
	(set-goal gl-advanced-archery 0)
	(set-goal gl-strategy-selection-notice 1)
	(up-modify-sn sn-allow-resource-spending c:max 1)
)

(defrule
	(goal gl-nothing-style-map YES)
	(or	(and	(building-type-count monastery > 0)
			(unit-type-count-total monk > 0))
		(goal gl-strategy-selection-notice 1))
	(not	(civ-selected gothic))
	(up-research-status c: ri-light-cavalry >= research-available)
	(up-research-status c: ri-bloodlines >= research-available)
=>
	(set-goal gl-advanced-infantry 0)
	(set-goal gl-advanced-cavalry LC)
	(set-goal gl-strategy-selection-notice 1)
)

(defrule
	(goal gl-nothing-style-map YES)
	(up-compare-goal gl-current-age >= gv-castle-up)
=>
	(set-strategic-number sn-allow-resource-spending 6)
)

(defrule
	(or	(and	(goal gl-nothing-style-map YES)
			(and	(or	(goal gl-strategy nothing-FC-rush)
					(goal gl-strategy-selection-notice 1))
				(up-compare-goal gl-trade-unit-count-total < 35)))
		(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style))
=>
	(set-goal gl-unit-selection-block 1)
)

#load-if-defined TINY-MAP
#load-if-defined UP-2-PLAYER-GAME
(load "Barbarian\Strategies1v1")

#load-if-not-defined REGICIDE
#load-if-not-defined UP-ALLY-IN-GAME
#load-if-not-defined UP-SCENARIO-GAME
#load-if-defined IMPERIAL-AGE-END
#load-if-defined POPULATION-CAP-200
(load "Barbarian\Commands")
#end-if
#end-if
#end-if
#end-if
#end-if

#else
(load "Barbarian\StrategiesTG")
#end-if
#else; Teamgame
(load "Barbarian\StrategiesTG")
#end-if

#end-if
#end-if

(load "Barbarian\CommandsTG")

#load-if-not-defined DEATH-MATCH
(load "Barbarian\ScoutArcher")
#load-if-not-defined DARK-AGE-END
(load-random +drush-chance "Barbarian\Strategies\AddedDrush")
#load-if-defined POPULATION-CAP-200
(load-random +grush-chance "Barbarian\UnusualSwitch")
(load-random 100 "Barbarian\PocketAggressiveness"); Well, the names are not fully correct any more
(load-random +load-chance "Barbarian\FlankAggressiveness"); 45% for flanks, 70% for pockets
#end-if
#else
(load "Barbarian\Strategies\AddedDrush")
(load "Barbarian\Strategies\EternalDrush")
#end-if

(load "Barbarian\Drush")
(load "Barbarian\SuicidalKnightRush")
(load "Barbarian\KnightRush")

#load-if-defined DARK-AGE-START
#load-if-defined IMPERIAL-AGE-END
(load-random 8 "Barbarian\Strategies\FIMONKTREB")
#end-if
#end-if

#load-if-defined DARK-AGE-END
(defrule
	(or	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
		(building-type-count-total dock > 0))
	(or	(up-compare-goal gl-DRUSH != YES)
		(up-compare-goal gl-strategy != eternal-drush))
=>
	(set-goal gl-DRUSH YES)
	(set-goal gl-strategy eternal-drush)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(set-goal gl-strategy-type controlled-flush)
	(set-goal gl-eternal-drush YES)
	(set-strategic-number sn-strategy-lock 1)
	(set-strategic-number sn-allow-new-build-order 4)
)
#else
#load-if-defined UP-2-PLAYER-GAME
#load-if-defined AZTEC-CIV
#load-if-defined UP-AZTEC-CIV-ENEMY
(defrule
	(or	(goal gl-strategy fi-monk-rush)
		(goal gl-eew-strategy-type boom))
	(up-compare-goal gl-rush-suitability-on-map >= AVERAGE)
	(strategic-number sn-strategy-lock == 0)
	(players-civ every-enemy aztec)
	(goal gl-current-age gv-feudal-up)
	(commodity-selling-price stone < default-stone-price)
=>
	(set-goal gl-strategy eagle-monk-rush)
	(set-goal gl-strategy-aggressiveness-level AVERAGE)
	(set-goal gl-strategy-type FC)
	(disable-self)
)
#end-if
#end-if
#end-if

#load-if-not-defined DARK-AGE-END
#load-if-not-defined FEUDAL-AGE-END
(defrule
	(or	(up-compare-goal gl-current-age > gv-dark)
		(or	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
			(or	(and	(up-compare-goal gl-rush-suitability-on-map != GOOD)
					(strategic-number sn-nomad-style-start == 0))
				(or	(up-compare-goal gl-my-villager-count-total >= 27)
					(or	(strategic-number sn-strategy-lock != 0)
						(or	(up-compare-goal gl-rush-suitability-on-map >= LOW)
							(players-building-type-count focus-player town-center == 0)))))))
=>
	(up-jump-rule 4)
)

(defrule
	(goal SLING 0)
	(building-type-count-total barracks == 0)
	(game-time > 120)
=>
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 45)
	(up-find-remote c: town-center c: 0)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point-x)
)

(defrule
	(goal SLING 0)
	(building-type-count-total barracks == 0)
	(goal POSITION FLANK)
	(up-point-distance gl-point-x gl-position-self-x < 25)
	(up-set-target-object search-remote c: 0)
	(starting-age == dark-age)
=>
	(set-goal gl-strategy trush)
	(set-goal gl-strategy-type controlled-flush)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(set-goal gl-gold-villagers 0)
	(set-goal gl-stone-villagers 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-strategy-lock 1)
	(chat-to-player my-player-number "1Go for a trush war")
	(disable-self)
)

(defrule
	(goal SLING 0)
	(building-type-count-total barracks == 0)
	(goal POSITION FLANK)
	(up-point-distance gl-point-x gl-position-self-x < 25)
	(up-set-target-object search-remote c: 0)
=>
	(set-goal gl-strategy castle-push)
	(set-goal gl-strategy-type FC)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-strategic-number sn-strategy-lock 1)
	(chat-to-player my-player-number "1Go for a castle push")
	(disable-self)
)

(defrule
	(goal SLING 0)
	(goal gl-feudal-infantry 0)
	(building-type-count-total barracks == 0)
	(up-set-target-object search-remote c: 0)
=>
	(set-goal gl-DRUSH NO)
	(disable-self)
)
#end-if
#end-if
#end-if

#load-if-defined UP-HUMAN-IN-GAME
#load-if-defined VICTORY-STANDARD
(load-random +chance-for-wonder "Barbarian\WonderVictory")
#end-if
#end-if

#load-if-not-defined FEUDAL-AGE-END
#load-if-not-defined UP-ALLY-IN-GAME
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined UP-2-PLAYER-GAME
#load-if-not-defined UP-3-PLAYER-GAME
(defrule
	(game-time < 10)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
=>
	(set-goal gl-strategy ffa-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-strategic-number sn-home-exploration-time 480)
)
#end-if
#end-if
#end-if
#end-if
#end-if

#load-if-defined DEFEND-WONDER
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
=>
	(set-goal gl-strategy backup-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(disable-self)
)
#end-if

#load-if-defined TURBO-RANDOM-MAP
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(or	(up-compare-goal gl-strategy <= controlled-flush)
		(goal gl-strategy ranged-rush-strategy))
=>
	(set-goal gl-strategy backup-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(disable-self)
)
#end-if

; ================ SETUP

(defrule
	(or	(and	(up-compare-goal gl-strategy-type != basic-flush); Non-basic flush strategy - overwrite flush parts
			(up-compare-goal gl-current-age <= gv-feudal))
		(up-compare-goal gl-current-age >= gv-feudal-up)); We have clicked up, no more flushing
=>
	(set-goal gl-feudal-archery 0)
	(set-goal gl-feudal-infantry 0)
)

(defrule
	(not	(goal gl-strategy eew-strategy))
=>
	(set-goal gl-eew-strategy-type -1)
)

(defrule
	(goal gl-strategy eew-strategy)
	(goal gl-eew-strategy-type -1); Boom if no type determined
=>
	(set-goal gl-eew-strategy-type boom)
)

(defrule
	(population-cap < 70)
	(up-compare-const gv-maximum-age >= castle-age)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(starting-age <= castle-age)
	(up-compare-goal gl-strategy != monk-mango-push)
	(up-compare-goal gl-strategy != castle-push)
	(nand	(or	(up-compare-goal gl-current-age >= gv-feudal-up)
			(goal gl-start-with-castle YES))
		(goal gl-strategy fi-monk-rush))
=>
	(set-goal gl-strategy castle-push)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal gl-strategy-type FC2)
)

(defrule
	(population-cap < 70)
	(up-compare-const gv-maximum-age >= castle-age)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(players-building-type-count target-player castle < 1)
	(building-type-count-total castle < 1)
	(or	(starting-age >= castle-age)
		(players-military-population focus-player > 1))
	(goal gl-strategy castle-push)
=>
	(set-goal gl-strategy monk-mango-push)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal gl-strategy-type FC2)
)

(defrule
	(population-cap < 70)
	(up-compare-const gv-maximum-age == imperial-age)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(starting-age > castle-age)
=>
	(set-goal gl-strategy fi-monk-rush)
	(set-goal gl-strategy-aggressiveness-level VERY-LOW)
	(set-goal gl-strategy-type FI2)
)

#load-if-not-defined POPULATION-CAP-200
#load-if-not-defined POPULATION-CAP-175
(defrule
	(population-cap >= 70)
	(up-compare-const gv-maximum-age >= castle-age)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(or	(up-compare-goal gl-strategy != grush)
		(starting-age >= castle-age))
	(up-compare-goal gl-strategy != fi-monk-rush)
	(up-compare-goal gl-strategy != war-galley-rush)
	(up-compare-goal gl-strategy != fire-ship-rush)
	(nor	(goal gl-strategy-class basic-class)
		(goal gl-strategy michi-boom))
=>
	(set-goal gl-strategy backup-strategy)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal gl-strategy-type FC2)
)
#end-if
#end-if

(defrule
	(game-time < 50)
	(population-cap >= 70)
	(goal gl-current-age gv-dark)
	(goal SLING 0)
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(up-compare-const gv-maximum-age >= castle-age)
	(or	(up-compare-const gv-baltic-style == 1)
		(up-compare-const gv-rivers-style == 1))
=>
	(set-goal gl-strategy war-galley-rush)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal gl-strategy-type FC2)
	(set-strategic-number sn-dock-proximity-factor 200)
	(set-strategic-number sn-dock-placement-mode 1)
	(set-strategic-number sn-allow-new-build-order 2)
)

(defrule
	(game-time < 50)
	(population-cap >= 70)
	(goal gl-current-age gv-dark)
	(goal SLING 0)
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(up-compare-const gv-maximum-age >= castle-age)
	(map-type rivers)
	(or	(up-compare-const gv-baltic-style == 1)
		(up-compare-const gv-rivers-style == 1))
=>
	(set-goal gl-strategy war-galley-rush)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal gl-strategy-type FC2)
	(set-strategic-number sn-dock-proximity-factor 200)
	(set-strategic-number sn-allow-new-build-order 2)
)

(defrule
	(game-time < 50)
	(population-cap >= 70)
	(goal gl-current-age gv-dark)
	(goal SLING 0)
	(goal POSITION FLANK)
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(up-compare-const gv-maximum-age >= castle-age)
	(or	(up-compare-const gv-baltic-style == 1)
		(up-compare-const gv-rivers-style == 1))
=>
	(set-strategic-number sn-allow-new-build-order -2)
	(set-goal gl-strategy grush)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal gl-strategy-type controlled-flush)
)

#load-if-defined FEUDAL-AGE-END
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(or	(up-compare-goal gl-strategy != flush)
		(and	(goal gl-feudal-infantry 0)
			(goal gl-feudal-archery 0)))
	(up-compare-goal gl-strategy != grush)
	(up-compare-goal gl-strategy != scrush)
=>
	(set-goal gl-strategy flush)
	(set-goal gl-strategy-type basic-flush)
	(set-goal gl-feudal-infantry FLUSH-DEFENCE-MAA)
	(set-goal gl-feudal-archery FLUSH-DEFENCE-ARCHER)
	(set-goal gl-strategy-aggressiveness-level HIGH)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
	(up-compare-goal gl-strategy != grush)
=>
	(set-goal gl-strategy grush)
	(set-goal gl-strategy-type controlled-flush)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(set-goal DOCK 11)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= islands-map-landing-style)
	(up-compare-goal gl-strategy != scrush)
	(up-research-status c: ri-wheel-barrow >= research-pending)
	(current-age == feudal-age)
	(game-time > 1300)
=>
	(set-goal gl-strategy flush)
	(set-goal gl-strategy-type basic-flush)
	(set-goal gl-feudal-infantry men-at-arms)
	(set-goal gl-feudal-archery archer-skirm)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(set-strategic-number sn-skip-first-mining-camp 0)
)
#else

(defrule
	(game-time > 1200)
	(up-compare-goal gl-strategy != fc-notice)
=>
	(up-jump-rule 24)
)

(defrule
	(up-compare-const gv-x-vs-one-challenge == 1)
	(current-age <= feudal-age)
	(or	(goal gl-strategy krush)
		(goal gl-strategy knight-rush))
	(up-compare-const gv-maximum-age == imperial-age)
	(up-compare-const gv-pocket-position == 1)
	(up-compare-const dm-pala-in-tech-tree == 1)
	(goal POSITION POCKET)
	(goal gl-rush-suitability-on-map GOOD)
	(players-military-population focus-player < 2)
	(players-building-type-count target-player stone-wall-line > 4)
=>
	(set-goal gl-strategy knight-boom)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
)

(defrule
	(or	(and	(goal gl-strategy grush)
			(strategic-number sn-minimum-water-body-size-for-dock == land-map-style))
		(and	(goal gl-strategy trush)
			(or	(unit-type-count dead-builder1 > 3)
				(unit-type-count dead-builder2 > 3))))
	(goal POSITION FLANK)
=>
	(set-goal gl-strategy flush)
	(set-goal gl-strategy-type basic-flush)
	(set-goal gl-feudal-infantry FLUSH-DEFENCE-MAA)
	(set-goal gl-feudal-archery FLUSH-DEFENCE-ARCHER)
)

(defrule
	(game-time < 10)
	(goal POSITION POCKET)
	(or	(up-compare-const scout-unit != scout-cavalry-line)
		(goal gl-rush-suitability-on-map GOOD))
	(or	(goal gl-strategy ranged-boom-strategy)
		(or	(and	(goal gl-strategy castle-drop)
				(up-compare-const uu-food-buffer > 0))
			(goal gl-strategy scorpion-boom)))
	(up-compare-const gv-fish-map == 1)
=>
	(set-goal gl-strategy mixed-strategy)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal gl-strategy-type FC2)
)

(defrule
	(or	(and	(goal gl-strategy grush)
			(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)); For pockets
		(and	(goal gl-strategy eagle-rush)
			(and	(map-type oasis)
				(and	(map-size tiny)
					(strategic-number sn-strategy-lock == 0)))))
=>
	(set-goal gl-strategy regicide-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
)

(defrule
	(strategic-number sn-strategy-lock == 0)
	(map-size tiny)
	(goal gl-rush-suitability-on-map GOOD)
	(commodity-selling-price stone < default-stone-price)
	(goal gl-eew-strategy-type boom)
=>
	(set-goal gl-strategy eagle-rush)
	(set-goal gl-strategy-aggressiveness-level AVERAGE)
	(set-goal gl-strategy-type FC)
	(disable-self)
)

(defrule
	(up-compare-const gv-maximum-age == imperial-age)
	(goal gl-strategy castle-drop)
	(goal gl-enemy-strategy CASTLE-DROP)
	(players-civ focus-player gothic)
	(players-civ target-player gothic)
	(up-compare-goal gl-my-villager-count < 40)
	(up-compare-const gv-pocket-position == 0)
	(up-compare-const dm-UU-type == archer-type)
=>
	(set-goal gl-strategy fi-monk-rush)
	(set-goal gl-strategy-type FI2)
	(set-goal gl-strategy-aggressiveness-level VERY-LOW)
	(disable-timer 7)
	(set-goal MILITARY 0)
	(up-retreat-to castle c: -1)
	(set-goal CASTLE 0)
)

(defrule
	(or	(and	(goal gl-strategy castle-drop)
			(civ-selected mayan))
		(goal gl-strategy ew-boom))
	(game-time > 35)
	(game-time < 45)
	(goal gl-rush-suitability-on-map GOOD)
	(goal POSITION POCKET)
	(goal gl-strategy-aggressiveness-level LOW)
=>
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(disable-self)
)

(defrule
	(game-time < 45)
	(goal POSITION FLANK)
	(or	(up-compare-const gv-baltic-style == 1)
		(up-compare-const gv-rivers-style == 1))
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(up-compare-const gv-regicide == 0)
	(starting-age == dark-age)
	(goal gl-heavy-water-map YES)
=>
	(set-strategic-number sn-allow-new-build-order -2)
	(set-goal gl-strategy grush)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(set-goal gl-strategy-type controlled-flush)
	(set-goal gl-islands-style YES)
	(set-goal DOCK 11)
)

(defrule
	(up-compare-goal gl-strategy != grush)
	(strategic-number sn-strategy-lock == 0)
	(goal gl-current-age gv-dark)
	(goal SLING 0)
	(up-compare-goal gl-rush-suitability-on-map <= LOW)
	(nand	(map-type oasis)
		(goal gl-strategy knight-rush))
	(or	(goal gl-strategy-aggressiveness-level HIGH)
		(and	(goal gl-rush-suitability-on-map VERY-LOW)
			(up-compare-goal gl-strategy-aggressiveness-level >= AVERAGE)))
=>
	(set-goal gl-strategy regicide-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
)

(defrule
	(goal gl-eew-strategy-type boom)
	(goal SLING 0)
	(goal POSITION FLANK)
	(up-compare-goal gl-rush-suitability-on-map >= AVERAGE)
	(strategic-number sn-strategy-lock == 0)
	(players-current-age focus-player == feudal-age)
	(players-military-population focus-player > 2)
	(game-time < 1000)
=>
	(set-goal gl-strategy eagle-rush)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(disable-self)
)

(defrule
	(goal SLING 0)
	(strategic-number sn-strategy-lock == 0)
	(goal gl-eew-strategy-type boom)
	(goal gl-rush-suitability-on-map GOOD)
	(nor	(map-type black-forest)
		(map-type oasis))
	(up-compare-const gv-2-player-team == 1)
=>
	(set-goal gl-strategy flush)
	(set-goal gl-strategy-type basic-flush)
	(set-goal gl-feudal-infantry FLUSH-DEFENCE-MAA)
	(set-goal gl-feudal-archery FLUSH-DEFENCE-ARCHER)
	(set-goal gl-strategy-aggressiveness-level HIGH)
)

(defrule
	(goal SLING 0)
	(strategic-number sn-strategy-lock == 0)
	(player-valid any-human)
	(or	(and	(up-compare-goal gl-strategy-type <= controlled-flush)
			(up-compare-const gv-2-player-game == 1))
		(goal gl-strategy ranged-rush-strategy))
	(or	(map-type black-forest)
		(map-type oasis))
=>
	(set-goal gl-strategy regicide-strategy)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal gl-strategy-type FC2)
)

(defrule
	(or	(and	(goal gl-strategy fc-notice)
			(up-compare-goal gl-current-age >= gv-dark-up))
		(and	(goal gl-strategy-type FI2)
			(and	(goal gl-current-age gv-feudal)
				(and	(strategic-number sn-strategy-lock == 0)
					(and	(players-military-population focus-player > 2)
						(map-size tiny))))))
=>
	(set-goal gl-strategy castle-drop)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal gl-strategy-type FC2)
)

(defrule
	(game-time < 10)
	(or	(and	(or	(goal gl-strategy eew-strategy)
				(goal gl-strategy-aggressiveness-level VERY-LOW))
			(up-compare-const gv-maximum-age != imperial-age))
		(and	(goal gl-rush-suitability-on-map VERY-LOW)
			(and	(civ-selected gothic)
				(goal gl-strategy krush))))
=>
	(set-goal gl-strategy regicide-strategy)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(set-goal gl-strategy-type FC2)
	(disable-self)
)

(defrule
	(game-time < 10)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(goal gl-current-age gv-dark)
	(building-type-count-total castle > 0)
	(building-type-count-total stone-wall-line == 0)
	(up-compare-goal gl-strategy != fi-monk-rush)
	(up-compare-goal gl-strategy != castle-drop)
=>
	(set-goal gl-strategy regicide-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(disable-self)
)

(defrule
	(game-time < 10)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(goal gl-current-age gv-dark)
	(building-type-count castle > 0)
	(or	(building-type-count-total stone-wall-line > 0)
		(building-type-count castle > 1))
	(up-compare-goal gl-strategy != fi-monk-rush)
	(up-compare-goal gl-strategy != castle-drop)
=>
	(set-goal gl-strategy rf-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
	(disable-self)
)

(defrule
	(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
		(or	(death-match-game)
			(up-compare-const gv-maximum-age < castle-age)))
=>
	(up-jump-rule 7)
)

(defrule
	(game-time < 10)
=>
	(set-goal temporary-goal total-players)
	(up-modify-goal temporary-goal2 g:= gl-max-coordinate-value)
	(up-modify-goal temporary-goal2 g:* gl-max-coordinate-value)
	(up-modify-goal temporary-goal2 g:/ temporary-goal)
)

(defrule
	(game-time < 10)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(up-compare-goal gl-strategy != grush)
	(goal POSITION FLANK)
	(up-point-distance gl-position-center-x gl-position-self-x > 40)
	(up-compare-goal temporary-goal2 > 12000)
=>
	(set-goal gl-strategy regicide-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
)

(defrule
	(game-time < 10)
	(goal gl-rush-suitability-on-map GOOD)
	(up-compare-goal gl-strategy-type >= FC)
	(goal POSITION FLANK)
	(current-age == dark-age)
	(difficulty <= hard)
	(strategic-number sn-strategy-lock == 0)
	(up-compare-goal temporary-goal2 <= 12000)
	(up-compare-const gv-turborandom == 0)
=>
	(set-goal gl-strategy flush)
	(set-goal gl-strategy-type basic-flush)
	(set-goal gl-feudal-infantry FLUSH-DEFENCE-MAA)
	(set-goal gl-feudal-archery FLUSH-DEFENCE-ARCHER)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(defrule
	(goal gl-feudal-archery skirmishers)
	(goal gl-feudal-infantry 0)
	(current-age == dark-age)
	(or	(players-civ focus-player gothic)
		(or	(players-civ focus-player japanese)
			(and	(players-military-population focus-player > 1)
				(players-current-age focus-player == dark-age))))
=>
	(set-goal gl-feudal-archery archer-skirm)
	(set-strategic-number sn-skip-first-mining-camp 0)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(up-compare-const special-raid-unit != conquistador-line)
	(goal gl-feudal-infantry 0)
	(up-compare-goal gl-feudal-archery > 0)
	(up-compare-goal gl-feudal-archery != pure-archers)
	(current-age == dark-age)
	(players-military-population focus-player > 1)
	(players-current-age focus-player == dark-age)
	(up-compare-goal gl-starting-scout-count < 2)
=>
	(set-goal gl-feudal-archery archers)
	(set-strategic-number sn-skip-first-mining-camp 0)
	(disable-self)
)

(defrule
	(game-time < 45)
	(starting-age != dark-age)
	(up-compare-goal gl-strategy != fi-monk-rush)
	(or	(goal gl-strategy-aggressiveness-level VERY-LOW)
		(or	(goal gl-strategy scorpion-boom)
			(or	(goal gl-strategy monk-mango-push)
				(or	(goal gl-strategy trush-push)
					(goal gl-strategy archery-boom)))))
=>
	(set-goal gl-strategy backup-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
)

(defrule
	(game-time < 45)
	(starting-age != dark-age)
	(or	(goal gl-strategy eagle-rush)
		(or	(goal gl-strategy heavy-krush)
			(or	(goal gl-strategy scorpion-rush)
				(or	(and	(up-compare-goal gl-strategy-type <= controlled-flush)
						(starting-age != feudal-age))
					(goal gl-strategy eew-strategy)))))
=>
	(set-goal gl-strategy backup-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
)

#load-if-defined DIFFICULTY-HARD
#load-if-defined TINY-MAP

#load-if-not-defined UP-BYZANTINE-CIV-ENEMY
(defrule
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(goal gl-current-age gv-feudal)
	(goal gl-rush-suitability-on-map GOOD)
	(goal gl-enemy-strategy EAGLERUSH)
	(game-time < 1500)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
=>
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(set-goal gl-strategy-type controlled-flush)
	(set-goal gl-strategy scrush)
	(set-goal gl-strategy-control MEN-AT-ARMS)
	(chat-to-player my-player-number "1Switch to m@a vs eagles.")
	(set-strategic-number sn-skip-first-mining-camp 0)
	(disable-self)
)

#load-if-not-defined SPANISH-CIV
(defrule
	(goal gl-strategy ranged-boom-strategy)
	(or	(players-military-population any-enemy > 5)
		(commodity-selling-price stone < default-stone-price)); Enemy is likely to be aggressive - better do the same
	(building-type-count-total town-center < 2)
	(goal POSITION FLANK)
	(game-time < 1160)
	(players-building-type-count focus-player castle < 1)
	(strategic-number sn-strategy-lock == 0)
=>
	(set-goal gl-strategy ranged-rush-strategy)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(chat-to-player my-player-number "1Threat of getting outnumbered detected!")
	(set-strategic-number sn-strategy-lock 1)
	(disable-self)
)

(defrule
	(goal gl-strategy ranged-boom-strategy)
	(players-current-age any-enemy == castle-age)
	(building-type-count-total town-center < 2)
	(or	(players-building-type-count any-enemy stable > 0)
		(players-unit-type-count any-enemy knight-line > 0))
	(game-time < 1300)
	(goal POSITION FLANK)
	(strategic-number sn-strategy-lock == 0)
=>
	(set-goal gl-strategy ranged-rush-strategy)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(chat-to-player my-player-number "1Possible krush detected!")
	(set-strategic-number sn-strategy-lock 1)
	(disable-self)
)
#end-if

#end-if

#end-if
#end-if

#load-if-defined DARK-AGE-START
#load-if-defined UP-GROUPED-BY-TEAM
(defrule
	(or	(and	(civ-selected spanish)
			(up-compare-goal gl-strategy-type <= controlled-flush))
		(goal gl-strategy scrush))
	(goal gl-current-age gv-dark)
	(game-time > 65)
	(up-players-in-game ally >= 2)
	(up-players-in-game any >= preferred-player-number)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(goal SLING 0)
	(goal gl-rush-suitability-on-map GOOD)
=>
	(set-goal gl-strategy-type controlled-flush)
	(set-goal gl-strategy scrush)
	(set-strategic-number sn-strategy-lock 1)
	(set-goal POSITION POCKET)
)
#end-if
#end-if

(defrule
	(goal gl-strategy default)
=>
	(up-jump-rule 8)
)

(defrule
	(goal gl-strategy castle-drop)
	(or	(civ-selected byzantine)
		(or	(civ-selected persian)
			(or	(civ-selected japanese)
				(or	(civ-selected saracen)
					(civ-selected korean)))))
	(goal gl-rush-suitability-on-map VERY-LOW)
	(up-compare-const gv-pocket-position == 1)
	(strategic-number sn-strategy-lock == 0)
=>
	(set-goal gl-strategy-aggressiveness-level VERY-LOW)
	(set-goal gl-strategy uu-boom)
)

(defrule
	(goal gl-strategy castle-drop)
	(civ-selected byzantine)
	(goal gl-rush-suitability-on-map GOOD)
	(strategic-number sn-strategy-lock == 0)
	(up-compare-const special-raid-unit != conquistador-line)
=>
	(set-goal gl-strategy ranged-boom-strategy)
)

(defrule
	(goal gl-strategy ranged-boom-strategy)
	(not	(civ-selected spanish))
	(goal POSITION FLANK)
	(players-current-age focus-player == castle-age)
	(players-military-population focus-player > 5)
	(goal gl-rush-suitability-on-map GOOD)
	(game-time < 1160)
	(up-compare-goal gl-target-player-distance < 100)
	(players-building-type-count focus-player castle < 1)
	(strategic-number sn-strategy-lock == 0)
=>
	(set-goal gl-strategy ranged-rush-strategy)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(chat-to-player my-player-number "1Threat of getting outnumbered detected!")
	(set-strategic-number sn-strategy-lock 1)
	(disable-self)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(or	(up-compare-goal gl-enemy-huskarl-count > 1)
		(or	(game-time > 2040)
			(up-compare-goal gl-current-age >= gv-castle-up)))
=>
	(set-goal gl-strategy default)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(or	(and	(or	(soldier-count > 33)
				(players-population target-player < 35))
			(and	(population > 65)
				(and	(players-population target-player < 50)
					(players-military-population target-player < 8))))
		(or	(up-compare-goal gl-enemy-tower-count > 1)
			(players-building-type-count target-player stone-wall-line > 8)))
=>
	(set-goal gl-strategy ranged-boom-strategy)
)

(defrule
	(goal gl-strategy-class basic-class)
	(up-compare-goal gl-current-age >= gv-castle-up)
=>
	(set-goal gl-strategy default)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(goal gl-strategy castle-drop)
=>
	(set-goal CASTLE 2)
)

(defrule
	(game-time > 1400)
	(or	(and	(goal gl-strategy castle-drop)
			(or	(game-time > 2500)
				(and	(building-type-count-total castle == 0)
					(and	(goal gl-defensive-castle-placed YES)
						(stone-amount < castle-stone)))))
		(and	(game-time > 2700)
			(goal gl-strategy turkish-fast-imp)))
=>
	(set-goal gl-strategy default)
)
#end-if; Not feudal-age-end

#end-if; WR
#end-if; DM

; ================ LOOM

(defrule
	(current-age <= feudal-age)
	(or	(food-amount >= 50)
		(or	(housing-headroom == 0)
			(goal gl-boar-hunting-stage 5)))
	(not	(can-train villager)); Housed
	(can-research ri-loom)
=>
	(research ri-loom)
	(enable-timer 2 21)
)

(defrule
	(current-age <= feudal-age)
	(nand	(civilian-population < 15)
		(and	(goal gl-current-age gv-dark)
			(and	(game-time < 400)
				(up-compare-goal gl-total-food-amount >= 50))))
	(or	(current-age == dark-age)
		(or	(up-compare-goal gl-strategy-type <= controlled-flush)
			(food-amount < 750)))
	(can-research ri-loom)
=>
	(research ri-loom)
	(enable-timer 2 21)
)

; ============= ENSURING BUILDINGS GET DROPPED

(defrule
	(up-compare-goal castle-dropped-timer > 0)
	(nand	(game-time < 120)
		(death-match-game))
=>
	(up-modify-goal castle-dropped-timer c:- 1)
)

(defrule
	(game-time < 1500)
	(or	(wood-amount >= 100)
		(civ-selected japanese))
	(wood-amount >= 50)
	(goal mill-dropped-timer -1)
	(or	(up-pending-placement c: mill)
		(or	(up-pending-placement c: mining-camp)
			(and	(up-pending-placement c: lumber-camp)
				(building-type-count lumber-camp > 0))))
=>
	(up-get-fact game-time 0 mill-dropped-timer)
	(up-modify-goal mill-dropped-timer c:+ 10)
)

(defrule
	(up-compare-goal mill-dropped-timer > 0)
	(game-time g:>= mill-dropped-timer)
	(or	(up-pending-placement c: mining-camp)
		(or	(up-pending-placement c: mill)
			(up-pending-placement c: lumber-camp)))
=>
	(up-reset-placement c: mill)
	(up-reset-placement c: mining-camp)
	(up-reset-placement c: lumber-camp)
	(chat-to-player my-player-number "Reset mill/mining camp/lumber camp")
	(set-goal mill-dropped-timer -1)
	(set-goal gl-mining-camp-backup 1)
	(up-modify-sn sn-camp-max-distance c:max 24)
	(up-modify-sn sn-lumber-camp-max-distance c:max 24)
)

(defrule
	(up-compare-goal mill-dropped-timer > 0)
	(or	(nor	(up-pending-placement c: mill)
			(or	(up-pending-placement c: mining-camp)
				(up-pending-placement c: lumber-camp)))
		(or	(and	(wood-amount < 100)
				(not	(civ-selected japanese)))
			(wood-amount < 50)))
=>
	(set-goal mill-dropped-timer -1)
)

(defrule
	(goal gl-castle-control placed-forward)
	(stone-amount >= castle-stone)
	(or	(up-compare-goal castle-dropped-timer <= 0)
		(and	(up-compare-goal MILITARY != 1); We have no longer superiority -> cancel forward castle
			(up-compare-goal gl-arena-forward != YES)))
	(up-pending-placement c: castle)
=>
	(up-reset-placement c: castle)
	(chat-to-player my-player-number "Reset castle")
	(set-goal gl-castle-placed NO)
)

(defrule
	(or	(goal gl-castle-placed YES)
		(goal gl-castle-control placed-forward))
	(not	(up-pending-placement c: castle))
	(up-compare-goal castle-dropped-timer <= 0)
=>
	(set-goal gl-castle-placed NO)
)

(defrule
	(or	(goal gl-castle-placed YES)
		(goal gl-castle-placed placed-forward))
	(stone-amount < castle-stone)
	(up-pending-placement c: castle)
=>
	(set-goal gl-castle-placed NO)
	(up-reset-placement c: castle)
)

(defrule
	(building-type-count town-center == 0)
=>
	(up-jump-rule 5)
)

(defrule
	(game-time > 600)
	(up-pending-objects c: wonder < 1)
	(up-compare-goal gl-castle-control != placed-forward)
	(unit-type-count villager-builder > 12)
	(or	(unit-type-count villager-builder > 15)
		(up-compare-goal gl-my-villager-count < 50))
	(or	(unit-type-count villager-builder > 18)
		(up-compare-goal gl-my-villager-count < 70))
	(up-timer-status 21 != timer-running)
=>
	(up-assign-builders c: town-center-foundation c: 1); Reduce builders if there's a crazy amount, might be cancel-build-cancel situation
	(up-assign-builders c: castle c: 1)
	(enable-timer 21 60)
	(set-strategic-number sn-percent-building-cancellation 21)
)

(defrule
	(or	(unit-type-count dead-builder1 > 3)
		(or	(unit-type-count dead-builder2 > 3)
			(and	(unit-type-count dead-builder1 > 1)
				(unit-type-count dead-builder2 > 1))))
;	(up-timer-status 21 != timer-running)
	(strategic-number sn-percent-building-cancellation < 100)
=>
	(set-strategic-number sn-percent-building-cancellation 100)
	(chat-to-player my-player-number "Use immediate building cancellation")
	(up-assign-builders c: town-center-foundation c: 1)
	(up-assign-builders c: castle c: 1)
	(enable-timer 21 240)
)

#load-if-defined UP-HUMAN-IN-GAME
(defrule
	(up-compare-goal gl-strategy != castle-drop)
	(up-compare-goal gl-strategy != gothic-boom)
	(or	(unit-type-count dead-builder1 > 1)
		(or	(unit-type-count dead-builder2 > 1)
			(and	(unit-type-count dead-builder1 > 0)
				(unit-type-count dead-builder2 > 0))))
;	(up-timer-status 21 != timer-running)
	(strategic-number sn-percent-building-cancellation < 93)
=>
	(set-strategic-number sn-percent-building-cancellation 93)
	(up-assign-builders c: town-center-foundation c: 1)
	(up-assign-builders c: castle c: 1)
	(enable-timer 21 180)
)
#else
(defrule
	(up-compare-goal gl-strategy != castle-drop)
	(up-compare-goal gl-strategy != gothic-boom)
	(or	(unit-type-count dead-builder1 > 2)
		(or	(unit-type-count dead-builder2 > 2)
			(and	(unit-type-count dead-builder1 > 0)
				(unit-type-count dead-builder2 > 1))))
;	(up-timer-status 21 != timer-running)
	(strategic-number sn-percent-building-cancellation < 93)
=>
	(set-strategic-number sn-percent-building-cancellation 93)
	(up-assign-builders c: town-center-foundation c: 1)
	(up-assign-builders c: castle c: 1)
	(enable-timer 21 180)
)
#end-if

(defrule
	(timer-triggered 21)
	(strategic-number sn-percent-building-cancellation == 21)
=>
	(up-assign-builders c: town-center-foundation c: dm-max-TC-builders)
	(up-assign-builders c: castle c: max-castle-builders)
	(set-strategic-number sn-percent-building-cancellation 20)
	(disable-timer 21)
)

(defrule
	(or	(goal gl-castle-control placed-forward)
		(strategic-number sn-percent-building-cancellation >= 93))
	(timer-triggered 21)
	(or	(strategic-number sn-percent-building-cancellation == 90)
		(or	(strategic-number sn-percent-building-cancellation == 70)
			(strategic-number sn-percent-building-cancellation >= 93)))
=>
	(up-assign-builders c: town-center-foundation c: dm-max-TC-builders)
	(up-assign-builders c: castle c: max-castle-builders)
	(set-strategic-number sn-percent-building-cancellation 20)
	(set-goal gl-castle-control NO)
	(disable-timer 21)
)

;(defrule
;	(not	(taunt-detected 1 53))
;	(or	(strategic-number sn-focus-player-number < 0)
;		(or	(not	(player-valid focus-player))
;			(or	(strategic-number sn-focus-player-number == my-player-number)
;				(stance-toward focus-player ally))))
;=>
;	(up-chat-data-to-all "!!! FOCUS PLAYER (%d) !!! (621)" s: sn-focus-player-number)
;)

; =============== FLARE COORDINATION

#load-if-not-defined WONDER-RACE
(defrule
	(players-unit-type-count every-ally 274 == 0)
	(nor	(taunt-detected any-human-ally 40)
		(taunt-detected any-human-ally 222))
	(nor	(taunt-detected any-human-ally 223)
		(taunt-detected any-human-ally 220))
	(up-timer-status 47 == timer-disabled)
	(up-timer-status 48 == timer-disabled)
	(up-compare-goal 445 != 2)
	(up-compare-goal 446 != 2)
=>
	(up-jump-rule 13)
)

(defrule
	(taunt-detected any-human-ally 40)
	(building-available market)
	(up-pending-objects c: market < 2)
	(up-compare-goal 445 != 2)
=>
	(enable-timer 47 10)
	(set-goal 445 2)
	(chat-to-allies "Controlled market placing has been enabled for 10 seconds.")
	(chat-to-allies "Flare the position where the market should be placed.")
	(up-reset-placement c: market)
)

(defrule
	(or	(timer-triggered 47)
		(not	(building-available market)))
=>
	(disable-timer 47)
	(set-goal 445 0)
	(acknowledge-taunt every-ally 40)
)

(defrule
	(taunt-detected any-human-ally 40)
	(up-pending-objects c: market < 2)
	(players-unit-type-count any-human-ally flare > 0)
	(can-build market)
=>
	(set-strategic-number sn-placement-zone-size 3)
	(up-set-placement-data this-any-human-ally flare c: 0)
	(up-build place-control 0 c: market)
	(acknowledge-taunt every-ally 40)
	(disable-timer 47)
	(set-goal 445 0)
	(set-goal gl-disable-market-placing YES)
	(chat-to-allies "1Attempting to place market to the flared position.")
)

(defrule
	(taunt-detected any-human-ally 40)
	(not	(can-build market))
	(players-unit-type-count any-human-ally flare > 0)
=>
	(acknowledge-taunt every-ally 40)
	(disable-timer 47)
	(set-goal 445 0)
	(up-get-fact wood-amount 0 temporary-goal)
	(up-chat-data-to-player every-ally "2Already pending placement or lack wood (%d)." g: temporary-goal)
)

(defrule
	(or	(taunt-detected any-human-ally 220)
		(taunt-detected any-human-ally 222))
	(up-compare-goal 446 != 2)
=>
	(enable-timer 48 10)
	(set-goal 446 2)
	(chat-to-allies "Unit control has been enabled for 10 seconds.")
	(chat-to-allies "Flare the position where my army should be sent.")
)

(defrule
	(taunt-detected any-human-ally 223)
	(up-compare-goal 446 != 2)
=>
	(enable-timer 48 10)
	(set-goal 446 2)
	(chat-to-allies "Navy control has been enabled for 10 seconds.")
	(chat-to-allies "Flare the position where my navy should be sent.")
)

(defrule
	(timer-triggered 48)
=>
	(disable-timer 48)
	(set-goal 446 0)
	(acknowledge-taunt every-ally 222)
)

(defrule
	(players-unit-type-count any-human-ally flare > 0)
	(or	(taunt-detected any-human-ally 220)
		(taunt-detected any-human-ally 222))
=>
	(set-strategic-number sn-disable-defend-groups 1)
	(set-strategic-number sn-retreating 0)
	(set-strategic-number sn-unit-spreading2 0)
	(disable-timer 1)
	(disable-timer 7)
	(disable-timer 14)
	(disable-timer 48)
	(set-strategic-number sn-hitting-pop-cap NO)
	(set-goal MILITARY 0)
	(set-goal TSA 0)
	(set-goal 446 0)
	(chat-to-allies "1I'm sending my units there.")
)

(defrule
	(players-unit-type-count any-human-ally flare > 0)
	(or	(taunt-detected any-human-ally 220)
		(taunt-detected any-human-ally 222))
=>
	(up-reset-unit c: -1)
	(up-find-flare gl-point-x)
	(up-full-reset-search)
	(up-find-local c: siege-weapon-class c: 240)
	(up-find-local c: infantry-class c: 240)
	(up-find-local c: archery-class c: 240)
	(up-find-local c: archery-cannon-class c: 240)
	(up-find-local c: cavalry-class c: 240)
	(up-find-local c: scout-cavalry-class c: 240)
	(up-find-local c: cavalry-archer-class c: 240)
	(up-find-local c: cavalry-cannon-class c: 240)
)

(defrule
	(players-unit-type-count any-human-ally flare > 0)
	(taunt-detected any-human-ally 222)
=>
	(up-find-local c: scorpion-class c: 240)
	(up-find-local c: packed-trebuchet-class c: 240)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-point-x action-patrol -1 aggressive)
	(acknowledge-taunt every-ally 222)
	(enable-timer 44 360)
)

(defrule
	(players-unit-type-count any-human-ally flare > 0)
	(taunt-detected any-human-ally 220)
=>
	(up-find-local c: scorpion-class c: 240)
	(up-find-local c: packed-trebuchet-class c: 240)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-point-x action-default -1 aggressive)
	(acknowledge-taunt every-ally 220)
	(enable-timer 44 120)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(players-unit-type-count any-human-ally flare > 0)
	(taunt-detected any-human-ally 223)
=>
	(set-goal gl-water-retreating NO)
	(up-find-flare gl-point-x)
	(up-full-reset-search)
	(up-find-local c: aofe-fire-ship c: 240)
	(up-find-local c: caravel c: 240)
	(up-find-local c: elite-caravel c: 240)
	(up-target-point gl-point-x action-patrol -1 aggressive)
)

(defrule
	(players-unit-type-count any-human-ally flare > 0)
	(taunt-detected any-human-ally 223)
=>
	(set-goal gl-water-retreating NO)
	(up-find-flare gl-point-x)
	(up-full-reset-search)
	(up-find-local c: galley-line c: 240)
	(up-find-local c: fire-ship-line c: 240)
	(up-find-local c: turtle-ship-line c: 240)
	(up-find-local c: cannon-galleon-line c: 240)
	(up-find-local c: demolition-ship-line c: 240)
	(enable-timer 44 360)
	(up-target-point gl-point-x action-patrol -1 aggressive)
	(acknowledge-taunt every-ally 223)
	(set-strategic-number sn-number-boat-attack-groups 0)
	(chat-to-allies "1I'm sending my navy there.")
)

(defrule
	(not	(player-in-game any-human-ally))
	(goal gl-disable-market-placing YES)
=>
	(set-goal gl-disable-market-placing NO)
)

#load-if-defined TEAMS-LOCKED
(defrule
	(timer-triggered 18)
=>
	(acknowledge-taunt every-human 148)
	(disable-timer 18)
)

(defrule
	(taunt-detected any-human-ally 148)
	(up-timer-status 18 == timer-disabled)
=>
	(enable-timer 18 10)
	(chat-to-allies "Building control has been enabled for 10 seconds.")
	(chat-to-allies "Flare the position where buildings should be deleted.")
)

(defrule
	(taunt-detected any-human-ally 148)
	(players-unit-type-count any-human-ally flare > 0)
=>
	(up-find-flare gl-point-x)
	(up-full-reset-search)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 4)
	(up-find-local c: building-class c: 240)
	(up-find-local c: tower-class c: 240)
	(up-find-local c: wall-class c: 240)
	(up-find-local c: gate-class c: 240)
	(up-target-point 0 action-delete -1 -1)
	(acknowledge-taunt every-human 148)
	(disable-timer 18)
	(chat-to-allies "Deleting.")
)
#end-if

#end-if

; =========== SOME USE OF THE KNOWN POSITION AND SO ON

#load-if-not-defined DEATH-MATCH
(defrule
	(or	(up-compare-goal gl-current-age > gv-dark)
		(or	(strategic-number sn-strategy-lock == 1)
			(or	(up-compare-const gv-maximum-age == feudal-age)
				(or	(up-compare-goal SLING != 0)
					(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)))))
=>
	(up-jump-rule 5)
)

(defrule
	(up-compare-goal gl-strategy != sling)
	(up-compare-goal gl-strategy != grush)
	(or	(and	(up-compare-goal gl-strategy-type <= controlled-flush)
			(and	(game-time > 20)
				(strategic-number sn-strategy-lock == 0)))
		(or	(goal gl-strategy scorpion-rush)
			(goal gl-strategy eagle-rush)))
	(goal POSITION POCKET)
=>
	(set-goal gl-strategy regicide-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
)

(defrule
	(goal gl-strategy ranged-rush-strategy)
	(goal POSITION POCKET)
=>
	(set-goal gl-strategy ranged-boom-strategy)
	(set-goal gl-strategy-aggressiveness-level LOW)
)

(defrule
	(civ-selected turkish)
	(player-valid 3)
	(goal gl-strategy turkish-fast-imp)
	(up-compare-goal gl-rush-suitability-on-map >= LOW)
	(goal SLING 0)
	(goal POSITION FLANK)
=>
	(set-goal gl-strategy castle-drop)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
)

(defrule
	(goal gl-DRUSH YES)
	(or	(goal gl-strategy-type controlled-flush)
		(or	(goal gl-strategy fi-monk-rush)
			(or	(goal gl-nothing-style-map YES)
				(or	(up-compare-goal gl-rush-suitability-on-map <= AVERAGE)
					(goal gl-strategy eagle-rush)))))
=>
	(set-goal gl-DRUSH NO)
	(chat-to-player my-player-number "2This strategy doesn't allow drushing.")
)

(defrule
	(goal POSITION POCKET)
	(or	(and	(goal gl-strategy fi-monk-rush)
			(or	(up-compare-goal gl-rush-suitability-on-map >= AVERAGE)
				(up-compare-const gv-pocket-position == 1)))
		(or	(up-compare-goal gl-eew-strategy-type >= fast-imp)
			(and	(up-compare-const gv-pocket-position == 1)
				(goal gl-strategy monk-mango-push))))
	(goal gl-current-age gv-dark)
=>
	(set-goal gl-strategy regicide-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level LOW)
)

#load-if-not-defined REGICIDE
#load-if-not-defined UP-3-PLAYER-GAME; 1v3+
#load-if-defined UP-ALLY-IN-GAME
#load-if-defined DARK-AGE-START
#load-if-not-defined UP-MULTIPLE-ENEMIES

#load-if-defined UP-GROUPED-BY-TEAM
#load-if-defined ARENA-MAP
(defrule
	(game-time > 30)
	(game-time < 35)
	(goal SLING 0)
	(up-compare-goal gl-strategy != castle-sling)
	(goal gl-current-age gv-dark)
	(up-allied-goal every-ally gl-identity == Barbarian); No screwing around when there are other AIs in team
	(up-allied-goal every-ally gl-strategy != flush)
=>
	(set-goal gl-strategy flush); One Barbarian will ensure that they don't get badly forwarded
	(set-goal gl-strategy-type basic-flush)
	(set-goal gl-feudal-infantry FLUSH-DEFENCE-MAA)
	(set-goal gl-feudal-archery FLUSH-DEFENCE-ARCHER)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(set-strategic-number sn-strategy-lock 1)
	(disable-self)
)
#end-if
#end-if

#end-if
#end-if
#end-if
#end-if
#end-if

; ============== KEEPING UNITS GROUPED

#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(or	(game-time >= 2500)
		(or	(up-compare-goal TSA >= 1)
			(or	(goal gl-early-raid YES)
				(or	(and	(goal POSITION POCKET)
						(goal gl-SCRUSH-CONTROL SCOUTS-DONE))
					(or	(up-compare-goal gl-enemy-units-in-town > 0)
						(goal gl-patrol-defence patrol-on))))))
=>
	(up-jump-rule 9)
)

(defrule
	(or	(up-timer-status 44 == timer-running)
		(or	(up-timer-status 50 == timer-running)
			(or	(goal gl-current-age gv-dark)
				(or	(goal gl-defending-ally YES)
					(or	(goal gl-attacking-with-ally YES)
						(or	(up-compare-goal gl-early-raid >= direct-raid); test
							(building-type-count town-center == 0)))))))
=>
	(up-jump-rule 8)
)

(defrule
	(or	(game-time g:>= gl-camp-raid-time)
		(or	(goal gl-strategy forward)
			(or	(goal gl-arena-forward YES)
				(or	(enemy-buildings-in-town)
					(or	(goal gl-strategy-type FI2)
						(or	(strategic-number sn-number-attack-groups > 0)
							(or	(town-under-attack)
								(goal gl-DRUSH YES))))))))
=>
	(up-jump-rule 7)
)

(defrule
	(goal gl-strategy wall-boom)
	(up-compare-goal threat-time > 10000)
	(building-type-count watch-tower > 0)
	(up-timer-status 50 != timer-running)
=>
	(up-retreat-to watch-tower c: -1)
	(enable-timer 50 50)
)

(defrule
	(or	(and	(up-timer-status 24 == timer-running)
			(game-time < 900))
		(or	(up-compare-goal gl-camp-defense >= 1)
			(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)))
=>
	(up-jump-rule 4)
)

(defrule
	(or	(current-age <= feudal-age)
		(goal gl-strategy ranged-rush-strategy))
	(up-compare-goal gl-trush-tower-order < 100)
	(building-type-count watch-tower == 1)
	(up-timer-status 50 != timer-running)
=>
	(up-full-reset-search)
	(up-find-local c: watch-tower c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-lerp-tiles gl-point-x gl-position-self-x c: 2)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: 5 c: -1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 -1 orderid-explore -1)
)

(defrule
	(or	(current-age <= feudal-age)
		(goal gl-strategy ranged-rush-strategy))
	(up-compare-goal gl-trush-tower-order < 100)
	(building-type-count watch-tower == 1)
	(up-timer-status 50 != timer-running)
=>
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-point-x action-move -1 -1)
	(enable-timer 50 20)
)

(defrule
	(building-type-count blacksmith > 0)
	(up-timer-status 50 != timer-running)
=>
	(up-retreat-to blacksmith c: -1)
	(enable-timer 50 20)
)

(defrule
	(building-type-count barracks > 0)
	(up-timer-status 50 != timer-running)
=>
	(up-retreat-to barracks c: -1)
	(enable-timer 50 20)
)

(defrule
	(building-type-count barracks > 0)
	(up-timer-status 50 != timer-running)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-full-reset-search)
	(up-find-remote c: barracks c: 1)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: 20 c: 45)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 actionid-move orderid-explore warship-class)
	(up-find-local c: all-units-class c: 240)
	(up-target-objects 0 action-move -1 -1)
	(enable-timer 50 20)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)
#end-if
#end-if
#end-if
#end-if

#end-if

(defrule
	(or	(current-age >= castle-age)
		(or	(unit-type-count monastery-class > 0)
			(timer-triggered 40)))
	(up-compare-goal gl-early-raid != DUC-system)
	(up-timer-status 40 != timer-running)
=>
	(set-strategic-number sn-stance-reset-notice 1)
	(up-set-attack-stance -1 c: aggressive); Reset attack stances once in a while to keep converted units useful
	(enable-timer 40 130)
)

; ============= GATHERING UNITS INSIDE BUILDINGS

#load-if-not-defined DEATH-MATCH

#load-if-not-defined DEFEND-WONDER
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-defined POPULATION-CAP-200
(defrule
	(or	(goal gl-defending-ally YES)
		(or	(and	(or	(goal gl-strategy trush)
					(goal gl-strategy forward))
				(building-type-count watch-tower > 1))
			(goal gl-DRUSH YES)))
	(goal gl-gathering-inside NO)
=>
	(up-jump-rule 27)
)

(defrule
	(or	(goal gl-gathering-inside ALL)
		(and	(up-compare-goal gl-enemy-archery-count > 10)
			(and	(or	(unit-type-count mangonel-line > 0)
					(unit-type-count scorpion-line > 0))
				(and	(game-time < 2400)
					(and	(up-compare-goal gl-enemy-castle-distance >= 40)
						(up-compare-goal gl-enemy-tower-distance >= 37))))))
	(up-compare-goal gl-current-age != gv-feudal-up)
	(current-age-time > 30)
=>
	(set-goal gl-gathering-inside RESET); If garrisoning is required, this'll get overwritten
)

(defrule
	(or	(goal MILITARY 1)
		(or	(military-population > 25)
			(or	(game-time > 1900)
				(and	(game-time > 1500)
					(goal POSITION POCKET)))))
	(up-compare-goal gl-gathering-inside >= MOST)
	(nand	(goal gl-gathering-inside EVEN-CASTLE)
		(up-compare-goal gl-garrison-rule-fired != YES)); Don't loop reset
	(up-compare-goal gl-current-age != gv-feudal-up)
	(current-age-time > 30)
=>
	(set-goal gl-gathering-inside RESET)
)

(defrule
	(goal MILITARY 0)
	(up-compare-goal threat-time <= 30000)
	(or	(up-compare-goal gl-enemy-castle-distance < 36)
		(up-compare-goal gl-enemy-tower-distance < 36))
	(unit-type-count battering-ram-line < 2)
	(unit-type-count trebuchet-set < 1)
	(military-population < 28)
	(population >= 65)
	(goal gl-garrison-rule-fired YES)
=>
	(up-jump-rule 2)
)

(defrule
	(goal gl-garrison-rule-fired YES); Same as EVEN-CASTLE with the additional requirement that gathering-inside has actually been used -> ungarrisoning doesn't loop
=>
	(set-goal gl-gathering-inside RESET)
)

(defrule
	(goal gl-garrison-rule-fired -1)
	(goal gl-gathering-inside EVEN-CASTLE); If this returns true but the rule above didn't trigger, we do not need to ungarrison anything
=>
	(set-goal gl-gathering-inside NO)
)

(defrule
	(or	(and	(up-compare-goal gl-enemy-archery-count > 10)
			(and	(unit-type-count mangonel-line > 0)
				(game-time < 2400)))
		(or	(goal gl-strategy wall-boom)
			(or	(unit-type-count mangonel-line > 3)
				(or	(goal gl-current-age gv-dark)
					(up-compare-goal MILITARY != 0)))))
=>
	(up-jump-rule 6)
)

(defrule
	(goal gl-strategy xbow-rush)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(or	(players-current-age focus-player == feudal-age)
		(or	(up-compare-goal threat-time > 5000)
			(goal threat-player 0)))
	(up-research-status c: ri-crossbow != research-complete)
	(up-research-status c: ri-bodkin-arrow != research-complete)
	(unit-type-count mangonel-line == 0)
	(unit-type-count scorpion-line == 0)
	(unit-type-count spearman-line == 0)
	(unit-type-count camel-line == 0)
	(up-compare-goal gl-gathering-inside < ALL)
=>
	(set-goal gl-gathering-inside ALL)
)

(defrule
	(or	(and	(or	(up-projectile-detected projectile-castle < 30000)
				(players-military-population focus-player > 10))
			(and	(up-compare-goal gl-enemy-castle-distance < 36)
				(and	(unit-type-count battering-ram-line < 2)
					(unit-type-count trebuchet-set < 1))))
		(players-military-population focus-player > 40))
	(military-population < 28)
	(up-compare-goal gl-my-villager-count-total >= 65)
=>
	(set-goal gl-gathering-inside EVEN-CASTLE)
)

(defrule
	(or	(and	(players-building-type-count target-player watch-tower > 7)
			(up-compare-goal gl-my-villager-count-total >= 65))
		(and	(players-building-type-count target-player watch-tower > 5)
			(unit-type-count battering-ram-line < 3)))
	(up-compare-goal gl-enemy-tower-distance < 45)
	(up-projectile-detected projectile-watch-tower < 30000)
	(military-population < 28)
=>
	(set-goal gl-gathering-inside EVEN-CASTLE)
)

(defrule
	(players-current-age focus-player <= castle-age)
	(current-age >= castle-age)
	(current-age-time > 50)
	(soldier-count > 14)
	(or	(current-age == imperial-age)
		(players-current-age focus-player <= feudal-age))
=>
	(up-jump-rule 2)
)

(defrule
	(goal MILITARY 0)
	(players-military-population focus-player > 20)
	(or	(and	(military-population < 12)
			(unit-type-count knight-line < 8))
		(and	(players-military-population focus-player > 33)
			(civilian-population > 115)))
	(nand	(players-current-age focus-player == castle-age)
		(unit-type-count knight-line > 11))
	(military-population < 20)
	(up-compare-goal gl-my-villager-count-total >= 65)
=>
	(set-goal gl-gathering-inside EVEN-CASTLE)
)

(defrule
	(goal MILITARY 0)
	(soldier-count < 25)
	(players-current-age focus-player >= castle-age)
	(nand	(players-current-age focus-player == castle-age)
		(unit-type-count knight-line > 11))
	(players-military-population focus-player > 35)
	(or	(players-military-population focus-player > 45)
		(soldier-count < 17))
	(civilian-population > 100)
=>
	(set-goal gl-gathering-inside EVEN-CASTLE)
)

(defrule
	(game-time < 1800)
	(unit-type-count battering-ram-line == 0)
	(unit-type-count trebuchet-set == 0)
	(unit-type-count knight-line < 5)
	(players-military-population target-player < 5); No risk of getting hurt by enemy units, just a forward tower
	(or	(players-building-type-count target-player stone-wall-line > 3)
		(players-building-type-count target-player palisade-wall > 3)); But it may be walled
	(up-compare-goal gl-enemy-tower-count > 0)
	(up-projectile-detected projectile-watch-tower < 30000)
	(up-compare-goal gl-enemy-tower-distance < 25)
	(military-population < 28)
	(up-compare-goal gl-my-villager-count-total >= 25)
=>
	(set-goal gl-gathering-inside EVEN-CASTLE)
)

(defrule
	(goal MILITARY 0)
	(or	(military-population < 12)
		(players-military-population focus-player > 6))
	(military-population < 18)
	(up-compare-goal gl-my-villager-count-total >= 30)
	(up-compare-goal gl-enemy-tower-distance < 33)
	(nand	(building-type-count castle == 1)
		(and	(goal threat-source siege-weapon-class)
			(goal threat-target building-class)))
	(unit-type-count battering-ram-line < 2)
	(up-compare-goal gl-enemy-tower-count > 2)
=>
	(set-goal gl-gathering-inside EVEN-CASTLE)
)

(defrule
	(goal MILITARY 0)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(or	(players-building-type-count target-player watch-tower > 15)
		(or	(and	(players-building-type-count target-player castle > 2)
				(up-compare-goal gl-enemy-castle-distance < 40))
			(players-building-type-count target-player bombard-tower > 4)))
	(up-compare-goal gl-target-player-distance < 40)
	(up-compare-goal gl-my-villager-count-total >= 65)
	(unit-type-count battering-ram-line < 7)
	(unit-type-count trebuchet-set < 1)
	(up-projectile-detected projectile-fortification < 30000)
	(military-population < 40)
=>
	(set-goal gl-gathering-inside EVEN-CASTLE)
)

#load-if-not-defined UP-POCKET-POSITION
(defrule
	(up-compare-goal MILITARY <= 0)
	(game-time < 2400)
	(up-compare-goal gl-current-age >= gv-castle)
	(players-building-type-count target-player castle > 0)
	(nand	(building-type-count castle == 1)
		(and	(goal threat-source siege-weapon-class)
			(goal threat-target building-class)))
	(up-compare-goal gl-enemy-castle-distance < 33)
	(unit-type-count battering-ram-line < 3)
	(up-projectile-detected projectile-castle < 300000)
	(military-population < 23)
	(population > 30)
=>
	(set-goal gl-gathering-inside EVEN-CASTLE)
)
#else
(defrule
	(up-compare-goal MILITARY <= 0)
	(game-time < 2400)
	(up-compare-goal gl-current-age >= gv-castle)
	(players-building-type-count target-player castle > 0)
	(nand	(building-type-count castle == 1)
		(and	(goal threat-source siege-weapon-class)
			(goal threat-target building-class)))
	(up-compare-goal gl-enemy-castle-distance < 33)
	(unit-type-count battering-ram-line < 3)
	(up-projectile-detected projectile-castle < 300000)
	(military-population < 23)
	(population > 65)
=>
	(set-goal gl-gathering-inside EVEN-CASTLE)
)
#end-if

(defrule
	(game-time < 1200)
	(players-current-age focus-player == feudal-age)
	(players-current-age target-player <= feudal-age)
	(up-compare-goal gl-enemy-cavalry-count > 2)
	(up-compare-goal gl-enemy-heavy-cavalry-count < 1)
	(goal gl-enemy-archery-count 0)
	(goal gl-enemy-infantry-count 0)
	(or	(unit-type-count spearman-line > 1)
		(up-compare-goal gl-enemy-cavalry-count < 6))
	(unit-type-count spearman-line > 0)
=>
	(set-goal gl-gathering-inside RESET)
	(up-jump-rule 8)
)

(defrule
	(or	(up-compare-goal MILITARY >= 1)
		(or	(goal gl-current-age gv-dark)
			(or	(unit-type-count mangonel > 0); We want to unleash that
				(or	(up-compare-goal gl-my-villager-count-total < 20)
					(or	(building-type-count castle > 0)
						(or	(up-compare-goal threat-time > 30000)
							(or	(goal gl-strategy castle-push)
								(goal gl-strategy wall-boom))))))))
=>
	(up-jump-rule 7)
)

(defrule
	(or	(and	(goal gl-strategy turkish-fast-imp)
			(current-age < imperial-age))
		(or	(goal gl-strategy monk-mango-push)
			(or	(and	(game-time < 1400)
					(or	(research-completed ri-bodkin-arrow)
						(research-completed ri-chain-mail)))
				(or	(goal gl-strategy-type FI2)
					(unit-type-count scorpion-line > 0)))))
=>
	(up-jump-rule 6)
)

(defrule
	(soldier-count > 2)
	(or	(and	(or	(game-time < 1400)
				(goal gl-strategy heavy-krush))
			(research-completed ri-chain-barding))
		(and	(unit-type-count knight-line > 2)
			(and	(players-current-age focus-player <= feudal-age)
				(up-compare-goal gl-enemy-spearman-count < 5))))
=>
	(up-jump-rule 5)
)

(defrule
	(up-compare-goal gl-gathering-inside < ALL)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(up-compare-goal gl-current-age <= gv-feudal)
	(players-military-population focus-player > 3)
	(or	(military-population < 4)
		(players-military-population focus-player > 6))
	(or	(military-population < 6)
		(players-military-population focus-player > 9))
	(or	(military-population < 8)
		(players-military-population focus-player > 16))
	(military-population < 11)
=>
	(set-goal gl-gathering-inside ALL)
)

(defrule
	(up-compare-goal gl-gathering-inside < ALL)
	(up-compare-goal gl-strategy-type <= controlled-flush)
	(up-compare-goal gl-current-age <= gv-feudal)
	(up-compare-goal gl-my-villager-count-total > 40)
	(players-military-population focus-player > 22)
	(or	(military-population < 15)
		(players-military-population focus-player > 30))
	(military-population < 21)
=>
	(set-goal gl-gathering-inside ALL)
)

(defrule
	(up-compare-goal gl-gathering-inside < ALL)
	(or	(up-compare-goal gl-strategy-type >= FC)
		(up-compare-goal gl-current-age >= gv-feudal-up))
	(players-current-age focus-player == feudal-age)
	(players-military-population focus-player > 4)
	(or	(military-population < 3)
		(players-military-population focus-player > 7))
	(or	(military-population < 5)
		(and	(players-military-population focus-player > 14)
			(building-type-count castle == 0)))
	(military-population < 8)
=>
	(set-goal gl-gathering-inside ALL)
)

(defrule
	(up-compare-goal gl-gathering-inside < ALL)
	(or	(up-compare-goal gl-strategy-type >= FC)
		(up-compare-goal gl-current-age >= gv-feudal-up))
	(players-current-age focus-player >= castle-age)
	(players-military-population focus-player > 3)
	(or	(military-population < 3)
		(players-military-population focus-player > 7))
	(or	(military-population < 5)
		(and	(players-military-population focus-player > 12)
			(building-type-count castle == 0)))
	(military-population < 7)
=>
	(set-goal gl-gathering-inside ALL)
)

(defrule
	(up-compare-goal gl-gathering-inside < ALL)
	(or	(up-compare-goal gl-strategy-type >= FC)
		(up-compare-goal gl-current-age >= gv-feudal-up))
	(building-type-count castle == 0)
	(up-compare-goal gl-my-villager-count-total > 35)
	(players-military-population focus-player > 18)
	(or	(military-population < 11)
		(players-military-population focus-player > 21))
	(military-population < 13)
=>
	(set-goal gl-gathering-inside ALL)
)

(defrule
	(not	(goal MILITARY 1))
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(up-compare-goal threat-time < 40000)
	(up-compare-goal gl-gathering-inside < LAND-ARMY)
	(civilian-population > 80)
	(population < 175)
	(population < almost-full-pop)
	(players-military-population focus-player > 30)
	(or	(players-military-population focus-player > 45)
		(soldier-count < 20))
	(soldier-count < 30)
=>
	(set-goal gl-gathering-inside LAND-ARMY)
)

(defrule
	(goal gl-gathering-inside ALL)
	(up-compare-goal gl-target-navy-count <= 0)
=>
	(set-goal gl-gathering-inside LAND-ARMY)
	(up-jump-rule 1)
)
#end-if
#end-if
#end-if
#end-if
#end-if

#end-if

(defrule
	(or	(goal gl-gathering-inside EVEN-CASTLE)
		(goal gl-gathering-inside LAND-ARMY))
=>
	(up-gather-inside c: castle c: 1)
	(set-goal gl-garrison-rule-fired YES)
)

(defrule
	(goal gl-garrison-rule-fired -1)
	(goal gl-gathering-inside RESET)
=>
	(set-goal gl-gathering-inside NO)
)

(defrule
	(up-compare-goal gl-gathering-inside >= ALL)
=>
	(up-gather-inside c: monastery c: 1)
)

(defrule
	(up-compare-goal gl-gathering-inside >= MOST)
	(up-compare-goal gl-gathering-inside != LAND-ARMY)
=>
	(up-gather-inside c: dock c: 1)
)

(defrule
	(up-compare-goal gl-gathering-inside >= MOST)
=>
	(up-gather-inside c: barracks c: 1)
	(up-gather-inside c: archery-range c: 1)
	(up-gather-inside c: stable c: 1)
	(up-gather-inside c: siege-workshop c: 1)
	(up-modify-goal gl-garrison-rule-fired c:max PARTLY)
)

(defrule
	(goal gl-gathering-inside RESET)
=>
	(up-gather-inside c: barracks c: 0)
	(up-gather-inside c: castle c: 0)
	(up-gather-inside c: archery-range c: 0)
	(up-gather-inside c: stable c: 0)
	(up-gather-inside c: siege-workshop c: 0)
	(up-gather-inside c: dock c: 0)
	(up-gather-inside c: monastery c: 0)
	(up-ungarrison c: barracks)
	(up-ungarrison c: monastery)
	(up-ungarrison c: archery-range)
	(up-ungarrison c: stable)
	(up-ungarrison c: castle)
	(up-ungarrison c: dock)
	(up-ungarrison c: siege-workshop)
	(set-goal gl-garrison-rule-fired -1)
)

(defrule
	(goal gl-gathering-inside RESET)
=>
	(set-goal gl-gathering-inside NO)
)

(defrule
	(goal gl-gathering-inside NO)
	(research-completed ri-redemption)
	(up-timer-status 41 != timer-running)
=>
	(up-gather-inside c: barracks c: 0)
	(up-gather-inside c: archery-range c: 0)
	(up-gather-inside c: stable c: 0)
	(up-gather-inside c: siege-workshop c: 0)
	(up-gather-inside c: dock c: 0)
	(up-ungarrison c: barracks)
	(up-ungarrison c: archery-range)
	(up-ungarrison c: stable)
	(up-ungarrison c: dock)
	(up-ungarrison c: siege-workshop)
	(enable-timer 41 176)
)

(defrule
	(or	(up-timer-status 28 == timer-running)
		(or	(up-compare-goal threat-time < 10000)
			(and	(building-type-count watch-tower == 0)
				(and	(building-type-count bombard-tower == 0)
					(building-type-count castle == 0)))))
=>
	(up-jump-rule 3)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local c: villager-class c: 240)
	(up-get-search-state gl-local-total)
	(up-get-fact unit-type-count villager temporary-goal)
)

(defrule
	(up-compare-goal temporary-goal g:> gl-local-total)
=>
	(up-ungarrison c: watch-tower)
	(up-ungarrison c: castle)
	(up-ungarrison c: bombard-tower)
	(chat-to-player my-player-number "Villagers stuck inside buildings - ungarrison")
)

(defrule
	(up-compare-goal gl-DRUSH != YES)
	(up-compare-goal gl-strategy != castle-sling)
	(up-timer-status 28 != timer-running)
=>
	(enable-timer 28 20)
)

; ============== THROWING A PATROL ATTACK TO ENEMY MONASTERY

(defrule
	(or	(up-compare-goal winning-player <= 0)
		(or	(up-compare-const gv-defend-wonder == 1)
			(game-time == 0)))
=>
	(up-jump-rule 13)
)

(defrule
	(or	(not	(goal MILITARY 1))
		(not	(enemy-captured-relics)))
	(up-timer-status 46 != timer-running)
=>
	(up-jump-rule 2)
)

(defrule
	(up-timer-status 46 != timer-running)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= winning-player)
	(up-full-reset-search)
	(up-find-remote c: monastery c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-object-point-x)
	(up-set-target-point gl-object-point-x)
	(up-filter-distance c: 3 c: -1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-object-point-x action-patrol -1 defensive)
)

(defrule
	(up-timer-status 46 != timer-running)
=>
	(enable-timer 46 50)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

; ============== TO WONDER

(defrule
	(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
		(or	(players-building-type-count every-enemy wonder == 0)
			(up-compare-goal victory-time > 1500)))		
=>
	(up-jump-rule 3)
)

(defrule
	(goal MILITARY 1)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= winning-player)
)

(defrule
	(goal MILITARY 1)
	(players-building-type-count focus-player wonder > 0)
	(stance-toward focus-player enemy)
	(up-timer-status 46 != timer-running)
=>
	(up-full-reset-search)
	(up-find-local c: battering-ram-line c: 10)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: all-units-class c: 50)
	(up-filter-include -1 -1 -1 -1)
	(up-find-remote c: wonder c: 1)
	(up-target-objects 0 action-patrol -1 aggressive)
	(enable-timer 46 100)
	(enable-timer 40 120)
)

(defrule
	(goal MILITARY 1)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

; ============== REPAIRING WONDER

(defrule
	(or	(nor	(players-building-type-count any-ally wonder > 0)
			(building-type-count wonder > 0))
		(and	(game-time <= 780); Shared goals are still being used
			(up-compare-const gv-defend-wonder == 0)))
=>
	(up-jump-rule 5)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= winning-player)
	(up-full-reset-search)
	(up-find-remote c: wonder c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-object-data object-data-hitpoints temporary-goal2)
	(up-get-object-data object-data-maxhp temporary-goal3)
	(up-modify-goal temporary-goal3 g:- temporary-goal2)
	(up-get-search-state gl-local-total)
)

(defrule
	(up-compare-goal gl-remote-total > 0)
	(or	(stance-toward focus-player ally)
		(goal winning-player my-player-number))
	(wood-amount > 70)
	(gold-amount > 70)
	(stone-amount > 70)
	(game-time g:> gl-wonder-repair-time)
	(up-compare-goal temporary-goal3 >= 100)
=>
	(up-get-fact game-time 0 gl-wonder-repair-time)
	(up-modify-goal gl-wonder-repair-time c:+ 8)
	(up-find-local c: villager-class c: 15)
	(up-target-objects 0 action-default -1 -1)
)

(defrule
	(up-compare-goal gl-remote-total > 0)
	(or	(stance-toward focus-player ally)
		(goal winning-player my-player-number))
	(wood-amount > 0)
	(gold-amount > 0)
	(stone-amount > 0)
	(game-time g:> gl-wonder-repair-time)
	(up-compare-goal temporary-goal3 >= 100)
=>
	(up-get-fact game-time 0 gl-wonder-repair-time)
	(up-modify-goal gl-wonder-repair-time c:+ 8)
	(up-find-local c: villager-class c: 2)
	(up-target-objects 0 action-default -1 -1)
)

(defrule
	(up-compare-goal gl-remote-total > 0)
	(or	(stance-toward focus-player ally)
		(goal winning-player my-player-number))
	(up-compare-goal temporary-goal3 >= 100)
	(stone-amount < 100)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

; ============== SAVING THE SCOUT FROM TC

#load-if-not-defined DEATH-MATCH
(defrule
	(or	(game-time > 1200)
		(or	(unit-type-count siege-weapon-class > 0)
			(or	(research-completed ri-chain-barding)
				(or	(research-completed ri-chain-mail)
					(or	(current-age == imperial-age)
						(or	(game-time == 0)
							(starting-age >= castle-age)))))))
=>
	(up-jump-rule 29)
)

(defrule
	(goal gl-early-raid DUC-system)
=>
	(up-modify-goal temporary-goal7 s:= sn-focus-player-number)
	(up-jump-rule 11)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal7 s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-full-reset-search)
	(up-find-remote c: town-center c: 1)
	(set-goal temporary-goal 45)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(up-set-target-object search-remote c: 0)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-get-search-state gl-local-total)
	(up-jump-rule 6)
)

(defrule
	(up-find-local c: all-units-class c: 1)
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-object-point-x)
	(up-copy-point gl-temporary-point-x gl-point-x)
	(up-add-point gl-temporary-point-x gl-object-point-x c: -1)
	(up-modify-goal gl-temporary-point-x g:* gl-temporary-point-x)
	(up-modify-goal gl-temporary-point-y g:* gl-temporary-point-y)
	(up-modify-goal gl-temporary-point-x g:+ gl-temporary-point-y)
	(set-goal temporary-goal3 0)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-compare-goal gl-temporary-point-x g:<= temporary-goal)
=>
	(up-lerp-tiles gl-object-point-x gl-point-x c: -6)
	(set-goal temporary-goal3 1)
)

(defrule
	(up-compare-goal temporary-goal3 >= 1)
	(up-object-data object-data-type == militiaman)
	(goal gl-DRUSH YES)
=>
	(enable-timer 42 4)
	(enable-timer 28 5)
	(set-strategic-number sn-number-attack-groups 0)
	(enable-timer 11 4)
	(set-goal RETREAT YES)
	(set-goal gl-drush-retreat-point-required 1)
	(set-goal gl-route-control -1)
	(disable-timer 9)
)

(defrule
	(up-compare-goal temporary-goal3 >= 1)
	(up-object-data object-data-type == base-scout-unit)
	(unit-type-count scout-unit == 1)
=>
	(set-goal gl-villager-laming -1)
	(set-goal gl-scout-party -1)
;	(up-modify-goal gl-boar-stealing c:min -1)
	(set-goal gl-dodging-TC 1)
	(enable-timer 46 7)
)

(defrule
	(up-compare-goal temporary-goal3 >= 1)
	(up-compare-goal gl-object-point-x >= 0)
	(up-compare-goal gl-object-point-y >= 0)
	(up-compare-goal gl-object-point-x g:< gl-max-coordinate-value)
	(up-compare-goal gl-object-point-y g:< gl-max-coordinate-value)
	(nand	(up-projectile-detected projectile-town-center < 3000)
		(up-compare-goal TSA >= 1))
=>
	(up-target-point gl-object-point-x action-move -1 -1)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 0 1 0 0)
	(up-jump-rule -6)
)

(defrule
	(goal gl-remote-total 1)
	(goal temporary-goal2 0)
=>
	(up-get-point position-object gl-saved-point-x)
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-modify-goal gl-point-x c:+ 1)
	(up-modify-goal gl-point-y c:- 2)
	(up-set-target-point gl-point-x)
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 7)
	(set-goal temporary-goal2 1)
	(up-jump-rule -7)
)

(defrule
	(goal temporary-goal2 1)
=>
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-modify-goal gl-point-x c:- 2)
	(up-modify-goal gl-point-y c:+ 1)
	(up-set-target-point gl-point-x)
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 7)
	(set-goal temporary-goal2 2)
	(up-jump-rule -8)
)

(defrule
	(goal temporary-goal2 2)
=>
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-modify-goal gl-point-x c:- 2)
	(up-modify-goal gl-point-y c:- 2)
	(up-set-target-point gl-point-x)
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 7)
	(set-goal temporary-goal 40)
	(set-goal temporary-goal2 3)
	(up-jump-rule -9)
)

(defrule
	(goal temporary-goal2 3)
=>
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-modify-goal gl-point-x c:+ 1)
	(up-modify-goal gl-point-y c:+ 1)
	(up-set-target-point gl-point-x)
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 7)
	(set-goal temporary-goal2 4)
	(up-jump-rule -10)
)

(defrule
	(or	(game-time > 1200)
		(or	(unit-type-count scout-unit == 0)
			(and	(strategic-number sn-number-explore-groups == 0)
				(up-compare-goal gl-boar-stealing <= -1))))
	(goal gl-dodging-TC -1)
=>
	(up-jump-rule 15)
)

(defrule
	(true)
=>
	(set-strategic-number sn-focus-player-number 1)
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-set-target-point gl-saved-point-x)
	(up-filter-distance c: -1 c: 9)
	(up-modify-goal gl-point-x c:- 10)
	(up-modify-goal gl-point-y c:- 10)
	(set-goal temporary-goal2 20)
	(set-goal temporary-goal3 20)
	(set-goal temporary-goal4 13)
)

(defrule
	(stance-toward focus-player enemy)
	(up-set-target-object search-local c: 0)
	(or	(up-find-remote c: town-center c: 1)
		(up-find-remote c: castle c: 1))
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-object-point-x)
	(up-modify-goal gl-villager-laming c:min -1)
;	(up-modify-goal gl-boar-stealing c:min -1)
	(set-goal gl-dodging-TC 1)
	(chat-to-player my-player-number "Scary object found1!")
	(enable-timer 46 7)
	(up-jump-rule 10)
)

(defrule
	(not	(stance-toward focus-player enemy))
	(or	(up-find-remote c: town-center c: 1)
		(up-find-remote c: castle c: 1))
	(up-set-target-object search-remote c: 0)
=>
	(up-jump-rule 9)
)

(defrule
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -3)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-copy-point gl-temporary-point-x gl-point-x)
	(up-add-point gl-temporary-point-x gl-saved-point-x c: -1)
	(up-modify-goal gl-temporary-point-x g:* gl-temporary-point-x)
	(up-modify-goal gl-temporary-point-y g:* gl-temporary-point-y)
	(up-modify-goal gl-temporary-point-x g:+ gl-temporary-point-y)
)

(defrule
	(up-point-contains gl-object-point-x c: town-center)
	(up-point-distance gl-object-point-x gl-position-self-x > 0)
	(game-time > 5)
	(up-compare-goal gl-temporary-point-x <= scout-los3)
	(up-compare-goal temporary-goal4 < 13)
=>
	(set-goal gl-villager-laming -1)
	(set-goal gl-scout-party -1)
;	(up-modify-goal gl-boar-stealing c:min -1)
	(set-goal gl-dodging-TC 1)
	(chat-to-player my-player-number "Scary object found2!")
	(enable-timer 46 7)
	(up-jump-rule 6)
)

(defrule
	(up-point-contains gl-point-x c: town-center)
	(goal temporary-goal4 13)
=>
	(up-copy-point gl-object-point-x gl-point-x)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal5 -1)
	(up-modify-goal gl-point-x c:+ 1)
	(up-modify-goal gl-point-y c:+ 1)
	(set-goal temporary-goal4 12)
	(up-jump-rule -3)
)

(defrule
	(up-point-contains gl-object-point-x c: town-center)
	(up-compare-goal temporary-goal4 < 13)
	(or	(up-compare-goal temporary-goal4 > 9)
		(and	(up-compare-goal temporary-goal4 <= 6)
			(up-compare-goal temporary-goal4 > 3)))
=>
	(up-modify-goal gl-point-x g:+ temporary-goal5)
	(up-modify-goal temporary-goal4 c:- 1)
	(up-jump-rule -4)
)

(defrule
	(up-point-contains gl-object-point-x c: town-center)
	(up-compare-goal temporary-goal4 < 13)
	(up-compare-goal temporary-goal4 > 6)
=>
	(set-goal temporary-goal5 1)
	(up-modify-goal gl-point-y c:- 1)
	(up-modify-goal temporary-goal4 c:- 1)
	(up-jump-rule -5)
)

(defrule
	(up-point-contains gl-object-point-x c: town-center)
	(up-compare-goal temporary-goal4 < 13)
	(up-compare-goal temporary-goal4 > 1)
=>
	(up-modify-goal gl-point-y c:+ 1)
	(up-modify-goal temporary-goal4 c:- 1)
	(up-jump-rule -6)
)

(defrule
	(up-compare-goal temporary-goal2 > 0)
=>
	(up-modify-goal gl-point-x c:+ 1)
	(up-modify-goal temporary-goal2 c:- 1)
	(up-jump-rule -7)
)

(defrule
	(up-compare-goal temporary-goal3 > 0)
=>
	(set-goal temporary-goal2 20)
	(up-modify-goal gl-point-x c:- 20)
	(up-modify-goal gl-point-y c:+ 1)
	(up-modify-goal temporary-goal3 c:- 1)
	(up-jump-rule -8)
)

(defrule
	(goal gl-dodging-TC 1)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-lerp-tiles gl-point-x gl-object-point-x c: -7)
	(up-set-target-point gl-point-x)
)

(defrule
	(goal gl-dodging-TC 1)
	(or	(up-point-contains gl-object-point-x c: town-center)
		(or	(up-point-contains gl-object-point-x c: watch-tower)
			(up-point-contains gl-object-point-x c: castle)))
	(up-point-distance gl-object-point-x gl-position-self-x > 0)
	(up-compare-goal gl-point-x >= 0)
	(up-compare-goal gl-point-y >= 0)
	(up-compare-goal gl-point-x g:< gl-max-coordinate-value)
	(up-compare-goal gl-point-y g:< gl-max-coordinate-value)
=>
	(up-target-point 0 action-move -1 no-attack)
)

(defrule
	(or	(and	(up-compare-goal gl-dodging-TC >= 1)
			(up-timer-status 46 != timer-running))
		(and	(unit-type-count scout-unit == 0)
			(up-compare-goal gl-dodging-TC != -1)))
=>
	(set-goal gl-dodging-TC -1)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal7)
)

; ============== CHECKING THE SCOUT ISN'T STUCK

#load-if-not-defined MIGRATION-MAP
(defrule
	(or	(game-time > 900)
		(or	(unit-type-count scout-unit != 1)
			(or	(up-compare-goal gl-scout-point-counter >= 100); Risk of double-stuck can be considered low
				(or	(and	(up-timer-status 15 != timer-triggered)
						(or	(game-time g:< gl-circle-scouting-time)
							(and	(up-timer-status 24 == timer-running)
								(goal gl-new-scouting-style 1))))
					(up-compare-goal gl-dodging-TC != -1)))))
=>
	(up-jump-rule 7)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-copy-point gl-point-x gl-scout-point-x)
	(up-get-point position-object gl-scout-point-x)
	(up-get-search-state gl-local-total)
	(set-goal temporary-goal 2)
)

(defrule
	(game-time g:>= gl-circle-scouting-time)
	(up-compare-goal gl-deer-luring < 1)
	(up-timer-status 24 == timer-running)
	(goal gl-new-scouting-style 1)
=>
	(set-goal temporary-goal 4)
)

(defrule
	(up-compare-goal gl-point-x >= 0)
	(up-compare-goal gl-point-y >= 0)
	(or	(and	(up-compare-goal gl-point-x g:== gl-scout-point-x)
			(and	(up-compare-goal gl-point-y g:== gl-scout-point-y)
				(game-time g:>= gl-circle-scouting-time)))
		(and	(up-point-distance gl-point-x gl-scout-point-x g:< temporary-goal)
			(or	(game-time g:< gl-circle-scouting-time)
				(and	(up-timer-status 24 == timer-running)
					(goal gl-new-scouting-style 1)))))
=>
	(up-modify-goal gl-scout-point-counter c:+ 1)
)

(defrule
	(game-time g:>= gl-circle-scouting-time)
	(up-compare-goal gl-deer-luring < 1)
	(up-point-distance gl-point-x gl-scout-point-x g:< temporary-goal)
	(up-timer-status 24 == timer-running)
	(goal gl-new-scouting-style 1)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(and	(or	(up-compare-goal gl-point-x g:!= gl-scout-point-x)
				(up-compare-goal gl-point-y g:!= gl-scout-point-y))
			(game-time g:>= gl-circle-scouting-time))
		(and	(up-point-distance gl-point-x gl-scout-point-x g:>= temporary-goal)
			(or	(game-time g:< gl-circle-scouting-time)
				(and	(up-timer-status 24 == timer-running)
					(goal gl-new-scouting-style 1)))))
=>
	(up-modify-goal gl-scout-point-counter c:- 6)
	(up-modify-goal gl-scout-point-counter c:max 0)
)

(defrule
	(game-time g:>= gl-circle-scouting-time)
	(up-compare-goal gl-deer-luring < 1)
	(up-compare-goal gl-scout-point-counter >= 15)
	(up-timer-status 24 == timer-running)
	(goal gl-new-scouting-style 1)
=>
	(set-goal gl-scout-point-counter 200)
	(set-goal gl-deer-luring -2)
	(up-modify-goal gl-boar-stealing c:min -1)
	(up-get-fact game-time 0 gl-circle-scouting-time)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(up-modify-goal gl-circle-scouting-time c:- 1)
	(up-jump-rule 1)
)

(defrule
	(or	(up-compare-goal gl-scout-point-counter >= 25)
		(or	(and	(up-compare-goal gl-scout-point-counter >= 4)
				(game-time g:< gl-circle-scouting-time))
			(and	(up-compare-goal threat-time < 3000)
				(goal threat-source villager-class))))
=>
	(set-goal gl-scout-point-counter 100)
	(set-goal gl-deer-luring -2)
	(up-modify-goal gl-boar-stealing c:min -1)
	(up-get-fact game-time 0 gl-circle-scouting-time)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(up-modify-goal gl-circle-scouting-time c:- 1)
)
#end-if

#end-if

; ============== DETECTING ENEMY LANDING

#load-if-not-defined MIGRATION-MAP
(defrule
	(or	(and	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
			(and	(game-time < 3000)
				(population-cap > 65)))
		(or	(up-timer-status 15 != timer-triggered)
			(game-time == 0)))
=>
	(up-jump-rule 15)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal gl-remote-total 0)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
)

(defrule
	(stance-toward focus-player enemy)
=>
	(up-full-reset-search)
	(up-filter-include -1 -1 -1 off-mainland)
	(up-find-remote c: scout-cavalry-class c: 1)
	(up-find-remote c: villager-class c: 1)
	(up-find-remote c: building-class c: 1)
	(up-find-remote c: tower-class c: 1)
	(up-find-remote c: wall-class c: 1)
	(up-find-remote c: gate-class c: 1)
	(up-find-remote c: infantry-class c: 1)
	(up-find-remote c: archery-class c: 1)
)

(defrule
	(stance-toward focus-player enemy)
=>
	(up-find-remote c: archery-cannon-class c: 1)
	(up-find-remote c: cavalry-class c: 1)
	(up-find-remote c: cavalry-archer-class c: 1)
	(up-find-remote c: cavalry-cannon-class c: 1)
	(up-find-remote c: monastery-class c: 1)
	(up-find-remote c: siege-weapon-class c: 1)
	(up-find-remote c: scorpion-class c: 1)
	(up-find-remote c: packed-trebuchet-class c: 1)
	(up-find-remote c: unpacked-trebuchet-class c: 1)
	(up-find-remote c: petard-class c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal3 g:+ gl-remote-total)
)

(defrule
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -3)
)

(defrule
	(true)
=>
	(set-strategic-number sn-focus-player-number 1)
	(up-full-reset-search)
	(up-get-search-state gl-local-total); Clear goals
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal7 0)
)

(defrule
	(stance-toward focus-player enemy)
=>
	(up-filter-include -1 -1 -1 on-mainland)
	(up-find-remote c: building-class c: 1)
	(up-find-remote c: tower-class c: 1)
	(up-find-remote c: wall-class c: 1)
	(up-find-remote c: gate-class c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal4 g:+ gl-remote-total)
	(up-modify-goal temporary-goal4 g:- temporary-goal2)
	(up-find-remote c: scout-cavalry-class c: 1)
	(up-find-remote c: villager-class c: 1)
	(up-find-remote c: infantry-class c: 1)
	(up-find-remote c: archery-class c: 1)
)

(defrule
	(stance-toward focus-player enemy)
	(goal temporary-goal7 0)
	(up-compare-goal temporary-goal4 > 0)
=>
	(up-modify-goal temporary-goal7 s:= sn-focus-player-number)
)

(defrule
	(stance-toward focus-player enemy)
	(up-compare-goal temporary-goal4 g:== temporary-goal5)
	(strategic-number sn-focus-player-number s:== sn-target-player-number)
=>
	(set-goal temporary-goal6 1); Found building count stayed same with current target
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(goal temporary-goal6 1)
	(game-time > 1200)
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(strategic-number sn-target-player-number g:!= temporary-goal7)
=>
	(up-modify-goal temporary-goal g:= temporary-goal7)
	(up-modify-sn sn-target-player-number g:= temporary-goal7); Target player didn't have anything on our islands so target a player who has
	(up-modify-goal 391 g:= temporary-goal7)
	(set-goal temporary-goal6 0)
	(set-goal gl-fixed-target-player YES)
	(enable-timer 23 10)
)

(defrule
	(stance-toward focus-player enemy)
=>
	(up-find-remote c: archery-cannon-class c: 1)
	(up-find-remote c: cavalry-class c: 1)
	(up-find-remote c: cavalry-archer-class c: 1)
	(up-find-remote c: cavalry-cannon-class c: 1)
	(up-find-remote c: monastery-class c: 1)
	(up-find-remote c: siege-weapon-class c: 1)
	(up-find-remote c: scorpion-class c: 1)
	(up-find-remote c: packed-trebuchet-class c: 1)
	(up-find-remote c: unpacked-trebuchet-class c: 1)
	(up-find-remote c: petard-class c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal2 g:= gl-remote-total)
	(up-modify-goal temporary-goal5 g:= temporary-goal4)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point-x)
)

(defrule
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -6)
)

(defrule
	(goal temporary-goal2 0)
	(game-time > 1200)
	(game-time g:> gl-map-treatment-switch-time)
	(up-compare-goal temporary-goal3 > 0)
	(or	(strategic-number sn-minimum-water-body-size-for-dock == anti-landing-style); Mixed for pop caps > 50, otherwise land
		(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion))
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock islands-map-water-style)
	(chat-to-player my-player-number "Enemies found on different island - treat map as islands.")
	(chat-to-player every-ally "Enemies found on different island - treat map as islands.")
)

(defrule
	(up-compare-goal temporary-goal2 > 0)
	(or	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
		(strategic-number sn-minimum-water-body-size-for-dock == islands-map-landing-style))
=>
	(up-get-fact game-time 0 gl-map-treatment-switch-time)
	(up-modify-goal gl-map-treatment-switch-time c:+ 180)
	(set-strategic-number sn-minimum-water-body-size-for-dock anti-landing-style)
	(chat-to-player my-player-number "Enemies found on same island - treat map as mixed map.")
	(chat-to-player every-ally "Enemies found on same island - treat map as mixed map.")
	(set-goal gl-islands-style NO)
	(up-send-flare gl-point-x)
)

(defrule
	(goal temporary-goal4 0)
	(or	(strategic-number sn-minimum-water-body-size-for-dock == anti-landing-style)
		(players-building-count target-player == 0))
	(up-compare-goal temporary-goal2 > 0)
	(up-compare-goal TSA >= 1)
=>
	(up-filter-include cmdid-military -1 -1 on-mainland)
	(up-filter-exclude -1 actionid-attack orderid-explore warship-class)
	(up-find-local c: all-units-class c: 1)
	(up-target-objects 0 action-default -1 -1); Target enemy landers with something in case there are just units, since TSA doesn't touch them
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(population-cap < 65)
	(up-compare-const gv-wonder-race == 0)
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
=>
	(set-strategic-number sn-allow-new-build-order 1)
	(set-goal DOCK 0)
	(set-strategic-number sn-minimum-water-body-size-for-dock land-map-style)
	(up-reset-placement c: dock)
)
#end-if

; ============== MONK-WITH-RELIC BACKUP

(defrule
	(timer-triggered 15)
	(unit-type-count 286 > 0)
=>
	(up-full-reset-search)
	(up-filter-exclude -1 -1 731 -1)
	(up-find-local c: 286 c: 1)
	(up-target-point gl-position-self-x action-stop -1 -1)
)

; ============== STEALING BOAR

#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE

#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined DEATH-MATCH
(defrule
	(or	(game-time > 900)
		(or	(up-compare-goal gl-boar-stealing >= 3)
			(or	(strategic-number sn-town-center-start == 0)
				(or	(building-type-count-total town-center > 1)
					(or	(and	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
							(and	(up-gaia-type-count c: shore-fish < 2)
								(building-type-count-total dock == 0)))
						(game-time == 0))))))
=>
	(up-jump-rule 55)
)

(defrule
	(or	(game-time < 90)
		(or	(and	(up-compare-const gv-explored-map == 0)
				(up-compare-const hardest-and-multiple-players == 0))
			(or	(game-time > 300)
				(or	(up-timer-status 13 == timer-running)
					(or	(up-compare-goal POSITION != FLANK)
						(or	(strategic-number sn-home-exploration-time == 313)
							(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)))))))
=>
	(up-jump-rule 15)
)
#else
(defrule
	(or	(and	(game-time > 10)
			(or	(game-time > 960)
				(or	(up-timer-status 45 != timer-triggered)
					(player-valid any-ally))))
		(or	(and	(up-compare-const gv-explored-map == 0)
				(and	(up-compare-const hardest-and-multiple-players == 0)
					(game-time > 0)))
			(up-compare-const gv-pocket-position == 1)))
=>
	(up-jump-rule 14)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-filter-include -1 -1 731 -1)
	(up-find-local c: monk c: 2)
)

(defrule
	(game-time > 10)
	(or	(up-set-target-object search-local c: 1)
		(unit-type-count monk == 0))
=>
	(up-jump-rule 12)
)
#end-if

(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal temporary-goal3 300)
	(set-goal temporary-goal4 town-center)
	(set-goal temporary-goal5 1)
)

(defrule
	(death-match-game)
	(game-time > 10)
=>
	(set-goal temporary-goal4 relic)
	(set-strategic-number sn-focus-player-number 0)
	(set-goal temporary-goal5 0)
)

(defrule
	(up-set-target-by-id g: temporary-goal)
	(up-object-data object-data-type g:== temporary-goal4)
=>
	(up-get-point position-object gl-point-x)
)

(defrule
	(up-set-target-by-id g: temporary-goal)
	(up-object-data object-data-type g:== temporary-goal4)
	(or	(stance-toward focus-player ally); Includes itself
		(goal temporary-goal4 relic))
=>
	(up-full-reset-search)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 0)
	(up-find-remote g: temporary-goal4 c: 1)
)

(defrule
	(up-set-target-by-id g: temporary-goal)
	(up-object-data object-data-type g:== temporary-goal4)
	(or	(stance-toward focus-player ally); Includes itself
		(goal temporary-goal4 relic))
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-saved-point-x)
)

(defrule
	(up-set-target-by-id g: temporary-goal)
	(goal temporary-goal4 town-center)
	(up-object-data object-data-type == town-center)
	(player-valid focus-player)
	(up-point-distance gl-point-x gl-saved-point-x > 0); Not same point
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -3)
)

(defrule
	(up-set-target-by-id g: temporary-goal)
	(up-object-data object-data-type g:== temporary-goal4)
	(or	(not	(player-valid focus-player))
		(goal temporary-goal4 relic))
	(up-point-distance gl-point-x gl-saved-point-x > 0)
	(up-point-distance gl-position-self-x gl-point-x g:< temporary-goal3)
=>
	(up-get-point-distance gl-position-self-x gl-point-x temporary-goal3)
	(up-copy-point gl-temporary-point-x gl-point-x)
	(up-modify-goal temporary-goal7 g:= temporary-goal)
)

(defrule
	(up-compare-goal temporary-goal < 10000)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal5)
	(up-modify-goal temporary-goal c:+ 1)
	(up-jump-rule -6)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)

#load-if-defined DEATH-MATCH
(defrule
	(game-time == 0)
	(up-point-contains gl-temporary-point-x c: town-center)
=>
	(up-copy-point gl-enemy-position-x gl-temporary-point-x)
	(up-jump-rule 1)
)

(defrule
	(unit-type-count scout-unit > 0)
	(game-time <= 10)
	(up-point-contains gl-temporary-point-x c: town-center)
=>
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
	(up-reset-scouts)
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-id gl-starting-scout-id)
	(up-set-target-by-id g: temporary-goal7)
	(up-modify-goal gl-saved-id-goal g:= temporary-goal7)
	(up-target-objects 1 action-move -1 no-attack)
	(up-copy-point gl-enemy-position-x gl-temporary-point-x)
	(disable-self)
)

(defrule
	(game-time > 10)
	(up-point-contains gl-temporary-point-x c: relic)
=>
	(up-full-reset-search)
	(up-filter-exclude -1 -1 731 -1)
	(up-find-local c: monk c: 1)
	(up-set-target-by-id g: temporary-goal7)
	(up-target-objects 1 action-default -1 -1)
)
#else
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
	(up-copy-point gl-point-x gl-temporary-point-x)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal3)
	(up-modify-goal temporary-goal3 c:- 33)
	(set-goal temporary-goal 25)
	(set-goal temporary-goal4 25)
)

(defrule
	(nor	(up-point-contains gl-point-x c: wild-boar)
		(up-point-contains gl-point-x c: javelina))
	(up-compare-goal temporary-goal > 0)
=>
	(up-modify-goal temporary-goal c:- 1)
	(up-cross-tiles gl-point-x gl-position-self-x c: 1)
	(up-jump-rule -1)
)

(defrule
	(nor	(up-point-contains gl-point-x c: wild-boar)
		(up-point-contains gl-point-x c: javelina))
=>
	(up-copy-point gl-point-x gl-temporary-point-x)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal5)
)

(defrule
	(nor	(up-point-contains gl-point-x c: wild-boar)
		(up-point-contains gl-point-x c: javelina))
	(up-compare-goal temporary-goal4 > 0)
=>
	(up-modify-goal temporary-goal4 c:- 1)
	(up-cross-tiles gl-point-x gl-position-self-x c: -1)
	(up-jump-rule -1)
)

(defrule
	(nor	(up-point-contains gl-point-x c: wild-boar)
		(up-point-contains gl-point-x c: javelina))
	(up-compare-goal temporary-goal5 g:> temporary-goal3)
	(up-compare-goal temporary-goal5 > 25)
=>
	(up-lerp-tiles gl-temporary-point-x gl-position-self-x c: 1)
	(up-copy-point gl-point-x gl-temporary-point-x)
	(set-goal temporary-goal 25)
	(set-goal temporary-goal4 25)
	(up-jump-rule -4)
)

(defrule
	(up-compare-goal gl-boar-stealing <= 0)
	(unit-type-count scout-unit > 0)
	(or	(up-point-contains gl-point-x c: wild-boar)
		(up-point-contains gl-point-x c: javelina))
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-target-point gl-point-x action-move -1 no-attack)
	(enable-timer 13 80)
	(set-strategic-number sn-home-exploration-time 313)
	(disable-self)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
=>
	(up-set-target-by-id g: gl-stored-boar-id)
	(up-get-point position-object gl-object-point-x)
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-temporary-point-x)
	(up-copy-point gl-point2-x gl-temporary-point-x)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-copy-point gl-saved-point-x gl-position-self-x)
	(up-cross-tiles gl-temporary-point-x gl-point-x c: 3)
)

(defrule
	(up-compare-goal gl-stored-boar-id g:!= gl-lured-boar-id); Luring another boar - wait for it first
=>
	(up-jump-rule 2)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 2)
	(up-compare-goal gl-boar-hunting-stage >= 5)
	(up-set-target-by-id g: gl-stored-boar-id)
	(up-compare-const scout-unit == eagle-warrior-line)
	(or	(up-point-distance gl-temporary-point-x gl-object-point-x < 4)
		(up-compare-const gv-multiplayer-game == 1))
	(up-point-distance gl-temporary-point-x gl-object-point-x < 5)
	(up-point-distance gl-temporary-point-x gl-position-self-x < 6)
=>
	(up-find-local c: town-center c: 1)
	(up-set-target-object search-local c: 1)
	(up-target-objects 1 action-garrison -1 -1)
	(up-set-target-by-id g: gl-stored-boar-id)
	(up-jump-rule 2)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 2)
	(up-set-target-by-id g: gl-stored-boar-id)
	(or	(and	(up-object-data object-data-hitpoints < boar-hp1)
			(nand	(up-compare-goal gl-point2-x g:>= gl-position-self-x)
				(and	(up-compare-goal gl-point2-y g:<= gl-position-self-y)
					(up-compare-goal gl-boar-hunting-stage >= 5))))
		(and	(up-compare-const scout-unit == eagle-warrior-line)
			(up-point-distance gl-temporary-point-x gl-position-self-x < 10)))
	(up-point-distance gl-temporary-point-x gl-position-self-x < 12)
=>
	(up-target-point gl-position-self-x action-move -1 -1)
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 2)
=>
	(up-add-point gl-saved-point-x gl-temporary-point-x c: -1)
	(up-modify-goal gl-saved-point-x c:* 6)
	(up-modify-goal gl-saved-point-y c:* 6)
	(up-get-point-distance gl-point-x gl-temporary-point-x temporary-goal6)
	(up-modify-goal gl-saved-point-x g:/ temporary-goal6)
	(up-modify-goal gl-saved-point-y g:/ temporary-goal6)
	(up-modify-goal gl-point-x g:- gl-saved-point-x)
	(up-modify-goal gl-point-y g:- gl-saved-point-y)
	(up-target-point gl-point-x action-move -1 -1)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
=>
	(up-set-target-by-id g: gl-stored-boar-id)
	(up-get-point position-object gl-object-point-x)
	(up-get-point-distance gl-point2-x gl-object-point-x temporary-goal6)
	(up-get-point-distance gl-object-point-x gl-position-self-x temporary-goal7)
	(up-modify-goal temporary-goal7 c:+ 3)
	(up-copy-point gl-temporary-point-x gl-position-self-x)
	(up-full-reset-search)
	(up-modify-goal temporary-goal4 s:= sn-focus-player-number)
	(set-goal temporary-goal5 500)
	(set-goal temporary-goal8 0)
	(set-strategic-number sn-focus-player-number 1)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
	(stance-toward focus-player enemy)
	(up-find-remote c: town-center c: 1)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-saved-point-x)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
	(stance-toward focus-player enemy)
	(up-set-target-object search-remote c: 0)
	(up-point-distance gl-point2-x gl-saved-point-x g:< temporary-goal5)
=>
	(up-get-point-distance gl-point2-x gl-saved-point-x temporary-goal5)
	(up-copy-point gl-point-x gl-saved-point-x)
	(set-goal temporary-goal8 1)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-reset-search 0 0 0 1)
	(up-jump-rule -3)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal4)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
	(goal temporary-goal8 1)
	(up-point-distance gl-point2-x gl-point-x < 27)
	(up-point-distance gl-point-x gl-position-self-x g:< temporary-goal7)
=>
	(up-copy-point gl-temporary-point-x gl-point-x)
	(up-cross-tiles gl-point-x gl-position-self-x c: 30)
	(up-cross-tiles gl-temporary-point-x gl-position-self-x c: -30)
	(up-lerp-tiles gl-point-x gl-position-self-x c: 7)
	(up-lerp-tiles gl-temporary-point-x gl-position-self-x c: 7)
	(up-lerp-percent gl-point-x gl-position-self-x c: 30)
	(up-lerp-percent gl-temporary-point-x gl-position-self-x c: 30)
	(up-get-point-distance gl-temporary-point-x gl-point2-x temporary-goal5)
	(set-goal temporary-goal7 566456)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
	(goal temporary-goal7 566456)
	(up-point-distance gl-point-x gl-point2-x g:< temporary-goal5)
=>
	(up-copy-point gl-temporary-point-x gl-point-x)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
	(goal temporary-goal7 566456)
	(up-point-distance gl-temporary-point-x gl-point2-x < 12)
=>
	(up-lerp-tiles gl-temporary-point-x gl-position-self-x c: 15)
)

(defrule
	(or	(up-point-distance gl-object-point-x gl-position-self-x < 8)
		(or	(up-compare-goal gl-boar-stealing <= -1)
			(up-compare-goal gl-boar-stealing >= 2)))
=>
	(up-jump-rule 8)
)

(defrule
	(up-timer-status 29 != timer-running)
	(or	(goal threat-target infantry-class)
		(goal threat-target scout-cavalry-class))
	(up-compare-goal threat-time < 3000)
	(up-set-target-by-id g: gl-stored-boar-id)
	(up-object-data object-data-action == actionid-attack)
=>
	(enable-timer 29 0)
)

(defrule
	(not	(timer-triggered 29))
=>
	(up-jump-rule 5)
)

(defrule
	(up-compare-goal temporary-goal6 >= 0)
	(up-compare-goal temporary-goal6 < 3)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-point gl-temporary-point-x)
	(up-target-point 0 action-move -1 no-attack)
)

(defrule
	(up-compare-goal gl-scout-movement != 1)
	(up-timer-status 46 != timer-running)
	(up-compare-goal temporary-goal6 >= 3)
	(up-compare-goal temporary-goal6 < 7)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
)

(defrule
	(up-compare-goal gl-scout-movement != 1)
	(up-timer-status 46 != timer-running)
	(up-compare-goal temporary-goal6 >= 3)
	(up-compare-goal temporary-goal6 < 7)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-by-id g: gl-stored-boar-id)
	(up-get-point position-object gl-object-point-x)
	(up-lerp-tiles gl-object-point-x gl-point-x c: 4); 8
	(up-cross-tiles gl-object-point-x gl-point-x c: boar-tiles-to-left)
	(up-set-target-point gl-object-point-x)
	(up-target-point 0 action-move -1 no-attack)
	(enable-timer 46 1)
	(set-goal gl-scout-movement 1)
)

(defrule
	(up-compare-goal gl-scout-movement != 2)
	(up-timer-status 46 != timer-running)
	(up-compare-goal temporary-goal6 >= 3)
	(up-compare-goal temporary-goal6 < 7)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
)

(defrule
	(up-compare-goal gl-scout-movement != 2)
	(up-timer-status 46 != timer-running)
	(up-compare-goal temporary-goal6 >= 3)
	(up-compare-goal temporary-goal6 < 7)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-by-id g: gl-stored-boar-id)
	(up-get-point position-object gl-object-point-x)
	(up-lerp-tiles gl-object-point-x gl-point-x c: 4)
	(up-cross-tiles gl-object-point-x gl-point-x c: boar-tiles-to-right)
	(up-set-target-point gl-object-point-x)
	(up-target-point 0 action-move -1 no-attack)
	(enable-timer 46 1)
	(set-goal gl-scout-movement 2)
)

(defrule
	(up-set-target-by-id g: gl-stored-boar-id)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-target-objects 1 action-default -1 aggressive)
	(disable-timer 46)
	(disable-timer 29)
	(enable-timer 12 boar-wait-time)
	(disable-self)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-saved-point-x)
	(up-set-target-point gl-saved-point-x)
	(up-filter-distance c: -1 c: 4)
	(up-reset-search 0 1 0 0)
	(up-find-local c: wall-class c: 1)
	(up-get-search-state gl-local-total)
	(up-set-target-by-id g: gl-stored-boar-id)
	(up-get-point position-object gl-object-point-x)
	(up-get-point-distance gl-saved-point-x gl-object-point-x temporary-goal6)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
	(up-compare-goal temporary-goal6 < 6)
	(goal gl-local-last 1)
=>
	(up-target-point 0 action-delete -1 -1)
	(disable-self)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
=>
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
	(set-strategic-number sn-home-exploration-time 0)
	(up-reset-scouts)
	(up-get-point-distance gl-position-self-x gl-object-point-x temporary-goal7)
	(up-modify-goal temporary-goal5 g:= gl-target-player-distance)
	(up-modify-goal temporary-goal5 c:+ 2)
)

(defrule
	(goal gl-boar-stealing 1)
	(up-compare-goal temporary-goal7 >= 0)
	(up-compare-goal temporary-goal7 < 18)
=>
	(set-goal gl-boar-hunting-stage 7)
	(disable-self)
)

(defrule
	(goal gl-boar-stealing 1)
	(up-compare-goal temporary-goal7 >= 0)
	(up-compare-goal temporary-goal7 < 13)
=>
	(set-goal gl-boar-stealing 2)
	(disable-self)
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
	(or	(up-object-data object-data-hitpoints == 0)
		(or	(unit-type-count scout-unit == 0)
			(or	(and	(up-object-data object-data-action != actionid-attack)
					(timer-triggered 12))
				(game-time > 800))))
=>
	(set-goal gl-boar-stealing -2)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(disable-timer 46)
	(chat-to-player my-player-number "Give up with boar stealing1")
)

(defrule
	(up-compare-goal gl-boar-stealing >= 1)
	(or	(and	(map-type arena)
			(up-compare-goal temporary-goal5 g:< temporary-goal7))
		(or	(up-object-data object-data-class != boar-food)
			(or	(not	(up-set-target-by-id g: gl-stored-boar-id))
				(up-object-data object-data-hitpoints == 0))))
=>
	(set-goal gl-boar-stealing -2)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(disable-timer 46)
	(chat-to-player my-player-number "Give up with boar stealing2")
)

(defrule
	(or	(and	(up-compare-const gv-islands == 1)
			(up-timer-status 12 == timer-running))
		(or	(unit-type-count scout-unit == 0)
			(or	(game-time < 2)
				(or	(up-compare-goal gl-boar-stealing > 0)
					(or	(game-time >= 600)
						(or	(up-compare-const gv-rivers-style == 1)
							(up-compare-goal gl-interfered-scout > 0)))))))
=>
	(up-jump-rule 9)
)

(defrule
	(goal gl-DRUSH YES)
	(or	(up-compare-goal gl-target-player-distance > 90)
		(players-building-count target-player < 1))
	(game-time >= 330)
=>
	(up-jump-rule 8)
)

(defrule
	(up-compare-goal gl-boar-stealing <= -1)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-set-target-point gl-position-self-x)
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-filter-distance c: min-boar-distance c: max-boar-distance); 36/110 on most maps
	(up-filter-exclude -1 actionid-attack -1 -1)
)

(defrule
	(up-compare-goal gl-boar-stealing <= -1)
=>
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: food c: 240)
	(up-remove-objects search-remote object-data-base-attack < 5)
	(up-remove-objects search-remote object-data-carry < 200)
	(up-remove-objects search-remote object-data-index > 0)
	(up-remove-objects search-remote object-data-hitpoints >= 100)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-saved-point-x)
	(up-get-object-data object-data-id temporary-goal2)
	(up-get-search-state gl-local-total)
)

(defrule
	(goal gl-remote-total 1)
=>
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-hitpoints temporary-goal4)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal temporary-goal3 300)
)

(defrule
	(goal gl-remote-total 1)
	(stance-toward focus-player ally); Includes itself
	(nand	(up-compare-const min-boar-distance == -1)
		(strategic-number sn-focus-player-number == my-player-number))
=>
	(up-full-reset-search)
	(up-find-remote c: town-center c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-object-point-x)
)

(defrule
	(goal gl-remote-total 1)
	(up-point-distance gl-object-point-x gl-saved-point-x g:< temporary-goal3)
=>
	(up-get-point-distance gl-object-point-x gl-saved-point-x temporary-goal3)
)

(defrule
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -3)
)

(defrule
	(up-compare-goal temporary-goal4 > 34); HP >= 35
	(unit-type-count villager-food > 4)
	(up-compare-goal temporary-goal3 > 35); >35 tiles from closest ally
	(up-point-distance gl-point-x gl-saved-point-x < 25)
	(goal gl-remote-total 1)
=>
	(up-modify-goal gl-stored-boar-id g:= temporary-goal2)
	(set-goal gl-boar-stealing 1)
	(set-goal gl-early-scout-time -1)
	(chat-to-player my-player-number "A boar found!")
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
	(set-strategic-number sn-home-exploration-time 0)
	(up-reset-scouts)
	(up-reset-unit c: scout-unit)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(disable-self)
)

(defrule
	(up-compare-goal gl-boar-stealing <= -1)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(enable-timer 12 3)
)

#end-if
#end-if

; ============== REYNALD IS ATTACKING OUR CARAVAN

(defrule
	(or	(up-timer-status 9 == timer-running)
		(or	(map-type migration)
			(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
				(or	(building-type-count market == 0)
					(or	(players-building-type-count every-ally market == 0)
						(or	(goal gl-trade-unit-count-total 0)
							(and	(game-time < 1200)
								(up-compare-goal gl-boar-stealing > 0))))))))
=>
	(up-jump-rule 22)
)

(defrule
	(true)
=>
	(set-strategic-number sn-preferred-trade-distance gv-preferred-trade-distance)
)

(defrule
	(or	(unit-type-count-total dead-cart1 >= 5)
		(or	(unit-type-count-total dead-cart2 >= 5)
			(or	(and	(unit-type-count-total dead-cart1 >= 2)
					(unit-type-count-total dead-cart2 >= 3))
				(and	(unit-type-count-total dead-cart1 >= 3)
					(unit-type-count-total dead-cart2 >= 2)))))
	(unit-type-count-total trade-cart < 20)
=>
	(set-strategic-number sn-preferred-trade-distance 120)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(up-full-reset-search)
	(up-find-local c: market c: 10)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal5 500)
	(set-goal temporary-goal7 500)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-modify-goal gl-temporary-point-x g:= gl-target-market)
	(up-modify-goal gl-temporary-point-y g:= gl-dropsite-market)
	(set-goal gl-target-market -1)
	(set-goal gl-dropsite-market -1)
)

(defrule
	(stance-toward focus-player ally)
	(strategic-number sn-focus-player-number != my-player-number)
=>
	(up-find-remote c: market c: 10)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-saved-point-x)
)

(defrule
	(stance-toward focus-player ally)
	(strategic-number sn-focus-player-number != my-player-number)
	(up-set-target-object search-local g: temporary-goal2)
	(up-set-target-object search-remote g: temporary-goal3)
=>
	(up-get-point-distance gl-point-x gl-saved-point-x temporary-goal5)
	(up-modify-goal temporary-goal5 c:- gv-preferred-trade-distance)
	(up-modify-goal temporary-goal6 g:= temporary-goal5)
	(up-modify-goal temporary-goal6 c:* -1)
	(up-modify-goal temporary-goal5 g:max temporary-goal6)
;	(up-chat-data-to-all "Distance to optimum: %d" g: temporary-goal5)
)

(defrule
	(up-compare-goal temporary-goal5 g:< temporary-goal7)
	(up-point-distance gl-point-x gl-saved-point-x > 30)
=>
	(up-copy-point gl-object-point-x gl-point-x)
	(up-modify-goal temporary-goal8 s:= sn-focus-player-number)
	(up-reset-search 0 0 1 1)
	(up-reset-filters)
	(up-filter-exclude -1 -1 -1 farm-class)
	(set-strategic-number sn-focus-player-number 1)
	(up-set-target-point gl-object-point-x)
	(up-filter-distance c: -1 c: 25)
	(set-goal gl-remote-total 0)
)

(defrule
	(up-compare-goal temporary-goal5 g:< temporary-goal7)
	(up-point-distance gl-point-x gl-saved-point-x > 30)
	(or	(stance-toward focus-player ally)
		(strategic-number sn-focus-player-number == my-player-number))
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -1)
)

(defrule
	(up-compare-goal temporary-goal5 g:< temporary-goal7)
	(or	(and	(game-time g:< gl-enemy-notice-time)
			(up-point-distance gl-object-point-x gl-enemy-notice-point-x < 25))
		(and	(not	(stance-toward focus-player ally))
			(and	(up-find-remote c: castle c: 1)
				(up-point-distance gl-object-point-x gl-saved-point-x > 8))))
			
=>
	(set-goal gl-remote-total 10)
	(up-get-fact game-time 0 gl-remote-last)
	(up-modify-goal gl-remote-last c:+ 1)
	(up-modify-goal gl-enemy-notice-time g:max gl-remote-last)
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal temporary-goal5 g:< temporary-goal7)
	(up-point-distance gl-point-x gl-saved-point-x > 30)
	(up-compare-goal gl-remote-total < 10)
	(not	(stance-toward focus-player ally))
	(strategic-number sn-focus-player-number != my-player-number)
	(up-point-distance gl-object-point-x gl-saved-point-x > 8)
	(up-point-distance gl-object-point-x gl-position-center-x >= min-distance-to-center)
=>
	(up-set-target-point gl-object-point-x)
	(up-filter-distance c: -1 c: 25)
	(up-find-remote c: -1 c: 10)
	(up-lerp-tiles gl-object-point-x gl-saved-point-x c: 10)
	(up-get-search-state gl-local-total)
;	(up-chat-data-to-all "Remote: %d" g: gl-remote-total)
	(up-jump-rule -2)
)

(defrule
	(up-compare-goal temporary-goal5 g:< temporary-goal7)
	(up-point-distance gl-point-x gl-saved-point-x > 30)
	(up-compare-goal gl-remote-total < 10)
	(up-point-distance gl-object-point-x gl-saved-point-x <= 8)
	(up-point-distance gl-object-point-x gl-position-center-x >= min-distance-to-center)
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-copy-point gl-object-point-x gl-point-x)
	(up-jump-rule -4)
)

(defrule
	(up-compare-goal temporary-goal5 g:< temporary-goal7)
	(up-point-distance gl-point-x gl-saved-point-x > 30)
	(game-time g:>= gl-enemy-notice-time)
	(up-compare-goal gl-remote-total >= 10)
=>
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-enemy-notice-point-x)
	(up-get-fact game-time 0 gl-enemy-notice-time)
	(up-modify-goal gl-enemy-notice-time c:+ 50)
)

(defrule
	(up-compare-goal temporary-goal5 g:< temporary-goal7)
	(up-point-distance gl-point-x gl-saved-point-x > 30)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal8)
)

(defrule
	(stance-toward focus-player ally)
	(strategic-number sn-focus-player-number != my-player-number)
=>
	(up-reset-search 0 0 1 1)
	(up-reset-filters)
	(up-find-remote c: market c: 10)
)

(defrule
	(up-compare-goal temporary-goal5 g:< temporary-goal7)
	(up-point-distance gl-point-x gl-saved-point-x > 30)
	(up-compare-goal gl-remote-total < 10)
	(up-point-distance gl-object-point-x gl-saved-point-x <= 6)
	(up-point-distance gl-object-point-x gl-position-center-x >= min-distance-to-center)
=>
	(up-modify-goal temporary-goal7 g:= temporary-goal5)
	(up-set-target-object search-remote g: temporary-goal3)
	(up-get-object-data object-data-id gl-target-market)
	(up-get-point position-object gl-point2-x)
	(up-set-target-object search-local g: temporary-goal2)
;	(up-get-point position-object gl-point4-x)
	(up-get-object-data object-data-id gl-dropsite-market)
	(up-get-point-distance gl-point-x gl-saved-point-x temporary-goal4)
	(up-modify-sn sn-preferred-trade-distance g:= temporary-goal4)
;	(up-chat-data-to-all "Record: %d" g: temporary-goal5)
)

(defrule
	(stance-toward focus-player ally)
	(strategic-number sn-focus-player-number != my-player-number)
	(up-set-target-object search-local g: temporary-goal2)
	(up-set-target-object search-remote g: temporary-goal3)
=>
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-set-target-object search-remote g: temporary-goal3)
	(up-get-point position-object gl-saved-point-x)
	(set-goal temporary-goal5 500)
	(up-jump-rule -11)
)

(defrule
	(stance-toward focus-player ally)
	(strategic-number sn-focus-player-number != my-player-number)
	(up-set-target-object search-local g: temporary-goal2)
	(not	(up-set-target-object search-remote g: temporary-goal3))
=>
	(up-modify-goal temporary-goal2 c:+ 1)
	(set-goal temporary-goal3 0)
	(up-set-target-object search-local g: temporary-goal2)
	(up-get-point position-object gl-point-x)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-saved-point-x)
	(set-goal temporary-goal5 500)
	(up-jump-rule -12)
)

(defrule
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-reset-search 0 0 1 1)
	(up-reset-filters)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal5 500)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-jump-rule -14)
)

(defrule
	(true)
=>
;	(up-send-flare gl-point2-x)
;	(up-send-flare gl-point4-x)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(up-compare-goal temporary-goal7 < 500)
=>
	(up-full-reset-search)
	(up-find-local c: trade-cart c: 1)
	(up-set-target-object search-local c: 0)
)

(defrule
	(up-compare-goal temporary-goal7 < 500)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry == 0)
	(up-object-data object-data-target-id g:!= gl-target-market)
	(up-set-target-by-id g: gl-target-market)
	(up-object-data object-data-type == market)
=>
	(up-target-objects 1 action-default -1 -1)
)

(defrule
	(up-compare-goal temporary-goal7 < 500)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry > 0)
	(up-set-target-by-id g: gl-dropsite-market)
	(up-object-data object-data-type == market)
	(up-compare-goal gl-temporary-point-y g:!= gl-dropsite-market)
=>
	(up-target-objects 1 action-default -1 -1)
)

(defrule
	(up-compare-goal temporary-goal7 < 500)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 0 1 0 0)
	(up-find-local c: trade-cart c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-object-point-x)
	(up-jump-rule -3)
)


; ============== WOLF RUNS INTO TC

#load-if-not-defined DEATH-MATCH

(defrule
	(or	(game-time > 900)
		(and	(current-age >= castle-age)
			(current-age-time > 150)))
	(up-compare-goal gl-TC-garrisoning <= 0)
=>
	(up-jump-rule 6)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 8)
	(up-find-remote c: wolf c: 1)
	(up-find-remote c: jaguar c: 1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(set-strategic-number sn-maximum-wood-drop-distance -1)
)

(defrule
	(goal gl-TC-garrisoning wolf-stage2)
	(not	(up-set-target-object search-remote c: 0))
=>
	(up-full-reset-search)
	(up-add-object-by-id search-local g: gl-main-tc-id)
	(up-target-point 0 action-work -1 -1)
	(set-goal gl-TC-garrisoning -1)
)

(defrule
	(goal gl-TC-garrisoning -1)
	(up-set-target-object search-remote c: 0)
=>
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-reset-search 0 0 1 1)
	(up-find-remote c: town-center c: 1)
	(set-goal gl-TC-garrisoning wolf-stage1)
	(set-goal temporary-goal2 0)
	(up-find-local c: villager-class c: 1)
;	(chat-to-player my-player-number "Get rid of the wolf.")
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(goal gl-TC-garrisoning wolf-stage1)
	(up-set-target-object search-remote c: 0)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:!= gl-boar-lurer-id)
=>
	(up-target-objects 0 action-garrison -1 -1)
	(up-modify-goal temporary-goal2 c:+ 1)
)

(defrule
	(goal gl-TC-garrisoning wolf-stage1)
	(up-compare-goal temporary-goal2 < 5)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 0 1 0 0)
	(up-find-local c: villager-class c: 1)
	(up-jump-rule -2)
)

(defrule
	(goal gl-TC-garrisoning wolf-stage1)
=>
	(set-goal gl-TC-garrisoning wolf-stage2)
)

; ============== ENEMY SCOUT RUNS INTO TC

(defrule
	(or	(game-time > 1200)
		(or	(up-compare-goal gl-boar-stealing > 0)
			(or	(and	(current-age >= castle-age)
					(current-age-time > 150))
				(or	(and	(goal gl-enemy-units-in-town 0)
						(up-enemy-villagers-in-town == 0))
					(dropsite-min-distance live-boar < 12)))))
	(up-compare-goal gl-TC-garrisoning <= 0)
=>
	(up-jump-rule 10)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-modify-goal gl-point-x c:- 1)
	(up-copy-point gl-saved-point-x gl-position-self-x)
	(up-modify-goal gl-saved-point-y c:- 1)
	(up-copy-point gl-object-point-x gl-position-self-x)
	(up-modify-goal gl-object-point-x c:- 1)
	(up-modify-goal gl-object-point-y c:- 1)
	(up-set-target-point gl-position-self-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 5)
	(up-filter-include cmdid-military -1 -1 -1)
)

(defrule
	(goal gl-TC-garrisoning shoot-stage2)
=>
	(up-modify-sn sn-focus-player-number g:= gl-saved-focus-player)
)

(defrule
	(stance-toward focus-player enemy)
=>
	(up-find-remote c: all-units-class c: 1)
	(up-set-target-point gl-point-x)
	(up-find-remote c: all-units-class c: 1)
	(up-set-target-point gl-saved-point-x)
	(up-find-remote c: all-units-class c: 1)
	(up-set-target-point gl-object-point-x)
	(up-find-remote c: all-units-class c: 1)
	(up-get-search-state gl-local-total)
	(up-filter-distance c: -1 c: 8)
	(up-find-remote c: all-units-class c: 1)
	(up-filter-include -1 -1 -1 -1)
	(up-get-point position-object gl-temporary-point-x)
	(up-filter-distance c: -1 c: 7)
)

(defrule
	(stance-toward focus-player enemy)
	(up-set-target-object search-remote c: 0)
	(up-object-data object-data-order == -1)
	(or	(up-point-distance gl-temporary-point-x gl-position-self-x <= 6)
		(or	(up-point-distance gl-temporary-point-x gl-point-x <= 6)
			(or	(up-point-distance gl-temporary-point-x gl-saved-point-x <= 6)
				(up-point-distance gl-temporary-point-x gl-temporary-point-x <= 6))))
	(goal gl-remote-total 0)
=>
	(set-goal gl-remote-total 1)
)

(defrule
	(goal gl-TC-garrisoning shoot-stage2)
	(not	(up-find-remote c: villager-class c: 1))
	(goal gl-remote-total 0)
=>
	(up-full-reset-search)
	(up-add-object-by-id search-local g: gl-main-tc-id)
	(up-target-point 0 action-work -1 -1)
	(set-goal gl-TC-garrisoning -1)
	(up-jump-rule 4)
)

(defrule
	(goal gl-TC-garrisoning -1)
	(up-set-target-object search-remote c: 0)
	(up-object-data object-data-hitpoints < 66)
	(stance-toward focus-player enemy)
	(or	(up-compare-const gv-FFA-like-game == 0)
		(player-human focus-player)); Shooting every AI's scout will waste time
	(up-compare-goal gl-remote-total > 0)
=>
	(set-goal gl-TC-garrisoning shoot-stage1)
)

(defrule
	(goal gl-TC-garrisoning -1)
	(stance-toward focus-player enemy)
	(or	(strategic-number sn-nomad-style-start == 0)
		(or	(player-human focus-player)
			(or	(game-time > 900)
				(current-age >= feudal-age))))
	(up-find-remote c: villager-class c: 1)
=>
	(set-goal gl-TC-garrisoning shoot-stage1)
)

(defrule
	(up-find-local c: villager-class c: 1)
	(goal gl-TC-garrisoning shoot-stage1)
=>
	(up-modify-goal gl-saved-focus-player s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number c:= my-player-number)
	(up-reset-search 1 1 1 1)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 2)
	(up-reset-search 0 1 0 0)
	(up-find-local c: villager-class c: 10)
	(up-get-search-state gl-local-total)
	(up-find-remote c: town-center c: 1)
	(up-target-objects 0 action-garrison -1 -1)
;	(up-chat-data-to-player my-player-number "Garrisoning %d villagers" g: gl-local-last)
	(set-goal gl-TC-garrisoning shoot-stage2)
)

(defrule
	(goal gl-TC-garrisoning -1)
	(player-valid focus-player)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 5)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-jump-rule -7)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

#end-if

; ============== MONK MICRO

#load-if-not-defined KING-OF-THE-HILL
(defrule
	(or	(goal gl-defending-ally YES)
		(or	(goal gl-attacking-with-ally YES)
			(or	(goal TSA 0)
				(or	(unit-type-count monastery-class == 0)
					(or	(and	(up-research-status c: ri-theocracy != research-complete)
							(game-time < 2400))
						(up-timer-status 9 == timer-running))))))
=>
	(up-jump-rule 2)
)

(defrule
	(research-completed ri-redemption)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(players-building-count target-player > 0)
	(up-timer-status 46 != timer-running)
=>
	(up-full-reset-search)
	(up-get-point position-target gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: 4 c: -1)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-filter-exclude -1 -1 731 -1)
	(up-find-local c: monastery-class c: 240)
	(up-target-point gl-point-x action-patrol -1 -1)
	(enable-timer 46 43)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(players-building-count target-player > 0)
	(up-timer-status 46 != timer-running)
=>
	(up-full-reset-search)
	(up-get-point position-target gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: 4 c: -1)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-filter-exclude -1 actionid-convert 731 -1)
	(up-find-local c: monastery-class c: 240)
	(up-target-point gl-point-x action-patrol -1 -1)
	(enable-timer 46 43)
)

; ============== EXPLORING AROUND THE ENEMY TC

#load-if-not-defined DEATH-MATCH
(defrule
	(or	(and	(game-time > 1200)
			(game-time g:>= gl-circle-scouting-time))
		(or	(up-compare-goal gl-villager-laming != -1)
			(or	(up-compare-goal gl-dodging-TC != -1)
				(or	(up-compare-goal gl-deer-luring > 0)
					(or	(up-compare-goal gl-boar-stealing > 0)
						(or	(game-time == 0)
							(up-compare-goal gl-interfered-scout > 0)))))))
=>
	(up-jump-rule 16)
)

(defrule
	(or	(up-compare-goal POSITION != FLANK)
		(or	(and	(game-time g:>= gl-early-scout-time)
				(game-time s:< sn-home-exploration-time))
			(or	(map-type gold-rush)
				(or	(and	(goal gl-circle-scouting-time -1)
						(up-timer-status 15 == timer-running))
					(and	(up-compare-goal gl-target-player-distance < 110)
						(players-building-count any-enemy > 0))))))
=>
	(up-jump-rule 7)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-full-reset-search)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-strategic-number sn-focus-player-number 0)
)

(defrule
	(up-find-remote c: gold-mine c: 1)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 3)
	(up-find-remote c: gold-mine c: 5); 7
	(up-get-search-state gl-local-total)
	(set-goal temporary-goal3 1)
)

(defrule
	(goal temporary-goal3 1)
	(goal gl-remote-total 5); 7
	(up-point-distance gl-point-x gl-position-self-x > 35)
	(up-point-distance gl-point-x gl-position-center-x > 25)
	(up-compare-goal gl-early-scout-time > 0)
=>
	(up-modify-goal gl-early-scout-time c:+ 10)
	(disable-self)
)

(defrule
	(goal temporary-goal3 1)
	(goal gl-remote-total 5); 7
	(up-point-distance gl-point-x gl-position-self-x > 35)
	(up-point-distance gl-point-x gl-position-center-x > 25)
=>
	(up-get-fact game-time 0 gl-circle-scouting-time)
	(up-modify-goal gl-circle-scouting-time c:+ 45)
	(up-reset-search 1 1 0 0)
	(up-reset-filters)
	(up-find-local c: scout-unit c: 1)
	(up-get-search-state gl-local-total)
	(set-goal gl-remote-total 1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(set-goal temporary-goal7 9)
	(up-jump-rule 8)
	(disable-self)
)

(defrule
	(goal temporary-goal3 1)
	(goal gl-remote-total 5); 7
	(up-point-distance gl-point-x gl-position-self-x > 35)
	(up-point-distance gl-point-x gl-position-center-x > 30)
=>
	(up-reset-search 1 1 0 0)
	(up-reset-filters)
	(up-find-local c: scout-unit c: 1)
	(up-get-search-state gl-local-total)
	(set-goal gl-remote-total 1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(set-goal temporary-goal7 11)
	(up-jump-rule 7)
)

(defrule
	(goal temporary-goal3 1)
=>
	(set-goal temporary-goal3 0)
	(up-full-reset-search)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-find-remote c: gold-mine g: temporary-goal2)
	(up-reset-search 0 0 0 1)
	(up-jump-rule -4)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(true)
=>
	(set-goal temporary-goal7 14)
)

(defrule
	(or	(and	(game-time s:< sn-home-exploration-time)
			(game-time g:>= gl-early-scout-time))
		(and	(up-compare-goal gl-target-player-distance >= 110)
			(or	(up-compare-goal gl-target-player-distance >= 130)
				(up-compare-goal gl-DRUSH != YES))))
=>
	(up-jump-rule 6)
)

(defrule
	(or	(up-compare-const gv-pocket-position == 0)
		(up-compare-goal gl-new-scouting-style != 1))
	(or	(up-compare-goal gl-strategy != scrush)
		(up-compare-goal gl-current-age <= gv-dark-up))
	(up-timer-status 13 != timer-running)
	(up-compare-goal gl-villager-laming <= -1)
	(players-building-type-count target-player town-center > 0)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-compare-goal gl-early-scout-time > 0)
=>
	(up-modify-goal gl-early-scout-time c:+ 10)
	(disable-self)
)

(defrule
	(or	(up-compare-const gv-pocket-position == 0)
		(up-compare-goal gl-new-scouting-style != 1))
	(or	(up-compare-goal gl-strategy != scrush)
		(up-compare-goal gl-current-age <= gv-dark-up))
	(up-timer-status 13 != timer-running)
	(up-compare-goal gl-villager-laming <= -1)
	(players-building-type-count target-player town-center > 0)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
=>
	(up-get-fact game-time 0 gl-circle-scouting-time)
	(up-modify-goal gl-circle-scouting-time c:+ 75)
	(up-get-fact current-age 0 temporary-goal)
	(up-modify-goal temporary-goal c:* 10)
	(up-modify-goal gl-circle-scouting-time g:- temporary-goal)
	(disable-self)
)

(defrule
	(up-compare-goal gl-circle-scouting-time > 0)
	(game-time g:< gl-circle-scouting-time)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-find-remote c: town-center c: 1)
	(up-get-search-state gl-local-total)
)

(defrule
	(up-compare-goal gl-circle-scouting-time > 0)
	(game-time g:< gl-circle-scouting-time)
	(goal gl-local-total 1)
	(goal gl-remote-total 1)
=>
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-saved-point-x)
	(up-get-point-distance gl-point-x gl-saved-point-x temporary-goal2)
	(up-modify-goal temporary-goal2 g:- temporary-goal7)
	(up-lerp-tiles gl-saved-point-x gl-point-x g: temporary-goal2)
	(up-cross-tiles gl-saved-point-x gl-point-x c: 5)
)

(defrule
	(up-compare-goal gl-circle-scouting-time > 0)
	(game-time g:< gl-circle-scouting-time)
	(game-time < 1100)
	(goal gl-local-total 1)
	(goal gl-remote-total 1)
	(up-point-distance gl-saved-point-x gl-point-x > 35); We're really far from the enemy
=>
	(up-get-fact game-time 0 gl-circle-scouting-time)
	(up-modify-goal gl-circle-scouting-time c:+ 75)
	(up-get-fact current-age 0 temporary-goal)
	(up-modify-goal temporary-goal c:* 10)
	(up-modify-goal gl-circle-scouting-time g:- temporary-goal)
)

(defrule
	(up-timer-status 13 != timer-running)
	(up-compare-goal gl-villager-laming <= -1)
	(up-compare-goal gl-circle-scouting-time > 0)
	(game-time g:< gl-circle-scouting-time)
	(goal gl-local-total 1)
	(goal gl-remote-total 1)
	(up-compare-goal gl-saved-point-x > -1)
	(up-compare-goal gl-saved-point-y > -1)
	(up-compare-goal gl-saved-point-x g:< gl-max-coordinate-value)
	(up-compare-goal gl-saved-point-y g:< gl-max-coordinate-value)
=>
	(up-target-point gl-saved-point-x action-default -1 no-attack)
)

; ============== SCOUT FIGHT

(defrule
	(or	(game-time > 1200)
		(or	(up-compare-goal gl-boar-stealing > 0)
			(or	(up-compare-goal gl-dodging-TC > 0)
				(or	(up-compare-goal gl-villager-laming > 0)
					(game-time == 0)))))
=>
	(up-jump-rule 31)
)

(defrule
	(true)
=>
	(set-goal gl-point3-y -1)
)

(defrule
	(true)
=>
	(up-modify-goal gl-point2-x s:= sn-focus-player-number)
	(set-goal gl-point2-y 0)
	(set-goal gl-point3-x 0)
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-base-attack gl-temporary-point-x)
	(up-get-object-data object-data-hitpoints gl-saved-point-x)
	(up-modify-goal gl-saved-point-y g:= gl-saved-point-x)
	(up-modify-goal gl-saved-point-y c:/ 2)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 6)
	(set-strategic-number sn-focus-player-number 1)
)

(defrule
	(goal gl-scout-target-id -2)
=>
	(up-jump-rule 10)
)

(defrule
	(up-set-target-by-id g: gl-scout-target-id)
	(up-set-target-object search-local c: 0)
	(up-compare-goal gl-interfered-scout > 0)
=>
	(up-get-object-data object-data-id temporary-goal2)
	(up-modify-goal gl-point3-y g:= gl-scout-target-id)
	(up-modify-goal gl-saved-point-x c:+ 4)
	(up-modify-goal gl-saved-point-y c:+ 2)
	(up-modify-goal gl-temporary-point-y g:= gl-saved-point-x)
	(up-modify-goal gl-temporary-point-y c:* 6)
	(up-modify-goal gl-temporary-point-y c:/ 5)
	(up-get-object-data object-data-speed temporary-goal)
	(up-set-target-by-id g: gl-scout-target-id)
	(up-get-point position-object gl-object-point-x)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal gl-point3-x 1)
	(up-jump-rule 3)
)

(defrule
	(stance-toward focus-player enemy)
	(up-set-target-object search-local c: 0)
=>
	(up-get-object-data object-data-id temporary-goal2)
	(set-goal gl-point3-y -1)
	(up-find-remote c: scout-cavalry-line c: 1)
	(up-find-remote c: eagle-warrior-line c: 1)
)

(defrule
	(stance-toward focus-player enemy)
	(up-set-target-object search-local c: 0)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-object-data object-data-id gl-point3-y)
	(up-modify-goal gl-temporary-point-y g:= gl-saved-point-x)
	(up-modify-goal gl-temporary-point-y c:* 6)
	(up-modify-goal gl-temporary-point-y c:/ 5)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal gl-point3-x 1)
	(up-jump-rule 1)
;	(chat-to-all "found")
)

(defrule
	(up-set-target-object search-local c: 0)
	(not	(up-set-target-object search-remote c: 0))
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -3)
)

(defrule
	(goal gl-point3-x 1)
	(stance-toward focus-player enemy)
=>
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 9)
	(up-find-remote c: villager-class c: 2)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-remote c: all-units-class c: 2)
	(up-get-search-state gl-local-total)
	(up-modify-goal gl-point2-y g:max gl-remote-total)
)

(defrule
	(goal gl-point3-x 1)
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2)
)

(defrule
	(up-set-target-by-id g: gl-point3-y)
	(up-object-data object-data-hitpoints g:<= gl-temporary-point-y)
	(or	(up-object-data object-data-hitpoints g:<= gl-saved-point-x)
		(up-object-data object-data-base-attack g:< gl-temporary-point-x))
	(or	(up-object-data object-data-base-attack g:<= gl-temporary-point-x)
		(up-object-data object-data-hitpoints g:<= gl-saved-point-y))
;	(up-compare-goal gl-interfered-scout > 0)
	(up-compare-goal gl-point2-y < 2)
=>
	(set-goal gl-point3-x 2)
;	(chat-to-all "stuff is good")
)

(defrule
	(goal gl-point3-x 2)
	(up-compare-goal gl-scout-target-id != -2)
	(up-compare-goal gl-interfered-scout > 0)
	(up-set-target-by-id g: gl-scout-target-id)
	(game-time g:< gl-interfered-scout)
	(or	(up-object-data object-data-speed g:< temporary-goal)
		(up-object-data object-data-target-id g:== temporary-goal2))
	(up-point-distance gl-object-point-x gl-point-x < 5)
=>
	(up-get-fact game-time 0 gl-interfered-scout)
	(up-modify-goal gl-interfered-scout c:+ 10)
;	(up-chat-data-to-all "Me: %d" g: temporary-goal2)
;	(up-chat-data-to-all "Ta: %d" g: gl-scout-target-id)
;	(chat-to-all "inc.")
)

(defrule
	(goal gl-point3-x 2)
	(up-compare-goal gl-scout-target-id != -2)
	(up-set-target-by-id g: gl-scout-target-id)
	(up-compare-goal gl-interfered-scout > 0)
	(game-time g:> gl-interfered-scout)
	(up-object-data object-data-speed g:>= temporary-goal)
=>
	(set-goal gl-point3-x 1)
	(set-goal gl-scout-target-id -1)
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-target-point gl-position-self-x action-stop -1 no-attack)
;	(chat-to-all "stop chasing")
	(up-jump-rule 2)
)

(defrule
	(goal gl-point3-x 1)
	(up-compare-goal gl-scout-target-id != -2)
	(up-set-target-by-id g: gl-scout-target-id)
	(up-set-target-by-id g: gl-point3-y)
	(up-object-data object-data-hitpoints g:<= gl-temporary-point-y)
	(or	(up-object-data object-data-hitpoints g:<= gl-saved-point-x)
		(up-object-data object-data-base-attack g:< gl-temporary-point-x))
	(or	(up-object-data object-data-base-attack g:<= gl-temporary-point-x)
		(up-object-data object-data-hitpoints g:<= gl-saved-point-y))
	(up-compare-goal gl-interfered-scout < 0)
=>
	(set-goal gl-point3-x 2)
;	(chat-to-all "stuff is good2")
)

(defrule
	(or	(and	(up-compare-goal gl-interfered-scout > 0)
			(up-compare-goal gl-scout-target-id != -2))
		(and	(strategic-number sn-number-explore-groups > 0)
			(up-object-data object-data-target-id g:== temporary-goal2)))
	(goal gl-point3-x 1)
=>
	(set-goal gl-interfered-scout 1); Rules below will trigger
	(set-goal gl-scout-target-id -1)
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-target-point gl-position-self-x action-move -1 no-attack)
;	(chat-to-all "go home")
)

(defrule
	(up-compare-goal gl-interfered-scout > 0)
	(up-compare-goal gl-scout-target-id != -2)
	(or	(and	(game-time g:> gl-interfered-scout)
			(up-point-distance gl-object-point-x gl-point-x > 4))
		(or	(goal gl-point3-x 1)
			(not	(up-set-target-by-id g: gl-scout-target-id))))
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(up-set-attack-stance scout-unit c: no-attack)
;	(chat-to-all "pre-res")
)

(defrule
	(up-compare-goal gl-interfered-scout > 0)
	(up-compare-goal gl-scout-target-id != -2)
	(or	(and	(game-time g:> gl-interfered-scout)
			(up-point-distance gl-object-point-x gl-point-x > 4))
		(or	(goal gl-point3-x 1)
			(not	(up-set-target-by-id g: gl-scout-target-id))))
=>
	(set-goal gl-scout-target-id -2)
	(up-get-fact game-time 0 gl-interfered-scout)
	(up-modify-goal gl-interfered-scout c:+ 20)
;	(chat-to-all "reset in 20s")
)

(defrule
	(game-time g:> gl-interfered-scout)
	(goal gl-scout-target-id -2)
=>
	(set-goal gl-interfered-scout -1)
	(set-goal gl-scout-target-id -1)
;	(chat-to-all "reset")
)

(defrule
	(goal gl-point3-x 2)
	(up-compare-goal gl-scout-target-id != -2)
	(up-set-target-by-id g: gl-point3-y)
	(goal gl-interfered-scout -1)
	(up-compare-goal gl-point2-y < 2)
=>
	(up-modify-goal gl-scout-target-id g:= gl-point3-y)
	(up-get-fact game-time 0 gl-interfered-scout)
	(up-modify-goal gl-interfered-scout c:+ 10)
;	(chat-to-all "FOUND")
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= gl-point2-x)
;	(up-chat-data-to-all "hp-120: %d" g: gl-temporary-point-y)
;	(up-chat-data-to-all "hp-100: %d" g: gl-saved-point-x)
;	(up-chat-data-to-all "hp-50: %d" g: gl-saved-point-y)
;	(up-chat-data-to-all "att: %d" g: gl-temporary-point-x)
)

(defrule
	(or	(up-compare-goal gl-interfered-scout < 0)
		(or	(up-compare-goal gl-scout-target-id < 0)
			(unit-type-count scout-unit != 1)))
=>
	(up-jump-rule 11)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(set-goal temporary-goal6 2)
	(set-goal temporary-goal7 2)
	(set-goal temporary-goal8 1)
	(set-goal temporary-goal5 -1)
)

(defrule
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
=>
	(up-get-object-data object-data-precise-z temporary-goal)
	(up-get-point position-object gl-point-x)
	(up-copy-point gl-temporary-point-x gl-point-x)
	(up-modify-goal gl-temporary-point-x g:+ temporary-goal8)
	(up-modify-goal gl-temporary-point-x g:+ temporary-goal8)
;	(up-chat-data-to-all "Me: %d" g: temporary-goal)
)

(defrule
	(up-set-target-object search-local c: 0)
	(strategic-number sn-number-explore-groups > 0)
=>
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
	(up-reset-scouts)
)

(defrule
	(up-set-target-by-id g: gl-scout-target-id)
=>
	(up-get-object-data object-data-precise-z temporary-goal2)
	(up-get-point position-object gl-point2-x)
;	(up-chat-data-to-all "Enemy: %d" g: temporary-goal2)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-get-point-elevation gl-temporary-point-x temporary-goal4)
	(up-modify-goal temporary-goal4 c:* 100)
)

(defrule
	(up-set-target-object search-local c: 0)
	(nor	(up-point-contains gl-point-x c: gold-mine-class)
		(up-point-contains gl-point-x c: stone-mine-class))
	(nor	(up-point-contains gl-point-x c: forage-class)
		(up-point-contains gl-point-x c: tree-class))
	(not	(up-point-contains gl-point-x c: relic))
	(up-compare-goal temporary-goal4 g:> temporary-goal5)
=>
	(up-copy-point gl-saved-point-x gl-temporary-point-x)
	(up-modify-goal temporary-goal5 g:= temporary-goal4)
;	(up-chat-data-to-all "Highest: %d" g: temporary-goal5)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-compare-goal temporary-goal6 > 0)
=>
	(up-modify-goal temporary-goal6 c:- 1)
	(up-modify-goal gl-temporary-point-x c:- 1)
	(up-jump-rule -3)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-compare-goal temporary-goal7 > 0)
=>
	(up-modify-goal temporary-goal7 c:- 1)
	(up-modify-goal temporary-goal6 g:= temporary-goal8)
	(up-modify-goal temporary-goal6 c:* 2)
	(up-modify-goal gl-temporary-point-y c:- 1)
	(up-modify-goal gl-temporary-point-x g:= gl-point-x)
	(up-modify-goal gl-temporary-point-x g:+ temporary-goal8)
	(up-jump-rule -4)
)

(defrule
	(up-set-target-object search-local c: 0)
	(goal temporary-goal8 1)
	(up-compare-goal temporary-goal5 g:<= temporary-goal2)
=>
	(set-goal temporary-goal6 4)
	(set-goal temporary-goal7 4)
	(set-goal temporary-goal8 2)
	(up-copy-point gl-temporary-point-x gl-point-x)
	(up-modify-goal gl-temporary-point-x g:+ temporary-goal8)
	(up-modify-goal gl-temporary-point-x g:+ temporary-goal8)
	(up-jump-rule -5)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-action != actionid-attack)
	(up-set-target-by-id g: gl-scout-target-id)
	(or	(up-compare-goal temporary-goal g:> temporary-goal2)
		(and	(up-compare-goal temporary-goal g:== temporary-goal2)
			(up-compare-goal temporary-goal5 g:== temporary-goal2)))
=>
	(up-target-objects 1 action-default -1 aggressive)
;	(chat-to-all "charge")
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-set-target-by-id g: gl-scout-target-id)
	(up-compare-goal temporary-goal5 g:>= temporary-goal2)
	(up-compare-goal temporary-goal g:<= temporary-goal2)
	(or	(up-compare-goal temporary-goal g:< temporary-goal2)
		(up-compare-goal temporary-goal5 g:> temporary-goal2))
=>
	(set-strategic-number sn-target-point-adjustment 5)
	(up-target-point gl-saved-point-x action-move -1 no-attack)
	(set-strategic-number sn-target-point-adjustment 0)
;	(chat-to-all "hmh?")
)

; ============== TARGETING UNFINISHED FORTIFICATIONS

(defrule
	(or	(game-time > 2400)
		(or	(up-projectile-detected projectile-castle < 60000000)
			(and	(players-building-type-count target-player castle == 0)
				(up-projectile-detected projectile-watch-tower < 60000000))))
=>
	(up-jump-rule 5)
)

(defrule
	(players-building-type-count target-player castle > 0)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-full-reset-search)
	(up-find-remote c: castle c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal2 g:= gl-remote-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(players-building-type-count target-player watch-tower > 0)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-full-reset-search)
	(up-find-remote c: watch-tower c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(players-building-type-count target-player castle > 0)
	(players-building-type-count target-player watch-tower > 0)
	(goal temporary-goal2 0)
	(goal gl-remote-total 0)
=>
	(up-set-defense-priority c: castle c: 15000)
	(up-set-defense-priority c: watch-tower c: 12000)
	(up-modify-flag gl-flag c:+ target-system-rewriting)
	(up-modify-goal gl-direct-attacking c:max NO)
	(up-jump-rule 8)
)

(defrule
	(players-building-type-count target-player castle > 0)
	(goal temporary-goal2 0)
=>
	(up-set-defense-priority c: castle c: 15000)
	(up-modify-flag gl-flag c:+ target-system-rewriting)
	(up-modify-goal gl-direct-attacking c:max NO)
	(up-jump-rule 7)
)

(defrule
	(players-building-type-count target-player watch-tower > 0)
	(goal gl-remote-total 0)
=>
	(up-set-defense-priority c: watch-tower c: 12000)
	(up-modify-flag gl-flag c:+ target-system-rewriting)
	(up-modify-goal gl-direct-attacking c:max NO)
	(up-jump-rule 6)
)

; ============== DIRECT ATTACKING

#load-if-not-defined UP-MICHI-STYLE
(load "Barbarian\Micro")
#end-if

#end-if
#end-if

; ================ METEOR SHOWER

(defrule
	(or	(unit-type-count trebuchet-set == 0)
		(or	(up-timer-status 15 == timer-running)
			(up-timer-status 38 == timer-running)))
=>
	(up-jump-rule 13)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal5 s:= sn-focus-player-number)
	(set-goal temporary-goal4 total-players)
	(set-strategic-number sn-focus-player-number 1)
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-attack -1 -1)
	(up-find-local c: trebuchet c: 1)
	(up-filter-exclude -1 -1 -1 -1)
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal6 trebuchet)
	(set-goal temporary-goal7 1)
	(set-goal gl-remote-total 0)
)

(defrule
	(not	(player-valid focus-player))
=>
	(set-strategic-number sn-focus-player-number 1)
	(up-modify-goal temporary-goal2 c:+ 1)
)

(defrule
	(up-set-target-object search-local c: 0)
	(player-valid focus-player)
	(stance-toward focus-player enemy)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: 6 c: 16)
	(up-filter-include cmdid-military -1 -1 -1)
)

(defrule
	(up-set-target-object search-local c: 0)
	(player-valid focus-player)
	(stance-toward focus-player enemy)
	(goal temporary-goal7 1)
	(or	(up-find-remote c: mangonel-line c: 1)
		(up-find-remote c: bombard-cannon c: 1))
=>
	(up-target-objects 0 action-default -1 -1)
	(set-goal temporary-goal7 0)
	(up-jump-rule 6)
)

(defrule
	(up-set-target-object search-local c: 0)
	(player-valid focus-player)
	(stance-toward focus-player enemy)
=>
	(up-find-remote c: -1 c: 15)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal3 g:= gl-remote-total)
	(up-modify-goal temporary-goal3 c:+ 1)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-set-target-object search-remote c: 0)
	(or	(goal temporary-goal 0)
		(or	(up-compare-goal temporary-goal2 g:>= gl-remote-total)
			(goal gl-remote-total 1)))
=>
;	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-target-objects 0 action-default -1 -1)
;	(set-goal temporary-goal2 0)
	(up-jump-rule 4)
)

(defrule
	(up-set-target-object search-local c: 0)
	(player-valid focus-player)
	(up-compare-goal temporary-goal4 s:!= sn-focus-player-number)
	(or	(not	(up-set-target-object search-remote c: 0))
		(not	(stance-toward focus-player enemy)))
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -6)
)

(defrule
	(up-set-target-object search-local c: 0)
	(or	(up-compare-goal temporary-goal2 g:>= gl-remote-total)
		(not	(up-set-target-object search-remote c: 0)))
=>
	(set-goal temporary-goal2 0)
	(up-jump-rule 2)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-compare-goal temporary-goal2 > 0)
	(up-compare-goal temporary-goal2 g:< temporary-goal3)
=>
	(up-reset-search 0 0 1 1)
	(up-find-remote c: -1 g: temporary-goal2)
	(up-reset-search 0 0 0 1)
	(up-find-remote c: -1 c: 1)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-set-target-object search-remote c: 0)
=>
	(up-reset-search 1 1 1 1)
	(up-find-remote c: -1 g: temporary-goal2)
	(up-reset-search 0 0 0 1)
	(up-find-remote c: -1 c: 1)
	(up-filter-distance c: -1 c: -1)
	(up-filter-exclude -1 actionid-attack -1 -1)
	(up-find-local g: temporary-goal6 g: temporary-goal)
	(up-reset-search 0 1 0 0)
	(up-find-local g: temporary-goal6 c: 1)
	(up-target-objects 0 action-default -1 -1)
;	(up-modify-sn sn-focus-player-number c:+ 1)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-modify-goal temporary-goal4 s:= sn-focus-player-number)
	(up-modify-goal temporary-goal4 c:min total-players)
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-attack -1 -1)
	(up-modify-goal temporary-goal c:+ 1)
;	(up-modify-goal temporary-goal2 c:+ 1)
	(up-find-local g: temporary-goal6 g: temporary-goal)
	(up-reset-search 0 1 0 0)
	(up-find-local g: temporary-goal6 c: 1)
	(up-filter-exclude -1 -1 -1 -1)
	(set-goal gl-remote-total 0)
	(up-jump-rule -10)
)

(defrule
	(goal temporary-goal6 trebuchet)
=>
	(set-goal temporary-goal6 unpacked-trebuchet)
	(set-goal temporary-goal4 total-players)
	(set-strategic-number sn-focus-player-number 1)
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-attack -1 -1)
	(up-find-local g: temporary-goal6 c: 1)
	(up-filter-exclude -1 -1 -1 -1)
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
	(set-goal gl-remote-total 0)
	(up-jump-rule -11)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal5)
)

; ============== WOLOLO

(defrule
	(or	(up-timer-status 15 == timer-running)
		(or	(unit-type-count monk == 0)
			(or	(research-completed ri-theocracy)
				(or	(game-time >= 2400)
					(up-timer-status 38 == timer-running)))))
=>
	(up-jump-rule 21)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(up-full-reset-search)
	(up-filter-exclude -1 -1 731 -1)
	(up-find-local c: monk c: 1)
	(up-filter-exclude -1 -1 -1 -1)
	(set-goal temporary-goal2 1)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 total-players)
	(up-jump-rule 1)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-filter-exclude -1 -1 731 -1)
	(up-find-local c: monk g: temporary-goal3)
	(up-reset-search 0 1 0 0)
	(up-find-local c: monk c: 1)
	(up-filter-exclude -1 -1 -1 -1)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 9)
)

(defrule
	(up-set-target-object search-local c: 0)
	(research-completed ri-block-printing)
=>
	(up-filter-distance c: -1 c: 12)
)

(defrule
	(or	(not	(stance-toward focus-player enemy))
		(or	(not	(player-valid focus-player))
			(and	(up-set-target-object search-local c: 0)
				(up-object-data object-data-carry != 100))))
=>
	(up-jump-rule 12)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-compare-goal temporary-goal2 <= 1)
=>
	(up-find-remote c: knight-line c: 1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-remote c: all-units-class c: 1)
	(up-filter-include -1 -1 -1 -1)
	(up-find-remote c: villager-class c: 1)
	(up-jump-rule 9)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry == 100)
	(research-completed ri-atonement)
	(up-compare-goal temporary-goal2 > 1)
=>
	(up-filter-include -1 -1 -1 -1)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-find-remote c: monastery-class g: temporary-goal2)
	(up-modify-goal temporary-goal2 c:- 1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-get-search-state gl-local-total)
	(up-reset-search 0 0 1 0)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry == 100)
	(research-completed ri-atonement)
	(up-compare-goal temporary-goal2 > 1)
	(up-compare-goal gl-remote-total g:> temporary-goal2)
=>
	(up-filter-include -1 -1 -1 -1)
	(up-find-remote c: monastery-class g: temporary-goal2)
	(up-reset-search 0 0 0 1)
	(up-find-remote c: monastery-class c: 1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-jump-rule 6)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry == 100)
	(up-compare-goal temporary-goal2 > 1)
=>
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-find-remote c: knight-line g: temporary-goal2)
	(up-modify-goal temporary-goal2 c:- 1)
	(up-get-search-state gl-local-total)
	(up-reset-search 0 0 1 0)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry == 100)
	(up-compare-goal temporary-goal2 > 1)
	(up-compare-goal gl-remote-total g:> temporary-goal2)
=>
	(up-find-remote c: knight-line g: temporary-goal2)
	(up-reset-search 0 0 0 1)
	(up-find-remote c: knight-line c: 1)
	(up-jump-rule 4)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry == 100)
	(up-compare-goal temporary-goal2 > 1)
	(goal gl-remote-total 0)
=>
	(up-filter-include cmdid-military -1 -1 -1)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-find-remote c: all-units-class g: temporary-goal2)
	(up-modify-goal temporary-goal2 c:- 1)
	(up-get-search-state gl-local-total)
	(up-reset-search 0 0 1 0)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry == 100)
	(up-compare-goal temporary-goal2 > 1)
	(up-compare-goal gl-remote-total g:> temporary-goal2)
=>
	(up-find-remote c: all-units-class g: temporary-goal2)
	(up-reset-search 0 0 0 1)
	(up-find-remote c: all-units-class c: 1)
	(up-jump-rule 2)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry == 100)
	(up-compare-goal temporary-goal2 > 1)
	(goal gl-remote-total 0)
=>
	(up-filter-include -1 -1 -1 -1)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-find-remote c: villager-class g: temporary-goal2)
	(up-modify-goal temporary-goal2 c:- 1)
	(up-get-search-state gl-local-total)
	(up-reset-search 0 0 1 0)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry == 100)
	(up-compare-goal temporary-goal2 > 1)
	(up-compare-goal gl-remote-total g:> temporary-goal2)
=>
	(up-find-remote c: villager-class g: temporary-goal2)
	(up-reset-search 0 0 0 1)
	(up-find-remote c: villager-class c: 1)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry == 100)
	(up-compare-goal temporary-goal2 > 1)
	(up-compare-goal gl-remote-total g:<= temporary-goal2)
=>
	(set-goal temporary-goal2 0)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-set-target-object search-remote c: 0)
	(up-object-data object-data-class == packed-trebuchet-class)
	(up-research-status c: ri-redemption != research-complete)
=>
	(up-jump-rule 1)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-set-target-object search-remote c: 0)
	(nand	(or	(up-object-data object-data-class == siege-weapon-class)
			(or	(up-object-data object-data-class == scorpion-class)
				(up-object-data object-data-class == unpacked-trebuchet-class)))
		(up-research-status c: ri-redemption != research-complete))
=>
	(up-target-objects 0 action-default -1 -1)
	(up-modify-goal temporary-goal4 s:= sn-focus-player-number)
	(up-modify-goal temporary-goal4 c:min total-players)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-jump-rule -16)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry == 100)
	(not	(up-set-target-object search-remote c: 0))
	(player-valid focus-player)
	(strategic-number sn-focus-player-number g:!= temporary-goal4)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-reset-search 0 0 1 1)
	(up-jump-rule -14)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry == 100)
	(not	(player-valid focus-player))
=>
	(set-strategic-number sn-focus-player-number 1)
	(up-reset-search 0 0 1 1)
	(up-jump-rule -15)
)

(defrule
	(up-set-target-object search-local c: 0)
	(not	(up-set-target-object search-remote c: 0))
	(or	(strategic-number sn-focus-player-number g:== temporary-goal4)
		(up-object-data object-data-carry != 100))
=>
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-modify-goal temporary-goal4 s:= sn-focus-player-number)
	(up-modify-goal temporary-goal4 c:min total-players)
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -19)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

; ============== THROWING A PATROL ATTACK TO ENEMY

#load-if-defined DEATH-MATCH
(defrule
	(or	(game-time > 600)
		(or	(and	(goal TSA 0)
				(players-building-count target-player > 0))
			(or	(up-compare-goal MILITARY != 1)
				(or	(goal gl-patrol-defence patrol-on)
					(up-compare-goal threat-time <= 3000)))))
=>
	(set-strategic-number sn-patrol-group-notice 0)
	(up-jump-rule 4)
)

(defrule
	(or	(up-compare-goal threat-time <= 3000)
		(and	(game-time < 210)
			(up-compare-goal gl-enemy-units-in-town > 0)))
=>
	(up-jump-rule 3)
)

(defrule
	(up-timer-status 26 != timer-running)
	(up-point-contains gl-enemy-position-x c: town-center)
	(strategic-number sn-patrol-group-notice < 1)
=>
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 35)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 -1 orderid-explore -1)
	(up-find-local c: all-units-class c: 240)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-lerp-tiles gl-point-x gl-enemy-position-x c: 17)
	(up-target-point gl-point-x action-default -1 -1)
	(set-strategic-number sn-patrol-group-notice 1)
	(up-jump-rule 2)
	(enable-timer 26 20)
)

(defrule
	(up-timer-status 26 != timer-running)
	(up-compare-goal gl-enemy-scorpion-count < 2)
	(up-compare-goal gl-enemy-onager-count < 1)
	(up-point-contains gl-enemy-position-x c: town-center)
	(strategic-number sn-patrol-group-notice == 1)
=>
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 35)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 -1 orderid-explore -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-enemy-position-x action-patrol -1 -1)
	(set-strategic-number sn-patrol-group-notice 2)
	(set-goal TSA 1)
	(enable-timer 26 10)
)

(defrule
	(up-timer-status 26 != timer-running)
	(up-point-contains gl-enemy-position-x c: town-center)
	(strategic-number sn-patrol-group-notice == 1)
=>
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 35)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 -1 orderid-explore -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-enemy-position-x action-patrol formation-stagger -1)
	(set-strategic-number sn-patrol-group-notice 2)
	(enable-timer 26 10)
	(set-goal TSA 1)
)
#end-if

(defrule
	(or	(and	(up-compare-goal gl-strategy != scrush)
			(or	(game-time > 600)
				(up-compare-const gv-death-match == 0)))
		(or	(players-building-count target-player == 0)
			(or	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
				(or	(up-compare-goal gl-enemy-scorpion-count > 2)
					(or	(up-compare-goal gl-enemy-onager-count > 0)
						(goal TSA 0))))))
=>
	(up-jump-rule 3)
)

(defrule
	(or	(and	(or	(and	(enemy-buildings-in-town)
					(up-timer-status 26 == timer-disabled))
				(up-compare-goal gl-group-notice > 500))
			(up-compare-const gv-death-match == 0))
		(goal gl-patrol-defence patrol-on))
=>
	(up-jump-rule 2)
)

(defrule
	(up-timer-status 26 != timer-disabled)
	(or	(and	(enemy-buildings-in-town)
			(and	(up-compare-goal gl-strategy != scrush)
				(unit-type-count militiaman-line < 3)))
		(up-projectile-detected projectile-any < 3000))
	(up-compare-const gv-death-match == 0)
=>
	(up-full-reset-search)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 -1 orderid-explore -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point 0 action-stop -1 aggressive)
	(disable-timer 26)
)

#load-if-defined DEATH-MATCH-GAME
(defrule
	(up-timer-status 26 != timer-running)
=>
	(up-full-reset-search)
	(up-get-point position-target gl-point-x)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 35)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 actionid-attack orderid-explore -1)
	(up-find-local c: all-units-class c: 240)
	(up-set-target-point gl-point-x)
	(up-target-point 0 action-patrol -1 -1)
	(enable-timer 26 repatrol-time)
)
#else
(defrule
	(nor	(enemy-buildings-in-town)
		(up-projectile-detected projectile-any < 7000))
	(up-timer-status 26 != timer-running)
=>
	(up-full-reset-search)
	(up-get-point position-target gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: 4 c: -1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 actionid-attack orderid-explore -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point 0 action-patrol -1 aggressive)
	(enable-timer 26 repatrol-time)
)
#end-if

; ============== ATTACKING IN MICHI

#load-if-defined UP-MICHI-STYLE
(defrule
	(players-unit-type-count every-enemy archer-line == 0)
	(players-unit-type-count every-enemy skirmisher-line == 0)
	(players-unit-type-count every-enemy knight-line == 0)
	(players-unit-type-count every-enemy mangonel-line == 0)
	(players-unit-type-count every-enemy scorpion-line == 0)
	(players-unit-type-count every-enemy trebuchet == 0)
	(players-unit-type-count every-enemy villager == 0)
	(players-unit-type-count every-enemy bombard-cannon == 0)
=>
	(up-jump-rule 1)
)

(defrule
	(players-building-count every-enemy == 0)
	(up-timer-status 26 != timer-running)
=>
	(up-full-reset-search)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 actionid-attack orderid-explore -1)
	(up-find-local c: all-units-class c: 240)
	(up-copy-point gl-point-x gl-candidate1-point-x)
	(up-lerp-percent gl-point-x gl-position-center-x c: 200)
	(up-set-target-point gl-point-x)
	(up-target-point 0 action-patrol -1 aggressive)
	(enable-timer 26 30)
	(set-goal gl-michi-attack 1)
)

(defrule
	(goal gl-michi-attack 1)
	(players-building-count any-enemy > 0)
=>
	(up-full-reset-search)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 -1 orderid-explore -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-point-x action-stop -1 aggressive)
	(set-goal gl-michi-attack 0)
)
#end-if

;(defrule
;	(not	(taunt-detected 1 53))
;	(or	(strategic-number sn-focus-player-number < 0)
;		(or	(not	(player-valid focus-player))
;			(or	(strategic-number sn-focus-player-number == my-player-number)
;				(stance-toward focus-player ally))))
;=>
;	(up-chat-data-to-all "!!! FOCUS PLAYER (%d) !!! (63)" s: sn-focus-player-number)
;)


; ============== ATTACKING ENEMY VILLAGERS WITH THE SCOUT

#load-if-not-defined DEATH-MATCH
(defrule
	(or	(and	(game-time > 1200)
			(up-compare-goal gl-villager-laming <= -1))
		(or	(up-compare-goal gl-boar-stealing > 0)
			(or	(up-compare-goal gl-dodging-TC != -1)
				(or	(and	(goal gl-DRUSH YES)
						(goal gl-scout-added-to-drush added))
					(building-type-count town-center == 0)))))
=>
	(up-jump-rule 43)
)

(defrule
	(or	(game-time == 0)
		(and	(unit-type-count scout-unit != 1)
			(up-compare-goal gl-villager-laming <= -1)))
=>
	(up-jump-rule 42)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-target-point-adjustment 6)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(set-goal temporary-goal5 10)
	(set-goal temporary-goal6 1100)
	(set-goal temporary-goal7 0)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-get-object-data object-data-precise-x gl-point3-x)
	(up-get-object-data object-data-precise-y gl-point3-y)
)

(defrule
	(up-point-distance gl-point-x gl-position-self-x < 40)
=>
	(set-goal temporary-goal5 25)
	(set-goal temporary-goal6 2600)
)

(defrule
	(true)
=>
	(up-filter-distance c: -1 g: temporary-goal5)
	(up-find-remote c: wild-boar c: 240)
	(up-find-remote c: javelina c: 240)
	(up-remove-objects search-remote object-data-action != actionid-attack)
)

(defrule
	(up-set-target-object search-remote c: 0)
=>
	(up-get-object-data object-data-target-id temporary-goal4)
	(up-set-target-by-id g: temporary-goal4)
	(up-get-object-data object-data-player temporary-goal5)
	(up-get-object-data object-data-precise-x gl-object-point-x)
	(up-get-object-data object-data-precise-y gl-object-point-y)
	(up-modify-sn sn-focus-player-number g:= temporary-goal5)
	(set-goal temporary-goal7 1)
)

(defrule
	(up-set-target-object search-remote c: 0)
	(up-compare-goal gl-villager-laming <= 1)
	(up-set-target-by-id g: temporary-goal4)
	(up-point-distance gl-object-point-x gl-point3-x g:< temporary-goal6)
	(not	(stance-toward focus-player ally))
=>
	(up-modify-goal gl-scout-target-id g:= temporary-goal4)
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
	(up-reset-unit g: gl-scout-unit)
	(up-reset-scouts)
	(set-goal gl-villager-laming 5)
	(chat-to-player my-player-number "Start blocking")
)

(defrule
	(goal gl-villager-laming 5)
	(up-set-target-by-id g: gl-scout-target-id)
=>
	(up-get-object-data object-data-precise-x gl-object-point-x)
	(up-get-object-data object-data-precise-y gl-object-point-y)
	(up-modify-sn sn-focus-player-number g:= temporary-goal5)
)

(defrule
	(goal gl-villager-laming 5)
	(or	(not	(up-set-target-by-id g: gl-scout-target-id))
		(or	(up-point-distance gl-object-point-x gl-point3-x g:> temporary-goal6)
			(or	(unit-type-count scout-unit < 1)
				(goal temporary-goal7 0))))
=>
	(set-goal gl-scout-target-id -1)
	(set-goal gl-villager-laming -1)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(up-reset-unit c: scout-unit)
	(up-reset-scouts)
	(chat-to-player my-player-number "Stop blocking")
)

(defrule
	(goal gl-villager-laming 5)
	(up-set-target-by-id g: gl-scout-target-id)
=>
	(up-get-object-data object-data-precise-x gl-object-point-x)
	(up-get-object-data object-data-precise-y gl-object-point-y)
	(up-get-object-data object-data-precise-move-x gl-point2-x)
	(up-get-object-data object-data-precise-move-y gl-point2-y)
	(up-get-point-distance gl-point3-x gl-point2-x temporary-goal2)
	(up-get-point-distance gl-object-point-x gl-point2-x temporary-goal7)
	(up-copy-point gl-saved-point-x gl-object-point-x)
	(up-lerp-tiles gl-saved-point-x gl-point2-x c: 110)
	(up-cross-tiles gl-saved-point-x gl-point2-x c: 60)
	(up-copy-point gl-point5-x gl-object-point-x)
	(up-lerp-tiles gl-point5-x gl-point2-x c: 110)
	(up-cross-tiles gl-point5-x gl-point2-x c: -60)
	(up-get-point-distance gl-point5-x gl-point3-x temporary-goal3)
)

(defrule
	(goal gl-villager-laming 5)
	(up-set-target-by-id g: gl-scout-target-id)
;	(up-point-distance gl-object-point-x gl-point3-x > 80)
	(up-compare-goal temporary-goal7 g:> temporary-goal2)
=>
	(up-lerp-tiles gl-object-point-x gl-point2-x c: 80)
	(up-target-point gl-object-point-x action-move -1 no-attack)
	(up-jump-rule 2)
)

(defrule
	(goal gl-villager-laming 5)
	(up-set-target-by-id g: gl-scout-target-id)
	(up-point-distance gl-saved-point-x gl-point3-x g:> temporary-goal3)
=>
	(up-copy-point gl-saved-point-x gl-point5-x)
)

(defrule
	(goal gl-villager-laming 5)
	(up-set-target-by-id g: gl-scout-target-id)
=>
	(up-target-point gl-saved-point-x action-move -1 no-attack)
;	(up-chat-data-to-all "x: %d" g: gl-saved-point-x)
;	(up-chat-data-to-all "y: %d" g: gl-saved-point-y)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(set-strategic-number sn-target-point-adjustment 0)
)

(defrule
	(or	(goal gl-villager-laming 5)
		(up-compare-goal gl-interfered-scout > 0))
=>
	(up-jump-rule 29)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 50)
	(set-goal temporary-goal6 10)
	(set-goal temporary-goal7 0)
	(set-goal temporary-goal8 1)
	(set-goal gl-temporary-point-x 36)
	(set-goal gl-temporary-point-y 0)
	(set-strategic-number sn-focus-player-number 1)
)

(defrule
	(or	(up-compare-goal gl-scout-party > 0)
		(up-allied-goal any-computer-ally gl-scout-party == leader))
=>
	(set-goal gl-temporary-point-x 27)
)

(defrule
	(current-age >= feudal-age)
	(or	(up-compare-const scout-unit == scout-cavalry-line)
		(current-age >= castle-age))
=>
	(set-goal temporary-goal6 16)
)

(defrule
	(unit-type-count scout-unit > 0)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-object-point-x)
	(up-set-target-point gl-object-point-x)
	(up-filter-range -1 -1 -1 9)
	(up-get-object-data object-data-hitpoints temporary-goal2)
)

(defrule
	(goal gl-villager-laming -1)
	(unit-type-count scout-unit == 1)
	(up-compare-goal temporary-goal2 > 27)
	(or	(up-compare-goal temporary-goal2 g:> gl-temporary-point-x)
		(or	(current-age >= castle-age)
			(and	(up-compare-const scout-unit == scout-cavalry-line)
				(current-age >= feudal-age))))
=>
	(set-goal gl-scout-target-id -1)
	(set-goal gl-villager-laming 0)
)

(defrule
	(goal gl-villager-laming 0)
	(stance-toward focus-player ally)
	(up-allied-goal focus-player gl-identity == Barbarian)
	(up-allied-goal focus-player gl-scout-party == leader)
	(current-age >= feudal-age)
=>
	(up-get-focus-fact allied-goal gl-point-x gl-point-x)
	(up-get-focus-fact allied-goal gl-point-y gl-point-y)
)

(defrule
	(goal gl-villager-laming 0)
	(stance-toward focus-player ally)
	(up-point-distance gl-point-x gl-object-point-x < 9)
	(up-allied-goal focus-player gl-identity == Barbarian)
	(up-allied-goal focus-player gl-scout-party == leader)
	(current-age >= feudal-age)
=>
	(up-get-focus-fact allied-goal gl-scout-target-id gl-scout-target-id)
	(up-get-focus-fact allied-sn sn-focus-player-number gl-saved-focus-player2)
	(set-goal gl-scout-party 1)
	(set-goal gl-villager-laming 1)
	(up-set-target-by-id g: gl-scout-target-id)
	(up-target-objects 1 action-default -1 stand-ground)
	(chat-to-allies "Join party")
)

(defrule
	(or	(current-age < feudal-age)
		(or	(and	(up-allied-goal focus-player gl-villager-laming > 0)
				(up-allied-goal focus-player gl-scout-party == -1))
			(or	(players-current-age focus-player < feudal-age)
				(not	(stance-toward focus-player ally)))))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-villager-laming >= 0)
	(or	(players-unit-type-count focus-player scout-cavalry-line == 1)
		(players-unit-type-count focus-player eagle-warrior-line == 1))
	(strategic-number sn-focus-player-number != my-player-number)
	(up-allied-goal focus-player gl-identity == Barbarian)
	(up-allied-goal focus-player gl-dodging-TC < 0)
	(or	(up-find-remote c: scout-cavalry-line c: 1)
		(up-find-remote c: eagle-warrior-line c: 1))
	(up-set-target-object search-remote c: 0)
	(up-object-data object-data-hitpoints g:> gl-temporary-point-x)
=>
	(up-modify-goal temporary-goal8 c:+ 1)
	(up-modify-sn sn-party-scout-count g:= temporary-goal8)
)

(defrule
	(up-compare-goal gl-villager-laming >= 0)
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-reset-search 0 0 0 1)
	(up-jump-rule -5)
)

(defrule
	(goal gl-villager-laming 0)
=>
	(set-strategic-number sn-focus-player-number 1)
	(up-reset-search 0 0 0 1)
	(up-filter-range -1 -1 -1 6)
)

(defrule
	(goal gl-villager-laming 0)
	(stance-toward focus-player enemy)
	(up-find-remote c: villager-class c: 1)
	(up-set-target-object search-remote c: 0)
	(up-object-data object-data-hitpoints g:< temporary-goal5)
=>
	(up-get-object-data object-data-hitpoints temporary-goal5)
	(up-get-object-data object-data-id gl-scout-target-id)
	(up-reset-search 0 0 0 1)
	(up-jump-rule -1)
)

(defrule
	(goal gl-villager-laming 0)
	(stance-toward focus-player enemy)
	(up-set-target-by-id g: gl-scout-target-id)
=>
	(up-get-object-data object-data-hitpoints temporary-goal2)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-filter-range -1 -1 -1 4)
	(up-find-remote c: villager-class c: 8)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal3 g:= gl-remote-last)
)

(defrule
	(goal gl-villager-laming 0)
	(stance-toward focus-player enemy)
	(up-set-target-by-id g: gl-scout-target-id)
=>
	(up-set-target-point gl-object-point-x)
	(up-filter-range -1 -1 -1 4)
	(up-find-remote c: villager-class c: 8)
	(up-get-search-state gl-local-total)
	(up-modify-goal gl-remote-last g:max temporary-goal3)
	(up-set-target-by-id g: gl-scout-target-id)
)

(defrule
	(goal gl-villager-laming 0)
	(stance-toward focus-player enemy)
	(or	(and	(up-compare-goal temporary-goal2 < 26)
			(up-compare-goal gl-remote-last < 2))
		(up-compare-goal temporary-goal2 g:< temporary-goal6))
	(up-set-target-by-id g: gl-scout-target-id)
=>
	(up-target-objects 1 action-default -1 stand-ground)
	(set-goal gl-villager-laming 1)
	(up-modify-goal gl-saved-focus-player2 s:= sn-focus-player-number)
	(up-get-search-state gl-local-total)
	(chat-to-player my-player-number weak-villager-found-chat)
)

(defrule
	(goal gl-villager-laming 0)
	(stance-toward focus-player enemy)
	(current-age >= feudal-age)
	(or	(up-compare-const scout-unit == scout-cavalry-line)
		(current-age >= castle-age))
	(up-compare-goal gl-remote-last < 2)
	(up-set-target-by-id g: gl-scout-target-id)
=>
	(up-target-objects 1 action-default -1 stand-ground)
	(set-goal gl-villager-laming 1)
	(up-modify-goal gl-saved-focus-player2 s:= sn-focus-player-number)
	(up-get-search-state gl-local-total)
	(chat-to-player my-player-number weak-villager-found-chat)
)

(defrule
	(goal gl-villager-laming 0)
	(stance-toward focus-player enemy)
	(current-age >= feudal-age)
	(up-compare-goal gl-remote-last g:<= temporary-goal8)
	(up-compare-goal gl-remote-last > 1)
	(up-set-target-by-id g: gl-scout-target-id)
=>
	(up-target-objects 1 action-default -1 stand-ground)
	(set-goal gl-villager-laming 1)
	(set-goal gl-scout-party leader)
	(up-modify-goal gl-saved-focus-player2 s:= sn-focus-player-number)
	(up-get-search-state gl-local-total)
	(chat-to-allies "Party detected")
)

(defrule
	(goal gl-villager-laming 0)
	(player-valid focus-player)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-set-target-point gl-object-point-x)
	(up-filter-range -1 -1 -1 6)
	(up-reset-search 0 0 0 1)
	(set-goal gl-scout-target-id -1)
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -7)
)

(defrule
	(goal gl-villager-laming 0)
=>
	(set-goal gl-villager-laming -1)
	(set-goal gl-scout-party -1)
)

(defrule
	(goal gl-villager-laming 1)
	(up-set-target-by-id g: gl-scout-target-id)
=>
	(up-modify-sn sn-focus-player-number g:= gl-saved-focus-player2)
	(up-full-reset-search)
	(up-set-target-by-id g: gl-scout-target-id)
	(up-get-point position-object gl-point-x)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-target gl-temporary-point-y)
	(up-get-point position-object gl-object-point-x)
	(up-set-target-point gl-object-point-x)
	(up-filter-range -1 -1 -1 3)
	(up-find-remote c: villager-class c: 8)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal2 g:= gl-remote-last)
)

(defrule
	(goal gl-villager-laming 1)
	(up-set-target-by-id g: gl-scout-target-id)
=>
	(up-full-reset-search)
	(up-set-target-point gl-point-x)
	(up-filter-range -1 -1 -1 3)
	(up-find-remote c: villager-class c: 8)
	(up-get-search-state gl-local-total)
	(up-modify-goal gl-remote-last g:max temporary-goal2)
	(up-set-target-by-id g: gl-scout-target-id)
)

(defrule
	(or	(goal gl-temporary-point-y wall-class)
		(goal gl-temporary-point-y building-class))
=>
	(up-reset-scouts)
	(set-goal gl-villager-laming -1)
	(set-goal gl-scout-party -1)
	(set-goal gl-dodging-TC 2)
	(enable-timer 46 8)
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-lerp-tiles gl-object-point-x gl-point-x c: -10)
	(up-target-point gl-object-point-x action-move -1 no-attack)
)

(defrule
	(goal gl-villager-laming 1)
	(goal gl-scout-party -1)
	(up-compare-goal gl-remote-last g:<= temporary-goal8)
	(up-compare-goal gl-remote-last > 1)
	(not	(up-allied-goal any-computer-ally gl-scout-party == leader))
=>
	(set-goal gl-scout-party leader)
	(chat-to-allies "Update party")
)

(defrule
	(goal gl-villager-laming 1)
	(goal gl-scout-party 1)
	(not	(up-allied-goal any-computer-ally gl-scout-party == leader))
=>
	(set-goal gl-scout-party -1)
)

(defrule
	(goal gl-villager-laming 1)
	(goal gl-scout-party 1)
	(up-allied-goal any-computer-ally gl-scout-party == leader)
=>
	(up-get-player-fact this-any-computer-ally allied-sn sn-party-scout-count temporary-goal8)
	(up-get-player-fact this-any-computer-ally allied-goal gl-point-x gl-point-x)
	(up-get-player-fact this-any-computer-ally allied-goal gl-point-y gl-point-y)
)

(defrule
	(or	(up-compare-goal gl-scout-party < 0)
		(up-compare-goal gl-remote-last g:> temporary-goal8))
	(or	(and	(up-object-data object-data-hitpoints >= 26)
			(or	(current-age < feudal-age)
				(and	(up-compare-const scout-unit != scout-cavalry-line)
					(current-age < castle-age))))
		(and	(up-compare-goal gl-remote-last > 1)
			(up-object-data object-data-hitpoints g:>= temporary-goal6)))
=>
	(set-goal temporary-goal7 1)
)

(defrule
	(or	(not	(up-set-target-by-id g: gl-scout-target-id))
		(and	(or	(goal gl-remote-last 0)
				(up-point-distance gl-object-point-x gl-point-x > 6))
			(or	(or	(up-compare-goal gl-scout-party < 0)
					(up-compare-goal gl-remote-last g:> temporary-goal8))
				(up-point-distance gl-object-point-x gl-point-x > 9))))
=>
	(set-goal temporary-goal7 1)
)

(defrule
	(goal gl-villager-laming 1)
	(or	(goal temporary-goal7 1)
		(unit-type-count scout-unit == 0))
=>
	(up-reset-unit c: scout-unit)
	(up-reset-scouts)
	(up-set-attack-stance scout-unit c: no-attack)
	(set-goal gl-villager-laming -1)
	(set-goal gl-scout-party -1)
	(chat-to-player my-player-number "Return to scouting")
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

; ============== MANGONEL MICRO

;(defrule
;	(not	(taunt-detected 1 53))
;	(or	(strategic-number sn-focus-player-number < 0)
;		(or	(not	(player-valid focus-player))
;			(or	(strategic-number sn-focus-player-number == my-player-number)
;				(stance-toward focus-player ally))))
;=>
;	(up-chat-data-to-all "!!! FOCUS PLAYER (%d) !!! (7)" s: sn-focus-player-number)
;)

(defrule
	(or	(game-time > 2700)
		(or	(unit-type-count mangonel-line == 0)
			(players-unit-type-count focus-player mangonel-line == 0)))
=>
	(up-jump-rule 7)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 -5)
	(up-modify-goal temporary-goal4 g:* gl-direction-switch)
	(up-find-local c: mangonel-line c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: 3 c: 11)
	(up-find-remote c: mangonel-line c: 10)
	(up-clean-search search-remote object-data-distance search-order-asc)
	(up-remove-objects search-remote object-data-index > 0)
	(generate-random-number 10)
)

(defrule
	(game-time g:> gl-mangonel-micro-time)
	(up-set-target-object search-remote c: 0)
	(random-number == 10)
	(up-object-data object-data-next-attack <= 3000)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-next-attack == 0)
=>
	(up-modify-goal gl-direction-switch c:* -1)
	(up-get-fact game-time 0 gl-mangonel-micro-time)
	(up-modify-goal gl-mangonel-micro-time c:+ 3)
)

(defrule
	(game-time g:> gl-mangonel-micro-time)
=>
	(up-get-fact game-time 0 gl-mangonel-micro-time)
	(up-modify-goal gl-mangonel-micro-time c:+ 1)
)

(defrule
	(up-set-target-object search-remote c: 0)
	(or	(up-object-data object-data-next-attack >= 1000)
		(random-number > 7))
	(up-object-data object-data-next-attack <= 3000)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-next-attack == 0)
=>
	(up-target-objects 0 action-default -1 stand-ground)
	(up-jump-rule 2)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-next-attack > 0)
	(up-set-target-object search-remote c: 0)
=>
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point2-x)
	(up-get-point-distance gl-point-x gl-point2-x temporary-goal)
	(up-cross-tiles gl-point-x gl-point2-x g: temporary-goal4)
	(up-modify-goal temporary-goal c:- 7)
	(up-lerp-tiles gl-point-x gl-point2-x g: temporary-goal)
	(up-target-point gl-point-x action-move -1 no-attack)
	(up-jump-rule 1)
)

(defrule
	(up-set-target-object search-remote c: 0)
	(or	(up-object-data object-data-next-attack < 1000)
		(up-object-data object-data-next-attack > 3000))
	(up-set-target-object search-local c: 0)
=>
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point2-x)
	(up-get-point-distance gl-point-x gl-point2-x temporary-goal)
	(up-cross-tiles gl-point-x gl-point2-x g: temporary-goal4)
	(up-modify-goal temporary-goal c:- 7)
	(up-lerp-tiles gl-point-x gl-point2-x g: temporary-goal)
	(up-target-point gl-point-x action-move -1 no-attack)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-full-reset-search)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-find-local c: mangonel-line g: temporary-goal3)
	(up-reset-search 0 1 0 0)
	(up-find-local c: mangonel-line c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: 3 c: 11)
	(up-find-remote c: mangonel-line c: 1)
	(up-jump-rule -6)
)

(defrule
	(current-age >= castle-age)
	(game-time g:> gl-mangonel-micro-time)
	(up-compare-goal gl-mangonel-micro-time >= 0)
=>
	(set-goal gl-mangonel-micro-time -1)
	(up-set-attack-stance mangonel-line c: aggressive)
)

; ============== AVOIDING FIGHT

(defrule
	(or	(and	(current-age >= castle-age)
			(or	(current-age-time > 30)
				(current-age == imperial-age)))
		(or	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
			(or	(up-compare-goal TSA >= 1)
				(or	(up-compare-goal gl-target-player-distance < 22)
					(or	(up-compare-goal gl-current-age <= gv-feudal)
						(soldier-count < 10))))))
=>
	(up-jump-rule 3)
)

(defrule
	(goal gl-current-age gv-feudal-up)
	(or	(up-compare-goal gl-enemy-units-in-town > 2)
		(goal gl-patrol-defence patrol-on))
=>
	(set-strategic-number sn-target-evaluation-rof 8234)
)

(defrule
	(player-in-game any-enemy)
=>
	(up-modify-goal temporary-goal g:= gl-toughest-fought-enemy-military)
	(up-modify-goal temporary-goal c:* 3)
	(up-modify-goal temporary-goal c:/ 4)
	(up-modify-goal temporary-goal c:- 1)
	(up-get-player-fact this-any-enemy current-age 0 temporary-goal2)
	(up-modify-goal temporary-goal g:* temporary-goal2)
)

(defrule
	(up-timer-status 15 != timer-running)
	(strategic-number sn-target-evaluation-rof == 8234)
	(soldier-count g:< temporary-goal)
=>
	(set-goal gl-early-raid NO)
	(up-modify-sn sn-allow-resource-spending c:max 1)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(up-set-attack-stance -1 c: defensive)
	(up-retreat-now)
	(enable-timer 38 15)
	(enable-timer 40 5)
	(up-jump-rule 28)
)

; ============== TOWER DEFENCE

#load-if-not-defined UP-POCKET-POSITION
(defrule
	(goal gl-tower-defence -1)
	(or	(and	(up-compare-goal gl-current-age != gv-feudal)
			(up-compare-goal gl-current-age != gv-feudal-up))
		(or	(and	(up-compare-goal gl-strategy != flush)
				(up-compare-goal gl-strategy != scrush))
			(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)))
=>
	(up-jump-rule 7)
)

(defrule
	(goal TSA 0)
	(up-compare-goal gl-military-rating <= 0)
	(strategic-number sn-skip-first-mining-camp == 0)
	(up-compare-goal gl-my-villager-count > 19)
	(players-military-population focus-player > 12)
	(up-compare-goal gl-military-percentage < 80)
	(or	(up-compare-goal gl-military-percentage < 67)
		(or	(players-current-age focus-player >= castle-age)
			(and	(goal gl-enemy-strategy UP-TO-CASTLE)
				(food-amount < 500))))
=>
	(set-strategic-number sn-stone-gatherer-percentage 5)
	(set-goal gl-tower-defence 1)
)

(defrule
	(goal TSA 0)
	(up-compare-goal gl-military-rating <= 0)
	(strategic-number sn-skip-first-mining-camp == 0)
	(up-compare-goal gl-my-villager-count > 19)
	(players-military-population focus-player > 12)
	(up-compare-goal gl-military-percentage < 100)
	(or	(up-compare-goal gl-military-percentage < 90)
		(goal gl-current-age gv-feudal))
	(up-compare-goal gl-target-player-distance < 50)
	(players-current-age focus-player >= castle-age)
=>
	(set-strategic-number sn-stone-gatherer-percentage 5)
	(set-goal gl-tower-defence 1)
)

(defrule
	(goal TSA 0)
	(or	(goal gl-current-age gv-feudal)
		(and	(up-set-target-by-id g: gl-main-tc-id)
			(up-object-data object-data-progress-value < 25)))
	(up-compare-goal gl-military-rating <= 0)
	(strategic-number sn-skip-first-mining-camp == 0)
	(up-compare-goal gl-my-villager-count > 19)
	(players-military-population focus-player > 35)
	(up-compare-goal gl-military-percentage < 123)
	(players-current-age focus-player >= castle-age)
=>
	(set-strategic-number sn-stone-gatherer-percentage 5)
	(set-goal gl-tower-defence 1)
)

(defrule
	(or	(goal gl-current-age gv-feudal)
		(and	(up-set-target-by-id g: gl-main-tc-id)
			(up-object-data object-data-progress-value < 65)))
	(players-current-age focus-player >= castle-age)
	(players-military-population focus-player > 35)
	(up-compare-goal gl-military-percentage < 135)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(and	(up-compare-goal gl-military-percentage > 80)
			(or	(up-compare-goal gl-military-percentage > 100)
				(or	(players-current-age focus-player < castle-age)
					(and	(goal gl-current-age gv-feudal-up)
						(and	(up-set-target-by-id g: gl-main-tc-id)
							(up-object-data object-data-progress-value > 80))))))
		(or	(current-age >= castle-age)
			(up-compare-goal gl-my-villager-count < 20)))
=>
	(set-goal gl-tower-defence -1)
)

(defrule
	(goal gl-tower-defence 1)
	(or	(goal gl-current-age gv-feudal-up)
		(up-compare-goal gl-military-percentage < 70))
=>
	(set-strategic-number sn-stone-gatherer-percentage 7)
)

(defrule
	(goal gl-tower-defence -1)
	(up-compare-const gv-maximum-age != feudal-age)
	(or	(goal gl-current-age gv-feudal)
		(and	(stone-amount >= 200)
			(goal CASTLE 0)))
=>
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if

#end-if; DM

; ============== SELF-DEFENSE AGAINST ENEMY ATTACKS

(defrule
	(or	(and	(up-compare-goal gl-target-player-distance < 50)
			(and	(up-compare-const gv-death-match == 0)
				(or	(up-compare-goal gl-enemy-tower-distance < 40)
					(up-compare-goal gl-enemy-castle-distance < 45))))
		(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
			(or	(up-timer-status 32 == timer-running)
				(up-compare-goal gl-gathering-inside >= MOST))))
=>
	(up-jump-rule 19)
)

(defrule
	(or	(up-timer-status 15 == timer-running)
		(or	(soldier-count < 8)
			(up-compare-goal gl-target-navy-count > 1)))
=>
	(up-jump-rule 18)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(up-modify-goal temporary-goal g:= gl-toughest-fought-enemy-military)
	(up-modify-goal temporary-goal c:* 3)
	(up-modify-goal temporary-goal c:/ 5)
	(up-modify-goal temporary-goal c:+ 6)
	(up-modify-goal temporary-goal g:- gl-patrol-defence); 10 if off, 13 if on
	(set-strategic-number sn-focus-player-number 1)
	(set-goal temporary-goal3 0)
	(set-goal gl-remote-last 0)
	(up-set-target-point gl-position-self-x)
)

(defrule
	(death-match-game)
	(game-time < 600)
=>
	(up-modify-goal temporary-goal c:/ 2)
)

(defrule
	(soldier-count g:> temporary-goal)
	(stance-toward focus-player enemy)
	(player-valid focus-player)
=>
	(up-full-reset-search)
	(up-modify-goal temporary-goal3 g:= gl-my-maximum-town-size)
	(up-modify-goal temporary-goal3 c:min 30)
	(up-modify-goal temporary-goal3 g:+ gl-patrol-defence)
	(up-modify-goal temporary-goal4 g:= gl-target-player-distance)
	(up-modify-goal temporary-goal4 c:- 1)
	(up-modify-goal temporary-goal3 g:min temporary-goal4)
	(up-filter-distance c: -1 g: temporary-goal3)
	(up-filter-exclude -1 -1 -1 warship-class)
	(up-find-remote c: all-units-class c: 10)
	(up-get-search-state gl-local-total)
)

(defrule
	(up-compare-goal gl-remote-last < 5)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2)
)

(defrule
	(soldier-count g:> temporary-goal)
	(stance-toward focus-player enemy)
	(player-valid focus-player)
	(up-compare-goal gl-remote-last > 1)
=>
	(up-filter-exclude -1 actionid-attack orderid-explore -1)
	(up-find-local c: bombard-cannon c: 240)
	(up-find-local c: scout-cavalry-class c: 240)
	(up-find-local c: infantry-class c: 240)
	(up-find-local c: archery-class c: 240)
	(up-find-local c: archery-cannon-class c: 240)
	(set-goal temporary-goal3 16543)
)

(defrule
	(goal temporary-goal3 16543)
	(up-compare-goal gl-enemy-heavy-cavalry-count < 25)
	(up-compare-goal gl-enemy-eagle-count < 25)
	(up-compare-goal gl-enemy-huskarl-count < 25)
	(or	(and	(up-compare-goal gl-enemy-heavy-cavalry-count < 13)
			(and	(up-compare-goal gl-enemy-eagle-count < 13)
				(up-compare-goal gl-enemy-huskarl-count < 13)))
		(up-compare-goal gl-enemy-archery-count > 60))
	(up-compare-goal gl-enemy-cataphract-count < 13)
	(up-compare-goal gl-enemy-onager-count < 3)
	(up-compare-goal gl-enemy-archery-count > 25)
=>
	(up-find-local c: battering-ram-line c: 240)
)

(defrule
	(goal temporary-goal3 16543)
=>
	(up-find-local c: mangonel-line c: 240)
	(up-find-local c: cavalry-class c: 240)
	(up-find-local c: cavalry-archer-class c: 240)
	(up-find-local c: cavalry-cannon-class c: 240)
	(up-find-local c: scorpion-class c: 240)
	(set-goal temporary-goal3 16542)
	(up-target-objects 0 action-patrol -1 aggressive)
	(set-goal gl-patrol-defence patrol-on)
	(set-goal gl-early-raid NO)
	(enable-timer 32 8)
)

(defrule
	(goal temporary-goal3 16542)
	(research-completed ri-theocracy)
=>
	(up-reset-search 1 1 0 0)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-filter-exclude -1 actionid-convert 731 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-objects 0 action-patrol -1 aggressive)
	(set-goal temporary-goal3 0)
)

(defrule
	(true)
=>
	(set-strategic-number sn-focus-player-number 1)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(up-get-point position-mirror gl-point2-x)
	(up-full-reset-search)
	(up-filter-exclude -1 -1 -1 warship-class)
)

(defrule
	(up-timer-status 32 != timer-running)
	(up-compare-goal gl-trade-unit-count-total > 10)
	(soldier-count g:> temporary-goal)
	(stance-toward focus-player enemy)
	(player-valid focus-player)
=>
	(up-copy-point gl-point-x gl-position-self-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 30)
	(up-find-remote c: all-units-class c: 10)
	(up-find-remote c: building-class c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal4 g:+ gl-remote-last)
	(up-find-remote c: tower-class c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal4 g:+ gl-remote-last)
)

(defrule
	(up-timer-status 32 != timer-running)
	(up-compare-goal gl-trade-unit-count-total > 10)
	(soldier-count g:> temporary-goal)
	(stance-toward focus-player enemy)
	(player-valid focus-player)
=>
	(up-lerp-tiles gl-point-x gl-position-center-x c: -30)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 30)
	(up-find-remote c: all-units-class c: 10)
	(up-find-remote c: building-class c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal4 g:+ gl-remote-last)
	(up-find-remote c: tower-class c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal4 g:+ gl-remote-last)
	(up-copy-point gl-point-x gl-position-self-x)
)

(defrule
	(up-timer-status 32 != timer-running)
	(up-compare-goal gl-trade-unit-count-total > 10)
	(soldier-count g:> temporary-goal)
	(stance-toward focus-player enemy)
	(player-valid focus-player)
=>
	(up-lerp-tiles gl-point-x gl-point2-x c: -30)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 30)
	(up-find-remote c: all-units-class c: 10)
	(up-find-remote c: building-class c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal4 g:+ gl-remote-last)
	(up-find-remote c: tower-class c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal4 g:+ gl-remote-last)
)

(defrule
	(up-timer-status 32 != timer-running)
	(up-compare-goal gl-trade-unit-count-total > 10)
	(soldier-count g:> temporary-goal)
	(stance-toward focus-player enemy)
	(player-valid focus-player)
=>
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-cross-tiles gl-point-x gl-point2-x c: 25)
	(up-set-target-point gl-point-x)
	(up-find-remote c: all-units-class c: 10)
	(up-find-remote c: building-class c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal4 g:+ gl-remote-last)
	(up-find-remote c: tower-class c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal4 g:+ gl-remote-last)
)

(defrule
	(up-timer-status 32 != timer-running)
	(up-compare-goal gl-trade-unit-count-total > 10)
	(soldier-count g:> temporary-goal)
	(stance-toward focus-player enemy)
	(player-valid focus-player)
=>
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-cross-tiles gl-point-x gl-point2-x c: -25)
	(up-set-target-point gl-point-x)
	(up-find-remote c: all-units-class c: 10)
	(up-find-remote c: building-class c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal4 g:+ gl-remote-last)
	(up-find-remote c: tower-class c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal4 g:+ gl-remote-last)
)

(defrule
	(goal temporary-goal4 0); No enemy buildings found
	(up-timer-status 32 != timer-running)
	(up-compare-goal gl-trade-unit-count-total > 10)
	(soldier-count g:> temporary-goal)
	(current-age == gv-maximum-age)
	(not	(player-valid focus-player)); Search finished
	(up-compare-goal temporary-goal5 > 2)
=>
	(up-reset-filters)
	(up-filter-exclude -1 actionid-attack orderid-explore -1)
	(up-find-local c: scout-cavalry-class c: 240)
	(up-find-local c: infantry-class c: 240)
	(up-find-local c: archery-class c: 240)
	(up-find-local c: archery-cannon-class c: 240)
	(set-goal temporary-goal3 16545)
)

(defrule
	(goal temporary-goal3 16545)
=>
	(up-find-local c: mangonel-line c: 240)
	(up-find-local c: cavalry-class c: 240)
	(up-find-local c: cavalry-archer-class c: 240)
	(up-find-local c: cavalry-cannon-class c: 240)
	(up-find-local c: scorpion-class c: 240)
	(set-goal temporary-goal3 16542)
	(up-target-objects 0 action-patrol -1 aggressive)
	(set-goal gl-patrol-defence patrol-on)
	(set-goal gl-early-raid NO)
	(enable-timer 32 8)
)

(defrule
	(player-valid focus-player)
=>
	(up-modify-goal temporary-goal5 g:+ gl-remote-total)
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -8)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)

(defrule
	(up-compare-goal TSA >= 1)
	(goal gl-patrol-defence patrol-on)
	(timer-triggered 32)
	(timer-triggered 15)
=>
	(up-full-reset-search)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 -1 orderid-explore -1)
	(up-find-local c: all-units-class c: 240)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-filter-exclude -1 -1 731 -1)
	(up-find-local c: monastery-class c: 240)
	(up-target-point 0 action-stop -1 -1)
	(enable-timer 32 5)
	(chat-to-player my-player-number "Stop self-defense patrol.")
	(set-goal gl-patrol-defence patrol-off)
)

(defrule
	(goal gl-patrol-defence patrol-on)
	(timer-triggered 32)
	(timer-triggered 15)
=>
	(up-full-reset-search)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 -1 orderid-explore -1)
	(up-find-local c: all-units-class c: 240)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-filter-exclude -1 -1 731 -1)
	(up-find-local c: monastery-class c: 240)
	(up-target-point 0 action-stop -1 -1)
)

(defrule
	(goal gl-patrol-defence patrol-on)
	(timer-triggered 32)
	(timer-triggered 15)
=>
	(up-retreat-to -1 c: scout-cavalry-class)
	(up-retreat-to -1 c: infantry-class)
	(up-retreat-to -1 c: archery-class)
	(up-retreat-to -1 c: archery-cannon-class)
	(up-retreat-to -1 c: siege-weapon-class)
	(up-retreat-to -1 c: cavalry-class)
	(up-retreat-to -1 c: cavalry-archer-class)
	(up-retreat-to -1 c: cavalry-cannon-class)
	(up-retreat-to -1 c: scorpion-class)
	(up-retreat-to -1 c: monastery-class)
	(chat-to-player my-player-number "Stop self-defense patrol.")
	(set-goal gl-patrol-defence patrol-off)
	(enable-timer 32 5)
)

; ============== VILLAGERS VS RAMS

(defrule
	(or	(up-compare-goal TSA >= 1)
		(or	(not	(town-under-attack))
			(or	(game-time > 2400)
				(or	(and	(soldier-count >= 20)
						(up-compare-goal gl-gathering-inside < MOST))
					(up-compare-goal gl-town-center-placed >= placed-to-ally))))); We're trying to escape
=>
	(up-jump-rule 1)
)

(defrule
	(or	(unit-type-count 54 > 0)
		(or	(building-type-count castle > 0)
			(unit-type-count 328 > 0)))
	(players-unit-type-count focus-player battering-ram-line > 0)
	(up-unit-type-in-town c: battering-ram-line > 0)
	(up-timer-status 29 != timer-running)
=>
	(up-full-reset-search)
	(up-find-remote c: battering-ram-line c: 4)
	(up-find-local c: villager-class c: 7)
	(up-target-objects 0 action-default -1 -1)
	(enable-timer 29 40)
)

; ============== VILLAGER MICRO

#load-if-not-defined DEATH-MATCH

; Food

; Eating sheep

#load-if-not-defined TURBO-RANDOM-MAP
#load-if-not-defined DEFEND-WONDER
#load-if-defined DARK-AGE-START
(defrule
	(or	(and	(or	(game-time > 780)
				(up-compare-goal 461 > 400))
			(or	(goal 451 -1)
				(nor	(up-set-target-by-id g: 451)
					(up-set-target-by-id g: 452))))
		(or	(strategic-number sn-maximum-food-drop-distance == 0)
			(strategic-number sn-nomad-style-start == 1)))
=>
	(up-jump-rule 149)
	(set-goal 451 -1)
)

(defrule
	(or	(up-compare-goal 461 > 400)
		(or	(unit-type-count sheep > 16)
			(or	(and	(game-time > 900)
					(up-compare-goal gl-current-age > gv-dark))
				(or	(unit-type-count villager-shepherd > 9)
					(or	(building-type-count-total town-center != 1)
						(or	(up-point-distance gl-position-center-x gl-position-self-x < 20)
							(up-compare-goal 473 >= 13)))))))
=>
	(set-goal 461 501)
)

(defrule
	(goal 461 501)
=>
	(up-full-reset-search)
	(up-find-local c: sheep c: 1)
	(up-set-target-object search-local c: 0)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-copy-point gl-temporary-point-x gl-position-self-x)
	(up-modify-goal gl-temporary-point-x c:- 1)
	(up-modify-goal gl-point-x c:- 2)
	(up-modify-goal gl-point-y c:- 2)
	(up-get-point position-object gl-saved-point-x)
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 4)
	(set-goal temporary-goal5 0)
)

(defrule
	(goal 461 501)
	(up-set-target-object search-local c: 0)
	(up-point-distance gl-saved-point-x gl-point-x > 0)
=>
	(up-target-point gl-point-x action-move -1 -1)
)

(defrule
	(goal 461 501)
	(up-set-target-object search-local c: 0)
	(up-compare-goal temporary-goal < 4)
=>
	(up-reset-search 0 1 0 0)
	(up-modify-goal temporary-goal c:+ 2)
	(up-find-local c: sheep c: 1)
	(up-set-target-object search-local c: 0)
	(up-modify-goal gl-point-y c:+ 2)
	(up-get-point position-object gl-saved-point-x)
	(up-jump-rule -2)
)

(defrule
	(goal 461 501)
	(up-set-target-object search-local c: 0)
	(goal temporary-goal2 0)
=>
	(up-reset-search 0 1 0 0)
	(up-modify-goal temporary-goal g:= temporary-goal5)
	(set-goal temporary-goal2 1)
	(up-modify-goal gl-point-y g:- temporary-goal4)
	(up-find-local c: sheep c: 1)
	(up-set-target-object search-local c: 0)
	(up-modify-goal gl-point-x c:+ 1)
	(up-get-point position-object gl-saved-point-x)
	(up-jump-rule -3)
)

(defrule
	(goal 461 501)
	(up-set-target-object search-local c: 0)
	(up-compare-goal temporary-goal3 < 2)
=>
	(up-reset-search 0 1 0 0)
	(set-goal temporary-goal 2)
	(set-goal temporary-goal2 0)
	(up-modify-goal temporary-goal3 c:+ 1)
	(set-goal temporary-goal4 2)
	(set-goal temporary-goal5 2)
	(up-modify-goal gl-point-y c:- 2)
	(up-find-local c: sheep c: 1)
	(up-set-target-object search-local c: 0)
	(up-modify-goal gl-point-x c:+ 1)
	(up-get-point position-object gl-saved-point-x)
	(up-jump-rule -4)
)

(defrule
	(goal 461 501)
	(up-set-target-object search-local c: 0)
	(up-point-distance gl-saved-point-x gl-temporary-point-x > 0)
=>
	(up-target-point gl-temporary-point-x action-move -1 -1)
	(up-reset-search 0 1 0 0)
	(up-find-local c: sheep c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-saved-point-x)
	(up-jump-rule -1)
)

(defrule
	(goal 461 501)
=>
	(set-goal 461 502)
)

(defrule
	(or	(game-time == 0)
		(up-compare-goal 461 > 400))
=>
	(up-jump-rule 140)
	(set-goal 451 -1)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 451 g:!= gl-lured-boar-id)
=>
	(up-full-reset-search)
	(up-find-local c: sheep c: 240)
	(up-get-search-state gl-local-total)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal7 0)
)

(defrule
	(unit-type-count sheep > 0)
	(up-set-target-by-id g: 451)
	(up-object-data object-data-class == sheep)
=>
	(up-get-point position-object gl-point-x)
	(up-get-point-distance gl-point-x gl-position-self-x gl-remote-last)
	(up-modify-goal gl-remote-last c:- 6)
)

(defrule
	(unit-type-count sheep > 0)
	(up-set-target-by-id g: 451)
	(up-object-data object-data-class == sheep)
	(up-set-target-object search-local g: temporary-goal6)
=>
	(up-get-point position-object gl-saved-point-x)
	(up-get-point-distance gl-saved-point-x gl-position-self-x gl-remote-total)
)

(defrule
	(unit-type-count sheep > 0)
	(up-set-target-by-id g: 451)
	(up-object-data object-data-class == sheep)
	(up-set-target-object search-local g: temporary-goal6)
	(up-object-data object-data-id g:!= 452)
	(up-compare-goal gl-remote-last g:> gl-remote-total)
	(up-compare-goal gl-remote-last > 3)
=>
	(up-get-object-data object-data-id 451)
;	(up-chat-data-to-player my-player-number ".1 1 => %d" g: 451)
;	(chat-to-allies "Closer sheep1 found.")
	(set-strategic-number sn-sheep-scouting-notice 1)
	(up-jump-rule 1)
)

(defrule
	(unit-type-count sheep > 0)
	(up-set-target-by-id g: 451)
	(up-object-data object-data-class == sheep)
	(up-set-target-object search-local g: temporary-goal6)
=>
	(up-modify-goal temporary-goal6 c:+ 1)
	(up-jump-rule -3)
)

(defrule
	(unit-type-count sheep > 0)
	(up-set-target-by-id g: 452)
	(up-object-data object-data-class == sheep)
=>
	(up-get-point position-object gl-point-x)
	(up-get-point-distance gl-point-x gl-position-self-x gl-remote-last)
	(up-modify-goal gl-remote-last c:- 6)
)

(defrule
	(unit-type-count sheep > 0)
	(up-set-target-by-id g: 452)
	(up-object-data object-data-class == sheep)
	(up-set-target-object search-local g: temporary-goal7)
=>
	(up-get-point position-object gl-saved-point-x)
	(up-get-point-distance gl-saved-point-x gl-position-self-x gl-remote-total)
)

(defrule
	(unit-type-count sheep > 0)
	(up-set-target-by-id g: 452)
	(up-object-data object-data-class == sheep)
	(up-set-target-object search-local g: temporary-goal7)
	(up-object-data object-data-id g:!= 451)
	(up-compare-goal gl-remote-last g:> gl-remote-total)
	(up-compare-goal gl-remote-last > 3)
=>
	(up-get-object-data object-data-id 452)
;	(up-chat-data-to-player my-player-number ".2 1 => %d" g: 452)
;	(chat-to-allies "Closer sheep2 found.")
	(set-strategic-number sn-sheep-scouting-notice 1)
	(up-jump-rule 1)
)

(defrule
	(unit-type-count sheep > 0)
	(up-set-target-by-id g: 452)
	(up-object-data object-data-class == sheep)
	(up-set-target-object search-local g: temporary-goal7)
=>
	(up-modify-goal temporary-goal7 c:+ 1)
	(up-jump-rule -3)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 451 g:!= gl-lured-boar-id)
	(up-compare-goal temporary-goal2 g:< gl-local-total)
	(up-compare-goal 451 g:!= temporary-goal4)
=>
	(up-set-target-object search-local g: temporary-goal2)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-get-object-data object-data-id temporary-goal4)
	(up-set-target-by-id g: 451)
;	(up-chat-data-to-player my-player-number ".1 2 => %d" g: 451)
	(up-get-object-data object-data-hitpoints gl-remote-total)
	(up-jump-rule -1)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 451 g:!= gl-lured-boar-id)
	(up-compare-goal temporary-goal3 g:< gl-local-total)
	(up-compare-goal 452 g:!= temporary-goal5)
=>
	(up-set-target-object search-local g: temporary-goal3)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-get-object-data object-data-id temporary-goal5)
	(up-set-target-by-id g: 452)
;	(up-chat-data-to-player my-player-number ".2 2 => %d" g: 452)
	(up-get-object-data object-data-hitpoints gl-remote-last)
	(up-jump-rule -1)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 451 g:== 452)
	(up-compare-goal 451 g:!= gl-lured-boar-id)
	(up-compare-goal 451 g:!= temporary-goal4)
	(up-compare-goal 451 != 0)
	(up-compare-goal gl-remote-total > 0)
	(up-set-target-by-id g: 451)
	(up-object-data object-data-class == sheep)
=>
	(set-goal 451 0)
	(set-goal 461 0)
;	(up-chat-data-to-player my-player-number ".1 3 => %d" g: 451)
;	(chat-to-player my-player-number "Sheep12 stolen.")
	(up-modify-sn sn-sheep-count c:- 1)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 451 g:!= gl-lured-boar-id)
	(up-compare-goal 451 g:!= temporary-goal4)
	(up-compare-goal 451 != 0)
	(up-compare-goal gl-remote-total > 0)
	(up-set-target-by-id g: 451)
	(up-object-data object-data-class == sheep)
=>
	(set-goal 451 0)
	(set-goal 461 0)
;	(up-chat-data-to-player my-player-number ".1 4 => %d" g: 451)
;	(chat-to-player my-player-number "Sheep1 stolen.")
	(up-modify-sn sn-sheep-count c:- 1)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 451 g:!= gl-lured-boar-id)
	(up-compare-goal 452 g:!= temporary-goal5)
	(up-compare-goal 452 != 0)
	(up-compare-goal gl-remote-last > 0)
	(up-set-target-by-id g: 452)
	(up-object-data object-data-class == sheep)
=>
	(set-goal 452 0)
	(set-goal 462 0)
;	(up-chat-data-to-player my-player-number ".2 4 => %d" g: 452)
;	(chat-to-player my-player-number "Sheep2 stolen.")
	(up-modify-sn sn-sheep-count c:- 1)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 451 != -1)
	(up-compare-goal 451 g:== gl-lured-boar-id)
	(not	(up-set-target-by-id g: 451))
=>
	(set-goal 451 0)
	(set-goal 452 0)
	(set-goal 461 0)
	(set-goal 462 0)
;	(up-chat-data-to-player my-player-number ".1 5 => %d" g: 451)
;	(up-chat-data-to-player my-player-number ".2 5 => %d" g: 452)
;	(chat-to-player my-player-number "Boar is gone.")
)

(defrule
	(not	(up-set-target-by-id g: gl-lured-boar-id))
=>
	(set-goal gl-lured-boar-id -1)
)

(defrule
	(unit-type-count sheep > 0)
=>
	(up-set-target-by-id g: 451)
	(up-get-object-data object-data-hitpoints temporary-goal)
	(up-get-point position-object gl-point-x)
	(up-copy-point gl-saved-point-x gl-position-self-x)
	(up-modify-goal gl-saved-point-x c:- 1)
	(up-modify-goal gl-saved-point-x c:+ 1)
	(up-set-target-by-id g: 452)
	(up-get-object-data object-data-hitpoints temporary-goal2)
	(up-get-point position-object gl-temporary-point-x)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal7 0)
)

(defrule
	(or	(and	(unit-type-count sheep > 0)
			(and	(goal temporary-goal 0)
				(up-point-distance gl-point-x gl-saved-point-x > 7)))
		(and	(or	(unit-type-count sheep > 0)
				(up-set-target-by-id g: 452))
			(and	(up-compare-goal 451 != -1)
				(not	(up-set-target-by-id g: 451)))))
=>
	(set-goal 451 0)
	(set-goal 461 0)
)

(defrule
	(or	(and	(unit-type-count sheep > 0)
			(and	(goal temporary-goal2 0)
				(up-point-distance gl-temporary-point-x gl-saved-point-x > 7)))
		(and	(or	(unit-type-count sheep > 0)
				(up-set-target-by-id g: 451))
			(and	(up-compare-goal 452 != -1)
				(not	(up-set-target-by-id g: 452)))))
=>
	(set-goal 452 0)
	(set-goal 462 0)
)

(defrule
	(or	(unit-type-count sheep > 0)
		(or	(strategic-number sn-maximum-food-drop-distance == 6)
			(or	(up-set-target-by-id g: 451)
				(up-set-target-by-id g: 452))))
=>
	(up-set-target-by-id g: 451)
	(up-get-object-data object-data-carry 461)
	(up-set-target-by-id g: 452)
	(up-get-object-data object-data-carry 462)
	(up-set-target-by-id g: 456)
	(up-get-object-data object-data-carry 466)
	(up-set-target-by-id g: 457)
	(set-strategic-number sn-maximum-food-drop-distance 10)
)

(defrule
	(or	(goal 451 0)
		(not	(up-set-target-by-id g: 451)))
=>
	(set-goal 461 0)
)

(defrule
	(or	(goal 452 0)
		(not	(up-set-target-by-id g: 452)))
=>
	(set-goal 462 0)
)

(defrule
	(or	(and	(unit-type-count sheep > 0)
			(and	(dropsite-min-distance food <= 5)
				(unit-type-count villager-shepherd > 0)))
		(dropsite-min-distance boar-hunting <= 6))
	(idle-farm-count < 1)
=>
	(set-strategic-number sn-maximum-food-drop-distance 5)
)

(defrule
	(dropsite-min-distance boar-hunting < 7)
	(up-set-target-by-id g: gl-lured-boar-id)
=>
	(up-set-target-by-id g: 451)
	(up-get-object-data object-data-hitpoints temporary-goal)
	(up-set-target-by-id g: 452)
	(up-get-object-data object-data-hitpoints temporary-goal2)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-get-point position-object gl-point-x)
)

(defrule
	(or	(dropsite-min-distance boar-hunting >= 7)
		(or	(up-point-distance gl-position-self-x gl-point-x >= 6)
			(not	(up-set-target-by-id g: gl-lured-boar-id))))
=>
	(up-jump-rule 8)
)

(defrule
	(up-set-target-by-id g: 451)
	(up-object-data object-data-hitpoints == 0)
	(up-compare-goal 451 g:!= 452)
	(up-compare-goal 451 g:!= gl-lured-boar-id)
=>
	(up-modify-goal 454 g:= 451)
	(up-modify-goal 456 g:= 451)
;	(chat-to-player my-player-number "Use old as extra1")
)

(defrule
	(up-set-target-by-id g: 452)
	(up-object-data object-data-hitpoints == 0)
	(up-compare-goal 452 g:!= 451)
	(up-compare-goal 452 g:!= gl-lured-boar-id)
=>
	(up-modify-goal 455 g:= 452)
	(up-modify-goal 456 g:= 452)
;	(chat-to-player my-player-number "Use old as extra2")
)

(defrule
	(up-set-target-by-id g: 452)
	(up-compare-goal 452 g:!= gl-lured-boar-id)
	(or	(and	(up-compare-goal 462 g:> 461)
			(up-object-data object-data-hitpoints == 0))
		(or	(up-compare-goal 451 g:== gl-lured-boar-id)
			(and	(up-set-target-by-id g: 452)
				(up-object-data object-data-hitpoints > 0))))
=>
	(up-modify-goal 451 g:= gl-lured-boar-id)
	(up-set-target-by-id g: 451)
	(up-get-object-data object-data-carry 461)
;	(up-chat-data-to-player my-player-number ".1 6 => %d" g: 451)
	(up-jump-rule 1)
)

(defrule
	(up-set-target-by-id g: 451)
	(up-compare-goal 451 g:!= gl-lured-boar-id)
	(or	(and	(up-compare-goal 461 g:> 462)
			(up-object-data object-data-hitpoints == 0))
		(or	(up-compare-goal 452 g:== gl-lured-boar-id)
			(or	(and	(up-set-target-by-id g: 452)
					(up-object-data object-data-hitpoints > 0))
				(up-compare-goal 452 g:!= gl-lured-boar-id))))
=>
	(up-modify-goal 452 g:= gl-lured-boar-id)
	(up-set-target-by-id g: 452)
;	(up-chat-data-to-player my-player-number ".2 11 => %d" g: 452)
	(up-get-object-data object-data-carry 462)
)

(defrule
	(or	(not	(up-set-target-by-id g: 452))
		(up-compare-goal 452 g:!= gl-lured-boar-id))
	(up-compare-goal 451 g:!= gl-lured-boar-id)
=>
	(up-modify-goal 451 g:= gl-lured-boar-id)
;	(up-chat-data-to-player my-player-number ".1 7 => %d" g: 451)
	(up-set-target-by-id g: 451)
	(up-get-object-data object-data-carry 461)
)

(defrule
	(up-compare-goal 451 g:!= gl-lured-boar-id)
	(up-compare-goal 452 g:!= gl-lured-boar-id)
=>
	(up-jump-rule 2)
)

(defrule
	(or	(and	(up-set-target-by-id g: 451)
			(and	(up-object-data object-data-hitpoints > 0)
				(up-object-data object-data-class == sheep)))
		(and	(up-set-target-by-id g: 452)
			(and	(up-object-data object-data-hitpoints > 0)
				(up-object-data object-data-class == sheep))))
=>
	(up-modify-goal 451 g:= gl-lured-boar-id)
	(up-modify-goal 452 g:= gl-lured-boar-id)
;	(up-chat-data-to-player my-player-number ".1 8 => %d" g: 451)
;	(up-chat-data-to-player my-player-number ".2 6 => %d" g: 452)
;	(chat-to-player my-player-number "Target only the boar1")
)

(defrule
	(or	(not	(up-set-target-by-id g: 451))
		(or	(not	(up-set-target-by-id g: 452))
			(or	(and	(up-compare-goal 461 < 1)
					(up-compare-goal 451 g:!= gl-lured-boar-id))
				(and	(up-compare-goal 462 < 1)
					(up-compare-goal 452 g:!= gl-lured-boar-id)))))
=>
	(up-modify-goal 451 g:= gl-lured-boar-id)
	(up-modify-goal 452 g:= gl-lured-boar-id)
;	(up-chat-data-to-player my-player-number ".1 999 => %d" g: 451)
;	(chat-to-player my-player-number "Target only the boar2")
)

(defrule
	(up-compare-goal 451 g:== gl-lured-boar-id)
	(up-compare-goal 452 g:== gl-lured-boar-id)
	(up-set-target-by-id g: 451)
=>
	(up-get-object-data object-data-carry 461)
	(up-get-object-data object-data-carry 462)
)

(defrule
	(up-compare-goal 451 g:== gl-lured-boar-id)
	(up-compare-goal 452 g:== gl-lured-boar-id)
	(up-set-target-by-id g: 454)
	(up-object-data object-data-hitpoints == 0)
	(up-object-data object-data-class == sheep)
=>
	(up-modify-goal 451 g:= 454)
	(up-modify-goal 456 g:= 454)
	(up-set-target-by-id g: 454)
	(up-get-object-data object-data-carry 461)
	(set-goal 454 -1)
;	(up-chat-data-to-player my-player-number ".1 10 => %d" g: 451)
	(chat-to-player my-player-number "Use boar+sheep1")
)

(defrule
	(up-compare-goal 451 g:== gl-lured-boar-id)
	(up-compare-goal 452 g:== gl-lured-boar-id)
	(up-set-target-by-id g: 455)
	(up-object-data object-data-hitpoints == 0)
	(up-object-data object-data-class == sheep)
=>
	(up-modify-goal 451 g:= 455)
	(up-modify-goal 456 g:= 455)
	(up-set-target-by-id g: 455)
	(up-get-object-data object-data-carry 461)
	(set-goal 455 -1)
;	(up-chat-data-to-player my-player-number ".1 11 => %d" g: 451)
;	(chat-to-player my-player-number "Use boar+sheep2")
)

(defrule
	(up-compare-goal 451 g:== 452)
	(up-compare-goal 451 g:!= 456)
	(up-set-target-by-id g: 456)
	(up-object-data object-data-hitpoints == 0)
	(up-object-data object-data-class == sheep)
=>
	(up-modify-goal 451 g:= 456)
	(up-get-object-data object-data-carry 461)
;	(up-chat-data-to-player my-player-number ".1 12 => %d" g: 451)
;	(chat-to-player my-player-number "Use boar+sheep3")
)

(defrule
	(dropsite-min-distance boar-hunting < 7)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-compare-goal 451 g:== 452)
	(up-compare-goal 461 < 1)
	(up-compare-goal 462 < 1)
=>
	(set-goal 451 0)
	(set-goal 461 0)
)

(defrule
	(unit-type-count sheep > 0)
	(up-set-target-by-id g: 456)
	(up-compare-goal 461 < 1)
=>
	(up-modify-goal 451 g:= 456)
	(up-set-target-by-id g: 456)
	(up-get-object-data object-data-carry 461)
	(set-goal 456 -1)
;	(up-chat-data-to-player my-player-number ".1 13 => %d" g: 451)
;	(chat-to-player my-player-number "Use extra sheep1")
)

(defrule
	(unit-type-count sheep > 0)
	(up-set-target-by-id g: 456)
	(up-compare-goal 462 < 1)
=>
	(up-modify-goal 452 g:= 456)
	(up-set-target-by-id g: 456)
	(up-get-object-data object-data-carry 462)
	(set-goal 456 -1)
	(up-chat-data-to-player my-player-number ".2 8 => %d" g: 452)
;	(chat-to-player my-player-number "Use extra sheep2")
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 451 g:!= gl-lured-boar-id)
	(up-compare-goal 452 g:== gl-lured-boar-id)
	(not	(up-set-target-by-id g: 456))
	(up-compare-goal 473 >= 8)
=>
	(up-modify-goal 456 g:= 451)
	(set-goal 474 1)
;	(chat-to-player my-player-number "Allow extra sheep1")
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 452 g:!= gl-lured-boar-id)
	(up-compare-goal 451 g:== gl-lured-boar-id)
	(not	(up-set-target-by-id g: 456))
	(up-compare-goal 473 >= 8)
=>
	(up-modify-goal 456 g:= 452)
	(set-goal 474 1)
;	(chat-to-player my-player-number "Allow extra sheep2")
)

(defrule
	(up-set-target-by-id g: 457)
	(not	(up-set-target-by-id g: 456))
=>
	(up-modify-goal 456 g:= 457)
	(set-goal 457 -1)
;	(chat-to-player my-player-number "Use extra sheep3")
)

(defrule
	(or	(up-compare-goal 473 < 8)
		(or	(nor	(up-compare-goal 451 g:== gl-lured-boar-id)
				(up-compare-goal 452 g:== gl-lured-boar-id))
			(or	(up-compare-goal 474 != -1)
				(or	(up-set-target-by-id g: 456)
					(up-compare-goal 451 g:!= 452)))))
=>
	(up-jump-rule 2)
)

(defrule
	(unit-type-count sheep > 0)
=>
	(up-full-reset-search)
	(up-find-local c: sheep c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-saved-point-x)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-modify-goal gl-point-x c:- 1)
	(up-modify-goal gl-point-y c:+ 1)
	(up-target-point 0 action-stop -1 -1)
	(set-goal 474 1)
	(up-get-object-data object-data-id 456)
;	(chat-to-player my-player-number "I want extra sheep2")
)

(defrule
	(unit-type-count sheep > 0)
	(or	(up-compare-goal gl-saved-point-x g:!= gl-point-x)
		(up-compare-goal gl-saved-point-y g:!= gl-point-y))
=>
	(up-target-point gl-point-x action-move -1 -1)
;	(chat-to-player my-player-number "Send extra sheep2")
)

(defrule
	(or	(up-compare-goal 473 < 8)
		(or	(nor	(up-compare-goal 451 g:== gl-lured-boar-id)
				(up-compare-goal 452 g:== gl-lured-boar-id))
			(or	(up-compare-goal 474 != -1)
				(or	(up-set-target-by-id g: 457)
					(up-compare-goal 466 > 25)))))
=>
	(up-jump-rule 2)
)

(defrule
	(up-set-target-by-id g: 456)
	(unit-type-count sheep > 0)
=>
	(up-full-reset-search)
	(up-find-local c: sheep c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-saved-point-x)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-modify-goal gl-point-x c:- 1)
	(up-modify-goal gl-point-y c:+ 1)
	(up-target-point 0 action-stop -1 -1)
	(up-get-object-data object-data-id 457)
;	(chat-to-player my-player-number "I want extra sheep3")
)

(defrule
	(up-set-target-by-id g: 456)
	(unit-type-count sheep > 0)
	(or	(up-compare-goal gl-saved-point-x g:!= gl-point-x)
		(up-compare-goal gl-saved-point-y g:!= gl-point-y))
=>
	(up-target-point gl-point-x action-move -1 -1)
;	(chat-to-player my-player-number "Send extra sheep3")
)

(defrule
	(goal 474 1)
	(or	(not	(up-set-target-by-id g: 456))
		(and	(up-compare-goal 451 g:!= 452)
			(and	(up-compare-goal 451 g:!= 456)
				(up-compare-goal 452 g:!= 456))))
=>
	(set-goal 456 -1)
	(set-goal 474 -1)
;	(chat-to-player my-player-number "Disable extra sheep2")
)

(defrule
	(up-compare-goal 456 != -1)
	(or	(not	(up-set-target-by-id g: 456))
		(and	(up-compare-goal 451 g:== gl-lured-boar-id)
			(and	(up-compare-goal 452 g:== gl-lured-boar-id)
				(and	(up-compare-goal 461 >= 55)
					(goal 474 -1)))))
	(nand	(up-set-target-by-id g: 456)
		(up-object-data object-data-hitpoints == 0))
=>
	(set-goal 456 -1)
;	(chat-to-player my-player-number "Disable extra sheep")
)

(defrule
	(up-compare-goal 457 != -1)
	(or	(not	(up-set-target-by-id g: 457))
		(and	(up-compare-goal 451 g:== gl-lured-boar-id)
			(and	(up-compare-goal 452 g:== gl-lured-boar-id)
				(and	(up-compare-goal 461 >= 55)
					(goal 474 -1)))))
	(nand	(up-set-target-by-id g: 457)
		(up-object-data object-data-hitpoints == 0))
=>
	(set-goal 457 -1)
;	(chat-to-player my-player-number "Disable extra sheep31")
)

(defrule
	(up-compare-goal 457 != -1)
	(up-set-target-by-id g: 457)
	(up-object-data object-data-hitpoints > 0)
	(or	(up-compare-goal 461 >= 55)
		(up-compare-goal 462 >= 55))
	(up-compare-goal 473 < 8)
=>
	(set-goal 457 -1)
;	(chat-to-player my-player-number "Disable extra sheep32")
)

(defrule
	(or	(unit-type-count sheep == 0)
		(or	(and	(up-compare-goal 456 != -1)
				(up-compare-goal 466 >= 55))
			(or	(goal gl-lured-boar-id -1)
				(or	(up-compare-goal 461 < 1)
					(up-compare-goal 462 < 1)))))
=>
	(up-jump-rule 2)
)

(defrule
	(or	(up-compare-goal 451 g:== gl-lured-boar-id)
		(up-compare-goal 452 g:== gl-lured-boar-id))
	(up-compare-goal 461 < 55)
	(up-compare-goal 462 < 55)
=>
	(up-full-reset-search)
	(up-find-local c: sheep c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-saved-point-x)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-modify-goal gl-point-x c:- 1)
	(up-modify-goal gl-point-y c:+ 1)
	(up-target-point 0 action-stop -1 -1)
)

(defrule
	(or	(up-compare-goal 451 g:== gl-lured-boar-id)
		(up-compare-goal 452 g:== gl-lured-boar-id))
	(up-compare-goal 461 < 55)
	(up-compare-goal 462 < 55)
	(or	(up-compare-goal gl-saved-point-x g:!= gl-point-x)
		(up-compare-goal gl-saved-point-y g:!= gl-point-y))
=>
	(up-get-object-data object-data-id 456)
	(up-target-point gl-point-x action-move -1 -1)
;	(chat-to-player my-player-number "Send extra sheep1")
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 461 < 1)
=>
	(set-goal temporary-goal6 1)
	(set-goal temporary-goal4 6)
)

(defrule
	(unit-type-count sheep > 0)
	(or	(up-compare-goal 462 < 1)
		(and	(up-compare-goal 451 g:== 452)
			(and	(up-set-target-by-id g: 451)
				(up-object-data object-data-class == livestock-class))))
=>
	(set-goal temporary-goal7 1)
	(set-goal temporary-goal4 6)
)

(defrule
	(unit-type-count sheep > 0)
	(or	(goal temporary-goal6 1)
		(goal temporary-goal7 1))
=>
	(up-set-target-point gl-position-self-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 g: temporary-goal4)
)

(defrule
	(unit-type-count sheep > 0)
	(goal temporary-goal6 1)
	(up-find-local c: sheep c: 1)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:!= 452)
=>
	(up-get-point position-object gl-saved-point-x)
	(up-get-object-data object-data-id 451)
;	(up-chat-data-to-player my-player-number ".1 14 => %d" g: 451)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-modify-goal gl-point-x c:- 1)
	(up-modify-goal gl-point-y c:+ 1)
	(up-target-point 0 action-stop -1 -1)
)

(defrule
	(unit-type-count sheep > 0)
	(goal temporary-goal6 1)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:!= 452)
	(or	(up-compare-goal gl-saved-point-x g:!= gl-point-x)
		(up-compare-goal gl-saved-point-y g:!= gl-point-y))
=>
	(up-target-point gl-point-x action-move -1 -1)
	(set-goal temporary-goal6 0)
;	(chat-to-all "Send new sheep1")
)

(defrule
	(unit-type-count sheep > 0)
	(goal temporary-goal6 0)
	(goal temporary-goal7 1)
	(up-find-local c: sheep c: 1)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:!= 451)
=>
	(up-get-point position-object gl-saved-point-x)
	(up-get-object-data object-data-id 452)
;	(up-chat-data-to-player my-player-number ".2 10 => %d" g: 452)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-modify-goal gl-point-x c:- 1)
	(up-modify-goal gl-point-y c:+ 1)
	(up-target-point 0 action-stop -1 -1)
)

(defrule
	(unit-type-count sheep > 0)
	(goal temporary-goal6 0)
	(goal temporary-goal7 1)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:!= 451)
	(or	(up-compare-goal gl-saved-point-x g:!= gl-point-x)
		(up-compare-goal gl-saved-point-y g:!= gl-point-y))
=>
	(up-target-point gl-point-x action-move -1 -1)
	(set-goal temporary-goal7 0)
;	(chat-to-all "Send new sheep2")
)

(defrule
	(unit-type-count sheep > 0)
	(or	(goal temporary-goal6 1)
		(goal temporary-goal7 1))
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 0 1 0 0)
	(up-jump-rule -5)
)

(defrule
	(unit-type-count sheep > 0)
	(or	(goal temporary-goal6 1)
		(goal temporary-goal7 1))
	(up-compare-goal temporary-goal4 < 350)
	(not	(up-set-target-object search-local c: 0))
=>
	(up-modify-goal temporary-goal4 c:+ 1)
	(up-jump-rule -7)
)

; Optimising shepherds


(defrule
	(true)
=>
	(up-full-reset-search)
	(set-goal temporary-goal 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 -1)
	(set-goal 463 0)
	(up-set-target-by-id g: 451)
	(up-get-point position-object gl-point-x)
	(up-set-target-by-id g: 452)
	(up-get-point position-object gl-temporary-point-x)
	(up-copy-point gl-point2-x gl-temporary-point-x)
	(up-copy-point gl-object-point-x gl-position-self-x)
	(up-modify-goal gl-object-point-x c:- 1)
	(up-modify-goal gl-object-point-y c:+ 1)
	(up-get-point-distance gl-point-x gl-object-point-x temporary-goal8)
)

(defrule
	(true)
=>
	(set-goal gl-local-total sheep)
	(set-goal gl-local-last -1)
	(set-goal gl-remote-total -2)
)

(defrule
	(or	(and	(up-set-target-by-id g: 451)
			(not	(up-set-target-by-id g: 452)))
		(or	(up-compare-goal 461 g:<= 462)
			(and	(up-compare-goal 461 g:> 462)
				(up-compare-goal 462 <= 15))))
	(up-compare-goal 461 > 15)
=>
	(up-set-target-point gl-point-x)
	(set-goal 463 1)
;	(chat-to-player my-player-number "Eating 1")
;	(up-chat-data-to-player my-player-number "Eating 1: %d" g: 451)
;	(up-chat-data-to-player my-player-number "Other 2: %d" g: 452)
)

(defrule
	(or	(and	(up-set-target-by-id g: 452)
			(not	(up-set-target-by-id g: 451)))
		(or	(up-compare-goal 461 g:> 462)
			(and	(up-compare-goal 462 g:> 461)
				(up-compare-goal 461 <= 15))))
	(up-compare-goal 462 > 15)
=>
	(up-copy-point gl-point-x gl-temporary-point-x)
	(up-set-target-point gl-point-x)
	(set-goal 463 2)
;	(chat-to-player my-player-number "Eating 2")
	(up-get-point-distance gl-point-x gl-object-point-x temporary-goal8)
;	(up-chat-data-to-player my-player-number "Eating 2: %d" g: 452)
)

(defrule
	(up-set-target-by-id g: 452)
	(up-object-data object-data-class == sheep)
	(up-compare-goal 462 g:> 461)
	(up-compare-goal 461 > 0)
	(up-compare-goal 461 <= 15)
=>
	(up-get-object-data object-data-hitpoints temporary-goal2)
	(up-set-target-point gl-point-x)
	(set-goal 463 3)
;	(chat-to-player my-player-number "Eating 3")
;	(up-chat-data-to-player my-player-number "Eating 3: %d" g: 452)
)

(defrule
	(up-set-target-by-id g: 451)
	(up-object-data object-data-class == sheep)
	(up-compare-goal 461 g:> 462)
	(up-compare-goal 462 > 0)
	(up-compare-goal 462 <= 15)
=>
	(up-get-object-data object-data-hitpoints temporary-goal2)
	(up-copy-point gl-point-x gl-temporary-point-x)
	(up-set-target-point gl-point-x)
	(set-goal 463 4)
;	(chat-to-player my-player-number "Eating 4")
;	(up-chat-data-to-player my-player-number "Eating 4: %d" g: 451)
)

(defrule
	(up-set-target-by-id g: 452)
	(up-object-data object-data-hitpoints == 0)
	(up-compare-goal 462 g:> 461)
	(goal 461 0)
	(unit-type-count sheep > 0); More can be sent to be eaten
=>
	(up-copy-point gl-point-x gl-temporary-point-x)
	(up-set-target-point gl-point-x)
	(up-set-target-by-id g: 451)
	(set-goal 463 5)
;	(chat-to-player my-player-number "Eating 5")
;	(up-chat-data-to-player my-player-number "Eating 5: %d" g: 452)
	(up-get-point-distance gl-point-x gl-object-point-x temporary-goal8)
)

(defrule
	(up-set-target-by-id g: 451)
	(up-object-data object-data-hitpoints == 0)
	(up-compare-goal 461 g:> 462)
	(goal 462 0)
	(unit-type-count sheep > 0)
=>
	(up-set-target-point gl-point-x)
	(up-set-target-by-id g: 452)
	(set-goal 463 6)
;	(up-chat-data-to-player my-player-number "Eating 6: %d" g: 451)
;	(chat-to-player my-player-number "Eating 6")
)


(defrule
	(up-set-target-by-id g: 456)
=>
	(up-modify-goal gl-remote-total g:= 456)
	(up-get-point position-object gl-temporary-point-x)
)

(defrule
	(up-compare-goal 473 >= 8)
	(up-set-target-by-id g: 456)
	(up-point-distance gl-temporary-point-x gl-object-point-x < 5)
=>
	(up-set-target-point gl-temporary-point-x)
;	(chat-to-player my-player-number "Eating 456")
)

(defrule
	(or	(up-compare-goal 473 < 8)
		(or	(up-point-distance gl-temporary-point-x gl-object-point-x >= 4)
			(not	(up-set-target-by-id g: 456))))
	(up-compare-goal 451 g:== gl-lured-boar-id)
	(up-compare-goal 452 g:== gl-lured-boar-id)
=>
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: -1)
)

(defrule
	(or	(and	(up-compare-goal 463 >= 1)
			(up-compare-goal 463 <= 6))
		(up-compare-goal 473 >= 8))
	(or	(up-set-target-by-id g: 451)
		(up-set-target-by-id g: 452))
=>
	(up-reset-search 1 1 1 1)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-saved-point-x)
)

(defrule
	(up-compare-goal gl-modern-build-order >= 1)
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-target-id != -1)
		(up-point-distance gl-saved-point-x gl-object-point-x > 4)); Replace with proper check from TC's middle point
	(or	(goal gl-local-last wild-boar)
		(goal gl-local-last deer))
=>
	(up-jump-rule 8)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-compare-goal gl-modern-build-order >= 1)
	(up-object-data object-data-type != shepherd1)
	(up-object-data object-data-type != shepherd2)
	(goal gl-local-last sheep)
=>
	(up-jump-rule 7)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-point-distance gl-temporary-point-x gl-object-point-x < 5)
	(up-object-data object-data-target g:== gl-local-total)
	(up-object-data object-data-target-id g:!= 456)
	(up-compare-goal 473 >= 8)
	(up-set-target-by-id g: 456)
=>
	(up-target-objects 1 action-default -1 -1)
;	(chat-to-player my-player-number "Eat extra sheep")
	(up-jump-rule 6)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry g:>= gl-villager-max-carry)
	(up-point-distance gl-point-x gl-saved-point-x > 3)
	(up-point-distance gl-point-x gl-object-point-x > 3)
=>
	(up-jump-rule 1)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry g:>= gl-villager-max-carry)
	(nand	(up-object-data object-data-target == sheep)
		(or	(and	(up-set-target-by-id g: 451)
				(up-object-data object-data-class != sheep))
			(and	(up-set-target-by-id g: 452)
				(up-object-data object-data-class != sheep))))
=>
	(up-jump-rule 2)
)

(defrule
	(or	(goal 463 1)
		(goal 463 6))
	(up-point-distance gl-point-x gl-object-point-x < 6)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:!= temporary-goal5)
	(up-object-data object-data-target g:== gl-local-total)
	(up-object-data object-data-target-id g:!= 451)
	(nand	(up-object-data object-data-target-id g:== gl-remote-total)
		(and	(up-set-target-by-id g: 451)
			(up-object-data object-data-class == boar-food)))
=>
	(up-set-target-by-id g: 451)
	(up-target-objects 1 action-default -1 -1)
;	(chat-to-player my-player-number "Eat sheep/boar1")
)

(defrule
	(or	(goal 463 2)
		(goal 463 5))
	(up-point-distance gl-point-x gl-object-point-x < 6)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:!= temporary-goal5)
	(up-object-data object-data-target g:== gl-local-total)
	(up-object-data object-data-target-id g:!= 452)
	(nand	(up-object-data object-data-target-id g:== gl-remote-total)
		(and	(up-set-target-by-id g: 452)
			(up-object-data object-data-class == boar-food)))
=>
	(up-set-target-by-id g: 452)
	(up-target-objects 1 action-default -1 -1)
;	(chat-to-player my-player-number "Eat sheep/boar2")
)

(defrule
	(goal 463 3)
	(up-point-distance gl-point-x gl-object-point-x < 4)
	(up-point-distance gl-point2-x gl-object-point-x < 6)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target g:== gl-local-total)
	(up-object-data object-data-target-id g:!= 452)
	(up-compare-goal temporary-goal2 > 0)
	(up-timer-status 15 != timer-running); Change later with check if any nearby shepherd is already targeting new sheep
=>
	(up-get-object-data object-data-id temporary-goal5)
	(set-goal temporary-goal4 0)
	(up-set-target-by-id g: 452)
	(up-target-objects 1 action-default -1 -1)
;	(chat-to-player my-player-number "Start new sheep2"); <-- starting should be done with closest villager (precise-check)
	(set-goal 463 1)
	(up-set-target-point gl-point-x)
;	(up-filter-distance c: 2 c: -1)
)

(defrule
	(goal 463 4)
	(up-point-distance gl-point-x gl-object-point-x < 4)
	(up-compare-goal temporary-goal8 < 6); Distance between sheep1 and home <-- fix later
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target g:== gl-local-total)
	(up-object-data object-data-target-id g:!= 451)
	(up-compare-goal temporary-goal2 > 0)
	(up-timer-status 15 != timer-running)
=>
	(up-get-object-data object-data-id temporary-goal5)
	(set-goal temporary-goal4 0)
	(up-set-target-by-id g: 451)
	(up-target-objects 1 action-default -1 -1)
;	(chat-to-player my-player-number "Start new sheep1")
	(up-copy-point gl-point-x gl-point2-x)
	(up-set-target-point gl-point-x)
;	(up-filter-distance c: 2 c: -1)
	(set-goal 463 2)
)

(defrule
	(or	(and	(up-compare-goal 463 >= 1)
			(up-compare-goal 463 <= 6))
		(up-compare-goal 473 >= 8))
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 1 1 1 1)
	(up-modify-goal temporary-goal4 c:+ 1)
	(up-find-local c: villager-class g: temporary-goal4)
	(up-reset-search 0 1 0 0)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-saved-point-x)
	(up-jump-rule -10)
)

(defrule
	(up-compare-goal gl-modern-build-order >= 1)
	(goal gl-local-total sheep)
	(up-compare-goal temporary-goal8 < 6)
	(game-time < 35)
=>
	(set-goal gl-local-total -1)
	(set-goal temporary-goal4 0)
	(up-reset-search 1 1 1 1)
	(up-jump-rule -12)
)

(defrule
	(up-compare-goal gl-modern-build-order >= 1)
	(goal gl-local-last -1)
	(up-compare-goal temporary-goal8 < 6)
	(game-time >= 35)
=>
	(set-goal gl-local-total -1)
	(set-goal gl-local-last sheep)
	(set-goal temporary-goal4 0)
	(up-reset-search 1 1 1 1)
	(up-jump-rule -13)
)

(defrule
	(up-compare-goal gl-modern-build-order >= 1)
	(goal gl-local-last sheep)
	(or	(up-set-target-by-id g: 451)
		(up-set-target-by-id g: 452))
;	(up-object-data object-data-class == boar-food)
	(up-compare-goal temporary-goal8 < 6)
	(game-time >= 35)
=>
	(set-goal gl-local-total boar-food)
	(set-goal gl-local-last wild-boar)
	(set-goal temporary-goal4 0)
	(up-reset-search 1 1 1 1)
	(up-jump-rule -14)
)

(defrule
	(up-compare-goal gl-modern-build-order >= 1)
	(goal gl-local-last wild-boar)
	(or	(up-set-target-by-id g: 451)
		(up-set-target-by-id g: 452))
;	(up-object-data object-data-class == boar-food)
	(up-compare-goal temporary-goal8 < 6)
	(game-time >= 35)
=>
	(set-goal gl-local-total deer-food)
	(set-goal gl-local-last deer)
	(set-goal temporary-goal4 0)
	(up-reset-search 1 1 1 1)
	(up-jump-rule -15)
)

(defrule
	(goal gl-next-villager-target food)
	(or	(goal 463 1)
		(or	(goal 463 4)
			(goal 463 6)))
	(up-compare-goal temporary-goal8 < 6)
	(up-set-target-by-id g: 451)
=>
	(up-reset-search 1 1 1 1)
	(up-add-object-by-id search-local g: gl-main-tc-id)
	(up-target-objects 1 action-gather -1 -1)
	(set-goal gl-tc-gather-point sheep)
;	(chat-to-all "set1.")
)

(defrule
	(goal gl-next-villager-target food)
	(or	(goal 463 2)
		(or	(goal 463 3)
			(goal 463 5)))
	(up-compare-goal temporary-goal8 < 6)
	(up-set-target-by-id g: 452)
=>
	(up-reset-search 1 1 1 1)
	(up-add-object-by-id search-local g: gl-main-tc-id)
	(up-target-objects 1 action-gather -1 -1)
	(set-goal gl-tc-gather-point sheep)
;	(chat-to-all "set2.")
)

(defrule
	(goal gl-next-villager-target food)
	(up-point-distance gl-temporary-point-x gl-object-point-x < 5)
	(up-compare-goal 473 >= 8)
	(up-set-target-by-id g: 456)
=>
	(up-reset-search 1 1 1 1)
	(up-add-object-by-id search-local g: gl-main-tc-id)
	(up-target-objects 1 action-gather -1 -1)
	(set-goal gl-tc-gather-point sheep)
;	(chat-to-all "set3.")
)

; Stocking sheep

(defrule
	(unit-type-count sheep > 0)
=>
	(set-goal temporary-goal2 0)
	(up-copy-point gl-point2-x gl-object-point-x)
	(up-modify-goal gl-point2-x c:+ 1)
	(up-set-target-by-id g: 451)
	(up-get-point position-object gl-point-x)
	(up-get-point-distance gl-point-x gl-point2-x temporary-goal3)
	(up-set-target-by-id g: 452)
	(up-get-point position-object gl-point-x)
	(up-get-point-distance gl-point-x gl-point2-x temporary-goal4)
)

(defrule
	(unit-type-count sheep > 0)
=>
	(set-goal temporary-goal 0)
	(up-copy-point gl-temporary-point-x gl-position-self-x)
	(up-modify-goal gl-temporary-point-x c:+ 2)
	(up-modify-goal gl-temporary-point-y c:+ 2)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-modify-goal gl-point-x c:- 2)
	(up-modify-goal gl-point-y c:- 2)
	(up-copy-point gl-object-point-x gl-position-self-x)
	(up-modify-goal gl-object-point-x c:- 1)
	(up-modify-goal gl-object-point-y c:+ 1)
	(up-full-reset-search)
	(up-find-local c: sheep c: 240)
	(up-get-search-state gl-local-total)
	(up-reset-search 1 1 0 0)
)

(defrule
	(or	(goal 463 1)
		(or	(goal 463 4)
			(goal 463 6)))
	(up-compare-goal temporary-goal3 != 0)
	(up-compare-goal 461 >= 40)
=>
	(set-goal temporary-goal2 1)
)

(defrule
	(or	(goal 463 2)
		(or	(goal 463 3)
			(goal 463 5)))
	(up-compare-goal temporary-goal4 != 0)
	(up-compare-goal 462 >= 40)
=>
	(set-goal temporary-goal2 2)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal gl-boar-hunting-stage >= 2)
	(up-compare-goal gl-boar-hunting-stage <= 5)
	(dropsite-min-distance live-boar < 25)
=>
	(up-modify-goal gl-temporary-point-y c:- 5)
	(up-copy-point gl-point-x gl-temporary-point-x)
)

(defrule
	(unit-type-count sheep > 0)
=>
	(up-find-local c: sheep c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-saved-point-x)
	(up-get-object-data object-data-id 453)
)

(defrule
	(unit-type-count sheep > 0)
	(or	(and	(up-compare-goal 453 g:== 451)
			(and	(goal temporary-goal2 2)
				(up-compare-goal temporary-goal3 > 0)))
		(and	(up-compare-goal 453 g:== 452)
			(and	(goal temporary-goal2 1)
				(up-compare-goal temporary-goal4 > 0))))
	(timer-triggered 9)
	(up-point-distance gl-saved-point-x gl-point2-x > 0)
=>
	(up-target-point gl-point2-x action-move -1 -1)
	(up-jump-rule 1)
)

(defrule
	(unit-type-count sheep > 0)
	(or	(and	(up-compare-goal 453 g:== 451)
			(up-compare-goal temporary-goal2 != 2))
		(or	(and	(up-compare-goal 453 g:== 452)
				(up-compare-goal temporary-goal2 != 1))
			(or	(up-compare-goal 453 g:== 456)
				(up-compare-goal 453 g:== 457))))
	(timer-triggered 9)
	(up-point-distance gl-saved-point-x gl-object-point-x > 0)
=>
	(up-target-point gl-object-point-x action-move -1 -1)
)

(defrule
	(or	(game-time <= 90)
		(or	(and	(game-time <= base-sheep-scouting-time)
				(building-type-count wall-class == 0))
			(and	(game-time <= 300)
				(building-type-count-total town-center == 0))))
	(up-compare-const gv-explored-map == 0)
	(up-players-in-game any >= preferred-player-number)
	(up-compare-const gv-grouped-and-ally == 0)
	(up-timer-status 15 == timer-running)
=>
	(up-jump-rule 5)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 453 g:!= 451)
	(up-compare-goal 453 g:!= 452)
	(up-compare-goal 453 g:!= 456)
	(up-compare-goal 453 g:!= 457)
	(building-type-count-total mill < 1)
	(up-point-distance gl-saved-point-x gl-object-point-x < 9)
	(game-time < 25)
=>
	(up-set-target-point gl-point-x)
	(up-target-point 0 action-stop -1 -1)
	(up-jump-rule 4)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 453 g:!= 451)
	(up-compare-goal 453 g:!= 452)
	(up-compare-goal 453 g:!= 456)
	(up-compare-goal 453 g:!= 457)
	(or	(up-compare-goal gl-temporary-point-x g:!= gl-saved-point-x)
		(up-compare-goal gl-temporary-point-y g:!= gl-saved-point-y))
	(up-compare-goal temporary-goal > 3)
=>
	(up-set-target-point gl-temporary-point-x)
	(up-target-point 0 action-move -1 -1)
	(up-jump-rule 3)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 453 g:!= 451)
	(up-compare-goal 453 g:!= 452)
	(up-compare-goal 453 g:!= 456)
	(up-compare-goal 453 g:!= 457)
	(up-compare-goal gl-temporary-point-x g:== gl-saved-point-x)
	(up-compare-goal gl-temporary-point-y g:== gl-saved-point-y)
=>
	(up-set-target-point gl-temporary-point-x)
	(up-target-point 0 action-stop -1 -1)
	(up-jump-rule 2)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 453 g:!= 451)
	(up-compare-goal 453 g:!= 452)
	(up-compare-goal 453 g:!= 456)
	(up-compare-goal 453 g:!= 457)
	(or	(up-compare-goal gl-point-x g:!= gl-saved-point-x)
		(up-compare-goal gl-point-y g:!= gl-saved-point-y))
=>
	(up-set-target-point gl-point-x)
	(up-target-point 0 action-move -1 -1)
	(up-modify-goal temporary-goal c:+ 1)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal 453 g:!= 451)
	(up-compare-goal 453 g:!= 452)
	(up-compare-goal 453 g:!= 456)
	(up-compare-goal 453 g:!= 457)
	(up-compare-goal gl-point-x g:== gl-saved-point-x)
	(up-compare-goal gl-point-y g:== gl-saved-point-y)
=>
	(up-set-target-point gl-point-x)
	(up-target-point 0 action-stop -1 -1)
	(up-modify-goal temporary-goal c:+ 1)
)

(defrule
	(unit-type-count sheep > 0)
	(up-compare-goal gl-local-total > 0)
=>
	(up-reset-search 0 1 0 0)
	(up-modify-goal gl-local-total c:- 1)
	(up-jump-rule -10)
)

; Sending a couple of hunters to eat the old boar first

(defrule
	(true)
=>
	(set-goal temporary-goal 0)
)

(defrule
	(up-set-target-by-id g: 451)
	(up-object-data object-data-class == boar-food)
	(up-set-target-by-id g: 452)
	(up-object-data object-data-class == boar-food)
	(up-compare-goal 461 g:< 462)
	(up-compare-goal 461 > 25)
=>
	(up-set-target-by-id g: 451)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-full-reset-search)
	(set-goal temporary-goal 1)
	(set-goal temporary-goal2 0)
	(up-filter-distance c: -1 c: 2); 2
)

(defrule
	(up-set-target-by-id g: 451)
	(up-object-data object-data-class == boar-food)
	(up-set-target-by-id g: 452)
	(up-object-data object-data-class == boar-food)
	(up-compare-goal 462 g:< 461)
	(up-compare-goal 462 > 25)
=>
	(up-set-target-by-id g: 452)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-full-reset-search)
	(set-goal temporary-goal 1)
	(set-goal temporary-goal2 0)
	(up-filter-distance c: -1 c: 2); 2
)

(defrule
	(goal temporary-goal 1)
=>
	(up-find-local c: villager-class c: 1)
)

(defrule
	(goal temporary-goal 1)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target == boar-food)
	(up-object-data object-data-id g:!= gl-boar-lurer-id)
=>
	(up-modify-goal temporary-goal3 c:+ 1)
)

(defrule
	(goal temporary-goal 1)
	(up-compare-goal temporary-goal3 < 2)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 0 1 0 0)
	(up-jump-rule -3)
)

(defrule
	(goal temporary-goal 1)
	(up-compare-goal 461 g:< 462)
	(up-compare-goal temporary-goal3 < 2)
=>
	(up-set-target-by-id g: 451)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-full-reset-search)
	(set-goal temporary-goal 1)
	(set-goal temporary-goal2 0)
	(up-filter-distance c: 1 c: -1); 2
)

(defrule
	(goal temporary-goal 1)
	(up-compare-goal 462 g:< 461)
	(up-compare-goal temporary-goal3 < 2)
=>
	(up-set-target-by-id g: 452)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-full-reset-search)
	(set-goal temporary-goal 1)
	(set-goal temporary-goal2 0)
	(up-filter-distance c: 2 c: -1); 2
)

(defrule
	(goal temporary-goal 1)
	(up-compare-goal temporary-goal3 < 2)
=>
	(up-find-local c: villager-class c: 1)
)

(defrule
	(goal temporary-goal 1)
	(up-compare-goal temporary-goal3 < 2)
	(up-compare-goal 461 g:< 462)
	(dropsite-min-distance live-boar > 8)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target == boar-food)
	(up-object-data object-data-carry != hunter-max-carry)
	(up-object-data object-data-id g:!= gl-boar-lurer-id)
=>
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-set-target-by-id g: 451)
	(up-target-objects 1 action-default -1 -1)
	(chat-to-player my-player-number "Eat old boar1")
)

(defrule
	(goal temporary-goal 1)
	(up-compare-goal temporary-goal3 < 2)
	(up-compare-goal 461 g:> 462)
	(dropsite-min-distance live-boar > 8)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target == boar-food)
	(up-object-data object-data-carry != hunter-max-carry)
	(up-object-data object-data-id g:!= gl-boar-lurer-id)
=>
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-set-target-by-id g: 452)
	(up-target-objects 1 action-default -1 -1)
	(chat-to-player my-player-number "Eat old boar2")
)

(defrule
	(goal temporary-goal 1)
	(up-compare-goal temporary-goal2 < 2)
	(up-compare-goal temporary-goal3 < 2)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 0 1 0 0)
	(up-jump-rule -4)
)


; Sending a couple of hunters to the deer

(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(set-goal temporary-goal5 1)
	(set-goal temporary-goal6 0)
	(up-get-fact unit-type-count villager-hunter temporary-goal2)
	(up-modify-goal temporary-goal2 g:- 473)
)

(defrule
	(up-compare-goal temporary-goal2 > 3)
=>
	(set-goal temporary-goal6 deer-food)
)

(defrule
	(up-compare-goal 473 > 5)
	(or	(up-compare-goal 473 > 6)
		(up-compare-goal temporary-goal2 < 1))
=>
	(set-goal temporary-goal6 boar-food)
)

(defrule
	(unit-type-count villager-forager > 4)
=>
	(set-goal temporary-goal6 forage-food)
)

(defrule
	(unit-type-count villager-shepherd > 4)
=>
	(set-goal temporary-goal6 sheep)
)

(defrule
	(or	(and	(up-compare-goal gl-boar-hunting-stage != 4)
			(up-compare-goal gl-boar-hunting-stage != 5))
		(dropsite-min-distance live-boar > 33))
	(up-compare-goal temporary-goal6 > 0)
	(goal temporary-goal5 1)
	(up-set-target-by-id g: 494)
	(up-object-data object-data-hitpoints == 0)
	(up-object-data object-data-class == deer-food)
=>
	(up-get-point position-object gl-point-x)
	(up-full-reset-search)
	(set-goal temporary-goal 1)
	(up-jump-rule 3)
)

(defrule
	(goal temporary-goal 1)
	(goal temporary-goal5 2)
	(up-compare-goal temporary-goal2 < 2)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target == deer-food)
=>
	(up-modify-goal temporary-goal2 c:+ 1)
;	(up-chat-data-to-all "On old deer: %d" g: temporary-goal2)
)

(defrule
	(goal temporary-goal 1)
	(goal temporary-goal5 2)
	(up-compare-goal temporary-goal2 < 3)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 0 1 0 0)
	(up-find-local c: villager-class c: 1)
	(up-jump-rule -2)
)

(defrule
	(or	(and	(up-compare-goal gl-boar-hunting-stage != 4)
			(up-compare-goal gl-boar-hunting-stage != 5))
		(dropsite-min-distance live-boar > 33))
	(up-compare-goal temporary-goal6 > 0)
	(up-set-target-by-id g: 493)
	(goal temporary-goal5 2)
	(up-object-data object-data-hitpoints == 0)
	(up-object-data object-data-class == deer-food)
=>
	(up-full-reset-search)
	(set-goal temporary-goal 1)
)

(defrule
	(goal temporary-goal 1)
	(up-compare-goal temporary-goal2 < 3)
=>
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point2-x)
)

(defrule
	(goal temporary-goal 1)
	(goal temporary-goal5 1)
	(up-compare-goal temporary-goal2 < 3)
	(up-point-distance gl-point-x gl-position-self-x < 8)
	(or	(up-point-distance gl-point-x gl-point2-x > 2)
		(up-compare-goal temporary-goal6 != deer-food))
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target g:== temporary-goal6) 
	(up-object-data object-data-carry != hunter-max-carry)
	(up-object-data object-data-id g:!= gl-boar-lurer-id)
	(up-set-target-by-id g: 494)
=>
	(up-target-objects 1 action-default -1 -1)
;	(chat-to-player my-player-number "Eat deer")
	(up-jump-rule 3)
)

(defrule
	(goal temporary-goal 1)
	(goal temporary-goal5 2)
	(up-compare-goal temporary-goal2 < 2)
	(up-point-distance gl-point-x gl-position-self-x < 9)
	(or	(up-point-distance gl-point-x gl-point2-x > 2)
		(up-compare-goal temporary-goal6 != deer-food))
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target g:== temporary-goal6)
	(up-object-data object-data-carry != hunter-max-carry)
	(up-object-data object-data-id g:!= gl-boar-lurer-id)
	(up-set-target-by-id g: 493)
=>
	(up-target-objects 1 action-default -1 -1)
;	(chat-to-player my-player-number "Eat old deer")
	(up-jump-rule 2)
)

(defrule
	(goal temporary-goal 1)
	(up-compare-goal temporary-goal2 < 3)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 0 1 0 0)
	(up-jump-rule -4)
)

(defrule
	(goal temporary-goal5 1)
	(up-set-target-by-id g: 493)
=>
	(up-get-point position-object gl-point-x)
	(up-full-reset-search)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 2)
	(up-find-local c: villager-class c: 1)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal5 2)
	(up-jump-rule -8)
)

; Sending shepherds to wait for sheep

(defrule
	(unit-type-count sheep > 0)
=>
	(up-copy-point gl-saved-point-x gl-position-self-x)
	(up-modify-goal gl-saved-point-x c:- 1)
	(up-modify-goal gl-saved-point-y c:+ 1)
	(up-set-target-by-id g: 451)
	(up-get-point position-object gl-point-x)
	(up-get-point-distance gl-point-x gl-saved-point-x temporary-goal)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal6)
	(up-get-object-data object-data-hitpoints temporary-goal3)
	(up-set-target-by-id g: 452)
	(up-get-point position-object gl-point-x)
	(up-get-point-distance gl-point-x gl-saved-point-x temporary-goal2)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal7)
	(up-get-object-data object-data-hitpoints temporary-goal4)
	(set-goal temporary-goal5 0)
)

(defrule
	(unit-type-count sheep > 0)
	(or	(and	(up-set-target-by-id g: 451)
			(up-object-data object-data-class == sheep))
		(and	(up-set-target-by-id g: 452)
			(up-object-data object-data-class == sheep)))
=>
	(set-goal temporary-goal5 1)
)

(defrule
	(goal temporary-goal5 1)
	(up-compare-goal temporary-goal3 > 0)
	(up-compare-goal temporary-goal4 > 0)
	(or	(and	(up-compare-goal temporary-goal > 3)
			(or	(up-compare-goal temporary-goal < 13)
				(dropsite-min-distance food g:== temporary-goal6)))
		(and	(up-compare-goal temporary-goal2 > 3)
			(or	(up-compare-goal temporary-goal2 < 13)
				(dropsite-min-distance food g:== temporary-goal7))))
	(unit-type-count sheep > 0)
=>
	(set-goal temporary-goal5 2)
)

(defrule
	(up-compare-goal temporary-goal5 >= 1)
	(or	(and	(up-set-target-by-id g: 451)
			(up-compare-goal temporary-goal < 4))
		(and	(up-set-target-by-id g: 452)
			(up-compare-goal temporary-goal2 < 4)))
	(unit-type-count sheep > 0)
=>
	(up-jump-rule 1)
)

(defrule
	(goal temporary-goal5 2)
	(unit-type-count villager-shepherd > 0)
	(unit-type-count sheep > 0)
=>
	(up-full-reset-search)
	(up-filter-include -1 actionid-hunt -1 -1)
	(up-find-local c: shepherd1 c: 12)
	(up-find-local c: shepherd2 c: 12)
	(up-target-point gl-saved-point-x action-move -1 -1)
;	(chat-to-player my-player-number "Wait for the sheep to arrive.")
)

(defrule
	(or	(game-time > 780)
		(or	(building-type-count-total town-center > 1)
			(or	(and	(or	(food-amount > 400); Dropping for up
						(food-amount < 50)); Dropping for villager
					(and	(up-pending-objects c: villager-class < 2)
						(timer-triggered 2)))
				(or	(strategic-number sn-maximum-food-drop-distance == 0)
					(strategic-number sn-nomad-style-start == 1)))))
=>
	(up-jump-rule 9)
)

; Sending excess shepherds to forage

(defrule
	(true)
=>
	(up-get-fact unit-type-count villager-hunter temporary-goal5)
	(set-goal temporary-goal2 100)
	(set-goal temporary-goal7 0)
	(set-goal temporary-goal11 -1)
	(set-goal temporary-goal12 -1)
	(set-goal gl-remote-total 0)
	(up-modify-goal temporary-goal5 g:- 473)
	(up-full-reset-search)
	(up-find-local c: mill c: 1)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-get-object-data object-data-id temporary-goal11)
)

(defrule
	(unit-type-count villager-forager < 3)
	(up-compare-goal temporary-goal5 > 5)
=>
	(set-goal temporary-goal7 deer-food)
)

(defrule
	(or	(and	(up-compare-goal gl-boar-hunting-stage != 4)
			(up-compare-goal gl-boar-hunting-stage != 5))
		(dropsite-min-distance live-boar > 33))
	(unit-type-count villager-forager < 4)
	(dropsite-min-distance live-boar > 10)
	(up-compare-goal 473 > 4)
	(or	(up-compare-goal 473 > 6)
		(and	(goal gl-DRUSH YES)
			(and	(game-time > 320)
				(unit-type-count villager-forager < 3))))
=>
	(set-goal temporary-goal7 boar-food)
)

(defrule
	(unit-type-count villager-forager < 4)
	(unit-type-count villager-shepherd > 2)
	(nand	(civ-selected chinese)
		(and	(up-compare-goal gl-total-food-amount < 100)
			(up-compare-goal gl-boar-eaten < 1)))
	(or	(unit-type-count villager-shepherd > 4)
		(unit-type-count villager-hunter > 5))
	(or	(unit-type-count villager-shepherd > 6)
		(or	(unit-type-count villager-hunter > 2)
			(up-compare-goal gl-current-age >= gv-dark-up)))
=>
	(set-goal temporary-goal7 sheep)
)

(defrule
	(or	(game-time > 600)
		(or	(up-compare-goal gl-current-age >= gv-dark-up)
			(or	(up-gaia-type-count c: forage-class < 2)
				(up-timer-status 15 == timer-running))))
=>
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal temporary-goal7 > 0)
=>
	(up-full-reset-search)
	(up-find-local c: mill c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 4)
	(up-filter-status c: 3 c: list-active)
	(up-find-resource c: forage-class c: 1)
)

(defrule
	(up-compare-goal temporary-goal7 > 0)
	(up-set-target-object search-local c: 0)
	(up-set-target-object search-remote c: 0)
=>
	(up-reset-search 1 1 0 0)
	(up-reset-filters)
	(up-set-target-point gl-point-x)
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-target g:!= temporary-goal7)
	(up-remove-objects search-local object-data-id g:== gl-boar-lurer-id)
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-remove-objects search-local object-data-index > 0)
;	(up-target-objects 1 action-default -1 -1)
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-id temporary-goal12)
;	(chat-to-player my-player-number "foragel")
)

(defrule
	(up-compare-goal gl-villager-micro-function >= 0)
	(up-set-target-object search-local c: 0)
	(up-set-target-by-id g: temporary-goal12)
	(up-set-target-by-id g: temporary-goal11)
=>
	(up-get-object-data object-data-id temporary-goal)
	(set-goal temporary-goal2 1)
	(set-goal temporary-goal3 forage-class)
	(up-get-rule-id temporary-goal4)
	(up-modify-goal temporary-goal4 c:+ 1)
	(set-goal temporary-goal10 forager1)
	(set-goal temporary-goal11 forager2)
	(set-goal gl-local-last 2)
	(up-jump-direct g: gl-villager-micro-function)
)

; Sending excess foragers to sheep/boar

(defrule
	(or	(game-time > 780)
		(or	(building-type-count-total town-center > 1)
			(game-time == 0)))
=>
	(up-jump-rule 17)
)

(defrule
	(true)
=>
	(up-get-fact unit-type-count villager-forager temporary-goal5)
	(up-modify-goal temporary-goal5 c:- 4)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal6 sheep)
	(up-set-target-by-id g: 451)
	(up-get-point position-object gl-point-x)
	(up-set-target-by-id g: 452)
	(up-get-point position-object gl-temporary-point-x)
	(up-get-point position-object gl-temporary-point-x)
	(up-copy-point gl-object-point-x gl-position-self-x)
	(up-modify-goal gl-object-point-x c:- 1)
	(up-modify-goal gl-object-point-y c:+ 1)
)

(defrule
	(or	(up-compare-goal 451 g:== gl-lured-boar-id)
		(up-compare-goal 452 g:== gl-lured-boar-id))
=>
	(set-goal temporary-goal6 boar-food)
)

(defrule
	(or	(unit-type-count villager-shepherd > 6)
		(or	(and	(not	(up-set-target-by-id g: 451))
				(not	(up-set-target-by-id g: 452)))
			(or	(and	(goal 451 0)
					(goal 452 0))
				(and	(up-point-distance gl-point-x gl-object-point-x > 4)
					(up-point-distance gl-temporary-point-x gl-object-point-x > 4)))))
=>
	(set-goal temporary-goal5 0)
)

(defrule
	(up-compare-goal temporary-goal5 > 0)
=>
	(up-set-target-point gl-position-self-x); <-- find forage mill better
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 16)
	(up-find-local c: mill c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
)

(defrule
	(not	(up-set-target-object search-local c: 0))
	(up-compare-goal temporary-goal5 > 0)
=>
	(up-set-target-point gl-position-self-x)
	(set-goal temporary-goal2 1)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 -1)
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal temporary-goal5 > 0)
	(up-set-target-object search-local c: 0)
=>
	(up-set-target-point gl-point-x)
	(up-filter-distance c: 15 c: -1)
	(set-goal temporary-goal2 1)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 15)
)

(defrule
	(goal temporary-goal2 1)
	(up-compare-goal temporary-goal5 > 0)
=>
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
)

(defrule
	(goal temporary-goal2 1)
	(up-compare-goal temporary-goal5 > 0)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target == forage-food)
=>
	(up-modify-goal temporary-goal3 c:+ 1)
)

(defrule
	(goal temporary-goal2 1)
	(up-compare-goal temporary-goal5 > 0)
	(up-compare-goal temporary-goal5 g:> temporary-goal3)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 0 1 0 0)
	(up-jump-rule -3)
)

(defrule
	(goal temporary-goal2 1)
	(up-compare-goal temporary-goal5 > 0)
	(up-compare-goal temporary-goal5 g:> temporary-goal3)
	(up-compare-goal temporary-goal4 > -1)
	(not	(up-set-target-object search-local c: 0))
=>
	(up-reset-search 1 1 1 1)
	(set-goal temporary-goal3 0)
	(up-modify-goal temporary-goal4 c:- 1)
	(up-filter-distance g: temporary-goal4 c: -1)
	(up-jump-rule -4)
)

(defrule
	(goal temporary-goal2 1)
	(up-compare-goal temporary-goal5 > 0)
	(up-compare-goal temporary-goal3 > 0)
=>
	(up-reset-search 1 1 1 1)
)

(defrule
	(goal temporary-goal2 1)
	(up-compare-goal temporary-goal5 > 0)
	(up-compare-goal temporary-goal5 g:== temporary-goal3)
=>
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
)

(defrule
	(goal temporary-goal2 1)
	(goal temporary-goal6 boar-food)
	(up-compare-goal 451 g:== gl-lured-boar-id)
	(up-compare-goal temporary-goal5 > 0)
	(up-compare-goal temporary-goal5 g:== temporary-goal3)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target == forage-food)
	(up-compare-goal 473 < 8)
=>
	(up-set-target-by-id g: 451)
	(up-target-objects 1 action-default -1 -1)
	(up-modify-goal temporary-goal5 c:- 1)
	(up-modify-goal temporary-goal3 c:- 1)
;	(chat-to-player my-player-number "Eat sheep/boar1 (forager)")
)

(defrule
	(goal temporary-goal2 1)
	(goal temporary-goal6 boar-food)
	(up-compare-goal 452 g:== gl-lured-boar-id)
	(up-compare-goal temporary-goal5 > 0)
	(up-compare-goal temporary-goal5 g:== temporary-goal3)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target == forage-food)
	(up-compare-goal 473 < 8)
=>
	(up-set-target-by-id g: 452)
	(up-target-objects 1 action-default -1 -1)
	(up-modify-goal temporary-goal5 c:- 1)
	(up-modify-goal temporary-goal3 c:- 1)
;	(chat-to-player my-player-number "Eat sheep/boar2 (forager)")
)

(defrule
	(goal temporary-goal2 1)
	(goal temporary-goal6 sheep)
	(up-compare-goal temporary-goal5 > 0)
	(up-compare-goal temporary-goal5 g:== temporary-goal3)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target == forage-food)
	(or	(goal 463 1)
		(or	(goal 463 4)
			(goal 463 6)))
=>
	(up-set-target-by-id g: 451)
	(up-target-objects 1 action-default -1 -1)
	(up-modify-goal temporary-goal5 c:- 1)
	(up-modify-goal temporary-goal3 c:- 1)
;	(chat-to-player my-player-number "Eat sheep/boar11 (forager)")
)

(defrule
	(goal temporary-goal2 1)
	(goal temporary-goal6 sheep)
	(up-compare-goal temporary-goal5 > 0)
	(up-compare-goal temporary-goal5 g:== temporary-goal3)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target == forage-food)
	(or	(goal 463 2)
		(or	(goal 463 3)
			(goal 463 5)))
=>
	(up-set-target-by-id g: 452)
	(up-target-objects 1 action-default -1 -1)
	(up-modify-goal temporary-goal5 c:- 1)
	(up-modify-goal temporary-goal3 c:- 1)
;	(chat-to-player my-player-number "Eat sheep/boar22 (forager)")
)

(defrule
	(goal temporary-goal2 1)
	(up-compare-goal temporary-goal5 > 0)
	(up-compare-goal temporary-goal5 g:== temporary-goal3)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 0 1 0 0)
	(up-jump-rule -6)
)

; Sending villagers to farms

(defrule
	(or	(game-time > 1200)
		(or	(idle-farm-count == 0)
			(or	(up-timer-status 15 != timer-triggered)
				(or	(and	(up-compare-goal threat-time < 20000)
						(up-compare-goal threat-player > 0))
					(and	(up-compare-goal gl-TC-garrisoning > 0)
						(up-compare-goal gl-TC-garrisoning <= wolf-stage2))))))
=>
	(up-jump-rule 8)
)

(defrule
	(true)
=>
	(up-get-fact unit-type-count villager-hunter temporary-goal5)
	(up-modify-goal temporary-goal5 g:- 473)
	(up-get-fact idle-farm-count 0 temporary-goal2)
	(up-get-fact building-type-count farm temporary-goal)
	(up-get-fact unit-type-count villager-farmer temporary-goal7)
	(up-modify-goal temporary-goal g:- temporary-goal2)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 -1)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal7 0)
	(up-full-reset-search)
	(up-find-local c: farm c: 240)
	(up-remove-objects search-local object-data-tasks-count > 0)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-get-object-data object-data-id temporary-goal4)
)

(defrule
	(up-compare-goal temporary-goal5 > 5)
=>
	(set-goal temporary-goal6 deer-food)
)

(defrule
	(dropsite-min-distance live-boar > 10)
	(up-compare-goal 473 > 4)
	(or	(up-compare-goal 473 > 5)
		(unit-type-count villager-farmer < 4))
=>
	(set-goal temporary-goal6 boar-food)
)

(defrule
	(nand	(current-age-time < 50)
		(goal gl-current-age gv-feudal))
	(unit-type-count villager-forager > 4)
=>
	(set-goal temporary-goal6 forage-food)
)

(defrule
	(unit-type-count villager-shepherd > 3)
	(or	(unit-type-count villager-shepherd > 4)
		(unit-type-count villager-farmer < 4))
	(or	(unit-type-count villager-shepherd > 5)
		(unit-type-count villager-farmer < 6))
=>
	(set-goal temporary-goal6 sheep)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-set-target-point gl-saved-point-x)
	(set-goal temporary-goal5 1)
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-target g:!= temporary-goal6)
	(up-remove-objects search-local object-data-id g:== gl-boar-lurer-id)
	(up-clean-search search-local object-data-precise-distance search-order-asc)
	(up-remove-objects search-local object-data-index > 0)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-compare-goal temporary-goal6 > 0)
	(up-set-target-by-id g: temporary-goal4)
=>
	(up-target-objects 1 action-default -1 -1)
;	(chat-to-player my-player-number "Use farm")
)


(defrule
	(taunt-detected 1 59);hax
=>
	(acknowledge-taunt 1 58)
	(acknowledge-taunt 1 59)
)

(defrule
	(taunt-detected 1 58);hax
=>
	(up-chat-data-to-player my-player-number "Animal-1: %d" g: 451)
	(up-chat-data-to-player my-player-number "Animal-2: %d" g: 452)
)


; Sending excess villagers from food to deer

(defrule
	(or	(game-time > 780)
		(or	(building-type-count-total town-center > 1)
			(or	(up-compare-goal gl-deer-luring > 0)
				(or	(up-timer-status 9 == timer-running)
					(game-time < 360)))))
=>
	(up-jump-rule 8)
)

(defrule
	(true)
=>
	(up-get-fact unit-type-count villager-hunter temporary-goal)
	(up-modify-goal temporary-goal g:- 473)
	(set-goal temporary-goal2 7)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 1)
	(set-goal temporary-goal6 26)
	(set-goal temporary-goal7 0)
	(set-goal gl-remote-last 0)
	(up-copy-point gl-point-x gl-position-self-x)
)

(defrule
	(goal temporary-goal 0)
	(up-compare-goal 473 > 8)
=>
	(set-goal temporary-goal7 boar-food)
)

(defrule
	(goal temporary-goal 0)
	(unit-type-count villager-shepherd > 8)
=>
	(set-goal temporary-goal7 sheep)
)

(defrule
	(goal temporary-goal 0)
	(unit-type-count villager-forager > 5)
	(up-compare-goal temporary-goal > 5)
=>
	(set-goal temporary-goal7 forage-food)
)

(defrule
	(goal temporary-goal5 1)
	(goal gl-remote-last 0)
	(up-compare-goal temporary-goal7 > 0)
	(up-compare-goal temporary-goal2 g:< temporary-goal6)
=>
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-full-reset-search)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 g: temporary-goal2)
	(up-find-remote c: deer c: 1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-get-search-state gl-local-total)
	(up-filter-distance c: -1 c: -1)
	(up-jump-rule -1)
)

(defrule
	(goal gl-remote-last 1)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(or	(up-compare-goal gl-boar-hunting-stage < 3)
		(up-compare-goal gl-boar-hunting-stage > 5))
	(up-object-data object-data-target g:== temporary-goal7)
	(up-set-target-object search-remote c: 0)
=>
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-target-objects 1 action-default -1 -1)
;	(chat-to-allies "THE DEER")
)

(defrule
	(goal gl-remote-last 1)
	(up-set-target-object search-local c: 0)
	(up-compare-goal temporary-goal3 < 3)
=>
	(up-reset-search 0 1 0 0)
	(up-jump-rule -2)
)

(defrule
	(goal gl-remote-last 0)
	(goal temporary-goal4 0)
	(building-type-count mill > 0)
=>
	(set-goal temporary-goal2 7)
	(set-goal temporary-goal4 1)
	(set-goal temporary-goal6 21)
	(up-full-reset-search)
	(up-find-local c: mill c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal5 g:= gl-local-total)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-jump-rule -4)
)

; ============== CALLING VILLAGER MICRO

(defrule
	(or	(game-time > 600)
		(or	(up-compare-goal gl-current-age >= gv-dark-up)
			(or	(up-compare-goal gl-villager-micro-function < 0)
				(up-timer-status 9 != timer-running))))
=>
	(up-jump-rule 4)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local c: lumber-camp c: 1)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-get-object-data object-data-id temporary-goal)
	(set-goal temporary-goal2 1); size/2
	(set-goal temporary-goal3 tree)
	(up-get-rule-id temporary-goal4)
	(up-modify-goal temporary-goal4 c:+ 1)
	(set-goal gl-point2-x lumberjack1)
	(set-goal gl-point2-y lumberjack2)
	(set-goal gl-local-last 1)
	(set-goal temporary-goal12 -1); General micro, != -1 => single villager micro
;	(up-jump-direct g: gl-villager-micro-function)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local c: mill c: 1)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-get-object-data object-data-id temporary-goal)
	(set-goal temporary-goal2 1)
	(set-goal temporary-goal3 forage-class)
	(up-get-rule-id temporary-goal4)
	(up-modify-goal temporary-goal4 c:+ 1)
	(set-goal temporary-goal10 forager1)
	(set-goal temporary-goal11 forager2)
	(set-goal gl-local-last 2)
	(set-goal temporary-goal12 -1)
	(up-jump-direct g: gl-villager-micro-function)
)

; ================ VILLAGER MICRO FUNCTION

(defrule
	(up-compare-goal gl-villager-micro-function >= 0)
=>
	(up-jump-rule 29)
)

(defrule
	(true)
=>
	(up-get-rule-id gl-villager-micro-function)
	(up-jump-rule 28)
	(disable-self)
)

(defrule
	(up-set-target-by-id g: temporary-goal)
=>
	(up-modify-goal temporary-goal6 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-get-point position-object gl-saved-point-x)
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-modify-goal temporary-goal5 g:= temporary-goal2)
	(up-modify-goal gl-point-x g:+ temporary-goal5)
	(up-modify-goal gl-point-y g:+ temporary-goal5)
	(set-goal temporary-goal7 3); stage
	(up-full-reset-search)
	(up-set-target-point gl-saved-point-x)
	(up-find-remote c: villager-class c: 240)
	(up-remove-objects search-remote object-data-move-x g:!= gl-saved-point-x)
	(up-remove-objects search-remote object-data-move-y g:!= gl-saved-point-y)
)

(defrule
	(up-compare-goal temporary-goal12 != -1); Villager given as parameter
	(up-set-target-by-id g: temporary-goal)
=>
	(up-reset-search 1 1 1 1)
	(up-add-object-by-id search-remote g: temporary-goal12)
	(up-jump-rule 3)
)

(defrule
;	(up-can-build 0 c: palisade-wall)
	(up-set-target-by-id g: temporary-goal)
=>
	(up-filter-distance c: -1 c: 6)
	(up-find-remote g: temporary-goal10 c: 240)
	(up-find-remote g: temporary-goal11 c: 240)
)

(defrule
	(up-set-target-by-id g: temporary-goal)
=>
	(up-filter-distance c: -1 c: 3)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-remote c: builder1 c: 240)
	(up-find-remote c: builder2 c: 240)
	(up-find-remote c: idle-villager1 c: 240)
	(up-find-remote c: idle-villager2 c: 240)
)

(defrule
	(up-set-target-by-id g: temporary-goal)
=>
	(up-clean-search search-remote -1 search-order-asc)
)

(defrule
	(true)
=>
	(up-copy-point gl-point4-x gl-saved-point-x)
	(set-goal gl-remote-total 4); loops around the building
	(set-goal gl-object-point-x -1); init d1 = -1, init d2 = 0
	(set-goal gl-object-point-y 0); init d1 = 0, init d2 = -1
	(set-goal gl-point3-x -100)
	(set-goal gl-point7-x -100)
	(up-copy-point gl-point2-x gl-point-x)
)

(defrule
	(true)
=>
	(up-add-point gl-point4-x gl-object-point-x c: 1)
	(up-copy-point gl-temporary-point-x gl-point4-x)
	(up-modify-goal temporary-goal9 g:= gl-object-point-x)
	(up-modify-goal gl-remote-last g:= gl-object-point-y)
	(up-modify-goal gl-object-point-x g:= gl-remote-last)
	(up-modify-goal gl-object-point-x c:* -1)
	(up-modify-goal gl-object-point-y g:= temporary-goal9)
	(up-modify-goal temporary-goal9 g:* temporary-goal5)
	(up-modify-goal gl-remote-last g:* temporary-goal5)
	(up-modify-goal gl-temporary-point-x g:+ temporary-goal9)
	(up-modify-goal gl-temporary-point-y g:+ gl-remote-last)
)

(defrule
	(true)
=>
	(up-modify-goal gl-temporary-point-x g:+ gl-remote-last)
	(up-modify-goal gl-temporary-point-y g:- temporary-goal9)
;	(up-chat-data-to-all "t-x: %d" g: gl-temporary-point-x)
;	(up-chat-data-to-all "t-y: %d" g: gl-temporary-point-y)
	(set-goal gl-point6-x -1)
)

(defrule
	(goal gl-point3-x -100)
	(up-point-distance gl-point-x gl-temporary-point-x > 0)
=>
	(up-copy-point gl-point3-x gl-point-x)
	(up-copy-point gl-point7-x gl-point-x)
	(up-lerp-tiles gl-point3-x gl-temporary-point-x c: 1)
	(up-lerp-tiles gl-point-x gl-temporary-point-x c: 2)
	(up-copy-point gl-point5-x gl-point-x)
;	(chat-to-all "init")
)

(defrule
	(goal temporary-goal7 5)
;	(up-point-distance gl-point3-x gl-point5-x == 0)
	(up-point-distance gl-point-x gl-point7-x < 2)
=>
;	(up-lerp-tiles gl-point5-x gl-temporary-point-x c: -1)
	(up-copy-point gl-point6-x gl-point3-x)
;	(up-cross-tiles gl-point6-x gl-temporary-point-x c: -1)
	(up-lerp-tiles gl-point6-x gl-temporary-point-x c: -1)
;	(up-chat-data-to-all "c-x1: %d" g: gl-point5-x)
;	(up-chat-data-to-all "c-y1: %d" g: gl-point5-y)
;	(up-chat-data-to-all "c-x2: %d" g: gl-point6-x)
;	(up-chat-data-to-all "c-y2: %d" g: gl-point6-y)
;	(chat-to-all ".")
)

(defrule
	(goal temporary-goal7 5)
	(up-point-distance gl-point-x gl-temporary-point-x > 0)
	(up-point-distance gl-point3-x gl-point5-x > 0)
	(up-point-contains gl-point5-x g: temporary-goal3)
	(nand	(up-point-contains gl-point-x g: temporary-goal3)
		(up-point-contains gl-point7-x g: temporary-goal3))
	(not	(up-point-contains gl-point3-x g: temporary-goal3))
=>
	(up-get-point-contains gl-point5-x temporary-goal9 g: temporary-goal3)
	(up-reset-search 1 1 0 0)
	(up-reset-filters)
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-target-id g:!= temporary-goal9)
	(up-remove-objects search-remote object-data-target-id g:== temporary-goal9)
)

(defrule
	(goal temporary-goal7 5)
	(up-point-distance gl-point-x gl-temporary-point-x > 0)
	(up-point-distance gl-point3-x gl-point5-x > 0)
	(up-point-contains gl-point5-x g: temporary-goal3)
	(nand	(up-point-contains gl-point-x g: temporary-goal3)
		(up-point-contains gl-point7-x g: temporary-goal3))
	(nor	(up-set-target-object search-local g: gl-local-last)
		(up-point-contains gl-point3-x g: temporary-goal3))
=>
	(set-goal temporary-goal7 6)
;	(chat-to-all "tree2")
;	(up-chat-data-to-all "p-x: %d" g: gl-point-x)
;	(up-chat-data-to-all "p-y: %d" g: gl-point-y)
	(up-jump-rule 8)
)

(defrule
	(goal temporary-goal7 3)
	(up-point-distance gl-point-x gl-temporary-point-x > 0)
	(up-point-contains gl-point-x g: temporary-goal3)
	(nor	(up-point-contains gl-point7-x g: temporary-goal3)
		(up-point-contains gl-point3-x g: temporary-goal3))
=>
	(up-get-point-contains gl-point-x temporary-goal9 g: temporary-goal3)
	(up-reset-search 1 1 0 0)
	(up-reset-filters)
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-target-id g:!= temporary-goal9)
	(up-remove-objects search-remote object-data-target-id g:== temporary-goal9)
;	(up-chat-data-to-all "ID: %d" g: temporary-goal9)
)

(defrule
	(goal temporary-goal7 3)
	(up-point-distance gl-point-x gl-temporary-point-x > 0)
	(up-point-contains gl-point7-x g: temporary-goal3)
	(nor	(up-point-contains gl-point-x g: temporary-goal3)
		(up-point-contains gl-point3-x g: temporary-goal3))
=>
	(up-get-point-contains gl-point7-x temporary-goal9 g: temporary-goal3)
	(up-reset-search 1 1 0 0)
	(up-reset-filters)
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-target-id g:!= temporary-goal9)
	(up-remove-objects search-remote object-data-target-id g:== temporary-goal9)
;	(up-chat-data-to-all "ID: %d" g: temporary-goal9)
)

(defrule
	(goal temporary-goal7 3)
	(up-point-distance gl-point-x gl-temporary-point-x > 0)
	(xor	(up-point-contains gl-point-x g: temporary-goal3)
		(up-point-contains gl-point7-x g: temporary-goal3))
	(not	(up-point-contains gl-point3-x g: temporary-goal3))
	(not	(up-set-target-object search-local c: 0))
=>
	(set-goal temporary-goal7 4)
;	(chat-to-all "tree1")
;	(up-send-flare gl-point-x)
	(up-jump-rule 5)
)

(defrule
	(goal temporary-goal7 5)
	(up-compare-goal gl-point6-x >= 0)
=>
	(up-copy-point gl-point5-x gl-point6-x)
	(set-goal gl-point6-x -2)
;	(chat-to-all "copy")
	(up-jump-rule -6)
)

(defrule
	(goal temporary-goal7 3)
	(up-compare-goal gl-remote-total < 4)
	(up-point-distance gl-point3-x gl-point2-x == 0)
=>
	(set-goal gl-remote-total 4)
	(set-goal temporary-goal7 5)
;	(chat-to-all "change scan type")
	(set-goal gl-local-last 2); 1 <- testing 2 for foragers
	(up-jump-rule -8)
)

(defrule
	(goal temporary-goal7 5)
	(up-compare-goal temporary-goal5 < 5)
	(up-compare-goal gl-remote-total < 4)
	(up-point-distance gl-point3-x gl-point2-x == 0)
=>
	(set-goal temporary-goal7 3)
	(up-modify-goal temporary-goal5 c:+ 1)
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-modify-goal gl-point-x g:+ temporary-goal5)
	(up-modify-goal gl-point-y g:+ temporary-goal5)
;	(up-chat-data-to-all "inc rad: %d" g: temporary-goal5)
;	(up-send-flare gl-point-x)
	(up-jump-rule -13)
)

(defrule
	(up-point-distance gl-point-x gl-temporary-point-x > 0)
=>
	(up-copy-point gl-point7-x gl-point3-x)
	(up-copy-point gl-point3-x gl-point-x)
	(up-lerp-tiles gl-point-x gl-temporary-point-x c: 1)
	(up-copy-point gl-point5-x gl-point3-x)
	(up-cross-tiles gl-point5-x gl-temporary-point-x c: -1)
;	(up-chat-data-to-all "x1: %d" g: gl-point-x)
;	(up-chat-data-to-all "y1: %d" g: gl-point-y)
;	(up-chat-data-to-all "x2: %d" g: gl-point3-x)
;	(up-chat-data-to-all "y2: %d" g: gl-point3-y)
;	(up-chat-data-to-all "x3: %d" g: gl-point7-x)
;	(up-chat-data-to-all "y3: %d" g: gl-point7-y)
	(up-jump-rule -10)
)

(defrule
	(up-compare-goal gl-remote-total > 0)
=>
	(up-modify-goal gl-remote-total c:- 1)
;	(chat-to-all "-")
	(up-jump-rule -14)
)

(defrule
	(or	(goal temporary-goal7 4)
		(goal temporary-goal7 6))
	(up-set-target-object search-remote c: 0)
=>
	(up-set-target-point gl-point3-x)
	(up-clean-search search-remote object-data-precise-distance search-order-asc)
	(up-set-target-object search-remote c: 0)
	(up-set-target-by-id g: temporary-goal9)
	(up-get-point position-object gl-nomad-wood-point-x)
)

(defrule
	(or	(goal temporary-goal7 4)
		(goal temporary-goal7 6))
	(up-set-target-object search-remote c: 0)
	(up-object-data object-data-target-id >= 0)
	(up-object-data object-data-carry == 0)
	(up-object-target-data object-data-target-id g:!= temporary-goal9)
=>
	(up-set-target-point gl-nomad-wood-point-x)
	(up-set-target-object search-remote c: 0)
	(up-get-object-data object-data-precise-distance gl-local-total)
	(up-get-object-target-data object-data-point-x gl-nomad-wood-point-x)
	(up-get-object-target-data object-data-point-y gl-nomad-wood-point-y)
	(up-set-target-point gl-nomad-wood-point-x)
	(up-get-object-data object-data-precise-distance gl-remote-last)
;	(up-chat-data-to-all "Current: %d" g: gl-remote-last)
;	(up-chat-data-to-all "New: %d" g: gl-local-total)
)

(defrule
	(or	(goal temporary-goal7 4)
		(goal temporary-goal7 6))
	(goal temporary-goal12 -1); General micro => select villagers
	(up-set-target-object search-remote c: 0)
	(or	(up-object-data object-data-type g:== temporary-goal10)
		(up-object-data object-data-type g:== temporary-goal11))
	(up-object-data object-data-target-id >= 0)
	(up-object-data object-data-target-id g:!= temporary-goal9)
	(or	(up-compare-goal gl-local-total g:>= gl-remote-last)
		(up-object-data object-data-carry > 0))
=>
	(up-remove-objects search-remote object-data-index == 0)
;	(chat-to-all "discart")
	(up-jump-rule -3)
)

(defrule
	(or	(goal temporary-goal7 4)
		(goal temporary-goal7 6))
	(goal temporary-goal12 -1)
	(up-set-target-object search-remote c: 0)
	(or	(up-object-data object-data-move-x g:!= gl-saved-point-x)
		(up-object-data object-data-move-y g:!= gl-saved-point-y))
	(up-object-data object-data-carry > 0)
=>
	(up-remove-objects search-remote object-data-index == 0)
;	(chat-to-all "discart2")
	(up-jump-rule -4)
)

(defrule
	(or	(goal temporary-goal7 4)
		(goal temporary-goal7 6))
	(up-set-target-object search-remote c: 0)
=>
	(up-get-object-data object-data-id gl-remote-last)
	(up-remove-objects search-remote object-data-index == 0)
	(up-reset-search 1 1 0 0)
	(up-add-object-by-id search-local g: gl-remote-last)
	(up-set-target-by-id g: temporary-goal9)
	(up-target-objects 1 action-default -1 -1)
;	(up-chat-data-to-all "eater: %d" g: gl-remote-last)
;	(up-chat-data-to-all "eat tree: %d" g: temporary-goal9)
)

(defrule
	(or	(goal temporary-goal7 4)
		(goal temporary-goal7 6))
	(up-compare-goal gl-point6-x >= 0)
	(up-set-target-object search-remote c: 0)
=>
	(up-modify-goal temporary-goal7 c:- 1)
	(up-jump-rule -11)
)

(defrule
	(or	(goal temporary-goal7 4)
		(goal temporary-goal7 6))
	(up-set-target-object search-remote c: 0)
=>
	(up-modify-goal temporary-goal7 c:- 1)
	(up-jump-rule -9)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal6)
	(up-jump-direct g: temporary-goal4)
)

; ================ PATROLLING VILLAGERS VS TREES (WHY NOT?)

(defrule
;	(or	(up-compare-goal gl-modern-build-order < 0)
;		(game-time > 600))
	(true)
=>
	(up-jump-rule 18)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-full-reset-search)
	(up-find-remote c: lumber-camp c: 240)
	(set-goal temporary-goal8 0)
)

(defrule
	(up-set-target-object search-remote g: temporary-goal8)
=>
	(up-get-point position-object gl-point5-x)
	(up-set-target-point gl-point5-x)
)

(defrule
	(not	(up-set-target-object search-remote g: temporary-goal8))
=>
	(up-jump-rule 14)
)

(defrule
	(true)
=>
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 7)
	(up-find-local c: villager-class c: 1)
	(set-goal temporary-goal9 0)
	(set-goal temporary-goal2 -1)
	(set-goal temporary-goal3 -1)
	(set-goal temporary-goal4 0)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-get-object-data object-data-id temporary-goal5)
	(up-get-object-data object-data-precise-x gl-point-x)
	(up-get-object-data object-data-precise-y gl-point-y)
	(up-get-object-target-data object-data-precise-x gl-point3-x)
	(up-get-object-target-data object-data-precise-y gl-point3-y)
	(up-get-point-distance gl-point-x gl-point3-x temporary-goal3)
	(up-get-object-data object-data-target-id temporary-goal2)
	(up-modify-goal temporary-goal3 c:- 2); -1
	(set-goal temporary-goal4 1)
	(set-goal temporary-goal6 -1)
	(set-goal temporary-goal7 30000)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-get-object-target-data object-data-point-x gl-point4-x)
	(up-get-object-target-data object-data-point-y gl-point4-y)
)

(defrule
	(up-set-target-object search-local c: 0)
	(or	(and	(up-point-distance gl-point4-x gl-point5-x > 10)
			(and	(up-object-data object-data-target-id >= 0)
				(up-object-data object-data-target == tree)))
		(or	(up-object-data object-data-carry > 0)
			(and	(up-object-data object-data-type != lumberjack1)
				(up-object-data object-data-type != lumberjack2))))
=>
	(up-jump-rule 7)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 1 1 1 1)
	(up-get-point position-object gl-point6-x)
	(up-set-target-point gl-point6-x)
	(up-filter-distance c: -1 c: 4)
	(up-filter-status c: 2 c: list-active)
)

(defrule
	(up-compare-goal temporary-goal4 >= 1)
	(up-find-resource c: wood c: 1)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-object-data object-data-precise-x gl-point2-x)
	(up-get-object-data object-data-precise-y gl-point2-y)
	(up-get-point position-object gl-point7-x)
	(up-copy-point gl-point4-x gl-point7-x)
	(up-copy-point gl-temporary-point-x gl-point7-x)
	(up-copy-point gl-saved-point-x gl-point7-x)
	(up-copy-point gl-object-point-x gl-point7-x)
	(up-modify-goal gl-point7-x c:+ 1)
	(up-modify-goal gl-temporary-point-x c:- 1)
	(up-modify-goal gl-saved-point-y c:+ 1)
	(up-modify-goal gl-object-point-y c:- 1)
)

(defrule
	(up-compare-goal temporary-goal4 >= 1)
	(up-set-target-object search-remote c: 0)
	(nor	(up-can-build-line 0 gl-point7-x c: palisade-wall)
		(or	(up-can-build-line 0 gl-temporary-point-x c: palisade-wall)
			(or	(up-can-build-line 0 gl-saved-point-x c: palisade-wall)
				(up-can-build-line 0 gl-object-point-x c: palisade-wall))))
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal temporary-goal4 >= 1)
	(up-point-distance gl-point4-x gl-point5-x < 7)
	(or	(up-point-distance gl-point-x gl-point2-x g:< temporary-goal3)
		(not	(up-set-target-by-id g: temporary-goal2)))
	(up-set-target-object search-remote c: 0)
	(up-object-data object-data-tasks-count == 0)
	(up-point-distance gl-point-x gl-point2-x g:< temporary-goal7)
=>
	(up-get-point-distance gl-point-x gl-point2-x temporary-goal7)
	(up-get-object-data object-data-id temporary-goal6)
)

(defrule
	(up-compare-goal temporary-goal4 >= 1)
	(up-set-target-object search-remote c: 0)
=>
	(up-reset-search 0 0 0 1)
	(up-jump-rule -4)
)

(defrule
	(goal temporary-goal4 1)
=>
	(set-goal temporary-goal4 2)
	(up-filter-status c: 3 c: list-active)
	(up-reset-search 0 0 0 1)
	(up-jump-rule -5)
)

(defrule
	(goal temporary-goal4 2)
	(up-set-target-by-id g: temporary-goal6)
	(up-object-data object-data-id g:!= temporary-goal2)
=>
	(up-add-object-by-id search-local g: temporary-goal5)
	(up-target-objects 1 action-default -1 -1)
	(up-set-target-by-id g: temporary-goal5)
;	(up-chat-data-to-all "Current-m: %d" g: temporary-goal3)
;	(up-chat-data-to-all "New-m: %d" g: temporary-goal7)
;	(chat-to-all "micro")
)

(defrule
	(goal temporary-goal4 2)
=>
	(up-set-target-point gl-point5-x)
	(up-filter-distance c: -1 c: 7)
	(up-modify-goal temporary-goal9 c:+ 1)
	(up-reset-search 1 1 1 1)
	(up-find-local c: villager-class g: temporary-goal9)
	(up-reset-search 0 1 0 0)
	(up-find-local c: villager-class c: 1)
	(set-goal temporary-goal2 -1)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal6 -1)
	(set-goal temporary-goal7 30000)
	(up-jump-rule -11)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-remote c: lumber-camp c: 240)
	(up-modify-goal temporary-goal8 c:+ 1)
)

(defrule
	(up-set-target-object search-remote g: temporary-goal8)
=>
	(up-jump-rule -16)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

; ================ SHEEP SCOUTING

(defrule
	(or	(and	(game-time > 90)
			(or	(and	(or	(game-time > base-sheep-scouting-time)
						(building-type-count wall-class > 0))
					(or	(game-time > 300)
						(building-type-count-total town-center > 0)))
				(up-compare-const gv-explored-map == 1)))
		(or	(up-timer-status 15 == timer-running)
			(up-compare-const gv-turborandom == 1)))
=>
	(up-jump-rule 17)
)

(defrule
	(game-time > 0)
=>
	(up-full-reset-search)
	(set-goal temporary-goal8 sheep)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-object-point-x)
	(up-reset-search 1 1 1 1)
	(up-get-fact unit-type-count sheep temporary-goal)
	(up-modify-goal temporary-goal c:- 3)
	(set-goal temporary-goal3 6)
	(set-goal temporary-goal5 1)
	(set-goal temporary-goal6 300)
	(set-goal gl-local-total 1)
)

(defrule
	(game-time > 0)
=>
	(up-modify-goal temporary-goal4 g:= gl-max-coordinate-value)
	(up-modify-goal temporary-goal4 c:- 1)
	(up-copy-point gl-saved-point-x gl-position-self-x)
	(up-modify-goal gl-saved-point-x c:- 1)
	(up-modify-goal temporary-goal c:min 8)
	(set-goal gl-local-last -1)
	(set-goal gl-remote-total 30)
)

(defrule
	(game-time > 0)
	(building-type-count town-center == 0)
=>
	(up-copy-point gl-saved-point-x gl-object-point-x)
	(up-modify-goal temporary-goal c:+ 2)
)

(defrule
	(game-time > 0)
	(building-type-count-total town-center == 0)
=>
	(up-modify-goal temporary-goal c:+ 1)
)

(defrule
	(up-set-target-by-id g: 451)
	(or	(up-object-data object-data-hitpoints == 0)
		(and	(or	(game-time < extra-sheep-scout-time)
				(and	(up-compare-goal 461 >= 100)
					(game-time < 90)))
			(up-compare-goal 462 >= 100)))
	(up-compare-goal 461 >= 25)
=>
	(up-modify-goal temporary-goal c:+ 1)
)

(defrule
	(up-set-target-by-id g: 452)
	(or	(up-object-data object-data-hitpoints == 0)
		(and	(or	(game-time < extra-sheep-scout-time)
				(and	(up-compare-goal 462 >= 100)
					(game-time < 90)))
			(up-compare-goal 461 >= 100)))
	(up-compare-goal 462 >= 25)
=>
	(up-modify-goal temporary-goal c:+ 1)
)

(defrule
	(game-time > 0)
	(strategic-number sn-sheep-scouting-notice != 1)
	(up-find-local g: temporary-goal8 c: 1)
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-id g:== 451)
		(or	(up-object-data object-data-id g:== 452)
			(or	(up-object-data object-data-id g:== 456)
				(up-object-data object-data-id g:== 457))))
=>
	(up-reset-search 0 1 0 0)
	(up-jump-rule -1)
)

(defrule
	(goal temporary-goal5 1)
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-temporary-point-x)
	(up-get-point-distance gl-temporary-point-x gl-saved-point-x temporary-goal7)
)

(defrule
	(goal temporary-goal5 1)
	(building-type-count town-center > 0)
	(up-set-target-object search-local c: 0)
	(up-compare-goal temporary-goal7 g:< temporary-goal6)
	(nand	(game-time < 90)
		(and	(up-compare-goal 461 >= 100)
			(up-compare-goal 462 >= 100)))
	(nand	(game-time < extra-sheep-scout-time)
		(or	(up-compare-goal 461 >= 100)
			(up-compare-goal 462 >= 100)))
=>
	(up-modify-goal temporary-goal6 g:= temporary-goal7)
	(up-get-object-data object-data-id gl-local-last)
)

(defrule
	(up-set-target-object search-local c: 0)
	(or	(goal temporary-goal5 1)
		(and	(goal temporary-goal5 0)
			(up-object-data object-data-id g:== gl-local-last)))
=>
	(up-reset-search 0 1 0 0)
	(up-jump-rule -4)
)

(defrule
	(goal temporary-goal5 1)
	(goal temporary-goal8 sheep)
	(not	(up-set-target-object search-local c: 0))
=>
	(set-goal temporary-goal5 0)
	(up-full-reset-search)
	(up-jump-rule -5)
)

(defrule
	(game-time > 0)
	(up-compare-goal temporary-goal > 0)
	(up-set-target-object search-local c: 0)
	(up-compare-goal temporary-goal3 > 0)
=>
	(up-modify-goal gl-local-total c:- 3)
	(up-modify-goal gl-remote-total c:- 4)
)

(defrule
	(game-time > 0)
	(up-compare-goal temporary-goal > 0)
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-copy-point gl-object-point-x gl-point-x)
	(up-cross-tiles gl-point-x gl-saved-point-x g: temporary-goal3)
	(up-lerp-tiles gl-point-x gl-saved-point-x g: gl-local-total)
	(up-get-point-distance gl-point-x gl-saved-point-x temporary-goal2)
	(up-modify-goal temporary-goal2 g:- gl-remote-total)
	(up-modify-goal temporary-goal2 c:max 0)
	(up-lerp-tiles gl-point-x gl-saved-point-x g: temporary-goal2)
)

(defrule
	(game-time > 0)
	(up-compare-goal temporary-goal > 0)
	(up-set-target-object search-local c: 0)
	(or	(up-point-contains gl-point-x c: gold-mine-class)
		(or	(up-point-contains gl-point-x c: stone-mine-class)
			(or	(up-point-contains gl-point-x c: forage-class)
				(or	(up-point-terrain gl-point-x == terrain-water)
					(up-point-terrain gl-point-x == terrain-water-beach)))))
	(up-point-distance gl-point-x gl-saved-point-x > 0)
=>
	(up-lerp-tiles gl-point-x gl-saved-point-x c: 1)
	(up-jump-rule -1)
)

(defrule
	(game-time > 0)
	(up-compare-goal temporary-goal > 0)
	(up-set-target-object search-local c: 0)
	(up-point-contains gl-point-x c: tree-class)
	(up-point-distance gl-point-x gl-saved-point-x < 30)
=>
	(up-lerp-tiles gl-point-x gl-saved-point-x c: -1)
	(up-jump-rule -1)
)

(defrule
	(game-time > 0)
	(up-compare-goal temporary-goal > 0)
	(up-set-target-object search-local c: 0)
	(up-point-distance gl-position-self-x gl-position-center-x > max-center-distance1)
	(up-compare-const gv-grouped-and-ally == 0)
	(up-players-in-game any >= preferred-player-number)
	(up-compare-goal 461 <= 400)
=>
	(up-modify-goal gl-point-x c:max 1)
	(up-modify-goal gl-point-y c:max 1)
	(up-modify-goal gl-point-x g:min temporary-goal4)
	(up-modify-goal gl-point-y g:min temporary-goal4)
	(up-target-point gl-point-x action-move -1 -1)
	(up-modify-goal temporary-goal c:- 1)
	(up-modify-goal temporary-goal3 c:* -1)
	(up-reset-search 0 1 0 0)
	(up-jump-rule -10)
)

(defrule
	(unit-type-count horse > 0)
	(goal temporary-goal8 sheep)
=>
	(set-goal temporary-goal8 horse)
	(up-get-fact unit-type-count horse temporary-goal)
	(set-goal temporary-goal5 3)
	(up-jump-rule -11)
)
#end-if
#end-if
#end-if

; ================ BOAR HUNTING

;(defrule
;	(not	(taunt-detected 1 53))
;	(or	(strategic-number sn-focus-player-number < 0)
;		(or	(not	(player-valid focus-player))
;			(or	(strategic-number sn-focus-player-number == my-player-number)
;				(stance-toward focus-player ally))))
;=>
;	(up-chat-data-to-all "!!! FOCUS PLAYER (%d) !!! (8)" s: sn-focus-player-number)
;)

(defrule
	(or	(and	(game-time > 1800)
			(up-compare-goal gl-current-age >= gv-feudal))
;		(or	(and	(dropsite-min-distance live-boar > 33)
;				(or	(up-compare-goal gl-boar-hunting-stage < 3)
;					(up-compare-goal gl-boar-hunting-stage > 5)))
			(game-time == 0));)
=>
	(up-jump-rule 68)
)

(defrule
	(goal gl-current-age gv-dark)
	(up-compare-goal gl-boar-hunting-stage <= 0)
	(unit-type-count villager-hunter == 0)
	(nand	(building-type-count house == 0)
		(up-pending-objects c: house > 0))
	(dropsite-min-distance live-boar < 15)
	(goal gl-villagers-to-start-boar-hunt 3)
	(up-compare-goal gl-my-villager-count g:>= gl-villagers-to-start-boar-hunt)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 33)
	(set-strategic-number sn-minimum-boar-lure-group-size 1)
	(set-strategic-number sn-minimum-boar-hunt-group-size 6)
	(set-strategic-number sn-enable-boar-hunting 2)
	(set-strategic-number sn-minimum-number-hunters 1)
	(up-retask-gatherers food c: 1)
	(disable-self)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage <= 0)
	(dropsite-min-distance live-boar >= 8)
	(dropsite-min-distance boar-hunting < 8)
	(goal gl-villagers-to-start-boar-hunt 3)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 10)
	(set-strategic-number sn-minimum-boar-lure-group-size 4565)
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
	(disable-self)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(set-goal gl-boar-food 30000)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal7 tree-class)
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
)

(defrule
	(unit-type-count villager-food < 5)
=>
	(set-goal temporary-goal7 10000)
)

(defrule
	(dropsite-min-distance live-boar < 34)
	(up-compare-goal gl-boar-hunting-stage <= 0)
	(unit-type-count villager-food > 4)
	(or	(up-research-status c: ri-loom >= research-pending)
		(goal gl-loomless-boar-hunting YES))
	(up-compare-goal gl-my-villager-count g:>= gl-villagers-to-start-boar-hunt)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 10)
	(set-strategic-number sn-minimum-boar-lure-group-size 4565)
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
	(set-strategic-number sn-enable-boar-hunting 1)
	(set-goal gl-boar-hunting-stage 1)
	(disable-self)
)

(defrule
	(goal gl-boar-hunting-stage 7)
	(up-point-distance gl-point-x gl-position-self-x >= 11)
	(unit-type-count scout-unit > 0)
	(up-compare-goal gl-boar-stealing > 0)
=>
	(up-jump-rule 62)
)

(defrule
	(or	(and	(up-compare-goal gl-boar-hunting-stage > 1)
			(up-compare-goal gl-boar-hunting-stage < 6))
		(or	(up-compare-goal gl-boar-stealing > 0)
			(or	(up-timer-status 15 == timer-running)
				(up-compare-goal gl-my-villager-count-total < 13))))
=>
	(up-jump-rule 5)
)

(defrule
	(true)
=>
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal4 0)
)

(defrule
	(up-set-target-by-id g: temporary-goal4)
	(up-object-data object-data-hitpoints > 0)
	(up-object-data object-data-hitpoints < 100); Not an iron boar
	(up-object-data object-data-carry >= 50)
	(up-object-data object-data-base-attack > 4)
=>
	(up-get-point position-object gl-point-x)
	(set-goal temporary-goal2 1)
)

(defrule
	(goal temporary-goal2 1)
	(up-point-explored gl-point-x != explored-no)
	(up-point-distance gl-point-x gl-position-self-x < 33)
=>
	(up-get-object-data object-data-type temporary-goal3)
	(set-goal temporary-goal2 2)
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 33)
)

(defrule
	(goal temporary-goal2 2)
	(not	(up-find-remote g: temporary-goal3 c: 1))
=>
	(up-modify-goal gl-stored-boar-id g:= temporary-goal4)
	(chat-to-player my-player-number "Boar watch")
	(set-goal gl-boar-hunting-stage 7)
	(set-goal gl-loomless-boar-hunting NO)
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal temporary-goal4 < 50000)
=>
	(up-modify-goal temporary-goal4 c:+ 1)
	(set-goal temporary-goal2 0)
	(up-jump-rule -4)
)

(defrule
	(goal gl-boar-hunting-stage 7)
=>
	(up-set-target-point gl-position-self-x)
	(up-full-reset-search)
	(up-modify-goal gl-lured-boar-id g:= gl-stored-boar-id)
	(up-chat-data-to-player my-player-number "=> Boar1: %d" g: gl-lured-boar-id)
	(set-goal temporary-goal3 -1)
	(up-filter-exclude -1 actionid-gather orderid-explore -1)
	(set-goal gl-remote-total 1)
	(set-goal gl-boar-hunting-stage 1)
	(up-jump-rule 3)
)

(defrule
	(or	(and	(or	(up-pending-objects c: villager-class > 1)
				(gold-amount < 50))
			(and	(research-available ri-loom)
				(up-compare-goal gl-loomless-boar-hunting != YES)))
		(or	(up-compare-goal gl-boar-stealing > 0)
			(up-compare-goal gl-boar-hunting-stage != 1)))
=>
	(up-jump-rule 11)
)

(defrule
	(true)
=>
	(up-set-target-point gl-position-self-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 33)
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: boar-class c: 240)
	(up-remove-objects search-remote object-data-hitpoints >= 100)
	(up-remove-objects search-remote object-data-base-attack < 5)
	(up-remove-objects search-remote object-data-carry < 200)
	(up-remove-objects search-remote object-data-index > 0)
	(up-clean-search search-remote object-data-distance search-order-asc)
	(set-goal temporary-goal3 -1)
	(up-filter-exclude -1 actionid-gather -1 -1)
	(up-get-search-state gl-local-total)
)


(defrule
	(up-set-target-object search-remote c: 0)
=>
	(up-get-object-data object-data-id gl-lured-boar-id)
)

(defrule
	(or	(up-compare-goal gl-remote-total > 0)
		(and	(up-compare-goal gl-lured-boar-id g:== gl-stored-boar-id)
			(up-compare-goal gl-lured-boar-id > 0)))
=>
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-filter-distance c: -1 g: temporary-goal3)
	(set-goal temporary-goal4 -1)
	(up-filter-exclude -1 actionid-explore -1 -1)
)

(defrule
	(or	(up-compare-goal gl-remote-total > 0)
		(and	(up-compare-goal gl-lured-boar-id g:== gl-stored-boar-id)
			(up-compare-goal gl-lured-boar-id > 0)))
=>
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-search-state gl-local-total)
	(set-goal gl-remote-total 1)
	(up-get-object-data object-data-maxhp gl-remote-last)
)

(defrule
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-hitpoints g:< gl-remote-last)
		(or	(up-object-data object-data-target g:== temporary-goal7)
			(or	(up-object-data object-data-target == gold-mine-class)
				(up-object-data object-data-target == stone-mine-class))))
	(up-compare-goal gl-remote-total > 0)
	(up-compare-goal temporary-goal3 < 33)
	(up-compare-goal temporary-goal4 < 33)
=>
	(up-reset-search 0 1 0 0)
	(up-jump-rule -2)
)

(defrule
	(not	(up-set-target-object search-local c: 0))
	(unit-type-count villager-food > 4)
	(up-compare-goal gl-remote-total > 0)
	(up-compare-goal temporary-goal3 < 33)
=>
	(up-reset-search 0 1 0 0)
	(up-jump-rule -4)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-hitpoints g:>= gl-remote-last)
	(up-compare-goal gl-remote-total > 0)
=>
	(up-get-object-data object-data-id gl-boar-lurer-id)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-target-objects 1 action-default -1 -1)
	(set-goal gl-boar-hunting-stage 2)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-goal gl-local-last 0)
	(enable-timer 1 10)
	(up-reset-filters)
)

(defrule
	(building-type-count wall-class > 0)
	(goal gl-boar-hunting-stage 2)
	(goal gl-local-last 0)
	(up-compare-goal temporary-goal3 < 8)
	(up-point-distance gl-point-x gl-position-self-x g:>= temporary-goal2)
=>
	(up-reset-search 1 1 1 1)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-filter-distance c: -1 g: temporary-goal3)
	(up-find-local c: wall-class c: 1)
	(up-get-search-state gl-local-total)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-candidate1-point-x)
	(up-get-point-distance gl-candidate1-point-x gl-position-self-x temporary-goal2)
	(up-jump-rule -1)
)

(defrule
	(building-type-count wall-class > 0)
	(goal gl-boar-hunting-stage 2)
	(or	(goal gl-local-last 0)
		(up-point-distance gl-point-x gl-position-self-x g:< temporary-goal2))
=>
	(set-goal gl-candidate1-point-x -1)
)

(defrule
	(building-type-count wall-class > 0)
	(goal gl-boar-hunting-stage 2)
	(goal gl-local-last 1)
	(up-point-distance gl-point-x gl-position-self-x g:>= temporary-goal2)
=>
	(up-target-point 0 action-delete -1 -1)
)

(defrule
	(goal gl-boar-hunting-stage 2)
=>
	(set-goal gl-boar-hunting-stage 3)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
=>
	(up-get-fact dropsite-min-distance live-boar temporary-goal2)
	(up-modify-goal temporary-goal2 c:* hunt-multiplier)
	(up-modify-goal temporary-goal2 c:+ hunt-base-resource)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-get-object-data object-data-carry gl-boar-food)
	(up-get-point position-object gl-point-x)
	(up-set-target-by-id g: gl-boar-lurer-id)
	(up-get-object-data object-data-action temporary-goal4)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-point-distance gl-point-x gl-position-self-x > 40)
=>
	(set-goal gl-lured-boar-id -1)
	(set-goal gl-boar-hunting-stage 1)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(dropsite-min-distance deer-hunting > 7)
	(unit-type-count villager-shepherd < 3)
	(unit-type-count villager-hunter > 6)
=>
	(up-modify-goal temporary-goal2 c:+ 15)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-target-player-distance <= 20)
=>
	(set-goal temporary-goal2 30000)
)

(defrule
	(goal gl-boar-hunting-stage 3)
	(or	(and	(up-set-target-by-id g: gl-boar-lurer-id)
			(and	(up-object-data object-data-target != dangerous-animal-class)
				(and	(up-object-data object-data-target != building-class)
					(and	(up-object-data object-data-target != -1)
						(timer-triggered 1)))))
		(goal gl-boar-lurer-id -1)); <- attacked by wolves
=>
	(set-goal gl-boar-hunting-stage 1)
;	(chat-to-player my-player-number "Lurer has failed.")
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(or	(and	(nor	(up-set-target-by-id g: gl-boar-lurer-id)
				(goal gl-boar-lurer-id -1))
			(and	(up-compare-goal gl-boar-hunting-stage <= 4)
				(up-compare-goal gl-boar-stealing <= -1)))
		(or	(and	(up-compare-goal gl-boar-food g:< temporary-goal2)
				(up-compare-goal gl-boar-hunting-stage >= 6))
			(not	(up-set-target-by-id g: gl-lured-boar-id))))
=>
	(set-goal gl-boar-hunting-stage 1)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-set-target-by-id g: gl-lured-boar-id)
=>
	(up-get-object-data object-data-hitpoints gl-remote-total)
	(up-get-object-data object-data-action gl-remote-last)
	(up-get-point position-object gl-point-x)
	(up-copy-point gl-temporary-point-x gl-position-self-x)
	(up-modify-goal gl-temporary-point-x c:- 1)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 5)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-object-data object-data-hitpoints == 0)
=>
	(up-modify-goal gl-boar-eaten c:+ 1)
	(set-goal gl-boar-lurer-id -1)
	(set-goal gl-boar-hunting-stage 6)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 5)
	(up-point-distance gl-point-x gl-temporary-point-x > 9)
	(up-set-target-by-id g: gl-lured-boar-id)
=>
	(set-goal temporary-goal2 -1)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal6 1)
	(up-full-reset-search)
	(up-set-target-point gl-point-x)
	(up-filter-distance g: temporary-goal2 g: temporary-goal3)
	(up-find-local c: villager-class c: 1)
)

(defrule
	(goal temporary-goal6 1)
	(goal temporary-goal4 0)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target == boar-food)
	(up-object-data object-data-hitpoints > 24)
	(or	(not	(research-completed ri-loom))
		(up-object-data object-data-hitpoints > 29))
=>
	(set-goal gl-boar-hunting-stage 3)
	(up-get-object-data object-data-id gl-boar-lurer-id)
	(set-goal temporary-goal4 1)
;	(chat-to-all "Choose new lurer")
	(up-jump-rule 1)
)

(defrule
	(goal temporary-goal6 1)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target == boar-food)
=>
	(up-target-point 0 action-stop -1 -1)
;	(chat-to-all "BOAR ESCAPING")
)

(defrule
	(goal temporary-goal6 1)
	(up-set-target-object search-local c: 0)
=>	
	(up-get-object-data object-data-id temporary-goal10)
	(up-get-object-data object-data-target temporary-goal11)
	(up-reset-search 0 1 0 0)
	(up-find-local c: villager-class c: 1)
	(up-jump-rule -3)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal temporary-goal2 < 30)
=>
	(up-reset-search 1 1 0 0)
	(up-find-local c: villager-class c: 1)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-filter-distance g: temporary-goal2 g: temporary-goal3)
	(up-jump-rule -4)
)

(defrule
	(or	(and	(up-compare-goal gl-boar-hunting-stage >= 5)
			(or	(and	(up-point-distance gl-point-x gl-temporary-point-x > 9)
					(up-set-target-by-id g: gl-lured-boar-id))
				(not	(up-set-target-by-id g: gl-lured-boar-id))))
		(and	(goal gl-boar-hunting-stage 4)
			(and	(up-compare-goal gl-remote-last != actionid-attack)
				(not	(up-set-target-by-id g: gl-boar-lurer-id)))))
=>
	(set-goal gl-boar-hunting-stage 1)
)

(defrule
	(up-set-target-by-id g: gl-lured-boar-id)
	(or	(and	(goal gl-boar-hunting-stage 3)
			(up-compare-goal gl-remote-last == actionid-attack))
		(and	(up-point-distance gl-point-x gl-temporary-point-x < 7)
			(and	(goal gl-boar-hunting-stage 5)
				(and	(up-compare-goal 473 < 5)
					(and	(game-time < 900); Tracked only for <900
						(up-object-data object-data-hitpoints > 0))))))
=>
	(set-goal gl-boar-hunting-stage 4)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
=>
	(set-goal temporary-goal2 1)
	(set-goal temporary-goal3 1)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(set-goal gl-local-last 0)
	(up-set-target-point gl-position-self-x)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
	(up-compare-goal temporary-goal3 < 35)
=>
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-explore orderid-build -1)
	(up-filter-distance c: -1 g: temporary-goal2)
	(up-find-local c: villager-class g: temporary-goal3)
	(up-set-target-object search-local g: temporary-goal4)
	(up-modify-goal gl-local-last g:= temporary-goal3)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
	(up-compare-goal temporary-goal3 < 35)
	(up-set-target-object search-local g: temporary-goal4)
=>
	(up-get-object-data object-data-target gl-local-total)
	(up-get-object-data object-data-hitpoints gl-remote-total)
	(up-get-object-data object-data-id gl-remote-last)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
	(up-compare-goal temporary-goal3 < 35)
	(up-compare-goal gl-local-total g:!= temporary-goal7)
	(up-compare-goal gl-local-total != stone-mine-class)
	(up-compare-goal gl-local-total != gold-mine-class)
	(up-compare-goal gl-remote-last g:!= gl-boar-lurer-id)
	(up-compare-goal gl-remote-total > 7)
	(up-set-target-object search-local g: temporary-goal4)
=>
	(up-modify-goal temporary-goal5 c:+ 1)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
	(up-compare-goal temporary-goal3 < 35)
	(up-compare-goal temporary-goal3 g:< gl-my-villager-count)
	(up-compare-goal temporary-goal5 < 7)
=>
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-modify-goal temporary-goal4 c:+ 1)
	(up-jump-rule -4)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
	(up-compare-goal temporary-goal2 < 20)
	(up-compare-goal temporary-goal5 < 6)
	(or	(up-research-status c: ri-loom != research-complete)
		(or	(up-compare-goal temporary-goal5 < 5)
			(up-compare-goal temporary-goal2 < 6)))
=>
	(up-modify-goal temporary-goal2 c:+ 1)
	(set-goal temporary-goal3 2)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(up-jump-rule -5)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
=>
;	(up-chat-data-to-all "Search went through %d villagers" g: temporary-goal3)
;	(up-chat-data-to-all "Maximum distance was %d" g: temporary-goal2)
	(set-goal temporary-goal3 0); 2
;	(up-chat-data-to-all "Found %d villagers" g: temporary-goal5)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance); 6 for Goths, 8 otherwise
	(up-compare-goal gl-local-last g:> temporary-goal3)
=>
	(up-full-reset-search)
	(up-filter-distance c: -1 g: temporary-goal2)
	(up-filter-exclude -1 actionid-explore orderid-build -1)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
	(up-compare-goal gl-local-last g:> temporary-goal3)
=>
	(up-set-target-point gl-position-self-x)
	(up-full-reset-search)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
	(up-compare-goal gl-local-last g:> temporary-goal3)
=>
	(up-filter-exclude -1 actionid-explore orderid-build -1)
	(up-filter-distance c: -1 g: temporary-goal2)
	(up-modify-goal temporary-goal3 c:- 1)
	(up-find-local c: villager-class g: temporary-goal3)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-reset-search 0 1 0 0)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
	(up-compare-goal gl-local-last g:> temporary-goal3)
	(up-set-target-object search-local c: 0)
=>
	(up-get-object-data object-data-target gl-local-total)
	(up-get-object-data object-data-hitpoints gl-remote-total)
	(up-get-object-data object-data-id gl-remote-last)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
	(up-compare-goal gl-local-last g:> temporary-goal3)
	(or	(up-compare-goal gl-remote-last g:== gl-boar-lurer-id)
		(or	(goal gl-local-total stone-mine-class)
			(goal gl-local-total gold-mine-class)))
	(up-set-target-object search-local c: 0)
=>
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-compare-goal gl-TC-garrisoning != wolf-stage2); We're not killing wolf chasing the boar lurer
	(up-set-target-object search-local c: 0)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
	(up-compare-goal gl-local-last g:> temporary-goal3)
	(up-compare-goal gl-local-total g:!= temporary-goal7)
	(up-compare-goal gl-remote-total > 7)
	(up-set-target-by-id g: gl-lured-boar-id)
=>
	(up-target-objects 1 action-default -1 -1)
;	(chat-to-all "Take the boar down!")
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-compare-goal gl-TC-garrisoning != wolf-stage2)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
	(up-compare-goal gl-local-last g:> temporary-goal3)
=>
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-jump-rule -6)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
=>
	(up-full-reset-search)
	(up-set-target-by-id g: gl-boar-lurer-id)
	(up-get-point position-object gl-saved-point-x)
	(up-set-target-point gl-saved-point-x)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-find-remote c: town-center c: 1)
	(up-filter-distance c: -1 c: 0)
	(up-find-local c: villager-class c: 1)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-compare-goal gl-TC-garrisoning != wolf-stage2)
	(up-object-data object-data-hitpoints < 15)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
=>
	(up-target-objects 0 action-garrison -1 -1)
	(set-goal gl-boar-hunting-stage 5)
	(set-strategic-number sn-focus-player-number 0)
)

(defrule
	(up-compare-goal gl-boar-hunting-stage >= 3)
	(up-compare-goal gl-boar-hunting-stage <= 4)
	(up-compare-goal gl-TC-garrisoning != wolf-stage2)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-point-distance gl-point-x gl-temporary-point-x <= boar-shoot-distance)
	(up-compare-goal gl-local-last >= 4)
=>
	(set-goal gl-boar-hunting-stage 5)
	(set-strategic-number sn-focus-player-number 0)
)

(defrule
	(or	(and	(up-compare-goal gl-boar-hunting-stage != 4)
			(up-compare-goal gl-boar-hunting-stage != 5))
		(or	(up-timer-status 33 == timer-running)
			(or	(not	(up-set-target-by-id g: gl-lured-boar-id))
				(and	(up-set-target-by-id g: gl-lured-boar-id)
					(or	(up-object-data object-data-action == actionid-attack)
						(up-object-data object-data-hitpoints == 0))))))
=>
	(up-jump-rule 3)
)

(defrule
;	(up-set-target-by-id g: gl-lured-boar-id)
;	(up-object-data object-data-action != actionid-attack)
;	(up-object-data object-data-hitpoints > 0)
	(up-object-data object-data-hitpoints < 75)
	(up-set-target-by-id g: gl-boar-lurer-id)
	(up-object-data object-data-action != actionid-attack)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 0)
	(up-find-local c: villager-class c: 1)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-target-objects 1 action-default -1 -1)
	(chat-to-player my-player-number "Relure.")
	(up-get-search-state gl-local-total)
	(set-goal temporary-goal2 0)
	(enable-timer 33 8)
)

(defrule
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-object-data object-data-hitpoints < 75)
	(up-set-target-by-id g: gl-boar-lurer-id)
	(up-object-data object-data-action != actionid-attack)
	(up-compare-goal temporary-goal2 < 7)
	(goal gl-local-total 0)
=>
	(up-full-reset-search)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-filter-distance c: -1 g: temporary-goal2)
	(up-find-local c: villager-class c: 1)
	(up-set-target-by-id g: gl-lured-boar-id)
	(up-target-objects 1 action-default -1 -1)
	(chat-to-player my-player-number "Relure (new).")
	(up-get-search-state gl-local-total)
	(up-jump-rule -1)
)

(defrule
	(up-timer-status 33 == timer-running)
	(up-set-target-object search-local c: 0)
=>
	(up-get-object-data object-data-id gl-boar-lurer-id)
)

(defrule
	(true)
=>
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-find-local c: villager-class c: 1)
	(set-goal temporary-goal2 0)
)

(defrule
	(up-set-target-by-id g: gl-boar-lurer-id)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:== gl-boar-lurer-id)
	(up-object-data object-data-hitpoints < 40)
	(or	(research-completed ri-loom)
		(up-object-data object-data-hitpoints < 25))
=>
	(up-get-point position-object gl-point-x)
	(set-goal temporary-goal2 1)
)

(defrule
	(up-set-target-by-id g: gl-boar-lurer-id)
	(goal temporary-goal2 0)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:!= gl-boar-lurer-id)
=>
	(up-reset-search 0 1 0 0)
	(up-find-local c: villager-class c: 1)
	(up-jump-rule -2)
)

(defrule
	(goal temporary-goal2 1)
=>
	(up-reset-search 0 0 1 1)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 4)
	(up-find-remote c: wolf c: 2)
	(up-find-remote c: jaguar c: 2)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal3 g:= gl-remote-total)
	(up-reset-search 0 0 1 1)
	(up-filter-distance c: -1 c: 6)
	(up-find-remote c: wild-boar c: 1)
	(up-find-remote c: javelina c: 1)
	(up-get-search-state gl-local-total)
	(up-reset-search 0 0 1 1)
	(up-filter-distance c: -1 c: -1)
	(set-strategic-number sn-focus-player-number my-player-number)
)

(defrule
	(goal temporary-goal2 1)
	(up-compare-goal gl-boar-hunting-stage > 0)
	(up-compare-goal gl-boar-hunting-stage < 6)
	(up-compare-goal temporary-goal3 > 0)
	(up-find-remote c: town-center c: 1)
	(up-set-target-object search-remote c: 0)
	(up-set-target-object search-local c: 0)
	(nand	(research-completed ri-loom)
		(and	(up-object-data object-data-hitpoints > 26)
			(and	(goal gl-remote-total 0)
				(goal temporary-goal3 1))))
=>
	(up-target-objects 0 action-garrison -1 -1)
)

(defrule
	(goal temporary-goal2 1)
	(up-set-target-object search-local c: 0)
	(or	(up-point-distance gl-point-x gl-position-self-x < 7)
		(and	(research-completed ri-loom)
			(and	(up-object-data object-data-hitpoints > 26)
				(and	(goal gl-remote-total 0)
					(goal temporary-goal3 1)))))
=>
	(set-goal gl-boar-lurer-id -1)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

; ============== GUARDING THE CAMPS

(defrule
	(or	(game-time > 1800)
		(or	(and	(or	(up-compare-goal gl-enemy-units-in-town > 1)
					(up-timer-status 15 == timer-running))
				(goal TSA 0))
			(or	(and	(game-time > 1300)
					(up-compare-goal gl-current-age >= gv-castle))
				(or	(up-compare-goal gl-target-player-distance < 35)
					(unit-type-count spearman-line < 1)))))
=>
	(up-jump-rule 14)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-get-fact building-type-count lumber-camp temporary-goal)
	(up-modify-goal temporary-goal c:- 1)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 lumber-camp)
	(set-goal gl-camp-defense 0)
)

(defrule
	(goal gl-rush-suitability-on-map GOOD)
	(or	(and	(or	(up-compare-goal gl-enemy-cavalry-count > 1)
				(and	(players-building-type-count target-player stable > 0)
					(and	(up-compare-goal gl-enemy-strategy != UP-TO-CASTLE)
						(up-compare-goal gl-enemy-strategy != KNIGHT-RUSH))))
			(players-current-age target-player == feudal-age))
		(and	(goal POSITION POCKET)
			(up-compare-goal gl-enemy-heavy-cavalry-count < 3)))
=>
	(set-goal gl-camp-defense 1)
)

(defrule
	(up-compare-goal temporary-goal > 0)
=>
	(up-full-reset-search)
	(up-find-remote g: temporary-goal5 g: temporary-goal)
	(up-reset-search 0 0 0 1)
	(up-find-remote g: temporary-goal5 c: 1)
)

(defrule
	(goal temporary-goal 0)
=>
	(up-full-reset-search)
	(up-find-remote g: temporary-goal5 c: 1)
)

(defrule
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-lerp-tiles gl-point-x gl-position-self-x c: 1)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 6)
	(up-find-local c: spearman-line c: 1)
	(up-get-search-state gl-local-total)
	(set-goal temporary-goal4 1)
)

(defrule
	(goal temporary-goal4 1)
	(goal gl-local-last 0)
=>
	(set-goal temporary-goal3 1)
	(set-goal temporary-goal4 2)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 34)
	(up-filter-exclude -1 -1 orderid-explore -1)
	(up-find-local c: spearman-line c: 1)
	(up-reset-search 0 0 1 1)
	(up-filter-distance c: -1 c: 6)
)

(defrule
	(goal temporary-goal4 2)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:!= gl-group-leaderid)
	(nand	(up-object-data object-data-action == actionid-attack)
		(and	(up-object-data object-data-target != building-class)
			(up-object-data object-data-target != tower-class)))
=>
	(up-get-point position-object gl-saved-point-x)
	(up-set-target-point gl-saved-point-x)
	(up-find-local c: spearman-line c: 2)
	(up-find-remote c: lumber-camp c: 1)
	(up-find-remote c: mining-camp c: 1)
	(up-find-remote c: mill c: 1)
	(up-get-search-state gl-local-total)
	(set-goal temporary-goal4 3)
)

(defrule
	(goal gl-camp-defense 1)
	(goal temporary-goal4 3)
	(up-set-target-object search-local c: 0)
	(or	(up-timer-status 32 == timer-running); A recent movement tasked by something else
		(up-compare-goal TSA >= 1))
	(up-object-data object-data-action == actionid-move)
	(up-compare-goal gl-remote-total > 0)
	(goal gl-local-last 1)
=>
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point2-x)
	(up-lerp-tiles gl-point2-x gl-position-self-x c: 1)
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 0)
	(up-find-local c: spearman-line c: 1)
	(up-target-point gl-point2-x action-move -1 defensive)
)

(defrule
	(goal gl-camp-defense 1)
	(goal temporary-goal4 3)
	(or	(goal gl-remote-total 0)
		(goal gl-local-last 2))
=>
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 0)
	(up-find-local c: spearman-line c: 1)
	(up-target-point gl-point-x action-move -1 defensive)
	(up-jump-rule 4)
)

(defrule
	(goal temporary-goal4 3)
=>
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 34)
	(up-set-target-point gl-position-self-x)
	(up-find-local c: spearman-line g: temporary-goal3)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-reset-search 0 1 0 0)
	(up-find-local c: spearman-line c: 1)
	(up-filter-distance c: -1 c: 6)
	(set-goal temporary-goal4 2)
	(up-jump-rule -4)
)

(defrule
	(up-compare-goal temporary-goal >= 0)
=>
	(up-modify-goal temporary-goal c:- 1)
	(up-jump-rule -9)
)

(defrule
	(goal temporary-goal5 lumber-camp)
=>
	(set-goal temporary-goal5 mining-camp)
	(up-get-fact building-type-count mining-camp temporary-goal)
	(up-modify-goal temporary-goal c:- 1)
	(up-jump-rule -10)
)

(defrule
	(goal temporary-goal5 mining-camp)
=>
	(set-goal temporary-goal5 mill)
	(up-get-fact building-type-count mining-camp temporary-goal)
	(up-modify-goal temporary-goal c:- 1)
	(up-modify-goal temporary-goal c:min 1)
	(up-jump-rule -11)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)

; ============== STOPPING VILLAGERS CHASING BOAR/SHEEP/MILITIAS AND WHAT NOT

(defrule
	(or	(game-time > 1500)
		(game-time == 0))
=>
	(up-jump-rule 16)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal g:= gl-map-wood-percentage)
	(up-modify-goal temporary-goal g:* gl-max-coordinate-value)
	(up-modify-goal temporary-goal g:* gl-max-coordinate-value)
	(up-modify-goal temporary-goal c:/ 100)
)

(defrule
	(true)
=>
	(set-goal temporary-goal2 0)
	(up-get-fact building-type-count mining-camp temporary-goal3)
	(up-get-fact building-type-count-total mining-camp temporary-goal4)
	(up-get-fact building-type-count lumber-camp temporary-goal5)
	(up-get-fact building-type-count-total lumber-camp temporary-goal6)
	(up-get-fact building-type-count farm temporary-goal7)
	(up-get-fact building-type-count-total farm temporary-goal8)
	(up-modify-goal temporary-goal8 g:- temporary-goal7)
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: 34 c: -1)
	(up-find-local c: villager-class c: 1)
)

(defrule
	(up-timer-status 15 != timer-running)
	(up-set-target-object search-local c: 0)
	(building-type-count town-center == 1)
	(strategic-number sn-nomad-style-start == 0)
	(strategic-number sn-lumber-camp-max-distance <= 30)
	(strategic-number sn-mining-camp-max-distance <= 30)
	(or	(and	(up-object-data object-data-target == dangerous-animal-class)
			(up-compare-goal threat-time > 5000))
		(up-object-data object-data-target == sheep))
=>
	(up-target-point 0 action-stop -1 -1)
)

(defrule
	(up-timer-status 15 != timer-running)
	(up-set-target-object search-local c: 0)
	(building-type-count town-center == 1)
	(strategic-number sn-nomad-style-start == 0)
	(up-compare-goal threat-source != villager-class); Not a real villager fight, just villagers chasing enemy forward builders too far
	(up-object-data object-data-target == villager-class)
=>
	(up-target-point 0 action-stop -1 -1)
)

(defrule
	(game-time > 1140)
=>
	(up-jump-rule 11)
)

(defrule
	(goal temporary-goal4 0)
	(goal temporary-goal5 0)
	(up-compare-goal temporary-goal6 > 0)
=>
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: lumber-camp c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-id temporary-goal)
)

(defrule
	(goal temporary-goal3 0)
	(up-compare-goal temporary-goal4 > 0)
=>
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: mining-camp c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-id temporary-goal)
)

(defrule
	(up-set-target-object search-local c: 0)
	(or	(and	(up-object-data object-data-type == lumber-camp)
			(and	(goal temporary-goal4 0)
				(and	(goal temporary-goal5 0)
					(up-compare-goal temporary-goal6 > 0))))
		(and	(goal temporary-goal3 0)
			(and	(up-compare-goal temporary-goal4 > 0)
				(up-object-data object-data-type == mining-camp))))
	(up-point-distance gl-point-x gl-position-self-x < 30)
=>
	(set-goal temporary-goal2 1)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal3 s:= sn-focus-player-number)
	(up-full-reset-search)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-modify-sn sn-focus-player-number g:= temporary-goal3)
	(up-find-local c: villager-class c: 1)
)

(defrule
	(up-compare-goal threat-time >= 4000)
	(nand	(up-compare-goal threat-time < 8000)
		(and	(strategic-number sn-allow-civilian-defense == 3)
			(strategic-number sn-allow-civilian-offense == 0)))
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-target == infantry-class)
		(up-object-data object-data-target == scout-cavalry-class))
=>
	(up-target-point 0 action-stop -1 -1)
)

(defrule
	(goal temporary-goal2 1)
	(up-timer-status 15 != timer-running)
	(up-set-target-object search-local c: 0)
	(up-compare-goal gl-target-player-distance > 20)
	(up-compare-goal gl-my-villager-count < 12)
	(unit-type-count villager-food < 6)
	(unit-type-count villager-builder == 1)
	(up-compare-goal threat-time > 10000)
	(building-type-count-total mining-camp == 0)
	(up-object-data object-data-target == tree-class)
	(up-set-target-by-id g: temporary-goal)
	(up-object-data object-data-hitpoints < 1000)
=>
	(up-target-objects 1 action-default -1 -1)
	(set-goal temporary-goal2 2)
)

(defrule
	(goal temporary-goal2 2)
	(not	(up-set-target-object search-local c: 0))
=>
	(up-full-reset-search)
	(up-filter-include -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 1)
	(up-target-point 0 action-stop -1 -1)
	(up-jump-rule 4)
)

(defrule
	(goal temporary-goal2 1)
	(up-timer-status 15 != timer-running)
	(up-set-target-object search-local c: 0)
	(up-compare-goal gl-target-player-distance > 30)
	(up-compare-goal threat-time > 10000)
	(building-type-count mining-camp == 0)
	(building-type-count-total mining-camp > 0)
	(up-object-data object-data-target == gold-mine-class)
	(up-object-data object-data-carry g:== gl-villager-max-carry)
	(up-set-target-by-id g: temporary-goal)
	(up-object-data object-data-hitpoints < 1000)
=>
	(up-target-objects 1 action-default -1 -1)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-compare-goal threat-time < 4000)
	(strategic-number sn-allow-civilian-defense == 3); Anti-drush
	(players-unit-type-count focus-player militiaman-line > 0)
	(or	(up-object-data object-data-hitpoints < low-villager-hp2)
		(players-unit-type-count focus-player militiaman-line > 1))
	(up-object-data object-data-hitpoints < low-villager-hp)
	(up-object-data object-data-action == actionid-attack)
	(or	(up-object-data object-data-target == infantry-class)
		(up-object-data object-data-target == scout-cavalry-class))
	(up-set-target-by-id g: gl-main-tc-id)
=>
	(up-target-objects 1 action-garrison -1 -1)
	(set-strategic-number sn-allow-civilian-offense 0)
)

(defrule
	(dropsite-min-distance deer-hunting > 35)
	(dropsite-min-distance deer-hunting s:> sn-maximum-hunt-drop-distance); Doesn't update in real time but better than nothing, probably
	(strategic-number sn-maximum-hunt-drop-distance >= 0)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target == deer-food)
	(up-object-data object-data-carry == 0)
=>
	(up-target-point 0 action-stop -1 -1); Stop hunters going after nonexistent deer
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 0 1 0 0)
	(up-find-local c: villager-class c: 1)
	(up-jump-rule -7)
)

; ============== ...

(defrule
	(unit-type-count sheep == 0)
	(strategic-number sn-maximum-food-drop-distance == 5)
=>
	(set-strategic-number sn-maximum-food-drop-distance 10)
)

(defrule
	(unit-type-count sheep == 0)
	(building-type-count-total mill == 0)
	(building-type-count town-center > 0)
	(up-compare-goal gl-boar-hunting-stage > 1)
	(strategic-number sn-maximum-food-drop-distance < 17)
=>
	(set-strategic-number sn-maximum-food-drop-distance 17)
)

; ============== FINDING SHEEP

(defrule
	(or	(game-time >= 780)
		(or	(up-compare-goal gl-boar-stealing > 0)
			(or	(up-compare-goal gl-villager-laming > 0)
				(or	(building-type-count town-center == 0)
					(or	(up-timer-status 50 == timer-running)
						(or	(game-time == 0)
							(or	(up-compare-goal gl-scout-point-counter >= 100)
								(up-compare-goal gl-interfered-scout > 0))))))))
=>
	(up-jump-rule 22)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal7 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(set-goal gl-remote-total 0)
	(set-goal temporary-goal2 8)
	(set-goal temporary-goal3 -1)
	(set-goal temporary-goal4 11)
	(set-goal temporary-goal5 13)
)

(defrule
	(up-gaia-type-count c: livestock-class > 0)
=>
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 32)
	(up-set-target-point gl-position-self-x)
	(up-find-remote c: livestock-class c: 240)
	(up-clean-search search-remote object-data-distance search-order-asc)
	(up-get-search-state gl-local-total)
)

(defrule
	(up-gaia-type-count c: livestock-class > 0)
=>
	(up-filter-distance c: -1 c: -1)
	(up-find-local g: gl-scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-object-point-x)
	(up-set-target-point gl-object-point-x)
	(up-filter-distance c: -1 c: 8)
	(up-find-remote c: livestock-class c: 1)
	(up-get-search-state gl-local-total)
	(set-strategic-number sn-focus-player-number 1)
)

(defrule
	(game-time g:>= gl-early-scout-time)
	(up-gaia-type-count c: livestock-class > 0)
	(game-time s:< sn-home-exploration-time)
	(goal gl-remote-total 0)
	(stance-toward focus-player enemy)
=>
	(up-filter-distance c: -1 c: 32)
	(up-find-remote c: livestock-class c: 1)
	(up-get-search-state gl-local-total)
)

(defrule
	(game-time g:>= gl-early-scout-time)
	(up-gaia-type-count c: livestock-class > 0)
	(game-time s:< sn-home-exploration-time)
	(goal gl-remote-total 0)
	(player-valid focus-player)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2)
)

(defrule
	(up-gaia-type-count c: livestock-class > 0)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-get-object-data object-data-id temporary-goal3)
	(up-modify-goal temporary-goal6 g:= gl-local-total)
	(up-modify-goal temporary-goal6 c:- 1)
	(up-modify-goal temporary-goal6 c:* -1)
	(up-modify-goal temporary-goal5 g:* temporary-goal6)
	(up-modify-goal temporary-goal4 g:+ temporary-goal5)
	(up-full-reset-search)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 g: temporary-goal4)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 240)
	(up-clean-search search-local object-data-distance search-order-asc)
)

(defrule
	(up-gaia-type-count c: livestock-class > 0)
	(up-set-target-by-id g: temporary-goal3)
	(up-set-target-object search-local c: 0)
	(goal temporary-goal6 0)
=>
	(up-get-point position-object gl-point2-x)
	(up-get-point-distance gl-point-x gl-point2-x temporary-goal9)
	(up-get-point-distance gl-point-x gl-object-point-x temporary-goal10)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-compare-goal temporary-goal9 g:< temporary-goal10)
	(or	(up-timer-status 13 != timer-running)
		(up-object-data object-data-action == -1))
	(up-gaia-type-count c: livestock-class > 0)
	(up-set-target-by-id g: temporary-goal3)
	(nand	(up-compare-goal gl-my-villager-count <= 4)
		(and	(game-time < 10)
			(soldier-count == 0)))
=>
	(up-remove-objects search-local object-data-index > 0)
	(up-target-objects 1 action-move -1 -1)
	(enable-timer 13 2)
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-local-total > 0)
	(nand	(up-timer-status 13 == timer-running)
		(up-timer-status 9 == timer-running))
	(up-gaia-type-count c: livestock-class > 0)
	(up-set-target-by-id g: temporary-goal3)
=>
	(up-full-reset-search)
	(up-find-local g: gl-scout-unit c: 1)
	(up-target-objects 1 action-move -1 no-attack)
	(up-get-point position-object gl-point-x)
	(up-get-point-distance gl-point-x gl-position-self-x gl-sheep-distance)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal3)
	(enable-timer 13 5)
)

(defrule
	(up-set-target-by-id g: 451)
=>
	(up-get-point position-object gl-saved-point-x)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal2)
	(up-modify-goal gl-sheep-distance g:max temporary-goal2)
)

(defrule
	(game-time > 5)
	(game-time < 60)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(up-gaia-type-count c: livestock-class > 0)
	(up-compare-goal gl-sheep-distance > 10)
	(unit-type-count villager-forager > 0)
	(goal gl-normal-milling 0)
=>
	(set-goal gl-normal-milling 1)
)

(defrule
	(or	(game-time > 180)
		(nor	(up-compare-const gv-explored-map == 1)
			(difficulty == hardest)))
=>
	(up-jump-rule 9)
)

(defrule
	(up-timer-status 13 != timer-running)
=>
	(up-copy-point gl-point-x gl-position-self-x)
	(up-copy-point gl-temporary-point-x gl-position-self-x)
	(up-modify-goal gl-point-x c:- 32)
	(up-modify-goal gl-point-y c:- 32)
	(set-goal temporary-goal 64)
	(set-goal temporary-goal2 64)
	(set-goal temporary-goal3 60)
	(set-goal temporary-goal4 60)
	(set-goal temporary-goal5 0)
	(set-strategic-number sn-focus-player-number 0)
)

(defrule
	(up-point-distance gl-point-x gl-position-self-x g:< temporary-goal4)
	(or	(up-point-contains gl-point-x c: wild-boar)
		(up-point-contains gl-point-x c: javelina))
=>
	(up-set-target-point gl-point-x)
	(set-goal gl-remote-total 0)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 1)
	(up-find-remote c: wild-boar c: 1)
	(up-find-remote c: javelina c: 1)
	(up-get-search-state gl-local-total)
)

(defrule
	(up-point-distance gl-point-x gl-position-self-x > 5)
	(up-point-distance gl-point-x gl-position-self-x g:< temporary-goal4)
	(goal gl-remote-total 0)
	(or	(up-point-contains gl-point-x c: wild-boar)
		(up-point-contains gl-point-x c: javelina))
=>
	(up-copy-point gl-temporary-point-x gl-point-x)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal4)
)

(defrule
	(up-point-distance gl-point-x gl-position-self-x g:< temporary-goal3)
	(up-point-contains gl-point-x c: livestock-class)
=>
	(up-set-target-point gl-point-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 0)
	(up-find-remote c: sheep c: 1)
	(up-filter-distance c: -1 c: 1)
	(up-find-local c: sheep c: 1)
	(up-get-search-state gl-local-total)
)

(defrule
	(up-point-distance gl-point-x gl-position-self-x > 5)
	(up-point-contains gl-point-x c: livestock-class)
	(goal gl-remote-total 0)
	(goal gl-local-total 0)
	(up-point-distance gl-point-x gl-position-self-x g:< temporary-goal3)
	(up-compare-goal temporary-goal > 0)
	(up-timer-status 13 != timer-running)
=>
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal3)
)

(defrule
	(up-compare-goal temporary-goal > 0)
	(up-timer-status 13 != timer-running)
=>
	(up-modify-goal gl-point-x c:+ 1)
	(up-modify-goal temporary-goal c:- 1)
	(up-jump-rule -5)
)

(defrule
	(up-compare-goal temporary-goal2 > 0)
	(up-timer-status 13 != timer-running)
=>
	(up-modify-goal gl-point-y c:+ 1)
	(up-modify-goal temporary-goal2 c:- 1)
	(up-modify-goal gl-point-x g:= gl-position-self-x)
	(up-modify-goal gl-point-x c:- 32)
	(set-goal temporary-goal 64)
	(up-jump-rule -6)
)

(defrule
	(game-time < 120)
	(up-point-distance gl-saved-point-x gl-position-self-x > 5)
	(up-point-contains gl-saved-point-x c: livestock-class)
	(up-timer-status 13 != timer-running)
=>
	(up-full-reset-search)
	(up-find-local g: gl-scout-unit c: 1)
	(up-target-point gl-saved-point-x action-move -1 no-attack)
	(enable-timer 13 10)
)

(defrule
	(up-point-distance gl-temporary-point-x gl-position-self-x > 5)
	(or	(up-point-contains gl-temporary-point-x c: wild-boar)
		(up-point-contains gl-temporary-point-x c: javelina))
	(up-timer-status 13 != timer-running)
=>
	(up-full-reset-search)
	(up-find-local g: gl-scout-unit c: 1)
	(up-target-point gl-temporary-point-x action-move -1 no-attack)
	(enable-timer 13 10)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal7)
)

#load-if-defined DARK-AGE-START
#load-if-defined GHOST-LAKE-MAP
(defrule
	(or	(game-time > 480)
		(or	(up-compare-goal gl-boar-stealing > 0)
			(or	(up-compare-goal gl-villager-laming != -1)
				(or	(up-timer-status 13 == timer-running)
					(or	(goal gl-DRUSH YES)
						(or	(game-time g:< gl-early-scout-time)
							(game-time < 240)))))))
=>
	(up-jump-rule 7)
)

(defrule
	(or	(and	(up-gaia-type-count g: gl-boar-unit < 2)
			(and	(up-compare-goal gl-boar-eaten < 2)
				(and	(or	(up-gaia-type-count g: gl-boar-unit < 1)
						(up-compare-goal gl-boar-eaten < 1))
					(and	(strategic-number sn-boars-on-map != NONE)
						(game-time < boar-search-time)))))
		(and	(game-time < sheep-search-time)
			(strategic-number sn-sheep-count < 8)))
=>
	(up-jump-rule 6)
)

#load-if-not-defined UP-ALLY-IN-GAME
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-object-point-x)
	(up-get-point position-center gl-saved-point-x)
	(up-get-point position-object gl-temporary-point-x)
	(up-cross-tiles gl-object-point-x gl-saved-point-x c: 15)
	(up-get-point-distance gl-position-self-x gl-temporary-point-x temporary-goal)
	(set-goal gl-scout-movement-tiles -1)
	(disable-self)
)
#else
(defrule
	(true)
=>
	(up-modify-goal temporary-goal3 s:= sn-focus-player-number)
	(up-full-reset-search)
	(up-find-player ally find-closest temporary-goal2)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-copy-point gl-object-point-x gl-position-self-x)
	(up-get-point position-focus gl-point-x)
	(up-get-point position-center gl-saved-point-x)
	(up-cross-tiles gl-object-point-x gl-saved-point-x c: 15)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal3)
	(set-goal gl-scout-movement-tiles -1)
	(disable-self)
)
#end-if

(defrule
	(goal gl-scout-movement-tiles -1)
	(up-point-distance gl-point-x gl-object-point-x g:< temporary-goal)
=>
	(set-goal gl-scout-movement-tiles -15)
	(disable-self)
)

(defrule
	(goal gl-scout-movement-tiles -1)
=>
	(set-goal gl-scout-movement-tiles 15)
	(set-strategic-number sn-home-exploration-time 480)
	(disable-self)
)

(defrule
	(unit-type-count scout-unit > 0)
	(up-timer-status 24 != timer-running)
	(strategic-number sn-number-explore-groups > 0)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-object-point-x)
	(up-get-point position-center gl-point-x)
	(up-get-point position-center gl-saved-point-x)
	(up-cross-tiles gl-object-point-x gl-point-x g: gl-scout-movement-tiles)
	(up-modify-goal gl-saved-point-x g:- gl-object-point-x)
	(up-modify-goal gl-saved-point-y g:- gl-object-point-y)
	(set-goal temporary-goal2 2)
	(up-modify-goal temporary-goal2 c:+ gv-pocket-position)
)

(defrule
	(game-time g:> gl-circle-scouting-time)
	(unit-type-count scout-unit > 0)
	(up-timer-status 24 != timer-running)
	(strategic-number sn-number-explore-groups > 0)
=>
	(up-modify-goal temporary-goal g:= gl-position-center-x)
	(up-modify-goal temporary-goal g:/ temporary-goal2)
	(up-modify-goal gl-saved-point-x g:* temporary-goal)
	(up-modify-goal gl-saved-point-y g:* temporary-goal)
	(up-get-point-distance gl-point-x gl-object-point-x temporary-goal4)
	(up-modify-goal gl-saved-point-x g:/ temporary-goal4)
	(up-modify-goal gl-saved-point-y g:/ temporary-goal4)
	(up-modify-goal gl-point-x g:- gl-saved-point-x)
	(up-modify-goal gl-point-y g:- gl-saved-point-y)
	(up-target-point gl-point-x action-move -1 no-attack)
	(enable-timer 24 10)
)
#end-if

; ============== LURING DEER

(defrule
	(or	(game-time > 1800)
		(or	(game-time g:< gl-early-scout-time)
			(or	(goal gl-scout-unit horse); Pointless to lure with it
				(or	(up-compare-goal gl-dodging-TC > 0)
					(goal gl-deer-luring -2)))))
=>
	(up-modify-goal gl-deer-luring c:min -1)
	(up-jump-rule 34)
)

(defrule
	(soldier-count > 0)
	(building-type-count-total dock == 0)
	(or	(game-time <= dock-check-time1)
		(building-type-count-total mill > 0))
	(game-time <= dock-check-time2)
	(or	(up-compare-const gv-fish-map == 1)
		(or	(map-type scandanavia)
			(or	(map-type highland)
				(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))))
=>
	(up-modify-goal gl-deer-luring c:min -1)
	(up-jump-rule 33)
)

(defrule
	(game-time < min-search-time)
	(or	(dropsite-min-distance deer-hunting >= 22)
		(or	(up-compare-goal gl-my-villager-count < 10)
			(or	(up-gaia-type-count c: gold < 4)
				(and	(up-gaia-type-count c: stone < 2)
					(up-compare-goal gl-DRUSH != YES)))))
	(nand	(map-type migration)
		(strategic-number sn-sheep-count > 5))
=>
	(up-modify-goal gl-deer-luring c:min -1)
	(up-jump-rule 32)
)

(defrule
	(or	(up-compare-goal gl-boar-stealing > 0)
		(or	(soldier-count == 0)
			(or	(up-compare-goal gl-villager-laming >= 0)
				(or	(and	(goal gl-strategy grush)
						(up-compare-goal gl-current-age >= gv-dark-up))
					(and	(unit-type-count scout-unit == 0)
						(goal gl-scout-unit scout-unit))))))
=>
	(up-modify-goal gl-deer-luring c:min -1)
	(up-jump-rule 31)
)

(defrule
	(or	(and	(or	(game-time >= deer-luring-stop-time2)
				(up-pending-placement c: dock))
			(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style))
		(or	(and	(game-time s:< sn-home-exploration-time)
				(and	(strategic-number sn-home-exploration-time == 480)
					(map-type ghost-lake)))
			(building-type-count town-center == 0)))
=>
	(up-modify-goal gl-deer-luring c:min -1)
	(up-jump-rule 30)
)

(defrule
	(or	(and	(up-gaia-type-count g: gl-boar-unit < 2)
			(and	(up-compare-goal gl-boar-eaten < 2)
				(and	(or	(dropsite-min-distance live-boar > 33)
						(up-compare-goal gl-boar-eaten < 1))
					(and	(strategic-number sn-boars-on-map != NONE)
						(game-time < boar-search-time)))))
		(up-compare-goal gl-interfered-scout > 0))
=>
	(up-modify-goal gl-deer-luring c:min -1)		
	(up-jump-rule 29)
)

(defrule
	(or	(and	(game-time < sheep-search-time)
			(strategic-number sn-sheep-count < normal-sheep-number))
		(and	(up-compare-goal gl-strategy-type >= FC)
			(and	(player-valid 3)
				(and	(goal POSITION FLANK)
					(and	(up-compare-goal gl-target-player-distance > 100)
						(and	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
							(up-compare-goal gl-DRUSH != YES)))))))
=>
	(up-jump-rule 28)
)

(defrule
	(game-time < deer-luring-stop-time2)
	(up-set-target-by-id g: 496)
=>
	(up-full-reset-search)
	(up-find-local g: gl-scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-flank gl-point-x)
	(up-get-point position-object gl-saved-point-x)
	(up-set-target-by-id g: 496)
	(up-get-point position-object gl-temporary-point-x)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(set-goal temporary-goal 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 1)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal8 5)
;	(up-modify-goal temporary-goal7 s:= sn-minimum-water-body-size-for-dock)
;	(up-modify-goal temporary-goal7 c:z/ mixed-map-style)
;	(up-modify-goal temporary-goal7 c:min 1)
;	(up-modify-goal temporary-goal8 g:- temporary-goal7)
	(set-goal temporary-goal8 4); test
	(set-goal gl-local-last 0)
	(set-strategic-number sn-target-point-adjustment 6)
)

(defrule
	(or	(dropsite-min-distance deer-hunting <= deer-search-distance); 33 normally, unlimited in wonder race
		(up-compare-goal gl-deer-luring >= 1))
=>
	(up-set-target-point gl-position-self-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: deer-search-distance)
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: deer-class c: 240)
	(up-remove-objects search-remote object-data-carry == 0)
	(up-remove-objects search-remote object-data-index > 0)
	(up-get-search-state gl-local-total)
)

(defrule
	(or	(dropsite-min-distance deer-hunting <= deer-search-distance)
		(up-compare-goal gl-deer-luring >= 1))
	(or	(goal gl-remote-total 0)
		(and	(strategic-number sn-preferred-mill-placement == 1)
			(up-compare-const gv-migration == 0)))
=>
	(set-goal gl-deer-luring -2)
)

(defrule
	(game-time < deer-luring-stop-time2)
	(up-compare-goal gl-deer-luring > 0)
	(up-set-target-by-id g: 496)
	(up-object-data object-data-hitpoints > 0)
	(up-point-distance gl-temporary-point-x gl-position-self-x < 12); Almost done
	(up-point-distance gl-saved-point-x gl-position-self-x < 18)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(goal POSITION FLANK)
		(or	(and	(goal gl-strategy scrush)
				(players-building-count any-enemy == 0))
			(and	(game-time >= deer-luring-stop-time1)
				(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style))))
	(game-time > 600)
	(up-compare-const gv-wonder-race == 0)
	(or	(game-time > 700)
		(up-compare-goal gl-strategy-type <= controlled-flush))
=>
	(set-goal gl-deer-luring -2)
)

(defrule
	(goal gl-deer-luring -2)
	(game-time s:> sn-home-exploration-time)
=>
	(up-send-scout group-type-land-explore gv-scouting-type)
	(disable-self)
)

(defrule
	(goal gl-DRUSH YES)
	(up-compare-goal gl-target-player-distance <= 90)
	(or	(players-building-type-count target-player lumber-camp > 0)
		(or	(players-building-type-count target-player mining-camp > 0)
			(players-building-type-count target-player mill > 0)))
	(game-time < 600)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(and	(goal POSITION FLANK)
			(and	(game-time > flush-deer-lure-time); 530 if not hardest
				(or	(game-time > 630)
					(up-compare-goal gl-strategy-type <= controlled-flush))))
		(or	(and	(goal gl-DRUSH YES)
				(game-time > 350))
			(and	(goal gl-feudal-infantry men-at-arms)
				(game-time > 450))))
=>
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal gl-deer-luring != -2)
	(dropsite-min-distance deer-hunting <= deer-search-distance)
	(goal 496 -1)
=>
	(up-set-target-point gl-position-self-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 9)
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: deer-class c: 240)
	(up-remove-objects search-remote object-data-carry == 0)
	(up-remove-objects search-remote object-data-index > 0)
	(set-goal temporary-goal7 11)
)

(defrule
	(up-compare-goal gl-deer-luring != -2)
	(dropsite-min-distance deer-hunting <= deer-search-distance)
	(goal 496 -1)
	(not	(up-set-target-object search-remote c: 0))
	(up-compare-goal temporary-goal7 <= deer-search-distance)
=>
	(up-filter-distance c: -1 g: temporary-goal7)
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: deer-class c: 240)
	(up-remove-objects search-remote object-data-carry == 0)
	(up-remove-objects search-remote object-data-index > 0)
	(up-modify-goal temporary-goal7 c:+ 1)
	(up-jump-rule -1)
)

(defrule
	(up-compare-goal gl-deer-luring != -2)
	(dropsite-min-distance deer-hunting <= deer-search-distance)
	(goal 496 -1)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-object-point-x)
	(up-get-object-data object-data-id 496)
	(set-goal gl-deer-luring 2)
	(set-goal temporary-goal3 0)
	(set-goal gl-local-last 0)
)

(defrule
	(or	(not	(up-set-target-by-id g: 496))
		(and	(up-set-target-by-id g: 496)
			(up-object-data object-data-class != deer-food)))
=>
	(set-goal 496 -1)
)

(defrule
	(up-set-target-by-id g: 496)
	(building-type-count wall-class > 0)
	(goal gl-deer-luring 2)
	(goal gl-local-last 0)
	(up-compare-goal temporary-goal3 < 9)
=>
	(up-set-target-point gl-object-point-x)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-filter-distance c: -1 g: temporary-goal3)
	(up-find-local c: wall-class c: 1)
	(up-get-search-state gl-local-total)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-saved-point-x)
	(up-get-point-distance gl-saved-point-x gl-position-self-x temporary-goal5)
	(up-jump-rule -1)
)

(defrule
	(up-set-target-by-id g: 496)
	(building-type-count wall-class > 0)
	(goal gl-deer-luring 2)
	(goal gl-local-last 1)
	(up-point-distance gl-object-point-x gl-position-self-x g:>= temporary-goal5)
=>
	(up-target-point 0 action-delete -1 -1)
	(up-copy-point gl-candidate2-point-x gl-saved-point-x)
	(disable-self)
)

(defrule
	(or	(goal gl-deer-luring 2)
		(and	(goal gl-deer-luring 3)
			(timer-triggered 10)))
=>
	(set-goal gl-deer-luring 1)
)

(defrule
	(up-compare-goal gl-deer-luring >= 1)
	(up-set-target-by-id g: 496)
=>
	(up-copy-point gl-temporary-point-x gl-position-self-x)
	(up-modify-goal gl-temporary-point-x c:- 1)
	(up-full-reset-search)
	(up-find-local g: gl-scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-saved-point-x)
	(up-set-target-by-id g: 496)
	(up-get-point position-object gl-object-point-x)
	(up-copy-point gl-point-x gl-object-point-x)
	(up-get-point-distance gl-object-point-x gl-position-self-x temporary-goal)
	(up-lerp-tiles gl-object-point-x gl-position-self-x c: -1)
)

(defrule
	(up-compare-goal gl-deer-luring >= 1)
	(up-set-target-by-id g: 496)
	(up-compare-goal gl-object-point-x > -1)
	(up-compare-goal gl-object-point-y > -1)
	(up-compare-goal gl-object-point-x g:< gl-max-coordinate-value)
	(up-compare-goal gl-object-point-y g:< gl-max-coordinate-value)
	(up-timer-status 13 != timer-running)
=>
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
	(up-reset-unit g: gl-scout-unit)
	(up-reset-scouts)
;	(up-target-point gl-object-point-x action-move -1 -1)
	(up-modify-flag gl-flag c:+ disabled-luring-scouting)
	(set-goal temporary-goal5 1)
	(set-goal temporary-goal6 2)
	(up-jump-rule 4)
)

(defrule
	(up-compare-goal gl-deer-luring >= 1)
	(up-set-target-by-id g: 496)
	(or	(goal gl-object-point-x -1)
		(or	(goal gl-object-point-y -1)
			(or	(up-compare-goal gl-object-point-x g:== gl-max-coordinate-value)
				(up-compare-goal gl-object-point-y g:== gl-max-coordinate-value))))
	(up-timer-status 13 != timer-running)
=>
	(up-set-target-point gl-position-self-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: deer-search-distance)
	(up-find-remote c: deer c: 1)
	(set-goal temporary-goal6 1)
)

(defrule
	(goal temporary-goal6 1)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-object-point-x)
	(up-lerp-tiles gl-object-point-x gl-position-self-x c: -1)
)

(defrule
	(goal temporary-goal6 1)
	(up-compare-goal gl-object-point-x > -1)
	(up-compare-goal gl-object-point-y > -1)
	(up-compare-goal gl-object-point-x g:< gl-max-coordinate-value)
	(up-compare-goal gl-object-point-y g:< gl-max-coordinate-value)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-object-data object-data-id 496)
	(set-goal temporary-goal6 0)
	(up-jump-rule -5)
)

(defrule
	(goal temporary-goal6 1)
	(up-set-target-object search-remote c: 0)
=>
	(up-reset-search 0 0 0 1)
	(up-find-remote c: deer c: 1)
	(up-jump-rule -3)
)

(defrule
	(up-compare-goal gl-deer-luring >= 1)
	(up-set-target-by-id g: 496)
	(goal temporary-goal6 2)
=>
	(up-set-target-by-id g: gl-main-tc-id)
	(up-get-object-data object-data-precise-x gl-point2-x)
	(up-get-object-data object-data-precise-y gl-point2-y)
	(up-set-target-by-id g: 496)
	(up-get-object-data object-data-precise-x gl-object-point-x)
	(up-get-object-data object-data-precise-y gl-object-point-y)
	(up-lerp-tiles gl-object-point-x gl-point2-x c: -60)
	(up-target-point gl-object-point-x action-move -1 -1)
)

(defrule
	(up-set-target-by-id g: 496)
	(up-point-distance gl-point-x gl-temporary-point-x < 9)
	(up-object-data object-data-hitpoints == 0)
=>
	(up-modify-goal 493 g:= 494)
	(up-modify-goal 494 g:= 496)
	(set-goal 496 -1)
	(up-modify-goal gl-lured-deer-count c:+ 1)
)

(defrule
	(up-set-target-by-id g: 496)
	(up-object-data object-data-hitpoints == 0)
=>
	(set-goal 496 -1)
	(up-modify-goal gl-lured-deer-count c:+ 1)
)

(defrule
	(goal gl-deer-luring 1)
	(up-set-target-by-id g: 496)
	(up-compare-goal temporary-goal < 6)
	(up-compare-goal temporary-goal4 < 12)
	(up-compare-goal gl-local-last < 4)
=>
	(up-modify-goal temporary-goal4 c:+ 1)
	(up-modify-goal temporary-goal5 c:+ 1)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-modify-goal gl-point-x c:- 1)
	(up-set-target-point gl-point-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 g: temporary-goal4)
	(up-find-local c: villager-class c: 4)
	(up-get-search-state gl-local-total)
	(up-jump-rule -1)
)

(defrule
	(goal gl-deer-luring 1)
	(up-set-target-by-id g: 496)
	(or	(and	(up-compare-goal gl-boar-hunting-stage != 4)
			(up-compare-goal gl-boar-hunting-stage != 5))
		(dropsite-min-distance live-boar > 33))
	(up-compare-goal temporary-goal g:<= temporary-goal8)
=>
	(up-target-objects 1 action-default -1 -1)
	(set-goal gl-deer-luring 3)
	(enable-timer 10 6)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
	(set-strategic-number sn-target-point-adjustment 0)
)
#end-if
#end-if

#end-if
#end-if
#end-if; Lower difficulties

; ============== SOME CHAT

#load-if-not-defined UP-SCENARIO-GAME

#load-if-not-defined DIFFICULTY-HARDEST
#load-if-not-defined DIFFICULTY-HARD
(defrule
	(game-time > 10)
=>
	(chat-to-all "Difficulty is set below hard, so my playing will be weaker.")
	(disable-self)
)
#end-if
#else
(defrule
	(game-time > 10)
=>
	(chat-to-all "Beware, I found some extra resources. Use hard difficulty for a fair game.")
	(disable-self)
)
#end-if

#end-if

; ============== RAM PATROL

(defrule
	(or	(goal TSA 0)
		(or	(up-compare-goal winning-player > 0)
			(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
				(or	(up-timer-status 12 == timer-running)
					(up-compare-goal gl-boar-stealing > 0)))))
=>
	(up-jump-rule 1)
)

(defrule
	(unit-type-count battering-ram-line > 1)
	(players-building-count target-player > 0)
	(players-building-type-count any-enemy stone-wall-line > 0)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-full-reset-search)
	(up-get-fact unit-type-count battering-ram-line temporary-goal2)
	(up-modify-goal temporary-goal2 c:/ 2)
	(up-find-local c: battering-ram-line g: temporary-goal2)
	(up-get-point position-target gl-point-x)
	(up-lerp-tiles gl-point-x gl-position-self-x c: -20)
	(up-set-target-point gl-point-x)
	(up-target-point gl-point-x action-patrol -1 -1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(enable-timer 12 70)
)

; ============== FREE THE RELICS

(defrule
	(goal gl-relic-notice 22343)
=>
	(up-jump-rule 3)
)

(defrule
	(unit-type-count monk > 0)
	(up-compare-goal threat-time > 10000)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 35)
	(up-find-remote c: relic c: 5)
	(up-get-search-state gl-local-total)
	(set-goal temporary-goal2 0)
	(set-goal gl-relic-notice 22343)
)

(defrule
	(unit-type-count monk > 0)
	(up-compare-goal threat-time > 10000)
	(up-compare-goal gl-remote-total > 0)
	(up-compare-goal temporary-goal2 g:< gl-remote-total)
=>
	(up-set-target-object search-remote g: temporary-goal2)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 0)
	(up-find-local c: wall-class c: 1)
	(up-target-point 0 action-delete -1 -1)
	(up-jump-rule -1)
)

(defrule
	(unit-type-count monk > 0)
	(up-compare-goal threat-time > 10000)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

; ============== PICKING UP RELICS

(defrule
	(or	(up-timer-status 45 == timer-running)
		(or	(goal gl-sighted-relic-count 0)
			(or	(unit-type-count monk == 0)
				(or	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
					(up-compare-goal gl-rush-suitability-on-map != GOOD)))))
=>
	(up-jump-rule 6)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 300)
	(set-goal temporary-goal5 0)
	(up-full-reset-search)
	(up-filter-include -1 -1 731 -1)
	(up-find-local c: monk c: 1)
	(up-find-remote c: relic c: 5)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(not	(up-set-target-object search-local c: 0))
=>
	(up-reset-search 1 1 0 0)
	(up-reset-filters)
	(up-find-local c: monk c: 1)
	(set-goal temporary-goal5 1)
)

(defrule
	(goal temporary-goal5 1)
	(up-set-target-object search-remote g: temporary-goal2)
=>
	(up-get-point position-object gl-point-x)
)

(defrule
	(goal temporary-goal5 1)
	(up-set-target-object search-remote g: temporary-goal2)
	(up-point-distance gl-point-x gl-position-self-x g:< temporary-goal3)
=>
	(up-get-object-data object-data-id temporary-goal4)
)

(defrule
	(goal temporary-goal5 1)
	(up-set-target-object search-remote g: temporary-goal2)
=>
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-jump-rule -3)
)

(defrule
	(goal temporary-goal5 1)
	(up-compare-goal temporary-goal3 < 300)
=>
	(up-target-objects 1 action-default -1 -1)
)

; ============== PREVENTING MONKS FROM COMMITTING SUICIDE

(defrule
	(or	(and	(game-time > 2100)
			(up-compare-goal 492 != 1))
		(goal gl-defending-ally YES))
=>
	(up-jump-rule 6)
)

(defrule
	(unit-type-count monk > 0)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal gl-local-total 1)
	(set-goal gl-remote-total 0)
)

(defrule
	(stance-toward focus-player enemy)
	(unit-type-count monk > 0)
=>
	(up-full-reset-search)
	(up-filter-include -1 -1 731 -1)
	(up-find-local c: monk c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 12)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-remote c: all-units-class c: 1)
	(up-get-search-state gl-local-total)
)

(defrule
	(unit-type-count monk > 0)
	(goal gl-local-total 1)
	(goal gl-remote-total 0)
	(player-valid focus-player)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2)
)

(defrule
	(unit-type-count monk > 0)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-carry == 100)
	(goal gl-remote-total 1)
=>
	(up-target-objects 0 action-default -1 -1)
	(enable-timer 50 30); Don't immediately call the monk back home
	(set-goal 492 1)
)

(defrule
	(unit-type-count monk > 0)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(game-time < 1790)
	(up-compare-const gv-death-match == 0)
	(or	(unit-type-count 134 > 1)
		(and	(town-under-attack)
			(and	(up-compare-goal gl-enemy-units-in-town > 1)
				(up-compare-goal MILITARY != 1))))
=>
	(up-full-reset-search)
	(up-filter-include -1 -1 731 -1)
	(up-find-local c: monk c: 240)
	(up-target-point 0 action-stop -1 -1)
	(set-goal 492 1)
)

(defrule
	(goal 492 1)
	(or	(and	(unit-type-count 134 < 1)
			(up-compare-goal threat-time > 7000))
		(game-time > 2090))
=>
	(up-disband-group-type group-type-monk)
	(set-goal 492 0)
)

; ============== RE-EXPLORING

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
=>
	(up-jump-rule 3)
)

(defrule
	(game-time g:< gl-rescouting-time)
	(game-time > 1860)
	(players-military-population focus-player > 30)
	(up-compare-goal gl-enemy-infantry-count < 5)
	(up-compare-goal gl-enemy-archery-count < 5)
	(up-compare-goal gl-enemy-cavalry-count < 5)
	(up-compare-goal gl-enemy-eagle-count < 5)
	(up-compare-goal gl-enemy-huskarl-count < 3)
	(up-compare-goal gl-enemy-cataphract-count < 3)
	(up-compare-goal gl-enemy-scorpion-count < 3)
	(strategic-number sn-total-number-explorers == 0)
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(up-get-fact game-time 0 gl-rescouting-time)
	(up-modify-goal gl-rescouting-time c:+ 10)
	(disable-self)
)

(defrule
	(game-time g:> gl-rescouting-time)
	(players-building-count any-enemy > 0)
	(strategic-number sn-total-number-explorers >= 1)
	(strategic-number sn-total-number-explorers <= 2)
=>
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-number-boat-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
	(up-get-fact game-time 0 gl-rescouting-time)
	(up-modify-goal gl-rescouting-time c:+ 600)
)

(defrule
	(game-time g:> gl-rescouting-time); Starts at >1600/1900 in TG, at >1500 in 1v1, >180/310 in DM
	(soldier-count > 20)
	(or	(and	(soldier-count > 30)
			(population > 120))
		(and	(not	(player-valid 3))
			(up-compare-goal threat-time > 5000)))
	(strategic-number sn-total-number-explorers == 0)
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-number-boat-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 2)
	(up-get-fact game-time 0 gl-rescouting-time)
	(up-modify-goal gl-rescouting-time c:+ 10)
)

; ============== GARRISONING INTO RAMS

(defrule
	(or	(up-timer-status 33 == timer-running)
		(or	(population-cap < 140)
			(or	(difficulty > hard)
				(or	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
					(unit-type-count battering-ram-line == 0)))))
=>
	(up-jump-rule 5)
)

(defrule
	(or	(game-time < 1800)
		(up-compare-goal gl-current-age < gv-feudal))
	(dropsite-min-distance live-boar <= 33)
	(or	(goal gl-boar-hunting-stage 4)
		(goal gl-boar-hunting-stage 5))
=>
	(up-jump-rule 4)
)

(defrule
	(or	(up-compare-goal gl-enemy-eagle-count >= 7)
		(up-compare-goal gl-enemy-heavy-cavalry-count >= 7))
=>
	(up-jump-rule 2)
)

(defrule
	(up-compare-goal MILITARY != 1)
	(up-compare-goal gl-enemy-cavalry-count < 15); Need piks against cavalry
	(up-compare-goal gl-enemy-huskarl-count < 7)
	(or	(up-unit-type-in-town c: battering-ram-line > 0)
		(or	(up-projectile-detected projectile-siege < 5000)
			(or	(up-projectile-detected projectile-fortification < 5000)
				(enemy-buildings-in-town))))
	(soldier-count > 5)
	(unit-type-count infantry-class > 0)
=>
	(set-strategic-number sn-number-garrison-units 6)
	(set-strategic-number sn-maximum-garrison-fill 6)
	(up-garrison battering-ram c: infantry-class)
	(enable-timer 33 32)
)

(defrule
	(goal MILITARY 1)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(up-compare-goal gl-enemy-cavalry-count < 15)
	(up-compare-goal gl-enemy-huskarl-count < 7)
	(soldier-count > 25)
	(or	(up-compare-goal gl-target-player-distance > 70)
		(and	(unit-type-count infantry-class > 25)
			(or	(players-building-type-count target-player castle > 0)
				(players-building-type-count target-player bombard-tower > 0))))
=>
	(set-strategic-number sn-number-garrison-units 6)
	(set-strategic-number sn-maximum-garrison-fill 6)
	(up-garrison battering-ram c: infantry-class)
	(enable-timer 33 32)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(or	(and	(up-compare-goal MILITARY != 1)
			(and	(nor	(up-unit-type-in-town c: battering-ram-line > 0)
					(up-projectile-detected projectile-siege < 10000))
				(nor	(up-projectile-detected projectile-fortification < 10000)
					(enemy-buildings-in-town))))
		(or	(up-compare-goal gl-enemy-eagle-count >= 15)
			(up-compare-goal gl-enemy-heavy-cavalry-count >= 15)))
=>
	(up-ungarrison c: battering-ram-line)
	(enable-timer 33 32)
)

; ============== DELETING OBJECTS

#load-if-not-defined UP-SCENARIO-GAME
(defrule
	(game-time > 500)
	(or	(game-time > 1800)
		(death-match-game))
	(or	(and	(population > 170)
			(military-population > 20))
		(population > almost-full-pop))
=>
	(up-delete-objects c: wall-class c: 32767)
	(up-delete-objects c: gate-class c: 32767)
	(disable-self)
)

(defrule
	(or	(and	(not	(player-in-game any-human-ally))
			(and	(game-time > 1800)
				(up-compare-const gv-grouped-by-team == 1)))
		(and	(death-match-game)
			(and	(population-cap > 40)
				(current-age == imperial-age))))
	(map-type fortress)
=>
	(up-delete-objects c: wall-class c: 32767)
	(up-delete-objects c: gate-class c: 32767)
	(disable-self)
)

(defrule
	(research-completed ri-nomads)
	(building-type-count house > 0)
=>
	(up-delete-objects c: house c: 32767)
)
#end-if

; ============== VERSION

(defrule
	(or	(taunt-detected any-computer 250)
		(taunt-detected any-human 250))
=>
	(chat-to-player this-any-computer "Barbarian 2.18")
	(chat-to-player this-any-human "Barbarian 2.18")
	(acknowledge-taunt this-any-computer 250)
	(acknowledge-taunt this-any-human 250)
)

; =============== RANDOM CHAT

(defrule
	(up-timer-status 15 == timer-running)
=>
	(up-jump-rule 2)
)

(defrule
	(true)
=>
	(up-store-player-chat target-player)
)

(defconst text-gg "gg")
(defconst text-gg2 "gg?")

(defrule
	(stance-toward target-player enemy)
	(up-compare-text c: text-gg == 0)
	(up-compare-text c: text-gg2 < 0)
=>
	(chat-to-player every-enemy "gg")
	(disable-self)
)

; ============== RANDOM TAUNTS

#load-if-defined UP-ALLY-IN-GAME
(defrule
	(not	(taunt-detected any-ally 42))
=>
	(up-jump-rule 7)
)

(defrule
	(taunt-detected any-ally 42)
	(current-age == dark-age)
	(goal gl-current-age gv-dark)
=>
	(chat-to-allies-using-id 22165)
	(acknowledge-taunt every-ally 42)
)

(defrule
	(taunt-detected any-ally 42)
	(current-age == dark-age)
	(goal gl-current-age gv-dark-up)
=>
	(chat-to-allies-using-id 22165)
	(chat-to-allies "I'm already advancing to the Feudal Age.")
	(acknowledge-taunt every-ally 42)
)

(defrule
	(taunt-detected any-ally 42)
	(current-age == feudal-age)
	(up-compare-goal gl-current-age <= gv-feudal)
=>
	(chat-to-allies-using-id 22166)
	(acknowledge-taunt every-ally 42)
)

(defrule
	(taunt-detected any-ally 42)
	(current-age == feudal-age)
	(goal gl-current-age gv-feudal-up)
=>
	(chat-to-allies-using-id 22166)
	(chat-to-allies "I'm advancing to the Castle Age.")
	(acknowledge-taunt every-ally 42)
)

(defrule
	(taunt-detected any-ally 42)
	(current-age == castle-age)
	(up-compare-goal gl-current-age <= gv-castle)
=>
	(chat-to-allies-using-id 22167)
	(acknowledge-taunt every-ally 42)
)

(defrule
	(taunt-detected any-ally 42)
	(current-age == castle-age)
	(goal gl-current-age gv-castle-up)
=>
	(chat-to-allies-using-id 22167)
	(chat-to-allies "I'm advancing to the Imperial Age.")
	(acknowledge-taunt every-ally 42)
)

(defrule
	(taunt-detected any-ally 42)
	(current-age == imperial-age)
=>
	(chat-to-allies-using-id 22168)
	(acknowledge-taunt every-ally 42)
)
#end-if

; ======== CALLING CAMP FUNCTION

(defrule
	(game-time > 1800)
=>
	(up-jump-rule 3)
)

(defrule
	(goal gl-current-age gv-dark)
	(building-type-count town-center > 0)
;	(game-time g:>= gl-lumber-camp-time)
;	(goal gl-next-villager-target wood)
	(up-pending-placement c: lumber-camp)
	(building-type-count-total lumber-camp == 0)
=>
	(set-goal gl-point4-x 60)
	(set-goal gl-point4-y lumber-camp)
	(set-goal gl-point5-x 1)
	(set-goal gl-point5-y tree)
	(set-goal temporary-goal12 0)
	(up-get-rule-id temporary-goal11)
	(up-modify-goal temporary-goal11 c:+ 1)
	(up-jump-direct g: gl-camp-function)
	(disable-self)
)

(defrule
	(goal gl-current-age gv-dark)
	(building-type-count town-center > 0)
	(strategic-number sn-preferred-mill-placement == 0)
	(up-gaia-type-count c: forage-class > 1)
	(up-pending-placement c: mill)
	(building-type-count-total mill == 0)
=>
	(set-goal gl-point4-x 60)
	(set-goal gl-point4-y mill)
	(set-goal gl-point5-x 3)
	(set-goal gl-point5-y forage-class)
	(set-goal temporary-goal12 0)
	(up-get-rule-id temporary-goal11)
	(up-modify-goal temporary-goal11 c:+ 1)
	(up-jump-direct g: gl-camp-function)
	(disable-self)
)

(defrule
	(up-compare-goal gl-strategy != trush)
	(building-type-count town-center > 0)
	(up-gaia-type-count c: gold > 1)
	(up-pending-placement c: mining-camp)
	(building-type-count-total mining-camp == 0)
=>
	(set-goal gl-point4-x 60)
	(set-goal gl-point4-y mining-camp)
	(set-goal gl-point5-x 4)
	(set-goal gl-point5-y gold-mine)
	(set-goal temporary-goal12 0)
	(up-get-rule-id temporary-goal11)
	(up-modify-goal temporary-goal11 c:+ 1)
	(up-jump-direct g: gl-camp-function)
	(disable-self)
)

; ======== CAMP FUNCTION

(defrule
	(up-compare-goal gl-camp-function > 0)
=>
	(up-jump-rule 37)
)

(defrule
	(true)
=>
	(up-get-rule-id gl-camp-function)
	(up-jump-rule 36)
	(disable-self)
)

(defrule
	(true)
=>
	(set-goal gl-local-last 0)
	(set-goal temporary-goal10 0)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-copy-point gl-point2-x gl-position-self-x)
	(set-goal gl-saved-point-x 0)
	(set-goal gl-saved-point-y 1)
	(set-goal temporary-goal2 5)
	(set-goal temporary-goal3 1)
	(set-goal temporary-goal4 2)
	(up-modify-goal temporary-goal g:= temporary-goal4)
	(up-modify-goal temporary-goal c:* 2)
	(up-modify-goal temporary-goal c:+ 3)
	(up-modify-goal gl-point3-x g:= temporary-goal)
)

(defrule
	(true)
=>
	(up-modify-goal gl-point-x c:+ 1)
	(up-modify-goal gl-point-y c:- 2)
	(up-modify-goal gl-point-x g:+ temporary-goal4)
	(up-modify-goal gl-point-y g:- temporary-goal4)
	(up-modify-goal gl-point-x g:+ temporary-goal2)
	(up-modify-goal gl-point2-x c:+ 1)
	(up-modify-goal gl-point2-y c:+ 1)
	(up-modify-goal gl-point2-y g:+ temporary-goal2)
	(up-modify-goal gl-point2-x g:+ temporary-goal4)
	(up-modify-goal gl-point2-y g:+ temporary-goal4)
)

(defrule
	(up-compare-goal temporary-goal2 > 19)
=>
	(up-jump-rule 31)
)

(defrule
	(not	(up-can-build-line 0 gl-point-x g: gl-point4-y))
=>
	(up-modify-goal temporary-goal5 c:- 1)
	(up-jump-rule 22)
)

(defrule
	(true)
=>
	(up-copy-point gl-temporary-point-x gl-point-x)
	(set-goal temporary-goal7 1)
	(set-goal temporary-goal8 3)
	(set-goal temporary-goal9 0)
	(up-modify-goal gl-temporary-point-x g:+ temporary-goal7)
	(up-modify-goal gl-temporary-point-y g:+ temporary-goal7)
	(up-modify-goal gl-temporary-point-x g:+ temporary-goal12)
	(up-modify-goal gl-temporary-point-y g:+ temporary-goal12)
	(set-goal gl-object-point-x -1)
	(set-goal gl-object-point-y 0)
	(set-goal gl-local-total 0)
	(set-goal gl-point3-y 0)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal8 g:+ temporary-goal12)
	(up-modify-goal temporary-goal8 g:+ temporary-goal12)
	(up-modify-goal temporary-goal6 g:= temporary-goal8)
)

(defrule
	(goal gl-point5-x 1)
=>
	(set-goal gl-point3-y 9)
	(up-modify-goal gl-point3-y g:- temporary-goal2)
	(up-modify-goal gl-point3-y c:min 0)
)

(defrule
	(up-compare-goal gl-point5-x <= 2)
	(up-compare-goal temporary-goal7 < 3)
	(or	(up-can-build-line gl-temporary-point-x gl-temporary-point-x c: palisade-wall)
		(up-point-contains gl-temporary-point-x g: gl-point5-y))
	(or	(up-compare-goal gl-local-total > 29)
		(and	(goal temporary-goal7 1)
			(and	(up-compare-goal gl-local-total < 3)
				(and	(goal gl-object-point-y 1)
					(goal temporary-goal6 0)))))
=>
	(up-jump-rule 18)
)

(defrule
	(goal temporary-goal7 1)
	(nor	(up-can-build-line gl-temporary-point-x gl-temporary-point-x c: palisade-wall)
		(up-point-contains gl-temporary-point-x g: gl-point5-y))
=>
	(up-jump-rule 17)
)

(defrule
	(or	(goal gl-point5-x 1)
		(goal gl-point5-x 2))
	(goal temporary-goal7 1)
	(nand	(goal gl-object-point-y 1)
		(goal temporary-goal6 0)); Starting point again
	(up-point-explored gl-temporary-point-x != explored-no)
	(up-point-contains gl-temporary-point-x g: gl-point5-y)
=>
	(up-modify-goal temporary-goal9 c:+ 1)
)

(defrule
	(or	(goal gl-point5-x 1)
		(or	(and	(goal gl-point5-x 3)
				(goal temporary-goal7 1))
			(goal gl-point5-x 2)))
	(nand	(goal gl-object-point-y 1)
		(goal temporary-goal6 0)); Starting point again
	(up-point-explored gl-temporary-point-x != explored-no)
	(up-point-contains gl-temporary-point-x g: gl-point5-y)
=>
	(up-modify-goal gl-local-total c:+ 1)
	(up-modify-goal gl-point3-y c:+ 1)
)

(defrule
	(goal gl-point5-x 3)
	(goal temporary-goal7 2)
	(nand	(goal gl-object-point-y 1)
		(goal temporary-goal6 0)); Starting point again
	(up-point-explored gl-temporary-point-x != explored-no)
	(up-point-contains gl-temporary-point-x g: gl-point5-y)
=>
	(up-modify-goal temporary-goal9 c:+ 1)
	(up-modify-goal gl-point7-x g:= temporary-goal6)
	(up-modify-goal gl-point7-x c:min 1)
	(up-modify-goal temporary-goal9 g:+ gl-point7-x)
)

(defrule
	(up-compare-goal gl-point5-x != 4)
=>
	(up-jump-rule 7)
)

(defrule
	(goal temporary-goal7 1)
	(nand	(goal gl-object-point-y 1)
		(goal temporary-goal6 0)); Starting point again
	(up-point-explored gl-temporary-point-x != explored-no)
	(up-point-contains gl-temporary-point-x g: gl-point5-y)
=>
	(set-goal gl-local-total 2)
	(set-goal gl-point3-y 2)
)

(defrule
	(goal temporary-goal7 1)
	(goal temporary-goal6 0)
=>
	(up-copy-point gl-point6-x gl-temporary-point-x)
	(up-copy-point gl-point7-x gl-temporary-point-x)
	(up-add-point gl-point6-x gl-object-point-x c: 1)
	(up-cross-tiles gl-point7-x gl-point6-x c: 1)
	(set-goal temporary-goal10 64343)
)

(defrule
	(goal temporary-goal7 1)
	(goal temporary-goal6 0)
	(up-point-contains gl-point6-x g: gl-point5-y)
	(up-can-build-line gl-temporary-point-x gl-temporary-point-x c: palisade-wall)
	(up-can-build-line gl-point7-x gl-point7-x c: palisade-wall)
=>
	(up-modify-goal temporary-goal9 c:+ 1)
)

(defrule
	(goal temporary-goal7 1)
	(goal temporary-goal6 0)
	(goal temporary-goal10 64343)
=>
	(up-copy-point gl-point6-x gl-temporary-point-x)
	(up-copy-point gl-point7-x gl-temporary-point-x)
	(up-add-point gl-point7-x gl-object-point-x c: -1)
	(up-cross-tiles gl-point6-x gl-point7-x c: 1)
	(set-goal temporary-goal10 0)
	(up-jump-rule -2)
)

(defrule
	(goal temporary-goal7 2)
=>
	(up-copy-point gl-point6-x gl-temporary-point-x)
	(up-add-point gl-point6-x gl-point-x c: -1)
	(up-modify-goal temporary-goal10 g:= gl-point6-x)
	(up-modify-goal temporary-goal10 g:* gl-point6-x)
	(up-modify-goal temporary-goal10 g:+ gl-point6-x)
	(up-modify-goal gl-point6-x g:= gl-point6-y)
	(up-modify-goal gl-point6-x g:* gl-point6-y)
	(up-modify-goal gl-point6-x g:+ gl-point6-y)
)

(defrule
	(goal temporary-goal7 2)
	(nand	(goal gl-object-point-y 1)
		(goal temporary-goal6 0)); Starting point again
	(or	(goal temporary-goal10 0)
		(goal gl-point6-x 0))
	(up-point-explored gl-temporary-point-x != explored-no)
	(up-point-contains gl-temporary-point-x g: gl-point5-y)
=>
	(up-copy-point gl-point7-x gl-temporary-point-x)
	(up-lerp-tiles gl-point7-x gl-point-x c: 1)
)

(defrule
	(goal temporary-goal7 2)
	(nand	(goal gl-object-point-y 1)
		(goal temporary-goal6 0)); Starting point again
	(or	(goal temporary-goal10 0)
		(goal gl-point6-x 0))
	(up-point-explored gl-temporary-point-x != explored-no)
	(up-point-contains gl-temporary-point-x g: gl-point5-y)
	(up-can-build-line gl-point7-x gl-point7-x c: palisade-wall)
=>
	(up-modify-goal temporary-goal9 c:+ 1)
)

(defrule
	(up-compare-goal temporary-goal6 > 0)
=>
	(up-modify-goal temporary-goal6 c:- 1)
	(up-add-point gl-temporary-point-x gl-object-point-x c: 1)
	(up-jump-rule -14)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal6 g:= temporary-goal8)
	(up-modify-goal temporary-goal5 g:= gl-object-point-y)
	(up-modify-goal gl-object-point-y g:= gl-object-point-x)
	(up-modify-goal gl-object-point-x g:= temporary-goal5)
	(up-modify-goal gl-object-point-x c:* -1)
)

(defrule
	(up-compare-goal gl-object-point-x != -1)
=>
	(up-jump-rule -3)
)

(defrule
	(or	(up-compare-goal temporary-goal7 < 2)
		(up-compare-goal gl-point5-x <= 2))
	(up-compare-goal temporary-goal7 < 3)
=>
	(up-modify-goal temporary-goal7 c:+ 1)
	(up-modify-goal gl-temporary-point-x c:+ 1)
	(up-modify-goal gl-temporary-point-y c:+ 1)
	(up-modify-goal temporary-goal8 c:+ 2)
	(up-modify-goal temporary-goal6 g:= temporary-goal8)
	(up-jump-rule -4)
)

(defrule
	(goal gl-point5-x 4)
=>
	(up-modify-goal gl-point3-y g:+ temporary-goal9)
	(set-goal temporary-goal9 0)
)

(defrule
	(up-compare-goal gl-point3-y g:>= gl-local-last)
	(up-compare-goal temporary-goal9 < 11); No excess blocking
	(or	(up-compare-goal gl-point3-y g:> gl-local-last)
		(up-compare-goal temporary-goal9 g:> temporary-goal10))
=>
	(up-copy-point gl-remote-total gl-point-x)
	(up-modify-goal gl-local-last g:= gl-point3-y)
	(up-modify-goal temporary-goal10 g:= temporary-goal9)
;	(up-chat-data-to-all "record: %d" g: gl-local-last)
;	(up-chat-data-to-all "max adj: %d" g: temporary-goal9)
)

;

(defrule
	(up-compare-goal temporary-goal > 0)
=>
	(up-modify-goal temporary-goal c:- 1)
	(up-add-point gl-point-x gl-saved-point-x c: 1)
	(up-jump-rule -25)
)

(defrule
;	(goal temporary-goal 0)
	(up-point-distance gl-point-x gl-point2-x > 0)
=>
	(up-lerp-tiles gl-point-x gl-point2-x c: 1)
	(up-jump-rule -26)
)

(defrule
;	(goal temporary-goal 0)
	(goal temporary-goal3 1)
=>
	(set-goal temporary-goal3 2)
	(up-modify-goal temporary-goal g:= gl-point3-x)
	(set-goal gl-saved-point-x -1)
	(set-goal gl-saved-point-y 0)
	(up-copy-point gl-point2-x gl-position-self-x)
	(up-modify-goal gl-point2-x c:- 2)
	(up-modify-goal gl-point2-y c:+ 1)
	(up-modify-goal gl-point2-x g:- temporary-goal4)
	(up-modify-goal gl-point2-y g:+ temporary-goal4)
	(up-modify-goal gl-point2-x g:- temporary-goal2)
	(up-jump-rule -27)
)

(defrule
;	(goal temporary-goal 0)
	(goal temporary-goal3 2)
=>
	(set-goal temporary-goal3 3)
	(up-modify-goal temporary-goal g:= gl-point3-x)
	(set-goal gl-saved-point-x 0)
	(set-goal gl-saved-point-y -1)
	(up-copy-point gl-point2-x gl-position-self-x)
	(up-modify-goal gl-point2-x c:- 2)
	(up-modify-goal gl-point2-y c:- 2)
	(up-modify-goal gl-point2-x g:- temporary-goal4)
	(up-modify-goal gl-point2-y g:- temporary-goal4)
	(up-modify-goal gl-point2-y g:- temporary-goal2)
	(up-jump-rule -28)
)

(defrule
;	(goal temporary-goal 0)
	(goal temporary-goal3 3)
=>
	(set-goal temporary-goal3 4)
	(up-modify-goal temporary-goal g:= gl-point3-x)
	(set-goal gl-saved-point-x 1)
	(set-goal gl-saved-point-y 0)
	(up-copy-point gl-point2-x gl-position-self-x)
	(up-modify-goal gl-point2-x c:+ 1)
	(up-modify-goal gl-point2-y c:- 2)
	(up-modify-goal gl-point2-x g:+ temporary-goal4)
	(up-modify-goal gl-point2-y g:- temporary-goal4)
	(up-modify-goal gl-point2-x g:+ temporary-goal2)
	(up-jump-rule -29)
)

(defrule
;	(goal temporary-goal 0)
	(goal gl-point5-x 1)
	(up-compare-goal temporary-goal2 > 8)
	(up-compare-goal gl-local-last > 20)
	(or	(up-compare-goal temporary-goal2 > 10)
		(up-compare-goal gl-local-last > 28))
;	(or	(up-compare-goal temporary-goal2 > 13)
;		(up-compare-goal gl-local-last > 25))
	(goal gl-point4-x 60)
=>
	(up-modify-goal gl-point4-x g:= temporary-goal2)
	(up-modify-goal gl-point4-x c:+ 2)
)

(defrule
	(up-compare-goal temporary-goal2 g:> gl-point4-x)
=>
	(up-jump-rule 1)
)

(defrule
;	(goal temporary-goal 0)
	(goal temporary-goal3 4)
=>
	(set-goal temporary-goal3 1)
	(up-modify-goal temporary-goal g:= gl-point3-x)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-modify-goal gl-point-x c:+ 1)
	(set-goal gl-saved-point-x 0)
	(set-goal gl-saved-point-y 1)
	(up-copy-point gl-point2-x gl-position-self-x)
	(up-modify-goal gl-point2-x c:+ 1)
	(up-modify-goal gl-point2-y c:+ 1)
	(up-modify-goal gl-point2-x g:+ temporary-goal4)
	(up-modify-goal gl-point2-y g:+ temporary-goal4)
	(up-modify-goal gl-point2-y g:+ temporary-goal2)
	(up-jump-rule -32)
)

(defrule
	(up-compare-goal gl-local-last > 0)
=>
	(up-reset-placement g: gl-point4-y)
	(up-build-line gl-remote-total gl-remote-total g: gl-point4-y)
;	(up-chat-data-to-all "x: %d" g: gl-remote-total)
;	(up-chat-data-to-all "y: %d" g: gl-remote-last)
;	(up-chat-data-to-all "Method: %d" g: gl-point5-x)
)

(defrule
	(true)
=>
	(up-jump-direct g: temporary-goal11)
)

; ======== FIGHTING VS LAMERS

(defrule
	(or	(game-time > 2000)
		(or	(up-research-status c: ri-loom <= research-pending)
			(or	(goal gl-nothing-style-map YES)
				(or	(death-match-game)
					(game-time == 0)))))
=>
	(up-jump-rule 30)
)

(defrule
	(goal gl-current-age gv-feudal)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(building-type-count mining-camp > 0)
	(up-compare-goal gl-rush-suitability-on-map >= LOW)
	(or	(players-building-type-count target-player watch-tower > 0)
		(and	(up-compare-goal gl-strategy-type <= controlled-flush)
			(goal gl-rush-suitability-on-map GOOD)))
	(up-compare-goal gl-target-player-distance <= 33)
	(can-build watch-tower)
=>
	(set-goal gl-tower-up 1)
	(up-assign-builders c: watch-tower c: 3)
	(disable-self)
)

(defrule
	(true)
=>
	(up-set-target-point gl-position-self-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 43)
	(set-goal gl-anti-trush NO)
)

(defrule
	(game-time g:>= gl-anti-trush-time)
	(up-compare-goal gl-enemy-tower-distance > 28)
=>
	(set-goal gl-anti-trush-time -1)
)

(defrule
	(game-time g:< gl-anti-trush-time)
=>
	(up-jump-rule 17)
)

(defrule
	(game-time g:>= gl-anti-trush-time)
	(civilian-population < 50)
	(soldier-count < 8)
	(unit-type-count battering-ram-line < 1)
	(unit-type-count trebuchet-set < 1)
	(up-compare-goal gl-enemy-tower-distance < 16); There isn't much to lose anymore anyway
	(up-compare-goal gl-enemy-castle-distance > 27)
=>
;	(set-strategic-number sn-allow-civilian-offense 2)
;	(set-strategic-number sn-allow-civilian-defense 3)
;	(set-strategic-number sn-number-civilian-militia 12)
;	(up-modify-sn sn-maximum-town-size g:= gl-enemy-tower-distance)
;	(up-modify-sn sn-maximum-town-size c:+ 6)
;	(set-goal gl-anti-trush YES)
;	(up-jump-rule 23)
	(do-nothing); Actually too suicidal, though it's probably over at that point anyway
)

(defrule
	(or	(up-find-remote c: town-center c: 1)
		(or	(up-find-remote c: castle c: 1)
			(or	(unit-type-count battering-ram-line > 0)
				(or	(unit-type-count trebuchet-set > 0)
					(or	(unit-type-count mangonel-line > 0); Better not shoot own villagers
						(goal gl-strategy eagle-rush))))))
=>
	(up-jump-rule 23)
)

(defrule
	(true)
=>
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 28)
	(set-goal temporary-goal2 1)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal5 16)
	(up-find-remote c: watch-tower c: 1)
)

(defrule
	(up-set-target-object search-remote c: 0)
=>
	(set-goal temporary-goal3 1)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: 1 c: 11)
	(up-find-remote c: watch-tower c: 1)
	(up-find-remote c: monastery-class c: 1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-remote c: -1 c: 1)
	(up-filter-distance c: 1 c: 4)
	(up-find-remote c: building-class c: 1)
	(up-find-remote c: wall-class c: 1)
	(up-filter-include -1 -1 -1 -1)
	(up-get-search-state gl-local-total)
)

(defrule
	(goal temporary-goal3 1)
	(goal gl-remote-total 0)
=>
	(set-goal temporary-goal3 2)
	(set-goal temporary-goal8 0)
	(up-lerp-tiles gl-saved-point-x gl-position-self-x c: 11)
	(up-set-target-point gl-saved-point-x)
	(up-filter-distance c: 1 c: 10)
	(up-find-remote c: watch-tower c: 1)
	(up-find-remote c: monastery-class c: 1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-remote c: -1 c: 1)
	(up-filter-include -1 -1 -1 -1)
	(up-get-search-state gl-local-total)
)

(defrule
	(nand	(up-set-target-object search-remote c: 0)
		(or	(up-object-data object-data-type == tower-class)
			(or	(up-object-data object-data-type == wall-class)
				(up-object-data object-data-type == building-class))))
	(not	(up-set-target-object search-remote c: 1))
	(soldier-count > 10)
	(up-compare-goal gl-soldier-percentage > 200)
	(or	(up-compare-goal gl-enemy-tower-count < 3)
		(soldier-count > 15))
=>
	(set-goal gl-remote-total 0)
	(set-goal gl-point2-x 0)
)

(defrule
	(true)
=>
	(up-copy-point gl-temporary-point-x gl-point-x)
	(up-modify-goal gl-temporary-point-x c:- 2)
	(up-modify-goal gl-temporary-point-y c:- 2)
	(set-goal temporary-goal7 4)
	(set-goal temporary-goal8 4)
)

(defrule
	(true)
=>
	(up-copy-point gl-object-point-x gl-temporary-point-x)
	(up-add-point gl-object-point-x gl-point-x c: -1)
	(up-modify-goal gl-object-point-x g:* gl-object-point-x)
	(up-modify-goal gl-object-point-y g:* gl-object-point-y)
	(up-modify-goal gl-object-point-x g:+ gl-object-point-y)
)

(defrule
	(goal temporary-goal3 2)
	(goal gl-point2-x 0)
	(up-compare-goal gl-object-point-x < 8)
	(or	(up-point-contains gl-temporary-point-x c: wall-class)
		(up-point-contains gl-temporary-point-x c: building-class))
=>
	(set-goal gl-remote-total 1)
	(up-jump-rule 5)
)

(defrule
	(goal temporary-goal3 2)
	(goal gl-point2-x 0)
	(up-compare-goal gl-object-point-x < 8)
	(or	(up-point-contains gl-temporary-point-x c: scout-cavalry-class)
		(or	(up-point-contains gl-temporary-point-x c: infantry-class)
			(or	(up-point-contains gl-temporary-point-x c: archery-class)
				(or	(up-point-contains gl-temporary-point-x c: archery-cannon-class)
					(up-point-contains gl-temporary-point-x c: cavalry-class)))))
=>
	(set-goal gl-remote-total 1)
	(up-jump-rule 4)
)

(defrule
	(goal temporary-goal3 2)
	(goal gl-point2-x 0)
	(up-compare-goal gl-object-point-x < 8)
	(or	(up-point-contains gl-temporary-point-x c: cavalry-archer-class)
		(or	(up-point-contains gl-temporary-point-x c: cavalry-cannon-class)
			(or	(up-point-contains gl-temporary-point-x c: siege-weapon-class)
				(or	(up-point-contains gl-temporary-point-x c: monastery-class)
					(up-point-contains gl-temporary-point-x c: cavalry-archer-class)))))
=>
	(set-goal gl-remote-total 1)
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal temporary-goal7 > 0)
=>
	(up-modify-goal temporary-goal7 c:- 1)
	(up-modify-goal gl-temporary-point-x c:+ 1)
	(up-jump-rule -5)
)

(defrule
	(up-compare-goal temporary-goal8 > 0)
=>
	(set-goal temporary-goal7 4)
	(up-modify-goal temporary-goal8 c:- 1)
	(up-modify-goal gl-temporary-point-x c:- 4)
	(up-modify-goal gl-temporary-point-y c:+ 1)
	(up-jump-rule -6)
)

(defrule
	(goal temporary-goal3 2)
	(goal gl-remote-total 0)
=>
	(set-goal temporary-goal3 3)
	(up-set-target-point gl-point-x)
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 0)
	(up-find-remote c: watch-tower c: 1)
	(up-filter-distance c: -1 g: temporary-goal5)
	(up-find-local c: villager-class c: 7)
	(up-get-search-state gl-local-total)
	(up-target-objects 0 action-default -1 -1)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal6)
	(up-modify-sn sn-maximum-town-size g:= temporary-goal6)
	(up-modify-sn sn-maximum-town-size c:+ 1)
	(set-goal gl-anti-trush YES)
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal temporary-goal3 > 0)
=>
	(set-goal temporary-goal3 0)
	(up-reset-search 1 1 1 1)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 28)
	(up-find-remote c: watch-tower g: temporary-goal2)
	(up-reset-search 0 0 0 1)
	(up-find-remote c: watch-tower c: 1)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-jump-rule -11)
)

(defrule
	(goal temporary-goal3 3)
	(goal temporary-goal5 16)
	(up-compare-goal gl-local-total < 2)
=>
	(set-goal temporary-goal3 2)
	(set-goal temporary-goal5 26)
	(up-jump-rule -3)
)

(defrule
	(goal temporary-goal3 3)
=>
	(set-strategic-number sn-allow-civilian-offense 2)
	(set-strategic-number sn-allow-civilian-defense 3)
	(set-strategic-number sn-number-civilian-militia 7)
	(up-jump-rule 8)
)

(defrule
	(true)
=>
	(up-set-target-point gl-position-self-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 28)
	(set-goal temporary-goal2 1)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal5 16)
)

(defrule
	(up-find-remote c: villager-class c: 1)
	(up-set-target-object search-remote c: 0)
=>
	(set-goal temporary-goal3 1)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 11)
	(up-find-remote c: watch-tower c: 1)
	(up-find-remote c: monastery-class c: 1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-remote c: -1 c: 1)
	(up-filter-include -1 -1 -1 -1)
	(up-get-search-state gl-local-total)
)

(defrule
	(goal temporary-goal3 1)
	(goal gl-remote-total 0)
=>
	(set-goal temporary-goal3 2)
	(up-lerp-tiles gl-saved-point-x gl-position-self-x c: 8)
	(up-set-target-point gl-saved-point-x)
	(up-filter-distance c: -1 c: 11)
	(up-find-remote c: watch-tower c: 1)
	(up-find-remote c: watch-tower c: 1)
	(up-find-remote c: monastery-class c: 1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-remote c: -1 c: 1)
	(up-filter-include -1 -1 -1 -1)
)

(defrule
	(goal temporary-goal3 2)
	(goal gl-remote-total 0)
=>
	(set-goal temporary-goal3 3)
	(up-set-target-point gl-point-x)
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 4)
	(up-find-remote c: villager-class c: 6)
)

(defrule
	(goal temporary-goal3 2)
	(goal gl-remote-total 0)
=>
	(up-get-search-state gl-local-total)
	(up-modify-goal gl-remote-total c:* 5)
	(up-modify-goal gl-remote-total c:/ 3)
	(up-modify-goal gl-remote-total c:min 4)
	(up-filter-distance c: -1 g: temporary-goal5)
	(up-find-local c: villager-class g: gl-remote-total)
	(up-get-search-state gl-local-total)
	(up-target-objects 0 action-default -1 -1)
	(set-goal gl-anti-trush YES)
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal temporary-goal3 > 0)
=>
	(set-goal temporary-goal3 0)
	(up-reset-search 1 1 1 1)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 28)
	(up-find-remote c: villager-class g: temporary-goal2)
	(up-reset-search 0 0 0 1)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-jump-rule -4)
)

(defrule
	(goal temporary-goal3 3)
	(goal temporary-goal5 16)
	(up-compare-goal gl-local-total < 2)
=>
	(set-goal temporary-goal3 2)
	(set-goal temporary-goal5 26)
	(up-jump-rule -4)
)

(defrule
	(goal temporary-goal3 3)
=>
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal6)
	(up-modify-sn sn-maximum-town-size g:= temporary-goal6)
	(up-modify-sn sn-maximum-town-size c:+ 4)
)

(defrule
	(up-compare-goal gl-enemy-tower-distance >= 0)
	(up-compare-goal gl-enemy-tower-distance <= 28)
	(up-compare-goal gl-anti-trush != YES)
	(goal gl-anti-trush-time -1)
=>
	(set-strategic-number sn-allow-civilian-offense 0)
	(set-strategic-number sn-allow-civilian-defense 1)
	(set-strategic-number sn-number-civilian-militia 0)
	(up-get-fact game-time 0 gl-anti-trush-time)
	(chat-to-player my-player-number "No anti-trush for 90s.")
)

; ======== SOME THREAT LEVEL FOR MESOS

(defrule
	(up-compare-goal gl-strategy != eew-strategy)
=>
	(up-jump-rule 6)
)

(defrule
	(goal gl-eagles heavy-eagles)
	(research-completed ri-plate-mail)
	(or	(and	(players-current-age focus-player <= castle-age)
			(strategic-number sn-upgrade-eagles == 0))
		(and	(up-research-status c: ri-blast-furnace >= research-pending)
			(up-research-status c: my-unique-unit-upgrade >= research-pending)))
	(current-age == imperial-age)
=>
	(up-modify-sn sn-threat-level c:min -3)
)

(defrule
	(goal gl-eagles heavy-eagles)
	(research-completed ri-plate-mail)
	(players-current-age focus-player <= castle-age)
	(current-age == imperial-age)
=>
	(up-modify-sn sn-threat-level c:min -4)
)

(defrule
	(goal gl-eagles heavy-eagles)
	(research-completed ri-plate-mail)
	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(up-research-status c: ri-blast-furnace >= research-pending)
	(players-current-age focus-player <= castle-age)
	(current-age == imperial-age)
=>
	(up-modify-sn sn-threat-level c:min -5)
)

(defrule
	(or	(and	(goal gl-eagles heavy-eagles)
			(and	(strategic-number sn-upgrade-eagles == 0)
				(current-age == imperial-age)))
		(and	(players-current-age focus-player <= feudal-age)
			(research-completed ri-chain-mail)))
=>
	(up-modify-sn sn-threat-level c:min -2)
)

(defrule
	(not	(goal gl-eagles heavy-eagles))
	(players-current-age focus-player >= castle-age)
=>
	(up-modify-sn sn-threat-level c:max 0)
)

(defrule
	(goal gl-eagles heavy-eagles)
	(up-research-status c: ri-plate-mail < research-pending)
	(strategic-number sn-upgrade-eagles == 0)
	(players-unit-type-count focus-player hand-cannoneer > 4)
	(players-current-age focus-player == imperial-age)
	(current-age == imperial-age)
=>
	(up-modify-sn sn-threat-level c:max -2)
)

; ========= SUPERIORITY DETECTION

(defrule
	(up-timer-status 7 != timer-triggered)
=>
	(up-jump-rule 16)
)

(defrule
	(true)
=>
	(up-get-fact military-population 0 temporary-goal8)
	(up-get-focus-fact military-population 0 gl-target-soldier-count)
)

(defrule
	(goal TSA 1)
	(soldier-count > 7)
=>
	(up-modify-goal temporary-goal8 c:+ 3)
)

(defrule
	(strategic-number sn-threat-level == -6)
=>
	(up-modify-goal gl-target-soldier-count c:/ 4)
)

(defrule
	(strategic-number sn-threat-level == -5)
=>
	(up-modify-goal gl-target-soldier-count c:* 4)
	(up-modify-goal gl-target-soldier-count c:/ 11)
)

(defrule
	(strategic-number sn-threat-level == -4)
=>
	(up-modify-goal gl-target-soldier-count c:* 5)
	(up-modify-goal gl-target-soldier-count c:/ 9)
)

(defrule
	(strategic-number sn-threat-level == -3)
=>
	(up-modify-goal gl-target-soldier-count c:* 13)
	(up-modify-goal gl-target-soldier-count c:/ 17)
	(up-modify-goal temporary-goal g:= temporary-goal8)
	(up-modify-goal temporary-goal c:- 30)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal c:* 5)
	(up-modify-goal temporary-goal c:/ 4)
	(up-modify-goal temporary-goal8 g:+ temporary-goal)
)

(defrule
	(strategic-number sn-threat-level == -1)
=>
	(up-modify-goal gl-target-soldier-count c:* 9)
	(up-modify-goal gl-target-soldier-count c:/ 8)
)

(defrule
	(strategic-number sn-threat-level == -1)
	(players-military-population focus-player > 1)
	(military-population < 40)
=>
	(up-modify-goal temporary-goal8 c:- 3)
)

(defrule
	(strategic-number sn-threat-level == 0)
=>
	(up-modify-goal gl-target-soldier-count c:* 12)
	(up-modify-goal gl-target-soldier-count c:/ 9)
)

(defrule
	(strategic-number sn-threat-level <= 0)
	(death-match-game)
	(game-time < 600)
	(or	(players-military-population focus-player > 1)
		(and	(civ-selected gothic)
			(players-civ focus-player gothic)))
=>
	(up-modify-goal gl-target-soldier-count c:+ 4)
	(up-jump-rule 1)
)

(defrule
	(or	(and	(strategic-number sn-threat-level == 0)
			(players-military-population focus-player > 1))
		(or	(strategic-number sn-threat-level == 1)
			(and	(civ-selected gothic)
				(and	(players-civ focus-player gothic)
					(and	(goal TSA 0)
						(game-time < 180))))))
=>
	(up-modify-goal gl-target-soldier-count c:+ 2)
)

(defrule
	(or	(strategic-number sn-threat-level == 1)
		(and	(death-match-game)
			(and	(game-time < 600)
				(and	(unit-type-count battering-ram-line < 3)
					(and	(up-projectile-detected projectile-castle < 2000000); The enemy castle is actually built
						(and	(strategic-number sn-threat-level < 1)
							(population < pop-to-full-pop-attack)))))))
=>
	(up-modify-goal gl-target-soldier-count c:* 2)
)

(defrule
	(or	(and	(strategic-number sn-threat-level == 1)
			(players-military-population focus-player > 3))
		(and	(strategic-number sn-threat-level <= 0)
			(and	(military-population < 30)
				(goal TSA 0))))
	(players-military-population focus-player > 1)
=>
	(up-modify-goal gl-target-soldier-count c:+ 3)
)

(defrule
	(game-time < 240)
	(death-match-game)
	(goal TSA 0)
	(or	(game-time < 90)
		(players-military-population focus-player > 3))
	(or	(players-military-population focus-player > 1)
		(and	(civ-selected gothic)
			(players-civ focus-player gothic)))
=>
	(up-modify-goal gl-target-soldier-count c:+ 3)
)

(defrule
	(strategic-number sn-threat-level == 2)
=>
	(up-modify-goal gl-target-soldier-count c:* 4)
)

(defrule
	(goal gl-early-raid direct-raid)
=>
	(up-modify-goal gl-target-soldier-count c:* 5)
	(up-modify-goal gl-target-soldier-count c:/ 4)
)

; water superiority

(defrule
	(goal DOCK 0)
	(or	(strategic-number sn-minimum-water-body-size-for-dock < mixed-map-style)
		(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion))
=>
	(up-jump-rule 29)
	(disable-timer 14)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(current-age >= feudal-age)
	(strategic-number sn-focus-player-number > 0)
=>
	(enable-timer 1 0)
	(enable-timer 7 0)
	(enable-timer 14 0)
	(disable-self)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(up-get-fact warboat-count 0 temporary-goal3)
	(up-get-target-fact unit-type-count galley-line gl-target-navy-count)
	(up-get-target-fact unit-type-count fire-ship-line gl-enemy-fire-ship-count)
	(up-modify-goal gl-target-navy-count g:+ gl-enemy-fire-ship-count)
	(up-get-target-fact unit-type-count turtle-ship-line temporary-goal)
	(up-modify-goal temporary-goal c:* 3)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count cannon-galleon-line temporary-goal)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count longboat-line temporary-goal)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
	(up-modify-sn sn-focus-player-number g:= threat-player)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
=>
	(up-get-target-fact unit-type-count caravel temporary-goal)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count elite-caravel temporary-goal)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count aofe-fire-ship temporary-goal)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-fire-ship-count g:+ temporary-goal)
)

(defrule
	(up-compare-const gv-aofe-game == 1)
	(stance-toward focus-player enemy)
	(strategic-number sn-target-player-number g:!= threat-player)
=>
	(up-get-focus-fact unit-type-count caravel temporary-goal)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count elite-caravel temporary-goal)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count aofe-fire-ship temporary-goal)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
	(up-modify-goal gl-enemy-fire-ship-count g:+ temporary-goal)
	(up-get-target-fact unit-type-count fire-ship-line temporary-goal)
	(up-modify-goal gl-enemy-fire-ship-count g:+ temporary-goal)
)

(defrule
	(stance-toward focus-player enemy)
	(strategic-number sn-target-player-number g:!= threat-player)
=>
	(up-get-focus-fact unit-type-count galley-line temporary-goal)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count fire-ship-line temporary-goal)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count turtle-ship-line temporary-goal)
	(up-modify-goal temporary-goal c:* 3)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count cannon-galleon-line temporary-goal)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
	(up-get-focus-fact unit-type-count longboat-line temporary-goal)
	(up-modify-goal gl-target-navy-count g:+ temporary-goal)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)

(defrule
	(or	(up-timer-status 14 != timer-triggered)
		(or	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
			(up-timer-status 7 == timer-running)))
=>
	(up-jump-rule 12)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
)

(defrule
	(player-valid focus-player)
	(stance-toward focus-player ally)
	(strategic-number sn-focus-player-number != my-player-number)
	(up-allied-sn focus-player sn-target-player-number s:== sn-target-player-number)
	(up-allied-goal focus-player 392 == 1)
	(nand	(up-compare-goal threat-time < 10000)
		(up-compare-goal gl-enemy-attacker s:!= sn-target-player-number))
	(strategic-number sn-target-player-number > 0)
	(warboat-count > 15)
	(military-population > 20)
=>
	(up-modify-goal temporary-goal3 c:+ 10)
)

(defrule
	(player-valid focus-player)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(goal gl-strategy grush)
	(research-completed ri-fletching)
	(warboat-count > 10)
=>
	(up-modify-goal temporary-goal3 c:+ 5)
)

(defrule
	(goal gl-strategy grush)
	(players-current-age-time focus-player > 35)
	(players-current-age focus-player >= castle-age)
	(strategic-number sn-focus-player-number > 0)
=>
	(up-modify-goal gl-target-navy-count c:* 3)
)

(defrule
	(or	(and	(goal gl-strategy grush)
			(and	(warboat-count < 5)
				(up-compare-goal gl-target-navy-count > 0)))
		(players-unit-type-count focus-player boarding-galley > 0))
=>
	(up-modify-goal gl-target-navy-count c:+ 2)
)

(defrule
	(up-projectile-detected projectile-watch-tower < 5000000)
	(up-compare-goal gl-enemy-tower-count > 0)
=>
	(up-modify-goal gl-target-navy-count c:+ 4)
	(up-modify-goal gl-target-soldier-count c:+ 4)
)

(defrule
	(up-projectile-detected projectile-watch-tower < 5000000)
	(up-compare-goal gl-enemy-tower-count > 2)
=>
	(up-modify-goal gl-target-navy-count c:+ 4)
	(up-modify-goal gl-target-soldier-count c:+ 4)
)

(defrule
	(up-projectile-detected projectile-castle < 5000000)
	(players-building-type-count target-player castle > 0)
	(unit-type-count cannon-galleon-line < 1)
	(or	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
		(and	(unit-type-count battering-ram-line < 3)
			(and	(unit-type-count trebuchet-set < 1)
				(up-projectile-target projectile-castle == warship-class))))
=>
	(up-modify-goal gl-target-navy-count c:+ 15)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(not	(goal MILITARY 1))
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(up-compare-goal temporary-goal3 g:> gl-target-navy-count)
=>
	(set-goal MILITARY 2)
	(enable-timer 14 15)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(not	(goal MILITARY 1))
	(strategic-number sn-hitting-pop-cap != YES)
	(up-compare-goal temporary-goal3 g:<= gl-target-navy-count)
=>
	(set-goal MILITARY 0)
	(enable-timer 14 15)
	(set-strategic-number sn-number-boat-attack-groups 0)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(goal TSA 0)
	(current-age != gv-maximum-age)
	(warboat-count < 30)
	(up-compare-goal gl-enemy-tower-count > 1)
	(up-projectile-target projectile-watch-tower == warship-class)
	(up-projectile-detected projectile-watch-tower < 5000)
	(strategic-number sn-hitting-pop-cap != YES)
=>
	(set-goal MILITARY 0)
	(enable-timer 7 120)
	(enable-timer 14 120)
	(set-strategic-number sn-number-boat-attack-groups 0)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(current-age == feudal-age)
	(goal gl-strategy grush)
	(warboat-count < 10)
	(up-projectile-target projectile-watch-tower == warship-class)
	(up-projectile-detected projectile-watch-tower < 5000)
	(strategic-number sn-hitting-pop-cap != YES)
=>
	(set-goal MILITARY 0)
	(enable-timer 7 30)
	(enable-timer 14 30)
	(set-strategic-number sn-number-boat-attack-groups 0)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(unit-type-count cannon-galleon-line < 1)
	(or	(up-compare-goal MILITARY != 1)
		(or	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
			(and	(goal TSA 0)
				(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style))))
	(up-projectile-target projectile-castle == warship-class)
	(up-projectile-detected projectile-castle < 120000)
	(strategic-number sn-hitting-pop-cap != YES)
=>
	(set-goal MILITARY 0)
	(enable-timer 7 120)
	(enable-timer 14 120)
	(set-strategic-number sn-number-boat-attack-groups 0)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-landing-style)
	(unit-type-count cannon-galleon-line < 1)
	(unit-type-count transport-ship < 1)
	(up-projectile-target projectile-castle == warship-class)
	(up-projectile-detected projectile-castle < 120000)
	(strategic-number sn-hitting-pop-cap != YES)
=>
	(set-goal MILITARY 0)
	(enable-timer 7 120)
	(enable-timer 14 120)
	(set-strategic-number sn-number-boat-attack-groups 0)
)

(defrule
	(or	(goal DOCK 3)
		(goal DOCK 4))
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(building-type-count-total town-center > 2)
	(up-compare-const gv-migration == 0)
	(players-building-count every-enemy == 0)
	(building-type-count-total dock == 0); Water is probably inaccessible
	(warboat-count == 0)
	(up-compare-goal gl-target-navy-count <= 0)
=>
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-minimum-water-body-size-for-dock islands-map-landing-style); Prepare for land-play if can't build navy
	(set-strategic-number sn-group-form-distance 30)
	(set-goal DOCK 1)
	(chat-to-player my-player-number landing-chat)
)

(defrule
	(or	(goal DOCK 3)
		(goal DOCK 4))
	(game-time > 2400)
	(up-compare-goal gl-migration-notice >= min-migration-progress)
	(players-building-count any-enemy > 0)
	(warboat-count > 18)
	(up-compare-goal gl-target-navy-count < 10)
=>
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-minimum-water-body-size-for-dock islands-map-landing-style)
	(set-strategic-number sn-group-form-distance 30)
	(set-goal DOCK 1)
	(chat-to-player my-player-number landing-chat)
)

(defrule
	(or	(goal DOCK 3)
		(goal DOCK 4))
	(game-time > 2400)
	(up-compare-goal gl-migration-notice >= min-migration-progress)
	(players-building-count any-enemy > 0)
	(warboat-count > 31)
	(up-compare-goal gl-target-navy-count < 15)
=>
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-minimum-water-body-size-for-dock islands-map-landing-style)
	(set-strategic-number sn-group-form-distance 30)
	(set-goal DOCK 1)
	(chat-to-player my-player-number landing-chat)
)

(defrule
	(or	(goal DOCK 3)
		(goal DOCK 4))
	(game-time > 500)
	(up-compare-const gv-migration == 0)
	(warboat-count > 20)
	(or	(players-building-type-count any-enemy wonder > 0)
		(enemy-captured-relics))
	(victory-condition standard)
=>
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-minimum-water-body-size-for-dock islands-map-landing-style)
	(set-strategic-number sn-group-form-distance 30)
	(set-goal DOCK 1)
	(chat-to-player my-player-number landing-chat)
)

; attacking at water maps

(defrule
	(goal gl-strategy grush)
	(timer-triggered 1)
	(up-compare-goal gl-current-age >= gv-dark-up)
=>
	(disable-timer 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(up-compare-goal MILITARY >= 1)
	(players-building-count target-player > 0)
=>
	(up-get-fact warboat-count 0 temporary-goal)
	(up-modify-goal temporary-goal s:- sn-number-boat-explore-groups)
	(up-modify-sn sn-total-number-explorers s:= sn-number-boat-explore-groups)
	(up-modify-sn sn-total-number-explorers s:+ sn-number-explore-groups)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(up-timer-status 44 != timer-running)
	(up-compare-goal MILITARY >= 1)
	(or	(up-compare-goal gl-direct-attacking != YES)
		(goal gl-attack-target-id -1))
	(strategic-number sn-number-boat-attack-groups g:!= temporary-goal)
	(players-building-count target-player > 0)
=>
	(set-strategic-number sn-enemy-sighted-response-distance 7)
	(set-strategic-number sn-group-form-distance 0)
	(set-strategic-number sn-minimum-boat-attack-group-size 1)
	(set-strategic-number sn-maximum-boat-attack-group-size 1)
	(up-modify-sn sn-number-boat-attack-groups g:= temporary-goal)
	(up-modify-sn sn-total-number-explorers s:= sn-number-boat-explore-groups)
	(up-modify-sn sn-total-number-explorers s:+ sn-number-explore-groups)
)

; Select superiority level (0 = none, 1 = land (allows attacking on water too), 2 = water)

#load-if-not-defined DEATH-MATCH
#load-if-not-defined DEFEND-WONDER
#load-if-not-defined DARK-AGE-END
#load-if-not-defined FEUDAL-AGE-END
(defrule
	(timer-triggered 7)
	(up-compare-goal gl-rush-suitability-on-map >= LOW)
	(up-compare-goal gl-current-age != gv-maximum-age)
	(players-building-type-count target-player stone-wall > 4)
=>
	(set-goal temporary-goal 5)
	(up-get-focus-fact unit-type-count monk temporary-goal2)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-get-focus-fact unit-type-count mangonel-line temporary-goal2)
	(up-modify-goal temporary-goal2 c:* 4)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-modify-goal temporary-goal c:min 25)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal gl-target-soldier-count g:+ temporary-goal)
)

(defrule
	(up-allied-sn every-ally sn-target-player-number s:== sn-target-player-number); Every ally shares the target
	(up-allied-goal any-ally 392 == 1); Some has decided to attacked so we may join nevertheless
	(or	(up-compare-const gv-x-vs-one-challenge == 1)
		(not	(player-in-game any-human-enemy)))
=>
	(up-jump-rule 3)
)

(defrule
	(timer-triggered 7)
	(goal gl-strategy knight-rush)
	(or	(goal TSA 0)
		(military-population < 35))
	(unit-type-count battering-ram-line > 0)
	(or	(unit-type-count battering-ram-line > 2)
		(goal TSA 1))
	(up-projectile-detected projectile-fortification < 600000)
	(or	(players-building-type-count target-player watch-tower > 2)
		(players-building-type-count target-player castle > 0))
=>
	(up-modify-goal gl-target-soldier-count c:+ 4)
	(up-jump-rule 1)
)

(defrule
	(timer-triggered 7)
	(or	(goal TSA 0)
		(military-population < 35))
	(up-projectile-detected projectile-fortification < 600000)
	(nand	(strategic-number sn-allow-resource-spending > 5)
		(goal gl-strategy default))
	(or	(players-building-type-count target-player watch-tower > 1)
		(or	(players-building-type-count target-player bombard-tower > 0)
			(players-building-type-count target-player castle > 0)))
=>
	(up-modify-goal gl-target-soldier-count c:+ 8)
)

(defrule
	(timer-triggered 7)
	(or	(goal TSA 0)
		(military-population < 35))
	(up-projectile-detected projectile-fortification < 600000)
	(up-compare-goal gl-target-player-distance < 36)
	(or	(players-building-type-count target-player watch-tower > 2)
		(or	(players-building-type-count target-player bombard-tower > 0)
			(players-building-type-count target-player castle > 0)))
=>
	(up-modify-goal gl-target-soldier-count c:+ 10)
)

(defrule
	(timer-triggered 7)
	(or	(goal TSA 0)
		(military-population < 35))
	(strategic-number sn-allow-resource-spending < 6)
	(nand	(current-age == imperial-age)
		(players-current-age focus-player <= castle-age))
	(up-projectile-detected projectile-fortification < 600000)
	(or	(players-building-type-count target-player watch-tower > 5)
		(or	(players-building-type-count target-player bombard-tower > 1)
			(players-building-type-count target-player castle > 1)))
=>
	(up-modify-goal gl-target-soldier-count c:+ 10)
)

(defrule
	(timer-triggered 7)
	(or	(goal TSA 0); If we happen to attack, keep attacking as we can't retreat after a couple of rams die
		(unit-type-count battering-ram-line < 1)); Unless they're all gone
	(nand	(up-allied-sn every-ally sn-target-player-number s:== sn-target-player-number)
		(up-allied-goal any-ally 392 == 1))
	(up-compare-goal gl-target-player-distance < 36)
	(unit-type-count battering-ram-line < 7)
	(unit-type-count battering-ram-line < large-army-rams)
	(or	(players-building-type-count target-player watch-tower > 10)
		(or	(players-building-type-count target-player bombard-tower > 4)
			(players-building-type-count target-player castle > 2)))
=>
	(up-modify-goal gl-target-soldier-count c:+ 20)
)

(defrule
	(timer-triggered 7)
	(player-human target-player)
	(or	(current-age < gv-maximum-age)
		(and	(strategic-number sn-allow-resource-spending < 6)
			(or	(and	(military-population < 60)
					(up-compare-goal MILITARY != 1))
				(military-population < 40))))
	(unit-type-count trebuchet-set < 2)
	(up-projectile-detected projectile-castle < 600000)
	(players-building-type-count target-player stone-wall-line > 2)
	(players-building-type-count target-player castle > 0)
=>
	(up-modify-goal gl-target-soldier-count c:+ 20)
)

(defrule
	(timer-triggered 7)
	(player-human target-player)
	(or	(current-age < gv-maximum-age)
		(and	(strategic-number sn-allow-resource-spending < 6)
			(or	(and	(military-population < 60)
					(up-compare-goal MILITARY != 1))
				(military-population < 40))))
	(players-building-type-count target-player castle > 2)
=>
	(up-modify-goal gl-target-soldier-count c:+ 30)
)

(defrule
	(timer-triggered 7)
	(player-human target-player)
	(up-compare-const gv-x-vs-one-challenge == 0)
	(up-compare-goal gl-current-age <= gv-castle-up)
	(up-projectile-detected projectile-castle < 600000)
	(up-compare-goal gl-enemy-onager-count > 0)
	(players-building-type-count target-player castle > 0)
=>
	(up-modify-goal gl-target-soldier-count c:+ 25)
)

(defrule
	(current-age == imperial-age)
	(players-unit-type-count focus-player heavy-scorpion == 0)
=>
	(up-jump-rule 1)
)

(defrule
	(timer-triggered 7)
	(up-compare-goal gl-enemy-scorpion-count > 1)
	(up-compare-goal gl-strategy != eagle-rush)
	(or	(soldier-count < 40)
		(players-unit-type-count focus-player scorpion-line > 4))
	(unit-type-count mangonel-line < 1)
	(unit-type-count scorpion-line < 4)
	(unit-type-count cavalry-class < 4)
	(up-compare-goal gl-eagle-warrior-count < 6)
	(nand	(strategic-number sn-allow-resource-spending > 4)
		(current-age == gv-maximum-age))
=>
	(up-modify-goal gl-target-soldier-count c:+ 15)
)
#end-if
#end-if
#end-if
#else

(defrule
	(timer-triggered 7)
	(unit-type-count-total battering-ram-line < 4)
	(unit-type-count-total trebuchet-set < 2)
	(or	(goal TSA 0)
		(military-population < 45))
	(strategic-number sn-enemy-castle-count > 1)
=>
	(up-modify-goal gl-target-soldier-count c:+ 10)
)

(defrule
	(timer-triggered 7)
	(or	(and	(goal TSA 0)
			(and	(unit-type-count-total battering-ram-line < 4)
				(unit-type-count-total trebuchet-set < 2)))
		(military-population < 35))
	(strategic-number sn-enemy-castle-count > 0)
=>
	(up-modify-goal gl-target-soldier-count c:+ 8)
)
#end-if

(defrule
	(timer-triggered 7)
	(or	(and	(or	(military-population > 3)
				(and	(military-population > 1)
					(population-cap < 40)))
			(up-compare-goal temporary-goal8 g:> gl-target-soldier-count))
		(and	(up-compare-const gv-maximum-age == dark-age)
			(population >= pop-to-full-pop-attack)))
=>
	(set-goal MILITARY 1)
	(enable-timer 7 2)
)

(defrule
	(timer-triggered 7)
	(not	(goal MILITARY 2))
	(or	(military-population <= 3)
		(up-compare-goal temporary-goal8 g:<= gl-target-soldier-count))
=>
	(set-goal MILITARY 0)
	(set-strategic-number sn-number-boat-attack-groups 0)
	(enable-timer 7 2)
)

(defrule
	(goal MILITARY 1)
	(goal TSA 0)
	(game-time < 2100)
	(goal gl-strategy-class basic-class)
	(building-type-count-total town-center < 3)
	(building-type-count-total town-center < preferred-TC-number)
	(building-type-count siege-workshop == 0)
	(unit-type-count battering-ram-line == 0)
	(up-compare-const gv-maximum-age >= castle-age)
	(current-age <= castle-age)
	(players-building-type-count target-player castle > 0)
=>
	(set-goal MILITARY 0)
)

(defrule
	(or	(goal gl-strategy turtle-rush)
		(or	(goal gl-strategy war-galley-rush)
			(or	(goal gl-strategy fire-ship-rush)
				(or	(goal gl-strategy grush)
					(and	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
						(game-time < time-to-allow-retargeting))))))
	(or	(unit-type-count-total archer-line < 4)
		(up-compare-goal gl-enemy-skirmisher-count > 4))
	(goal MILITARY 1)
=>
	(set-goal MILITARY 2)
)

; ============= SOME TRIBUTING

(defrule
	(goal SLING 0)
	(up-compare-goal gl-DRUSH != YES)
	(game-time > 600)
	(or	(game-time > 2400)
		(death-match-game))
	(or	(up-allied-resource-percent any-ally amount-tribute-inefficiency < gv-tribute-inefficiency)
		(game-time > 3000))
=>
	(enable-timer 11 0)
	(set-goal timer-enabler 0)
	(set-goal substitute-timer3 0)
	(disable-self)
)

(defrule
	(or	(up-timer-status 11 != timer-triggered)
		(or	(up-compare-goal SLING != 0)
			(or	(building-type-count town-center == 0)
				(or	(and	(up-allied-resource-percent every-ally amount-tribute-inefficiency >= gv-tribute-inefficiency)
						(and	(game-time <= 3000)
							(up-compare-goal gl-town-center-placed != placed-to-ally)))
					(and	(population < 50)
						(town-under-attack))))))
=>
	(up-jump-rule 4)
)

(defrule
	(goal SLING 0)
	(building-type-count town-center > 0)
	(or	(up-allied-resource-percent any-ally amount-tribute-inefficiency < gv-tribute-inefficiency)
		(game-time > 3000))
	(up-allied-resource-amount any-ally food > 500)
	(or	(food-amount < 100)
		(up-allied-resource-amount any-ally food > 1200))
	(or	(food-amount < 500)
		(up-allied-resource-amount any-ally food > 2000))
	(food-amount < 800)
=>
	(chat-to-allies "3Food, please.")
)

(defrule
	(goal SLING 0)
	(building-type-count town-center > 0)
	(or	(up-allied-resource-percent any-ally amount-tribute-inefficiency < gv-tribute-inefficiency)
		(game-time > 3000))
	(up-allied-resource-amount any-ally wood > 500)
	(or	(wood-amount < 100)
		(up-allied-resource-amount any-ally wood > 1200))
	(or	(wood-amount < 500)
		(up-allied-resource-amount any-ally wood > 2000))
	(wood-amount < 800)
=>
	(chat-to-allies "4Wood, please.")
)

(defrule
	(goal SLING 0)
	(building-type-count town-center > 0)
	(or	(up-allied-resource-percent any-ally amount-tribute-inefficiency < gv-tribute-inefficiency)
		(game-time > 3000))
	(up-allied-resource-amount any-ally gold > 500)
	(or	(gold-amount < 100)
		(up-allied-resource-amount any-ally gold > 1200))
	(or	(gold-amount < 500)
		(up-allied-resource-amount any-ally gold > 2000))
	(gold-amount < 800)
=>
	(chat-to-allies "5Gold, please.")
)

(defrule
	(goal SLING 0)
	(building-type-count town-center > 0)
	(or	(up-allied-resource-percent any-ally amount-tribute-inefficiency < gv-tribute-inefficiency)
		(game-time > 3000))
	(up-compare-goal CASTLE != 0)
	(nand	(building-type-count-total castle > 0)
		(research-completed ri-anarchy))
	(up-allied-resource-amount any-ally stone > 300)
	(or	(players-building-type-count every-ally castle > 0)
		(up-allied-resource-amount any-ally stone > 700))
	(building-type-count-total castle < 3)
	(stone-amount < castle-stone)
=>
	(chat-to-allies "6Stone, please.")
)

(defrule
	(up-timer-status 11 != timer-running)
	(or	(goal gl-town-center-placed placed-to-ally)
		(goal gl-enemy-units-in-town 0))
	(goal SLING 0)
	(building-type-count town-center > 0)
	(up-allied-resource-amount any-ally food > 200)
	(players-population any-ally > 140)
	(up-compare-goal gl-my-villager-count < 30)
	(food-amount < 50)
	(not	(taunt-detected my-player-number 3))
=>
	(chat-to-allies "3Food for rebuilding, please.")
	(chat-to-allies "103")
)

(defrule
	(up-timer-status 11 != timer-running)
	(dropsite-min-distance wood == 255)
	(goal gl-enemy-units-in-town 0)
	(cc-players-unit-type-count 0 tree > 500)
	(building-type-count town-center > 0)
	(up-allied-resource-amount any-ally wood > 300)
	(players-population any-ally > 110)
	(population < 100)
	(population-cap > 50)
	(wood-amount < 100)
	(not	(taunt-detected my-player-number 4))
=>
	(chat-to-allies "4Need wood, don't have any here.")
	(chat-to-allies "104")
)

(defrule
	(up-timer-status 11 != timer-running)
	(or	(goal gl-town-center-placed placed-to-ally)
		(goal gl-enemy-units-in-town 0))
	(goal SLING 0)
	(building-type-count-total town-center < 3)
	(current-age >= castle-age)
	(players-population any-ally > 140)
	(up-compare-goal gl-my-villager-count < 50)
	(stone-amount < 100)
	(nor	(taunt-detected my-player-number 6)
		(up-pending-placement c: town-center))
=>
	(chat-to-allies "6Stone for TCs, please.")
	(chat-to-allies "106")
)

(defrule
	(goal SLING 0)
	(or	(taunt-detected my-player-number 3)
		(or	(taunt-detected my-player-number 4)
			(or	(taunt-detected my-player-number 5)
				(taunt-detected my-player-number 6))))
	(building-type-count town-center > 0)
	(up-timer-status 11 != timer-running)
=>
	(acknowledge-taunt my-player-number 3)
	(acknowledge-taunt my-player-number 4)
	(acknowledge-taunt my-player-number 5)
	(acknowledge-taunt my-player-number 6)
	(enable-timer 11 142)
)

(defrule
	(map-type migration)
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(players-building-type-count any-ally town-center > 2)
	(game-time > 1200)
	(stone-amount > 700)
=>
	(tribute-to-player this-any-ally stone 200)
	(chat-to-player my-player-number stone-200-chat)
)

(defrule
	(nor	(taunt-detected any-ally 3)
		(taunt-detected any-ally 4))
	(nor	(taunt-detected any-ally 5)
		(taunt-detected any-ally 6))
	(nor	(taunt-detected any-ally 103)
		(taunt-detected any-ally 104))
	(nor	(taunt-detected any-ally 105)
		(taunt-detected any-ally 106))
=>
	(up-jump-rule 19)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal temporary-goal2 0)
)

(defrule
	(building-type-count market == 0)
=>
	(up-jump-rule 5)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(stance-toward focus-player ally)
	(player-in-game focus-player)
	(strategic-number sn-focus-player-number != my-player-number); Ally AIs may not control their high priority taunts properly, sadly
	(or	(up-allied-goal focus-player gl-identity == Barbarian)
		(player-human focus-player))
	(taunt-detected focus-player 103)
	(food-amount > 500)
=>
	(tribute-to-player focus-player food 200)
	(acknowledge-taunt focus-player 3)
	(acknowledge-taunt focus-player 103)
	(chat-to-player my-player-number food-200-chat)
	(set-goal temporary-goal2 1)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(stance-toward focus-player ally)
	(player-in-game focus-player)
	(strategic-number sn-focus-player-number != my-player-number)
	(or	(up-allied-goal focus-player gl-identity == Barbarian)
		(player-human focus-player))
	(taunt-detected focus-player 104)
	(wood-amount > 500)
=>
	(tribute-to-player focus-player wood 200)
	(acknowledge-taunt focus-player 4)
	(acknowledge-taunt focus-player 104)
	(chat-to-player my-player-number wood-200-chat)
	(set-goal temporary-goal2 1)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(stance-toward focus-player ally)
	(player-in-game focus-player)
	(strategic-number sn-focus-player-number != my-player-number)
	(or	(up-allied-goal focus-player gl-identity == Barbarian)
		(player-human focus-player))
	(taunt-detected focus-player 105)
	(gold-amount > 500)
=>
	(tribute-to-player focus-player gold 200)
	(acknowledge-taunt focus-player 5)
	(acknowledge-taunt focus-player 105)
	(chat-to-player my-player-number gold-200-chat)
	(set-goal temporary-goal2 1)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(stance-toward focus-player ally)
	(player-in-game focus-player)
	(strategic-number sn-focus-player-number != my-player-number)
	(research-completed tribute-tech)
	(building-type-count-total castle > 0)
	(nand	(up-compare-goal CASTLE != 0)
		(building-type-count-total castle < 3))
	(building-type-count-total town-center > 2)
	(stone-amount > 200)
	(taunt-detected focus-player 106)
=>
	(tribute-to-player focus-player stone 200)
	(acknowledge-taunt focus-player 106)
	(chat-to-player my-player-number stone-200-chat)
	(set-goal temporary-goal2 1)
)

(defrule
	(goal temporary-goal2 0)
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -5)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(research-completed tribute-tech)
	(game-time > 1200)
	(or	(strategic-number sn-allow-resource-spending > 5)
		(death-match-game))
	(food-amount > 8000)
	(taunt-detected any-ally 3)
=>
	(tribute-to-player this-any-ally food 3000)
	(acknowledge-taunt this-any-ally 3)
	(acknowledge-taunt this-any-ally 103)
	(chat-to-player my-player-number "Give 3000 food to ally")
	(enable-timer 11 240)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(research-completed tribute-tech)
	(game-time > 1200)
	(or	(strategic-number sn-allow-resource-spending > 5)
		(death-match-game))
	(wood-amount > 8000)
	(taunt-detected any-ally 4)
=>
	(tribute-to-player this-any-ally wood 3000)
	(acknowledge-taunt this-any-ally 4)
	(acknowledge-taunt this-any-ally 104)
	(chat-to-player my-player-number "Give 3000 wood to ally")
	(enable-timer 11 240)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(research-completed tribute-tech)
	(game-time > 1200)
	(or	(strategic-number sn-allow-resource-spending > 5)
		(death-match-game))
	(gold-amount > 8000)
	(taunt-detected any-ally 5)
=>
	(tribute-to-player this-any-ally gold 3000)
	(acknowledge-taunt this-any-ally 5)
	(acknowledge-taunt this-any-ally 105)
	(chat-to-player my-player-number "Give 3000 gold to ally")
	(enable-timer 11 240)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(research-completed tribute-tech)
	(or	(strategic-number sn-allow-resource-spending > 5)
		(death-match-game))
	(food-amount > 2000)
	(taunt-detected any-ally 3)
=>
	(tribute-to-player this-any-ally food 1000)
	(acknowledge-taunt this-any-ally 3)
	(acknowledge-taunt this-any-ally 103)
	(chat-to-player my-player-number "Give 1000 food to ally")
	(enable-timer 11 120)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(research-completed tribute-tech)
	(or	(strategic-number sn-allow-resource-spending > 5)
		(death-match-game))
	(wood-amount > 2000)
	(taunt-detected any-ally 4)
=>
	(tribute-to-player this-any-ally wood 1000)
	(acknowledge-taunt this-any-ally 4)
	(acknowledge-taunt this-any-ally 104)
	(chat-to-player my-player-number "Give 1000 wood to ally")
	(enable-timer 11 120)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(research-completed tribute-tech)
	(or	(strategic-number sn-allow-resource-spending > 5)
		(death-match-game))
	(gold-amount > 2000)
	(taunt-detected any-ally 5)
=>
	(tribute-to-player this-any-ally gold 1000)
	(acknowledge-taunt this-any-ally 5)
	(acknowledge-taunt this-any-ally 105)
	(chat-to-player my-player-number "Give 1000 gold to ally")
	(enable-timer 11 120)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(research-completed tribute-tech)
	(or	(strategic-number sn-allow-resource-spending > 5)
		(death-match-game))
	(building-type-count-total castle > 0)
	(nand	(up-compare-goal CASTLE != 0)
		(building-type-count-total castle < 3))
	(building-type-count-total town-center >= preferred-TC-number)
	(stone-amount > 500)
	(taunt-detected any-ally 6)
=>
	(tribute-to-player this-any-ally stone 500)
	(acknowledge-taunt this-any-ally 6)
	(acknowledge-taunt this-any-ally 106)
	(chat-to-player my-player-number "Give 500 stone to ally")
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(taunt-detected any-ally 3)
	(or	(strategic-number sn-allow-resource-spending > 5)
		(food-amount > 900))
	(research-completed tribute-tech)
	(food-amount > 500)
=>
	(tribute-to-player this-any-ally food 200)
	(acknowledge-taunt this-any-ally 3)
	(chat-to-player my-player-number food-200-chat)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(taunt-detected any-ally 4)
	(or	(strategic-number sn-allow-resource-spending > 5)
		(wood-amount > 900))
	(research-completed tribute-tech)
	(wood-amount > 500)
=>
	(tribute-to-player this-any-ally wood 200)
	(acknowledge-taunt this-any-ally 4)
	(acknowledge-taunt this-any-ally 104)
	(chat-to-player my-player-number wood-200-chat)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(taunt-detected any-ally 5)
	(or	(strategic-number sn-allow-resource-spending > 5)
		(gold-amount > 900))
	(research-completed tribute-tech)
	(gold-amount > 500)
=>
	(tribute-to-player this-any-ally gold 200)
	(acknowledge-taunt this-any-ally 5)
	(acknowledge-taunt this-any-ally 105)
	(chat-to-player my-player-number gold-200-chat)
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(research-completed tribute-tech)
	(building-type-count-total castle > 0)
	(nand	(up-compare-goal CASTLE != 0)
		(building-type-count-total castle < 3))
	(building-type-count-total town-center > 2)
	(stone-amount > 200)
	(taunt-detected any-ally 6)
=>
	(tribute-to-player this-any-ally stone 200)
	(acknowledge-taunt this-any-ally 6)
	(acknowledge-taunt this-any-ally 106)
	(chat-to-player my-player-number stone-200-chat)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(goal timer-enabler 0)
=>
	(up-get-fact game-time 0 timer-enabler)
	(up-modify-goal timer-enabler c:+ 40)
)

(defrule
	(up-compare-goal timer-enabler > 0)
	(game-time g:>= timer-enabler)
=>
	(acknowledge-taunt every-ally 3)
	(acknowledge-taunt every-ally 4)
	(acknowledge-taunt every-ally 5)
	(acknowledge-taunt every-ally 6)
	(acknowledge-taunt every-ally 103)
	(acknowledge-taunt every-ally 104)
	(acknowledge-taunt every-ally 105)
	(acknowledge-taunt every-ally 106)
	(set-goal timer-enabler 0)
)

(defrule
	(game-time > 2400)
	(strategic-number sn-allow-resource-spending > 3)
	(or	(strategic-number sn-allow-resource-spending > 5)
		(game-time > 3000))
	(or	(taunt-detected any-ally 3)
		(or	(taunt-detected any-ally 4)
			(taunt-detected any-ally 5)))
	(or	(can-research ri-coinage)
		(can-research ri-banking))
=>
	(research ri-coinage)
	(research ri-banking)
)

#load-if-not-defined DEATH-MATCH
#load-if-not-defined WONDER-RACE
(defrule
	(or	(and	(or	(unit-type-count bombard-cannon > 0)
				(or	(goal gl-strategy turkish-bombardment)
					(building-type-count bombard-tower > 0)))
			(and	(research-available my-unique-research)
				(civ-selected turkish)))
		(or	(goal gl-strategy sling)
			(goal gl-strategy uu-boom)))
=>
	(up-jump-rule 2)
)

(defrule
	(up-compare-flag gl-flag != wonder-build-attempt)
	(up-compare-goal gl-strategy != gothic-boom)
	(up-compare-goal gl-strategy != fi-monk-rush)
	(up-compare-const gv-FFA-like-game == 0)
	(building-type-count-total castle > 0)
	(or	(goal CASTLE 0)
		(building-type-count-total castle > 3))
	(gold-amount < 50)
	(stone-amount > 425)
	(commodity-selling-price stone >= 85)
	(can-sell-commodity stone)
=>
	(sell-commodity stone)
)

#load-if-not-defined AZTEC-CIV
(defrule
	(up-compare-flag gl-flag != wonder-build-attempt)
	(goal TC 1)
	(goal CASTLE 0)
	(goal gl-strategy-class special-class)
	(up-compare-goal gl-strategy != eew-strategy)
	(up-compare-goal gl-strategy != fi-monk-rush)
	(up-compare-goal gl-strategy != wall-boom)
	(or	(stone-amount >= 300)
		(building-type-count-total town-center > 1))
	(or	(stone-amount >= 200)
		(building-type-count-total town-center > 3))
	(up-compare-goal gl-gathered-relics < 15)
	(commodity-selling-price stone >= 85)
;	(can-sell-commodity stone)
=>
	(sell-commodity stone)
)
#else
(defrule
	(up-compare-flag gl-flag != wonder-build-attempt)
	(goal TC 1)
	(goal CASTLE 0)
	(goal gl-strategy-class special-class)
	(up-compare-goal gl-strategy != eew-strategy)
	(up-compare-goal gl-strategy != fi-monk-rush)
	(or	(stone-amount >= 300)
		(building-type-count-total town-center > 1))
	(or	(stone-amount >= 200)
		(building-type-count-total town-center > 3))
	(building-type-count-total castle > 0)
	(up-compare-goal gl-gathered-relics < 15)
	(commodity-selling-price stone >= 85)
;	(can-sell-commodity stone)
=>
	(sell-commodity stone)
)
#end-if
#end-if

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(building-available bombard-tower)
	(unit-type-count-total trade-cart > 10)
	(or	(up-compare-goal substitute-timer3 < 60)
		(unit-type-count-total trade-cart > 28))
	(up-compare-goal substitute-timer3 < 100)
=>
	(up-modify-goal substitute-timer3 c:+ 1)
)

#load-if-not-defined UP-MICHI-STYLE
(defrule
	(building-available tower-building)
	(strategic-number sn-allow-resource-spending > 5)
	(unit-type-count-total trade-cart > 10)
	(gold-amount > 500)
	(or	(commodity-buying-price stone < 140)
		(gold-amount > 800))
	(or	(commodity-buying-price stone < 200)
		(gold-amount > 1500))
	(commodity-buying-price stone < 400)
	(stone-amount < 200)
	(can-buy-commodity stone)
	(up-compare-goal substitute-timer3 >= 50)
=>
	(buy-commodity stone)
	(up-modify-goal substitute-timer3 c:- 50)
)
#else
(defrule
	(building-available tower-building)
	(strategic-number sn-allow-resource-spending > 5)
	(unit-type-count-total trade-cart > 10)
	(gold-amount > 1200)
	(or	(commodity-buying-price stone < 200)
		(gold-amount > 2000))
	(commodity-buying-price stone < 400)
	(stone-amount < 200)
	(can-buy-commodity stone)
	(up-compare-goal substitute-timer3 >= 10)
=>
	(buy-commodity stone)
	(up-modify-goal substitute-timer3 c:- 10)
)
#end-if

; ========= SOME ENEMY STRATEGY DETECTION

(defrule
	(game-time > 2100)
=>
	(up-jump-rule 16)
	(set-goal gl-enemy-strategy NOT-EAGLERUSH)
)

(defrule
	(up-compare-goal gl-enemy-strategy >= FLUSH)
	(players-current-age-time focus-player > 30)
	(up-compare-goal gl-score-difference <= -68)
	(players-current-age focus-player == feudal-age)
=>
	(set-goal gl-enemy-strategy UP-TO-CASTLE)
	(up-get-fact game-time 0 gl-enemy-up-game-time)
	(up-modify-goal gl-enemy-up-game-time c:+ 100)
	(chat-to-player my-player-number "Enemy clicked up to castle.")
	(disable-self)
)

(defrule
	(goal gl-enemy-strategy NOT-EAGLERUSH)
	(up-compare-flag gl-flag == meso-civ-focus)
	(or	(and	(game-time < 2)
			(up-compare-const gv-meso-civ-enemy == 1))
		(and	(goal gl-enemy-strategy FLUSH)
			(game-time > 960)))
	(players-military-population focus-player < 2)
	(game-time < 1080)
=>
	(set-goal gl-enemy-strategy EAGLERUSH-NOTE)
)

(defrule
	(goal gl-enemy-strategy EAGLERUSH-NOTE)
	(game-time < 1500)
	(players-current-age focus-player == castle-age)
	(players-building-type-count focus-player castle == 0)
	(players-building-type-count focus-player barracks > 0)
	(players-building-type-count focus-player market > 0)
	(players-building-type-count focus-player archery-range == 0)
=>
	(set-goal gl-enemy-strategy EAGLERUSH)
	(chat-to-player my-player-number "Enemy eagle rush detected.")
	(disable-self)
)

(defrule
	(goal gl-enemy-strategy EAGLERUSH-NOTE)
	(game-time < 1500)
	(players-building-type-count focus-player archery-range == 0)
	(up-compare-goal gl-enemy-archery-count < 1)
	(or	(and	(players-current-age focus-player == castle-age)
			(up-compare-goal gl-enemy-eagle-count > 3))
		(or	(players-building-type-count focus-player barracks > 1)
			(and	(commodity-selling-price stone < default-stone-price)
				(goal gl-strategy xbow-rush))))
=>
	(set-goal gl-enemy-strategy EAGLERUSH)
)

(defrule
	(goal gl-enemy-strategy EAGLERUSH-NOTE)
	(goal gl-strategy eew-strategy)
	(game-time < 1500)
	(or	(and	(players-current-age focus-player == castle-age)
			(up-compare-goal gl-enemy-eagle-count > 3))
		(or	(players-building-type-count any-enemy barracks > 1)
			(and	(commodity-selling-price stone < default-stone-price)
				(and	(building-type-count-total castle < 1)
					(up-compare-goal gl-eew-strategy-type >= fast-imp)))))
=>
	(set-goal gl-enemy-strategy EAGLERUSH)
)

(defrule
	(goal gl-enemy-strategy EAGLERUSH-NOTE)
	(or	(and	(players-military-population focus-player > 3)
			(players-current-age focus-player == feudal-age))
		(or	(players-building-type-count focus-player archery-range > 0)
			(up-compare-goal gl-enemy-archery-count > 2)))
=>
	(set-goal gl-enemy-strategy NOT-EAGLERUSH)
)

(defrule
	(game-time < 900)
	(or	(and	(players-unit-type-count focus-player scout-cavalry-line > 1)
			(or	(players-unit-type-count focus-player scout-cavalry-line > 2)
				(up-compare-goal gl-starting-scout-count < 2)))
		(and	(players-building-type-count focus-player stable > 0)
			(game-time < 720)))
=>
	(set-goal gl-enemy-strategy SCOUT-RUSH)
	(chat-to-player my-player-number "Enemy scout rush detected.")
	(disable-self)
)

(defrule
	(goal gl-enemy-strategy NOT-EAGLERUSH)
	(or	(players-unit-type-count any-enemy militiaman-line > 2)
		(players-unit-type-count any-enemy man-at-arms > 0))
=>
	(set-goal gl-enemy-strategy MAA-FLUSH)
	(disable-self)
)

(defrule
	(up-compare-goal gl-enemy-strategy >= FLUSH)
	(up-compare-goal gl-enemy-strategy != TRUSH)
	(up-projectile-detected projectile-watch-tower < 30000)
	(up-compare-goal gl-target-player-distance < 43)
	(or	(up-compare-goal gl-target-player-distance < 35)
		(up-compare-goal gl-enemy-tower-count > 3))
	(up-compare-goal gl-enemy-tower-count > 1)
=>
	(set-goal gl-enemy-strategy TRUSH)
	(chat-to-player my-player-number "Enemy trush detected.")
	(disable-self)
)

(defrule
	(game-time < 1300)
	(players-building-type-count focus-player barracks == 0)
	(players-building-type-count focus-player archery-range == 0)
	(players-building-type-count focus-player stable == 0)
	(players-current-age focus-player >= castle-age)
	(up-compare-goal gl-start-with-castle != YES)
	(players-building-type-count focus-player castle > 0)
=>
	(set-goal gl-enemy-strategy CASTLE-DROP)
	(chat-to-player my-player-number "Enemy castle drop detected.")
	(disable-self)
)

(defrule
	(game-time < 1800)
	(or	(and	(game-time < 1400)
			(or	(players-building-type-count focus-player siege-workshop > 1)
				(up-compare-goal gl-enemy-scorpion-count > 1)))
		(or	(players-building-type-count focus-player siege-workshop > 2)
			(up-compare-goal gl-enemy-scorpion-count > 5)))
	(players-building-type-count focus-player castle == 0)
	(players-building-type-count focus-player stable == 0)
	(up-compare-goal gl-enemy-eagle-count < 2)
=>
	(set-goal gl-enemy-strategy SCORPION-RUSH)
	(chat-to-player my-player-number "Enemy scorpion rush detected.")
	(disable-self)
)

(defrule
	(game-time < 1400)
	(players-current-age focus-player == castle-age)
	(goal gl-enemy-skirmisher-count 0)
	(or	(players-unit-type-count focus-player archer-line > 5)
		(or	(and	(players-building-type-count focus-player archery-range > 0)
				(and	(map-size tiny)
					(up-compare-const gv-meso-civ-enemy == 1)))
			(players-building-type-count focus-player archery-range > 1)))
=>
	(set-goal gl-enemy-strategy XBOW-RUSH)
	(chat-to-player my-player-number "Enemy xbow rush detected.")
	(disable-self)
)

(defrule
	(game-time < 1500)
	(goal gl-enemy-strategy NOT-EAGLERUSH)
	(players-current-age focus-player == castle-age)
	(or	(players-building-type-count focus-player archery-range > 1)
		(up-compare-goal gl-enemy-archery-count > 4))
=>
	(set-goal gl-enemy-strategy RANGED-STRATEGY)
	(chat-to-player my-player-number "Enemy ranged strategy detected.")
	(disable-self)
)

(defrule
	(goal gl-enemy-strategy UP-TO-CASTLE)
	(game-time < 1020)
	(players-current-age focus-player == feudal-age)
	(up-compare-flag gl-flag != meso-civ-focus)
	(players-military-population focus-player < 2)
	(players-building-type-count focus-player stable > 0)
=>
	(set-goal gl-enemy-strategy KNIGHT-RUSH)
	(chat-to-player my-player-number "Enemy knight rush detected.")
	(disable-self)
)

(defrule
	(up-compare-goal gl-enemy-strategy != EAGLERUSH); Converted knights
	(up-compare-goal gl-enemy-strategy != KNIGHT-RUSH)
	(or	(game-time < 1400)
		(or	(goal gl-strategy scorpion-rush)
			(goal gl-strategy xbow-rush)))
	(players-current-age focus-player == castle-age)
	(players-building-type-count focus-player archery-range == 0)
	(goal gl-enemy-archery-count 0)
	(or	(players-unit-type-count focus-player knight-line > 1)
		(players-building-type-count focus-player stable > 0))
=>
	(set-goal gl-enemy-strategy KNIGHT-RUSH)
	(chat-to-player my-player-number "Enemy knight rush detected.")
	(disable-self)
)

(defrule
	(up-compare-goal gl-enemy-strategy != EAGLERUSH)
	(up-compare-goal gl-enemy-strategy != SCORPION-RUSH)
	(or	(and	(game-time < 1400)
			(players-building-type-count focus-player monastery > 1))
		(or	(players-unit-type-count focus-player monk > 7)
			(players-unit-type-count focus-player missionary > 7)))
	(game-time < 1800)
	(players-current-age focus-player >= castle-age)
	(players-building-type-count focus-player archery-range == 0)
	(players-building-type-count focus-player stable == 0)
=>
	(set-goal gl-enemy-strategy MONK-RUSH)
	(chat-to-player my-player-number "Enemy monk rush detected.")
	(disable-self)
)

(defrule
	(up-compare-const dm-pala-in-tech-tree == 1); We have a good cavalry civ
	(goal gl-strategy-class basic-class)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(up-compare-goal gl-strategy != default)
	(up-compare-goal gl-strategy != krush)
	(up-compare-goal gl-strategy != castle-drop)
	(goal gl-current-age gv-castle)
	(building-type-count town-center > 2)
	(or	(up-compare-goal gl-enemy-eew-count > 0)
		(up-compare-goal gl-enemy-huskarl-count > 4))
=>
	(set-goal gl-strategy default); For a cavalry civ default strategy involves knights
	(chat-to-player my-player-number "24Enemy anti-ranged units detected!")
	(disable-self)
)

; ========= MARKET - BALANCING THE RESOURCES

#load-if-not-defined FEUDAL-AGE-END

(defrule
	(or	(up-compare-goal gl-current-age != gv-feudal)
		(or	(and	(goal gl-strategy grush)
				(and	(game-time < 1320)
					(food-amount < 550)))
			(and	(goal POSITION POCKET)
				(and	(map-type migration)
					(or	(food-amount < 600)
						(current-age-time < 80))))))
=>
	(up-jump-rule 3)
)

(defrule
	(or	(building-type-count-total blacksmith > 0)
		(or	(building-type-count-total stable > 0)
			(building-type-count-total archery-range > 0)))
	(current-age-time g:>= gl-required-current-age-time)
	(wood-amount >= 200)
	(up-compare-goal gl-total-food-amount < 800)
	(commodity-selling-price wood >= 55)
	(strategic-number sn-target-evaluation-ally-proximity != 9999)
	(nand	(goal gl-strategy eagle-rush)
		(stone-amount > minimum-stone-eagles))
=>
	(sell-commodity wood)
	(buy-commodity food)
)

(defrule
	(building-type-count-total blacksmith > 0)
	(gold-amount < 200)
	(commodity-selling-price wood >= 53)
	(or	(strategic-number sn-target-evaluation-ally-proximity != 9999)
		(and	(research-available ri-coinage)
			(gold-amount < 50)))
	(nand	(goal gl-strategy eagle-rush)
		(stone-amount > minimum-stone-eagles))
	(current-age-time g:>= gl-required-current-age-time)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
)

(defrule
	(gold-amount >= 335)
	(current-age-time g:>= gl-required-current-age-time)
	(gold-amount >= 210)
	(up-compare-goal gl-total-food-amount < 800)
	(strategic-number sn-target-evaluation-ally-proximity != 9999)
	(can-buy-commodity food)
=>
	(buy-commodity food)
)
#end-if

(defrule
	(current-age == dark-age)
	(building-type-count town-center > 0)
	(up-compare-goal gl-gathered-relics > 4)
	(food-amount < 1300)
	(or	(food-amount < 800)
		(goal gl-current-age gv-dark))
	(can-buy-commodity food)
=>
	(buy-commodity food)
)


(defrule
	(building-type-count town-center > 0)
	(or	(and	(current-age <= feudal-age)
			(and	(up-compare-goal gl-gathered-relics > 7)
				(and	(gold-amount > 1000)
					(commodity-buying-price wood <= 200))))
		(dropsite-min-distance wood == 255))
	(wood-amount < 200)
	(can-buy-commodity wood)
=>
	(buy-commodity wood)
)


(defrule
	(goal gl-current-age gv-imperial)
	(current-age-time < limited-buying-time)
	(up-compare-goal gl-gathered-relics < 8)
	(up-compare-goal gl-trade-unit-count-total < 20)
	(up-compare-goal gl-my-villager-count-total > 80)
	(goal gl-strategy default)
	(nand	(commodity-buying-price food < 60)
		(food-amount < 400))
	(nand	(commodity-buying-price wood < 60)
		(wood-amount < 400))
	(game-time > 900)
	(gold-amount < 3000)
=>
	(up-jump-rule 9)
)


(defrule
	(goal gl-current-age gv-imperial)
	(current-age-time < 300)
	(up-compare-goal gl-my-villager-count-total > 29)
	(or	(goal gl-strategy default)
		(or	(goal gl-strategy eew-strategy)
			(goal gl-strategy turkish-bombardment)))
	(game-time > 900)
	(nand	(or	(food-amount < 400)
			(wood-amount < 400))
		(gold-amount > 2000))
=>
	(up-jump-rule 8)
)


(defrule
	(building-type-count town-center > 0)
	(or	(game-time > 300)
		(up-compare-goal gl-gathered-relics > 0))
	(up-compare-goal gl-my-villager-count-total < 20)
	(food-amount < 50)
	(or	(commodity-buying-price food <= 50)
		(up-compare-goal gl-my-villager-count-total < 13))
	(can-buy-commodity food)
=>
	(buy-commodity food)
)


(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(game-time > 1200)
	(goal gl-strategy-class basic-class)
	(nand	(food-amount >= 500)
		(up-compare-goal gl-current-age <= gv-castle-up))
	(or	(gold-amount >= 1000); 650
		(dropsite-min-distance wood == -1))
	(wood-amount < 140)
	(can-buy-commodity wood)
=>
	(buy-commodity wood)
	(chat-to-player my-player-number buy-wood-chat)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(or	(goal gl-strategy turkish-fast-imp)
		(goal gl-strategy scorpion-rush))
	(gold-amount > very-high-castle-gold)
	(wood-amount < 200)
	(or	(nor	(building-type-count-total siege-workshop > 0)
			(research-available imperial-age))
		(and	(goal gl-strategy scorpion-rush)
			(research-completed ri-guilds)))
	(can-buy-commodity wood)
=>
	(buy-commodity wood)
	(chat-to-player my-player-number buy-wood-chat)
)

(defrule
	(up-compare-goal gl-nothing-style-map != YES)
	(strategic-number sn-allow-resource-spending >= 0)
	(building-type-count-total barracks < 1)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(up-research-status c: ri-guilds != research-pending)
	(wood-amount < 150)
	(gold-amount >= 750)
	(can-buy-commodity wood)
	(commodity-buying-price wood <= 140)
=>
	(buy-commodity wood)
	(chat-to-player my-player-number buy-wood-chat)
)

(defrule
	(up-compare-goal gl-nothing-style-map != YES)
	(strategic-number sn-allow-resource-spending >= 0)
	(goal gl-strategy-class basic-class)
	(building-type-count-total town-center < 3)
	(wood-amount < 300)
	(or	(gold-amount >= 900)
		(commodity-buying-price wood <= 80))
	(or	(gold-amount >= 600)
		(commodity-buying-price wood <= 60))
	(gold-amount >= 400)
	(can-buy-commodity wood)
	(commodity-buying-price wood <= 140)
=>
	(buy-commodity wood)
	(chat-to-player my-player-number buy-wood-chat)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(goal gl-current-age gv-imperial)
	(up-research-status c: ri-guilds != research-pending)
	(or	(up-compare-goal gl-strategy != eew-strategy)
		(gold-amount > 1200))
	(wood-amount < 150)
	(or	(and	(gold-amount > 1000)
			(commodity-buying-price wood < 145))
		(dropsite-min-distance wood > 15))
	(can-buy-commodity wood)
=>
	(buy-commodity wood)
)

(defrule
	(or 	(and	(goal gl-strategy saracen-heavy-krush)
			(or	(food-amount < 60)
				(and	(food-amount < 250)
					(up-research-status c: ri-chain-barding <= research-available))))
		(gold-amount > 2000))
	(or	(food-amount < 1000)
		(and	(commodity-buying-price food <= 55)
			(up-compare-goal gl-trade-unit-count-total > 20)))
	(food-amount < 1600)
=>
	(buy-commodity food)
)

#load-if-not-defined WONDER-RACE

(defrule
	(gold-amount > 300)
	(or	(gold-amount > 400)
		(and	(food-amount < 300)
			(commodity-buying-price food < 30)))
	(or	(food-amount < 400)
		(gold-amount > 700))
	(or	(food-amount < 800)
		(gold-amount > 1100))
	(food-amount < 1300)
	(commodity-buying-price food < 38)
	(up-compare-goal gl-trade-unit-count-total > 28)
=>
	(buy-commodity food)
)

(defrule
	(gold-amount > 300)
	(or	(gold-amount > 400)
		(and	(wood-amount < 300)
			(commodity-buying-price wood < 30)))
	(or	(wood-amount < 400)
		(gold-amount > 700))
	(or	(wood-amount < 800)
		(gold-amount > 1100))
	(wood-amount < 1300)
	(commodity-buying-price wood < 38)
	(up-compare-goal gl-trade-unit-count-total > 28)
=>
	(buy-commodity wood)
)

(defrule
	(up-compare-goal gl-nothing-style-map != YES)
	(strategic-number sn-allow-resource-spending >= 0)
	(gold-amount >= 500)
	(or	(gold-amount >= 1300)
		(or	(and	(food-amount < 100)
				(gold-amount >= 700))
			(commodity-buying-price food <= 35)))
	(food-amount < 300)
	(commodity-buying-price food <= 200)
	(can-buy-commodity food)
=>
	(buy-commodity food)
	(chat-to-player my-player-number "Buy food")
)

#load-if-not-defined UP-MICHI-STYLE
(defrule
	(dropsite-min-distance wood >= 0)
	(up-compare-goal gl-current-age >= gv-castle)
	(up-research-status c: ri-guilds != research-pending)
	(nand	(goal gl-eew-strategy-type boom)
		(building-type-count-total town-center < 3))
	(strategic-number sn-target-evaluation-ally-proximity != 9999)
	(current-age-time > 10)
	(gold-amount < 50)
	(wood-amount > 450); 300
	(can-sell-commodity wood)
	(commodity-selling-price wood >= 50)
=>
	(sell-commodity wood)
	(chat-to-player my-player-number sell-wood-chat)
)

(defrule
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 10)
	(up-compare-goal gl-current-age >= gv-castle)
	(strategic-number sn-target-evaluation-ally-proximity != 9999)
	(up-research-status c: ri-guilds != research-pending)
	(gold-amount < 150)
	(wood-amount > 550); 400
	(current-age-time > 10)
	(up-compare-goal gl-strategy != boom)
	(up-compare-goal gl-strategy != scorpion-boom)
	(can-sell-commodity wood)
	(commodity-selling-price wood >= 55)
=>
	(sell-commodity wood)
	(chat-to-player my-player-number sell-wood-chat)
)
#else
(defrule
	(dropsite-min-distance wood >= 0)
	(goal gl-current-age gv-imperial)
	(or	(dropsite-min-distance wood < 10)
		(and	(wood-amount > 1000)
			(commodity-selling-price wood >= 65)))
	(up-research-status c: ri-guilds != research-pending)
	(game-time > 1980)
	(gold-amount < 50)
	(wood-amount > 550); 300
	(can-sell-commodity wood)
	(commodity-selling-price wood >= 50)
=>
	(sell-commodity wood)
	(chat-to-player my-player-number sell-wood-chat)
)

(defrule
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 10)
	(goal gl-current-age gv-imperial)
	(up-research-status c: ri-guilds != research-pending)
	(strategic-number sn-target-evaluation-ally-proximity != 9999)
	(game-time > 1980)
	(gold-amount < 150)
	(wood-amount > 700); 400
	(can-sell-commodity wood)
	(commodity-selling-price wood >= 55)
=>
	(sell-commodity wood)
	(chat-to-player my-player-number sell-wood-chat)
)
#end-if

(defrule
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 10)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(food-amount >= 1200)
	(or	(food-amount >= 2000)
		(gold-amount < 700))
	(or	(gold-amount < 1500)
		(food-amount >= 20000))
	(gold-amount < 10000)
	(commodity-selling-price food > 75)
	(can-sell-commodity food)
=>
	(sell-commodity food)
)

(defrule
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 10)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(wood-amount >= 1200)
	(or	(wood-amount >= 2000)
		(gold-amount < 700))
	(or	(gold-amount < 1500)
		(wood-amount >= 20000))
	(gold-amount < 10000)
	(commodity-selling-price wood > 75)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
)

(defrule
	(goal gl-strategy turkish-fast-imp)
	(up-compare-goal gl-current-age == gv-castle)
	(building-type-count-total siege-workshop > 0)
	(wood-amount >= 250)
	(commodity-selling-price wood >= 50)
	(gold-amount < 800)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
)

(defrule
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 10)
	(up-research-status c: ri-guilds != research-pending)
	(gold-amount < 250)
	(wood-amount > 800)
	(current-age-time > 10)
	(commodity-selling-price wood >= 50)
	(building-type-count-total barracks > 0)
	(building-type-count-total siege-workshop > 0)
	(nand	(up-compare-const gv-michi-style == 1)
		(game-time < 2100))
	(can-sell-commodity wood)
=>
	(up-sell-commodity c: wood c: 200)
	(chat-to-player my-player-number "Sell wood x2")
)

(defrule
	(current-age-time > 30)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(up-research-status c: ri-guilds != research-pending)
	(goal gl-current-age gv-imperial)
	(nand	(current-age-time < 300)
		(goal gl-strategy turkish-fast-imp))
	(or	(gold-amount < 50)
		(food-amount > 1400))
	(gold-amount < 800)
	(food-amount > 400)
	(can-sell-commodity food)
	(commodity-selling-price food >= 50)
=>
	(sell-commodity food)
	(chat-to-player my-player-number sell-food-chat)
)

(defrule
	(current-age-time > 30)
	(goal gl-current-age gv-imperial)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(up-research-status c: ri-guilds != research-pending)
	(nand	(goal gl-strategy eew-strategy)
		(up-compare-goal gl-eagles != heavy-eagles))
	(gold-amount < 150)
	(food-amount > 550)
	(commodity-selling-price food >= 40)
	(can-sell-commodity food)
=>
	(up-sell-commodity c: food c: 200)
	(chat-to-player my-player-number sell-food-chat)
)

(defrule
	(current-age-time > 30)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(up-research-status c: ri-guilds != research-pending)
	(gold-amount < 150)
	(food-amount > 800)
	(or	(and	(goal gl-current-age gv-imperial)
			(commodity-selling-price food >= 27))
		(food-amount > 2500))
	(can-sell-commodity food)
=>
	(up-sell-commodity c: food c: 200)
	(chat-to-player my-player-number sell-food-chat)
)

(defrule
	(current-age-time > 30)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(up-research-status c: ri-guilds != research-pending)
	(gold-amount < 200)
	(food-amount > 1000)
	(military-population > 60)
	(not	(player-in-game any-ally))
	(unit-type-count-total battering-ram-line < 4)
	(unit-type-count-total trebuchet-set < 2)
	(can-sell-commodity food)
=>
	(up-sell-commodity c: food c: 500)
	(chat-to-player my-player-number sell-food-chat)
)

#load-if-not-defined UP-MICHI-STYLE
(defrule
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 10)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(up-research-status c: ri-guilds != research-pending)
	(up-compare-goal gl-current-age != gv-feudal-up)
	(up-compare-goal gl-current-age != gv-castle-up)
	(current-age-time > 15)
	(wood-amount > 900); 800
	(or	(gold-amount < 500)
		(commodity-selling-price wood >= 65))
	(gold-amount < 600)
	(can-sell-commodity wood)
	(commodity-selling-price wood >= 55)
=>
	(up-sell-commodity c: wood c: 200)
)

(defrule
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 10)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(wood-amount > 1600)
	(current-age-time > 10)
	(up-research-status c: ri-guilds != research-pending)
	(up-compare-goal gl-current-age != gv-feudal-up)
	(up-compare-goal gl-current-age != gv-castle-up)
	(gold-amount < 800)
	(or	(commodity-selling-price wood >= 30)
		(wood-amount > 4000))
	(can-sell-commodity wood)
=>
	(up-sell-commodity c: wood c: 300)
)
#else
(defrule
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 10)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(goal gl-current-age gv-imperial)
	(up-research-status c: ri-guilds != research-pending)
	(wood-amount > 1100); 800
	(or	(gold-amount < 500)
		(commodity-selling-price wood >= 65))
	(gold-amount < 600)
	(can-sell-commodity wood)
	(commodity-selling-price wood >= 55)
	(game-time > 2040)
=>
	(up-sell-commodity c: wood c: 200)
)

(defrule
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 10)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(goal gl-current-age gv-imperial)
	(wood-amount > 1600); 1000
	(current-age-time > 10)
	(up-research-status c: ri-guilds != research-pending)
	(gold-amount < 800)
	(or	(commodity-selling-price wood >= 30)
		(wood-amount > 4000))
	(can-sell-commodity wood)
	(game-time > 2100)
=>
	(up-sell-commodity c: wood c: 300)
)
#end-if

(defrule
	(goal gl-current-age gv-imperial)
	(or	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
		(wood-amount >= 500))
	(nor	(goal gl-strategy eew-strategy)
		(and	(goal gl-strategy turkish-fast-imp)
			(current-age-time < 300)))
	(up-research-status c: ri-guilds != research-pending)
	(current-age-time > 45)
	(gold-amount < 100)
	(food-amount > 300)
	(can-sell-commodity food)
	(commodity-selling-price food >= 60)
=>
	(sell-commodity food)
)

(defrule
	(goal gl-current-age gv-imperial)
	(current-age-time > 45)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(up-research-status c: ri-guilds != research-pending)
	(gold-amount < 800)
	(or	(gold-amount < 400)
		(wood-amount < 400))
	(food-amount > 1000)
	(can-sell-commodity food)
	(commodity-selling-price food >= 50)
=>
	(sell-commodity food)
)

#load-if-not-defined CASTLE-AGE-END
(defrule
	(or	(up-compare-goal gl-current-age >= gv-castle-up)
		(or	(goal gl-strategy sling)
			(goal gl-strategy castle-sling)))
=>
	(up-jump-rule 3)
)

(defrule
	(dropsite-min-distance wood >= 0)
	(goal gl-current-age gv-castle)
	(or	(military-population > 35)
		(or	(wood-amount >= 550)
			(commodity-selling-price wood >= 63)))
	(wood-amount >= 400)
	(gold-amount < needed-castle-gold)
	(food-amount > needed-castle-food)
	(can-sell-commodity wood)
	(commodity-selling-price wood >= 55)
=>
	(sell-commodity wood)
	(chat-to-player my-player-number "Sell wood for up")
)

(defrule
	(goal gl-current-age gv-castle)
	(or	(military-population > 12)
		(or	(food-amount >= 1500)
			(and	(civilian-population > 70)
				(research-available imperial-age))))
	(gold-amount < needed-castle-gold)
	(food-amount >= very-high-castle-food)
	(can-sell-commodity food)
	(or	(commodity-selling-price food >= 62)
		(food-amount >= 1300))
=>
	(sell-commodity food)
	(chat-to-player my-player-number "Sell food for up")
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(up-compare-goal gl-strategy != heavy-krush)
	(goal gl-current-age gv-castle)
	(current-age != gv-maximum-age)
	(gold-amount >= very-high-castle-gold)
	(food-amount < needed-castle-food)
	(nand	(up-compare-const gv-michi-style == 1)
		(game-time < 1830))
	(can-buy-commodity food)
=>
	(buy-commodity food)
	(chat-to-player my-player-number "Buy food for up")
)
#end-if

(defrule
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 10)
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(goal gl-current-age gv-imperial)
	(unit-type-count-total spearman-line > 15)
	(research-available ri-halberdier)
	(up-research-status c: ri-guilds != research-pending)
	(gold-amount < 600)
	(can-sell-commodity wood)
	(commodity-selling-price wood >= 53)
	(nand	(up-compare-const gv-michi-style == 1)
		(game-time < 2160))
=>
	(sell-commodity wood)
	(chat-to-player my-player-number "Sell wood for halbs")
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(or	(current-age >= castle-age)
		(current-age-time > 90))
	(or	(food-amount > 2800)
		(commodity-selling-price food >= 25))
	(food-amount > 1100)
	(gold-amount < 200)
	(can-sell-commodity food)
=>
	(sell-commodity food)
)

(defrule
	(or	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
		(wood-amount > 300))
	(up-research-status c: ri-guilds != research-pending)
	(or	(gold-amount < 800)
		(food-amount >= 6000))
	(gold-amount < 1200)
	(food-amount >= 4000)
	(can-sell-commodity food)
=>
	(up-sell-commodity c: food c: 300)
	(chat-to-player my-player-number "Sell food x3")
)

(defrule
	(up-compare-flag gl-flag != wonder-build-attempt)
	(goal TC 0)
	(goal CASTLE 0)
	(up-research-status c: ri-guilds != research-pending)
	(up-compare-goal gl-current-age >= gv-feudal)
	(or	(or	(goal gl-strategy xbow-rush)
			(goal gl-strategy turkish-fast-imp))
		(and	(up-compare-goal gl-eew-strategy-type >= fast-imp)
			(building-type-count-total castle > 0)))
	(up-compare-goal gl-gathered-relics < 15)
	(commodity-selling-price stone >= 50)
	(can-sell-commodity stone)
=>
	(sell-commodity stone)
)

(defrule
	(up-compare-goal gl-strategy != turtle-rush)
	(up-compare-goal gl-current-age <= gv-feudal)
	(or	(and	(or	(gold-amount < 50)
				(food-amount > 450))
			(and	(gold-amount < 200)
				(stone-amount >= 200)))
		(up-compare-const preferred-TC-number == 1))
	(up-compare-const dock-number1 == 1); Not a pocket in migration
	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
	(can-sell-commodity stone)
=>
	(sell-commodity stone)
)

#load-if-defined SARACEN-CIV
(defrule
	(goal gl-strategy heavy-krush)
	(or	(and	(food-amount < 50)
			(commodity-buying-price food <= 200))
		(and	(food-amount < 100)
			(and	(gold-amount > 222)
				(commodity-buying-price food <= 160))))
	(can-buy-commodity food)
=>
	(buy-commodity food)
)

(defrule
	(goal gl-strategy heavy-krush)
	(goal gl-current-age gv-feudal)
	(gold-amount < 200)
	(or	(building-type-count-total stable > 0)
		(or	(building-type-count-total archery-range > 0)
			(building-type-count-total blacksmith > 0)))
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
)

(defrule
	(goal gl-strategy heavy-krush)
	(nand	(goal RAM 1)
		(wood-amount < 350))
	(wood-amount > 130)
	(up-compare-goal gl-current-age >= gv-feudal)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total stable > 1)
	(nand	(or	(goal SLING 3)
			(building-type-count-total town-center > 1))
		(building-type-count-total stable < 4))
	(commodity-selling-price wood >= 35)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
)

(defrule
	(goal gl-strategy heavy-krush)
	(up-compare-goal gl-current-age >= gv-castle)
	(wood-amount < 200)
	(or	(building-type-count-total stable < 2)
		(and	(building-type-count-total town-center > 1)
			(building-type-count-total stable < 4)))
	(can-buy-commodity wood)
=>
	(buy-commodity wood)
)
#end-if

#load-if-not-defined BRITON-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined JAPANESE-CIV
#load-if-not-defined PERSIAN-CIV

(defrule
	(strategic-number sn-allow-resource-spending != -1)
=>
	(up-jump-rule 3)
)

(defrule
	(not	(goal gl-strategy CA-rush))
	(strategic-number sn-allow-resource-spending == -1)
	(can-sell-commodity wood)
	(gold-amount < 1000)
	(commodity-selling-price wood >= 35)
=>
	(sell-commodity wood)
	(chat-to-player my-player-number "Sell wood for heresy")
)

(defrule
	(not	(goal gl-strategy CA-rush))
	(strategic-number sn-allow-resource-spending == -1)
	(can-sell-commodity food)
	(gold-amount < 1000)
	(commodity-selling-price food >= 50)
=>
	(sell-commodity food)
	(chat-to-player my-player-number "Sell food for heresy")
)

(defrule
	(up-compare-goal gl-wonder-build-attempt-stage != saving-resources)
	(up-compare-goal gl-strategy != CA-rush)
	(nand	(or	(goal gl-strategy fi-monk-rush)
			(up-compare-goal CASTLE != 0))
		(building-type-count-total castle < 1))
	(strategic-number sn-allow-resource-spending == -1)
	(can-sell-commodity stone)
	(gold-amount < 1000)
	(or	(commodity-selling-price stone >= 70)
		(goal CASTLE 0))
	(commodity-selling-price stone >= 50)
=>
	(sell-commodity stone)
	(chat-to-player my-player-number "Sell stone for heresy")
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

(defrule
	(goal CASTLE 0)
	(nand	(building-type-count-total castle < 1)
		(or	(goal gl-strategy gothic-boom)
			(or	(and	(or	(goal gl-strategy eew-strategy)
						(and	(civ-selected aztec)
							(goal gl-strategy default)))
					(gold-amount > 1500))
				(up-compare-goal gl-gathered-relics > 14))))
=>
	(up-jump-rule 8)
)

(defrule
	(civ-selected turkish)
	(goal gl-current-age gv-imperial)
	(goal gl-strategy default)
	(up-compare-goal gl-trade-unit-count-total > 40)
	(research-available my-unique-research)
	(unit-type-count-total bombard-cannon > 2)
	(strategic-number sn-allow-resource-spending > 5)
	(commodity-buying-price stone < 400)
	(or	(up-compare-goal gl-available-gold-amount > 1500)
		(commodity-buying-price stone < 300))
	(up-compare-goal gl-available-gold-amount > 1000)
	(stone-amount < 450)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
)

(defrule
	(civ-selected mongol)
	(goal gl-current-age gv-imperial)
	(goal gl-strategy default)
	(up-compare-goal gl-trade-unit-count-total > 40)
	(building-type-count-total castle < 4)
	(goal gl-advanced-infantry 0)
	(goal gl-advanced-cavalry 0)
	(strategic-number sn-allow-resource-spending > 5)
	(commodity-buying-price stone < 400)
	(or	(up-compare-goal gl-available-gold-amount > 1600)
		(commodity-buying-price stone < 300))
	(up-compare-goal gl-available-gold-amount > 1100)
	(stone-amount < castle-stone)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
)

(defrule
	(goal gl-current-age gv-imperial)
	(goal gl-strategy default)
	(up-compare-goal gl-trade-unit-count-total > 38)
	(building-type-count-total castle < 3)
	(population > almost-full-pop)
	(strategic-number sn-allow-resource-spending > 5)
	(dropsite-min-distance stone == -1)
	(commodity-buying-price stone < 400)
	(or	(gold-amount > 1300)
		(commodity-buying-price stone < 300))
	(gold-amount > 800)
	(stone-amount < castle-stone)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
)

(defrule
	(or	(goal gl-strategy castle-drop)
		(or	(goal gl-strategy gothic-boom)
			(and	(civ-selected gothic)
				(up-compare-goal gl-current-age >= gv-castle-up))))
	(up-compare-goal gl-current-age >= gv-castle)
	(building-type-count-total castle == 0)
	(commodity-buying-price stone < 200)
	(gold-amount > 400)
	(stone-amount < castle-stone)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
)

(defrule
	(strategic-number sn-allow-resource-spending != -1)
	(or	(and	(commodity-buying-price stone < 200)
			(building-type-count-total castle < 3))
		(and	(gold-amount > extra-gold-to-buy-castle)
			(up-compare-const gv-FFA-like-game == 0)))
	(or	(gold-amount > 1400)
		(commodity-buying-price stone < 140))
	(gold-amount > 800)
	(commodity-buying-price stone < 350)
	(stone-amount < castle-stone)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
)

(defrule
	(up-compare-goal CASTLE != 0)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(building-type-count-total castle < 2)
	(up-compare-goal gl-trade-unit-count-total > 35)
	(gold-amount > 600)
	(or	(gold-amount > 900)
		(commodity-buying-price stone < 250))
	(or	(gold-amount > 1800)
		(commodity-buying-price stone < 300))
	(commodity-buying-price stone < 400)
	(stone-amount < castle-stone)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
)

(defrule
	(goal gl-strategy default)
	(up-compare-goal CASTLE != 0)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(gold-amount > 500)
	(stone-amount > 400)
	(building-type-count-total castle < 2)
	(or	(building-type-count-total castle < 1)
		(commodity-buying-price stone < 190))
	(commodity-buying-price stone < 220)
	(stone-amount < castle-stone)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
)

(defrule
	(strategic-number sn-allow-resource-spending != -1)
	(building-type-count-total castle < 1)
	(gold-amount > 1100)
	(or	(gold-amount > 1400)
		(commodity-buying-price stone < 200))
	(or	(gold-amount > 2000)
		(commodity-buying-price stone < 300))
	(or	(gold-amount > 5000)
		(commodity-buying-price stone < 350))
	(stone-amount < castle-stone)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
)
#end-if

#end-if; DM

; =============== ANOTHER UNIT STANCE BACKUP

(defrule
	(up-compare-goal gl-attack-stance-switcher != 1)
	(strategic-number sn-unit-spreading2 < 1)
	(or	(up-projectile-detected projectile-fortification < 5000)
		(or	(up-projectile-detected projectile-town-center < 5000)
			(and	(death-match-game)
				(and	(game-time < 300)
					(game-time > 90)))))
	(up-compare-goal gl-early-raid != DUC-system)
	(up-timer-status 35 != timer-running)
=>
	(set-strategic-number sn-stance-reset-notice 1)
	(up-set-attack-stance -1 c: aggressive)
	(enable-timer 35 30)
)

; =============== CASTLE PUSH

(load "Barbarian\Castles")

; =============== THE WALL

(load "Barbarian\TheGreatWall")

; =============== CLOSE BUILD

(defrule
	(goal gl-barracks-build-priority -1)
	(goal gl-range-build-priority -1)
	(goal gl-stable-build-priority -1)
	(goal gl-workshop-build-priority -1)
	(goal gl-monastery-build-priority -1)
	(goal gl-market-build-priority -1)
	(goal gl-university-build-priority -1)
	(goal gl-blacksmith-build-priority -1)
	(goal gl-TC-build-priority -1)
	(goal gl-house-build-priority -1)
	(goal gl-dock-build-priority -1)
=>
	(up-jump-rule 26)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal2 g:= gl-my-maximum-town-size)
	(up-modify-goal temporary-goal2 c:- 4)
	(up-modify-goal temporary-goal2 c:max 10)
	(up-modify-goal temporary-goal2 c:min 30)
	(up-modify-goal temporary-goal7 g:= gl-TC-build-priority)
	(up-modify-goal temporary-goal7 g:+ gl-barracks-build-priority)
	(up-modify-goal temporary-goal7 g:+ gl-range-build-priority)
	(up-modify-goal temporary-goal7 g:+ gl-stable-build-priority)
	(up-modify-goal temporary-goal7 g:+ gl-workshop-build-priority)
	(up-modify-goal temporary-goal7 g:+ gl-monastery-build-priority)
	(up-modify-goal temporary-goal7 g:+ gl-market-build-priority)
	(up-modify-goal temporary-goal7 g:+ gl-university-build-priority)
	(up-modify-goal temporary-goal7 g:+ gl-blacksmith-build-priority)
	(up-modify-goal temporary-goal7 g:+ gl-house-build-priority)
	(up-modify-goal temporary-goal7 g:+ gl-dock-build-priority)
)

(defrule
	(true)
=>
	(set-goal temporary-goal8 10)
)

(defrule
	(up-compare-goal gl-TC-build-priority >= 0)
	(not	(can-build town-center))
=>
	(set-goal gl-TC-build-priority -1)
	(up-jump-rule 1)
)

(defrule
	(up-compare-goal gl-TC-build-priority > 0)
	(up-compare-goal gl-TC-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-TC-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-TC-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-TC-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-TC-build-priority g:>= gl-monastery-build-priority)
	(up-compare-goal gl-TC-build-priority g:>= gl-market-build-priority)
	(up-compare-goal gl-TC-build-priority g:>= gl-university-build-priority)
	(up-compare-goal gl-TC-build-priority g:>= gl-blacksmith-build-priority)
	(up-compare-goal gl-TC-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-TC-build-priority g:>= gl-dock-build-priority)
;	(can-build town-center)
=>
	(up-modify-sn sn-placement-zone-size g:= temporary-goal2)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: town-center)
	(set-goal gl-TC-build-priority -1)
	(set-goal gl-town-center-placed -1)
)

(defrule
	(up-compare-goal gl-barracks-build-priority >= 0)
	(not	(can-build barracks))
=>
	(set-goal gl-barracks-build-priority -1)
)

(defrule
	(up-compare-goal gl-barracks-build-priority g:>= gl-TC-build-priority)
	(up-compare-goal gl-barracks-build-priority > 0)
	(up-compare-goal gl-barracks-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-barracks-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-barracks-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-barracks-build-priority g:>= gl-monastery-build-priority)
	(up-compare-goal gl-barracks-build-priority g:>= gl-market-build-priority)
	(up-compare-goal gl-barracks-build-priority g:>= gl-university-build-priority)
	(up-compare-goal gl-barracks-build-priority g:>= gl-blacksmith-build-priority)
	(up-compare-goal gl-barracks-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-barracks-build-priority g:>= gl-dock-build-priority)
	(can-build barracks)
=>
	(up-modify-sn sn-placement-zone-size g:= temporary-goal2)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: barracks)
	(set-goal gl-barracks-build-priority -1)
)

(defrule
	(up-compare-goal gl-range-build-priority >= 0)
	(not	(can-build archery-range))
=>
	(set-goal gl-range-build-priority -1)
)

(defrule
	(up-compare-goal gl-range-build-priority g:>= gl-TC-build-priority)
	(up-compare-goal gl-range-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-range-build-priority > 0)
	(up-compare-goal gl-range-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-range-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-range-build-priority g:>= gl-monastery-build-priority)
	(up-compare-goal gl-range-build-priority g:>= gl-market-build-priority)
	(up-compare-goal gl-range-build-priority g:>= gl-university-build-priority)
	(up-compare-goal gl-range-build-priority g:>= gl-blacksmith-build-priority)
	(up-compare-goal gl-range-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-range-build-priority g:>= gl-dock-build-priority)
	(can-build archery-range)
=>
	(up-modify-sn sn-placement-zone-size g:= temporary-goal2)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: archery-range)
	(set-goal gl-range-build-priority -1)
)

(defrule
	(up-compare-goal gl-stable-build-priority >= 0)
	(not	(can-build stable))
=>
	(set-goal gl-stable-build-priority -1)
)

(defrule
	(up-compare-goal gl-stable-build-priority g:>= gl-TC-build-priority)
	(up-compare-goal gl-stable-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-stable-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-stable-build-priority > 0)
	(up-compare-goal gl-stable-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-stable-build-priority g:>= gl-monastery-build-priority)
	(up-compare-goal gl-stable-build-priority g:>= gl-market-build-priority)
	(up-compare-goal gl-stable-build-priority g:>= gl-university-build-priority)
	(up-compare-goal gl-stable-build-priority g:>= gl-blacksmith-build-priority)
	(up-compare-goal gl-stable-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-stable-build-priority g:>= gl-dock-build-priority)
	(can-build stable)
=>
	(up-modify-sn sn-placement-zone-size g:= temporary-goal2)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: stable)
	(set-goal gl-stable-build-priority -1)
)

(defrule
	(up-compare-goal gl-workshop-build-priority >= 0)
	(not	(can-build siege-workshop))
=>
	(set-goal gl-workshop-build-priority -1)
)

(defrule
	(up-compare-goal gl-workshop-build-priority g:>= gl-TC-build-priority)
	(up-compare-goal gl-workshop-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-workshop-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-workshop-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-workshop-build-priority > 0)
	(up-compare-goal gl-workshop-build-priority g:>= gl-monastery-build-priority)
	(up-compare-goal gl-workshop-build-priority g:>= gl-market-build-priority)
	(up-compare-goal gl-workshop-build-priority g:>= gl-university-build-priority)
	(up-compare-goal gl-workshop-build-priority g:>= gl-blacksmith-build-priority)
	(up-compare-goal gl-workshop-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-workshop-build-priority g:>= gl-dock-build-priority)
	(can-build siege-workshop)
=>
	(up-modify-sn sn-placement-zone-size g:= temporary-goal2)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: siege-workshop)
	(set-goal gl-workshop-build-priority -1)
)

(defrule
	(up-compare-goal gl-monastery-build-priority >= 0)
	(not	(can-build monastery))
=>
	(set-goal gl-monastery-build-priority -1)
)

(defrule
	(up-compare-goal gl-monastery-build-priority g:>= gl-TC-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-monastery-build-priority > 0)
	(up-compare-goal gl-monastery-build-priority g:>= gl-market-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-university-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-blacksmith-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-dock-build-priority)
	(can-build monastery)
=>
	(up-modify-sn sn-placement-zone-size g:= temporary-goal2)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: monastery)
	(set-goal gl-monastery-build-priority -1)
)

(defrule
	(up-compare-goal gl-market-build-priority >= 0)
	(not	(can-build market))
=>
	(set-goal gl-market-build-priority -1)
)

(defrule
	(up-compare-goal gl-market-build-priority g:>= gl-TC-build-priority)
	(up-compare-goal gl-market-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-market-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-market-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-market-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-market-build-priority > 0)
	(up-compare-goal gl-market-build-priority g:>= gl-monastery-build-priority)
	(up-compare-goal gl-market-build-priority g:>= gl-university-build-priority)
	(up-compare-goal gl-market-build-priority g:>= gl-blacksmith-build-priority)
	(up-compare-goal gl-market-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-market-build-priority g:>= gl-dock-build-priority)
	(can-build market)
=>
	(up-modify-sn sn-placement-zone-size g:= temporary-goal2)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: market)
	(set-goal gl-market-build-priority -1)
)

(defrule
	(up-compare-goal gl-university-build-priority >= 0)
	(not	(can-build university))
=>
	(set-goal gl-university-build-priority -1)
)

(defrule
	(up-compare-goal gl-university-build-priority g:>= gl-TC-build-priority)
	(up-compare-goal gl-university-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-university-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-university-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-university-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-university-build-priority g:>= gl-monastery-build-priority)
	(up-compare-goal gl-university-build-priority g:>= gl-market-build-priority)
	(up-compare-goal gl-university-build-priority > 0)
	(up-compare-goal gl-university-build-priority g:>= gl-blacksmith-build-priority)
	(up-compare-goal gl-university-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-university-build-priority g:>= gl-dock-build-priority)
	(can-build university)
=>
	(up-modify-sn sn-placement-zone-size g:= temporary-goal2)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: university)
	(set-goal gl-university-build-priority -1)
)

(defrule
	(up-compare-goal gl-blacksmith-build-priority >= 0)
	(not	(can-build blacksmith))
=>
	(set-goal gl-blacksmith-build-priority -1)
)

(defrule
	(up-compare-goal gl-blacksmith-build-priority g:>= gl-TC-build-priority)
	(up-compare-goal gl-blacksmith-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-blacksmith-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-blacksmith-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-blacksmith-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-blacksmith-build-priority g:>= gl-monastery-build-priority)
	(up-compare-goal gl-blacksmith-build-priority g:>= gl-market-build-priority)
	(up-compare-goal gl-blacksmith-build-priority g:>= gl-university-build-priority)
	(up-compare-goal gl-blacksmith-build-priority > 0)
	(up-compare-goal gl-blacksmith-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-blacksmith-build-priority g:>= gl-dock-build-priority)
	(can-build blacksmith)
=>
	(up-modify-sn sn-placement-zone-size g:= temporary-goal2)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: blacksmith)
	(set-goal gl-blacksmith-build-priority -1)
)

(defrule
	(up-compare-goal gl-house-build-priority >= 0)
	(not	(can-build-with-escrow house))
=>
	(set-goal gl-house-build-priority -1)
)

(defrule
	(or	(and	(goal TSA 0)
			(up-compare-goal gl-enemy-units-in-town > 1))
		(or	(goal gl-patrol-defence patrol-on)
			(or	(or	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
					(up-compare-goal gl-map-wood-percentage > 25))
				(or	(up-compare-goal gl-target-player-distance < 45)
					(or	(game-time > 1800)
						(map-type custom))))))
=>
	(set-goal temporary-goal8 0)
)

(defrule
	(up-compare-goal gl-house-build-priority g:>= gl-TC-build-priority)
	(up-compare-goal gl-house-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-house-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-house-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-house-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-house-build-priority g:>= gl-monastery-build-priority)
	(up-compare-goal gl-house-build-priority g:>= gl-market-build-priority)
	(up-compare-goal gl-house-build-priority g:>= gl-university-build-priority)
	(up-compare-goal gl-house-build-priority g:>= gl-blacksmith-build-priority)
	(up-compare-goal gl-house-build-priority > 0)
	(up-compare-goal gl-house-build-priority g:>= gl-dock-build-priority)
	(can-build-with-escrow house)
=>
;	(up-modify-sn sn-placement-zone-size g:= temporary-goal2)
;	(up-set-placement-data my-player-number -1 c: 0)
	(up-modify-sn sn-placement-zone-size g:= gl-my-maximum-town-size)
	(up-set-placement-data my-player-number -1 g: temporary-goal8)
	(up-build place-control gl-escrow-state c: house)
	(set-goal gl-house-build-priority -1)
)

(defrule
	(up-compare-goal gl-dock-build-priority >= 0)
	(not	(can-build dock))
=>
	(set-goal gl-dock-build-priority -1)
)

(defrule
	(up-compare-goal gl-dock-build-priority g:>= gl-TC-build-priority)
	(up-compare-goal gl-dock-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-dock-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-dock-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-dock-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-dock-build-priority g:>= gl-monastery-build-priority)
	(up-compare-goal gl-dock-build-priority g:>= gl-market-build-priority)
	(up-compare-goal gl-dock-build-priority g:>= gl-university-build-priority)
	(up-compare-goal gl-dock-build-priority g:>= gl-blacksmith-build-priority)
	(up-compare-goal gl-dock-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-dock-build-priority > 0)
	(can-build dock)
=>
	(build dock)
	(set-goal gl-dock-build-priority -1)
)

(defrule
	(up-compare-goal temporary-goal7 != -11)
=>
	(up-jump-rule -26)
)

; =============== FARMING (LOWER PRIORITY)

(defrule
	(up-compare-goal gl-farm-function > 0)
	(goal gl-farming 1)
	(up-compare-flag gl-flag != farm-dropped)
	(can-build farm)
=>
	(up-get-rule-id temporary-goal4)
	(up-modify-goal temporary-goal4 c:+ 1)
	(up-jump-direct g: gl-farm-function)
)

; =============== WALL REPAIR + MILLING SECOND FORAGE

#load-if-not-defined FORTRESS-MAP
#load-if-not-defined DEATH-MATCH
#load-if-not-defined MIGRATION-MAP
(defrule
	(or	(and	(up-compare-goal gl-tower-up != 1)
			(goal gl-tower-defence -1))
		(and	(goal gl-tower-defence 1)
			(or	(up-compare-goal threat-time < 15000); Don't try to build towers if not safe
				(or	(and	(goal gl-current-age gv-feudal-up)
						(stone-amount < 225))
					(up-pending-objects c: watch-tower > 0)))))
=>
	(up-jump-rule 12)
)

(defrule
	(up-pending-objects c: watch-tower > 0)
=>
	(set-goal gl-tower-up -1)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(set-goal temporary-goal mining-camp)
	(set-goal temporary-goal2 2)
	(set-goal temporary-goal3 300)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal7 0)
	(set-goal temporary-goal8 0)
	(up-get-point position-mirror gl-saved-point-x)
	(up-get-point-distance gl-position-self-x gl-saved-point-x temporary-goal5)
	(up-modify-goal temporary-goal5 c:+ 4)
)

(defrule
	(players-building-count target-player > 0)
=>
	(up-get-point position-target gl-saved-point-x)
	(up-get-point-distance gl-position-self-x gl-saved-point-x temporary-goal5)
	(up-modify-goal temporary-goal5 c:+ 4)
)

(defrule
	(up-find-local g: temporary-goal c: 1)
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-get-point-distance gl-point-x gl-saved-point-x temporary-goal4)
	(set-goal temporary-goal8 1)
	(up-reset-search 1 1 1 1)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 6)
	(up-find-local c: watch-tower c: 1)
)

(defrule
	(up-compare-goal temporary-goal4 g:< temporary-goal3)
	(not	(up-set-target-object search-local c: 0))
	(goal temporary-goal8 1)
=>
	(up-lerp-tiles gl-temporary-point-x gl-position-self-x g: temporary-goal2)
	(up-copy-point gl-temporary-point-x gl-point-x)
	(up-modify-goal temporary-goal3 g:= temporary-goal4)
)

(defrule
	(goal temporary-goal7 0)
	(goal temporary-goal8 1)
=>
	(set-goal temporary-goal8 0)
	(up-full-reset-search)
	(up-modify-goal temporary-goal7 c:+ 1)
	(up-jump-rule -4)
)

(defrule
	(up-compare-goal temporary-goal7 > 0)
	(goal temporary-goal8 1)
=>
	(set-goal temporary-goal8 0)
	(up-full-reset-search)
	(up-find-local g: temporary-goal g: temporary-goal7)
	(up-reset-search 0 1 0 0)
	(up-modify-goal temporary-goal7 c:+ 1)
	(up-jump-rule -5)
)

(defrule
	(goal temporary-goal mining-camp)
=>
	(set-goal temporary-goal7 0)
	(set-goal temporary-goal8 0)
	(set-goal temporary-goal lumber-camp)
	(up-jump-rule -6)
)

(defrule
	(up-compare-goal temporary-goal3 < 300)
	(or	(up-compare-goal temporary-goal3 g:< temporary-goal5)
		(and	(player-human focus-player)
			(and	(goal temporary-goal8 0)
				(goal temporary-goal6 1))))
	(up-pending-placement c: watch-tower)
=>
	(up-set-target-point gl-temporary-point-x)
	(up-jump-rule 42)
)

(defrule
	(up-compare-goal temporary-goal3 < 300)
	(or	(up-compare-goal temporary-goal3 g:< temporary-goal5)
		(and	(player-human focus-player)
			(and	(goal temporary-goal8 0)
				(goal temporary-goal6 1))))
	(can-build watch-tower)
=>
	(up-set-target-point gl-temporary-point-x)
	(set-strategic-number sn-placement-zone-size 3)
	(up-build place-point 0 c: watch-tower)
	(up-jump-rule 41)
)

(defrule
	(goal temporary-goal lumber-camp)
=>
	(set-goal temporary-goal mill)
	(set-goal temporary-goal2 4)
	(set-goal temporary-goal6 1)
	(set-goal temporary-goal7 0)
	(set-goal temporary-goal8 0)
	(up-jump-rule -9)
)

(defrule
	(can-build watch-tower)
=>
	(set-strategic-number sn-placement-zone-size 3)
	(up-set-placement-data my-player-number -1 c: 14)
	(up-build place-control 0 c: watch-tower)
)
#else
(defrule
	(up-compare-goal gl-migration-progress <= 4)
=>
	(up-full-reset-search)
	(up-filter-include -1 -1 -1 off-mainland)
	(up-find-local c: villager-class c: 1)
	(up-get-search-state gl-local-total)
)

(defrule
	(up-compare-goal gl-migration-progress <= 4)
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-lerp-tiles gl-point-x gl-position-center-x c: 10)
	(up-set-target-point gl-point-x)
	(up-jump-rule 39)
)
#end-if

(defrule
	(or	(game-time > 2400)
		(or	(and	(or	(goal gl-strategy trush)
					(goal gl-strategy wall-boom))
				(up-compare-goal gl-current-age >= gv-feudal))
			(and	(or	(goal gl-strategy trush-push)
					(or	(goal gl-strategy castle-push)
						(goal gl-strategy-type FI2)))
				(up-compare-goal gl-current-age >= gv-feudal-up))))
=>
	(up-jump-rule 38)
)

(defrule
	(goal gl-controlled-forward-castle placed-forward)
=>
	(up-jump-rule 37)
)

(defrule
	(strategic-number sn-town-center-start == 0)
	(up-compare-goal gl-nomad-wood-point-x >= 0)
	(building-type-count-total lumber-camp == 0)
	(building-type-count-total town-center == 0)
	(not	(can-build town-center))
	(can-build lumber-camp)
=>
	(up-set-target-point gl-nomad-wood-point-x)
	(set-strategic-number sn-placement-zone-size 6)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(up-build place-point 0 c: lumber-camp)
	(enable-timer 10 5)
)

(defrule
	(strategic-number sn-town-center-start == 0)
	(up-compare-goal gl-nomad-wood-point-x >= 0)
	(building-type-count-total town-center == 0)
	(can-build town-center)
=>
	(up-set-target-point gl-nomad-wood-point-x)
	(set-strategic-number sn-placement-zone-size 6)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-town-center-placement lumber-camp)
	(up-build place-point 0 c: town-center)
	(enable-timer 10 5)
)

(defrule
	(strategic-number sn-town-center-start == 0)
=>
	(up-set-target-point gl-nomad-wood-point-x)
	(up-jump-rule 34)
)

(defrule
	(game-time < 16)
	(up-gaia-type-count c: sheep > 0); Can false trigger but the map has sheep anyway, so safe to build 2nd house
	(up-pending-objects c: house == 1)
	(unit-type-count villager-builder > 1)
	(or	(can-build house)
		(up-pending-placement c: house))
=>
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-lerp-tiles gl-point-x gl-position-self-x c: -2)
	(up-set-target-point gl-point-x)
)

(defrule
	(game-time < 12)
	(up-gaia-type-count c: sheep > 0)
	(up-pending-objects c: house == 1)
	(unit-type-count villager-builder > 1)
	(up-set-target-object search-local c: 0)
	(can-build house)
=>
	(up-assign-builders c: house c: 1)
	(set-strategic-number sn-placement-zone-size 3)
	(up-build place-point 0 c: house)
	(up-jump-rule 32)
)

(defrule
	(game-time < 16)
	(up-gaia-type-count c: sheep > 0)
	(up-pending-objects c: house == 1)
	(unit-type-count villager-builder > 1)
	(up-pending-placement c: house)
=>
	(up-jump-rule 31)
)

(defrule
	(current-age == feudal-age)
	(up-compare-goal gl-trush-tower-order >= 203)
	(up-compare-goal gl-trush-tower-order <= 210)
=>
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: 35 c: -1)
	(up-find-local c: watch-tower c: 1)
)

(defrule
	(current-age == feudal-age)
	(up-compare-goal gl-trush-tower-order >= 203)
	(up-compare-goal gl-trush-tower-order <= 210)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-garrison-count >= 1)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 4)
	(up-find-local c: wall-class c: 240)
	(up-target-point 0 action-delete -1 -1); Villager stuck
	(up-assign-builders c: palisade-wall c: -1)
	(set-goal gl-trush-tower-order 211)
)

(defrule
	(current-age == feudal-age)
	(up-compare-goal gl-trush-tower-order >= 203)
	(up-compare-goal gl-trush-tower-order <= 210)
	(goal TSA 0)
=>
	(up-assign-builders c: palisade-wall c: -1)
	(set-goal gl-trush-tower-order 211)
)

(defrule
	(current-age == feudal-age)
	(goal TSA 1)
	(up-compare-goal gl-trush-tower-order >= 201)
	(up-compare-goal gl-trush-tower-order < 210)
=>
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: 35 c: -1)
	(up-find-local c: watch-tower c: 1)
)

(defrule
	(goal TSA 1)
	(up-compare-goal gl-trush-tower-order >= 201)
	(up-compare-goal gl-trush-tower-order < 210)
	(or	(up-pending-objects c: palisade-wall > 0)
		(or	(goal gl-trush-tower-order 201)
			(up-pending-objects c: watch-tower > 0)))
=>
	(enable-timer 16 2)
	(up-modify-goal gl-trush-tower-order c:max 202)
)

(defrule
	(up-timer-status 16 == timer-running)
=>
	(up-jump-rule 1)
)

(defrule
	(current-age == feudal-age)
	(goal TSA 1)
	(up-compare-goal gl-trush-tower-order >= 202)
	(up-compare-goal gl-trush-tower-order < 210)
	(unit-type-count dead-builder1 < 1)
	(unit-type-count dead-builder2 < 1)
	(up-set-target-object search-local c: 0)
	(up-pending-objects c: palisade-wall < 1)
	(up-can-build 0 c: palisade-wall)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(set-strategic-number sn-placement-zone-size 1)
	(up-build place-point 0 c: palisade-wall)
	(up-modify-goal gl-trush-tower-order c:+ 1)
	(up-jump-rule 24)
)

(defrule
	(goal gl-current-age gv-feudal)
	(goal TSA 1)
	(up-compare-goal gl-trush-tower-order >= 202)
	(up-compare-goal gl-trush-tower-order <= 210)
	(up-set-target-object search-local c: 0)
	(up-pending-placement c: palisade-wall)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-jump-rule 23)
)

(defrule
	(up-compare-goal gl-trush-tower-order != 100)
	(up-compare-goal gl-trush-tower-order != 200)
	(strategic-number sn-gold-gatherer-percentage > 0)
	(dropsite-min-distance gold > 4)
	(dropsite-min-distance gold < 30)
	(goal gl-mining-camp-notice 17349)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 30)
	(up-find-remote c: gold-mine c: 1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(up-compare-goal gl-trush-tower-order != 100)
	(up-compare-goal gl-trush-tower-order != 200)
	(strategic-number sn-gold-gatherer-percentage > 0)
	(dropsite-min-distance gold > 4)
	(dropsite-min-distance gold < 30)
	(goal gl-mining-camp-notice 17349)
	(up-pending-placement c: mining-camp)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-jump-rule 21)
)

(defrule
	(up-compare-goal gl-trush-tower-order != 100)
	(up-compare-goal gl-trush-tower-order != 200)
	(strategic-number sn-stone-gatherer-percentage > 0)
	(dropsite-min-distance gold < 5)
	(dropsite-min-distance stone > 4)
	(dropsite-min-distance stone < 30)
	(goal gl-mining-camp-notice 17348)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 30)
	(up-find-remote c: stone-mine c: 1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(up-compare-goal gl-trush-tower-order != 100)
	(up-compare-goal gl-trush-tower-order != 200)
	(strategic-number sn-stone-gatherer-percentage > 0)
	(dropsite-min-distance gold < 5)
	(dropsite-min-distance stone > 4)
	(dropsite-min-distance stone < 30)
	(goal gl-mining-camp-notice 17348)
	(up-pending-placement c: mining-camp)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-jump-rule 19)
)

(defrule
	(up-compare-goal gl-trush-tower-order != 100)
	(up-compare-goal gl-trush-tower-order != 200)
=>
	(set-goal temporary-goal6 24)
	(set-goal temporary-goal7 forage-class)
	(set-goal temporary-goal8 mill)
	(up-set-target-point gl-position-self-x)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
)

#load-if-defined ISLANDS-MAP
(defrule
	(game-time < 2360)
	(up-pending-objects c: mining-camp < 1)
	(building-type-count town-center > 0)
	(civilian-population > 50)
	(or	(and	(can-build mining-camp)
			(civilian-population > 40))
		(up-pending-placement c: mining-camp))
	(game-time > 1700)
=>
	(set-goal temporary-goal6 43)
	(set-goal temporary-goal7 gold-mine)
	(set-goal temporary-goal8 mining-camp)
	(up-jump-rule 3)
)
#else
(defrule
	(game-time < 2360)
	(up-pending-objects c: mining-camp < 1)
	(building-type-count town-center > 0)
	(civilian-population > 70)
	(or	(and	(can-build mining-camp)
			(civilian-population > 80))
		(up-pending-placement c: mining-camp))
	(game-time > 2040)
=>
	(set-goal temporary-goal6 43)
	(set-goal temporary-goal7 gold-mine)
	(set-goal temporary-goal8 mining-camp)
	(up-jump-rule 2)
)
#end-if
#else; DM
(defrule
	(game-time < 480)
	(up-pending-objects c: mining-camp < 1)
	(building-type-count town-center > 0)
	(civilian-population > 15)
	(or	(and	(can-build mining-camp)
			(civilian-population > 10))
		(up-pending-placement c: mining-camp))
	(game-time > 420)
=>
	(set-goal temporary-goal6 43)
	(set-goal temporary-goal7 gold-mine)
	(set-goal temporary-goal8 mining-camp)
	(up-jump-rule 3)
)

(defrule
	(game-time < 1200)
	(game-time > 480)
	(nand	(goal gl-DRUSH YES)
		(up-compare-goal gl-DRUSH-CONTROL != MILITIAS-DONE))
	(building-type-count mill < 2)
	(up-pending-objects c: mill == 0)
	(or	(unit-type-count villager-forager > 0)
		(unit-type-count villager-farmer > 0))
=>
	(set-goal temporary-goal6 24)
	(set-goal temporary-goal7 forage-class)
	(set-goal temporary-goal8 mill)
	(up-set-target-point gl-position-self-x)
	(up-jump-rule 2)
)
#end-if

(defrule
	(or	(and	(goal gl-DRUSH YES)
			(up-compare-goal gl-DRUSH-CONTROL != MILITIAS-DONE))
		(and	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
			(up-compare-goal gl-current-age <= gv-feudal)))
=>
	(up-jump-rule 13)
)

(defrule
	(or	(and	(up-compare-goal gl-my-villager-count < 25)
			(or	(up-compare-goal gl-my-villager-count < 22)
				(up-compare-goal gl-strategy-type <= controlled-flush)))
		(or	(game-time > 1080)
			(or	(building-type-count mill != 1)
				(or	(up-pending-objects c: mill > 0)
					(or	(goal gl-trush-tower-order 100)
						(goal gl-trush-tower-order 200))))))
=>
	(up-jump-rule 6)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-filter-distance c: -1 g: temporary-goal6)
	(up-find-remote g: temporary-goal7 c: 20)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 7); 6
	(up-find-local g: temporary-goal8 c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal5 g:= gl-remote-total)
	(up-modify-goal temporary-goal4 g:= gl-remote-total)
	(set-goal temporary-goal3 1)
)

(defrule
	(up-compare-goal temporary-goal5 > 0)
	(goal gl-local-last 1)
=>
	(up-set-target-object search-remote g: temporary-goal3)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-reset-search 1 1 0 0)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-modify-goal temporary-goal5 c:- 1)
	(up-find-local g: temporary-goal8 c: 1)
	(up-get-search-state gl-local-total)
	(up-jump-rule -1)
)

(defrule
	(goal temporary-goal8 mining-camp)
	(up-compare-goal temporary-goal4 > 0)
	(goal gl-local-last 0)
	(up-pending-objects c: mining-camp < 1)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-placement-zone-size 5)
	(up-set-target-point gl-point-x)
	(up-build place-point 0 c: mining-camp)
	(disable-self)
)

(defrule
	(goal temporary-goal8 mill)
	(or	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
		(up-compare-goal gl-current-age >= gv-feudal-up))
	(up-compare-goal temporary-goal4 > 0)
	(goal gl-local-last 0)
	(up-pending-objects c: mill < 1)
	(can-build mill)
=>
	(set-strategic-number sn-preferred-mill-placement 0)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-placement-zone-size 5)
	(up-set-target-point gl-point-x)
	(up-build place-point 0 c: mill)
;	(chat-to-player my-player-number "Mill 2nd forage")
	(up-modify-sn sn-sheep-count c:+ 2); Less farms are required with 2 forage bushes
	(disable-self)
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(goal gl-local-last 0)
=>
	(up-set-target-point gl-point-x)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-jump-rule 10)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(or	(game-time < 360)
		(or	(goal gl-resources-on-map plenty)
			(or	(game-time > 1080)
				(or	(building-type-count mill != 1)
					(or	(up-pending-objects c: mill > 0)
						(or	(goal gl-trush-tower-order 100)
							(or	(goal gl-trush-tower-order 200)
								(up-compare-goal gl-deer-luring > 0))))))))
=>
	(up-jump-rule 5)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 24)
	(up-find-remote c: deer c: 20)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 14)
	(up-find-local c: mill c: 1)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal5 g:= gl-remote-total)
	(up-modify-goal temporary-goal4 g:= gl-remote-total)
	(set-goal temporary-goal3 1)
)

(defrule
	(up-compare-goal temporary-goal5 > 0)
	(or	(up-compare-goal gl-remote-last < 5)
		(goal gl-local-last 1))
=>
	(up-set-target-object search-remote g: temporary-goal3)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-reset-search 1 1 1 0)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-modify-goal temporary-goal5 c:- 1)
	(up-find-remote c: deer c: 5)
	(up-find-local c: mill c: 1)
	(up-get-search-state gl-local-total)
	(up-jump-rule -1)
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(goal gl-remote-last 5)
	(goal gl-local-last 0)
	(up-pending-objects c: mill < 1)
	(can-build mill)
=>
	(set-strategic-number sn-preferred-mill-placement 1)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-placement-zone-size 5)
	(up-set-target-point gl-point-x)
	(up-build place-point 0 c: mill)
	(chat-to-player my-player-number "Mill large deer patch")
	(up-modify-sn sn-sheep-count c:+ 3)
	(up-modify-goal gl-lured-deer-count c:+ 1)
	(disable-self)
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(goal gl-remote-last 5)
	(goal gl-local-last 0)
=>
	(up-set-target-point gl-point-x)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-jump-rule 4)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(or	(building-type-count wall-class == 0)
		(death-match-game))
=>
	(up-jump-rule 2)
)

(defrule
	(timer-triggered 15); Not a real solution to building interval issue
	(game-time > 600)
	(or	(up-compare-goal gl-deer-luring <= -1)
		(game-time >= deer-luring-stop-time2))
	(current-age <= feudal-age)
	(up-compare-goal gl-candidate2-point-x > 0)
	(up-compare-goal gl-candidate1-point-x <= -1); Other wall-repairing is inactive
	(up-pending-objects c: palisade-wall < 1)
	(up-can-build 0 c: palisade-wall)
=>
	(up-assign-builders c: wall-class c: 1)
	(up-build-line gl-candidate2-point-x gl-candidate2-point-x c: palisade-wall)
	(set-goal gl-candidate2-point-x -1)
	(disable-self)
)

(defrule
	(timer-triggered 15)
	(or	(up-compare-goal gl-boar-hunting-stage <= 1)
		(up-compare-goal gl-boar-hunting-stage >= 4))
	(up-compare-goal gl-rush-suitability-on-map < GOOD)
	(current-age <= feudal-age)
	(up-compare-goal gl-strategy != wall-boom)
	(up-compare-goal gl-candidate1-point-x > 0)
	(building-type-count-total palisade-wall < 4)
	(up-pending-objects c: palisade-wall < 1)
	(up-can-build 0 c: palisade-wall)
=>
	(up-assign-builders c: wall-class c: 1)
	(up-build-line gl-candidate1-point-x gl-candidate1-point-x c: palisade-wall)
	(set-goal gl-candidate1-point-x -1)
)
#end-if

(defrule
	(up-compare-goal gl-controlled-forward-castle < placed-forward)
=>
	(up-jump-rule 8)
)

(defrule
	(stone-amount < castle-stone)
=>
	(set-goal gl-controlled-forward-castle NO)
)

(defrule
	(goal gl-controlled-forward-castle next-to-wall)
=>
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(set-goal temporary-goal 20)
	(up-get-point position-target gl-point-x)
	(up-lerp-tiles gl-point-x gl-position-self-x c: 7)
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 g: temporary-goal)
)

(defrule
	(goal gl-controlled-forward-castle next-to-wall)
	(up-find-remote c: wall-class c: 1)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-lerp-tiles gl-point-x gl-position-self-x c: 3)
)

(defrule
	(goal gl-controlled-forward-castle next-to-wall)
	(not	(up-set-target-object search-remote c: 0))
	(up-compare-goal temporary-goal < 100)
=>
	(up-modify-goal temporary-goal c:+ 1)
	(up-filter-distance c: -1 g: temporary-goal)
	(up-jump-rule -2)
)

(defrule
	(goal gl-controlled-forward-castle next-to-wall)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)

(defrule
	(goal TSA 1)
	(goal gl-controlled-forward-castle placed-forward)
=>
	(up-get-point position-target gl-point-x)
	(up-lerp-tiles gl-point-x gl-position-self-x c: 2)
)

(defrule
	(up-compare-goal TSA != 1)
	(goal gl-controlled-forward-castle placed-forward)
=>
	(up-full-reset-search)
	(up-find-local c: castle c: 1)
	(up-find-local c: town-center c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-lerp-tiles gl-point-x gl-position-self-x c: -4)
)

(defrule
	(up-compare-goal gl-controlled-forward-castle >= placed-forward)
=>
	(up-set-target-point gl-point-x)
)

#load-if-defined DEATH-MATCH
(defrule
	(game-time >= 300)
=>
	(up-jump-rule 5)
)

(defrule
	(game-time < 300)
=>
	(set-goal temporary-goal 0)
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 1)
	(up-find-local c: town-center c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)

)

(defrule
	(or	(and	(strategic-number sn-extra-builder-notice == 1)
			(building-type-count stable == 0))
		(or	(and	(strategic-number sn-extra-builder-notice == 2)
				(building-type-count barracks == 0))
			(and	(strategic-number sn-extra-builder-notice == 3)
				(building-type-count archery-range == 0))))
=>
	(set-goal temporary-goal 1)
	(up-reset-search 1 1 1 1)
	(up-find-local c: villager-class c: 2)
)

(defrule
	(goal temporary-goal 1)
	(up-set-target-object search-local c: 1)
=>
	(up-get-point position-object gl-saved-point-x)
	(up-full-reset-search)
	(up-filter-include -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 1)
	(set-goal temporary-goal 2)
)

(defrule
	(goal temporary-goal 2)
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-object-point-x)
	(up-get-point-distance gl-point-x gl-object-point-x temporary-goal3)
)

(defrule
	(goal temporary-goal 2)
	(up-set-target-object search-local c: 0)
	(up-point-distance gl-saved-point-x gl-object-point-x g:> temporary-goal3)
=>
	(up-set-target-point gl-saved-point-x)
)

(defrule
	(game-time >= 300)
	(goal gl-castle-placed placed-to-side1)
	(up-pending-placement c: castle)
=>
	(up-get-point position-target gl-saved-point-x)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-cross-tiles gl-point-x gl-saved-point-x c: 24)
	(up-lerp-tiles gl-point-x gl-saved-point-x c: 5)
	(up-set-target-point gl-point-x)
)

(defrule
	(game-time >= 300)
	(goal gl-castle-placed placed-to-side2)
	(up-pending-placement c: castle)
=>
	(up-get-point position-target gl-saved-point-x)
	(up-copy-point gl-point-x gl-position-self-x)
	(up-cross-tiles gl-point-x gl-saved-point-x c: -24)
	(up-lerp-tiles gl-point-x gl-saved-point-x c: 5)
	(up-set-target-point gl-point-x)
)
#end-if

; ============== ....

(defrule
	(goal gl-modern-build-order 1)
	(or	(game-time > 540)
		(up-compare-goal gl-current-age >= gv-feudal-up))
=>
	(up-gather-inside c: town-center c: 0)
	(set-goal gl-modern-build-order 1000)
)

(defrule
	(goal gl-modern-build-order 1000)
=>
;	(set-strategic-number sn-maximum-food-drop-distance default-food-drop-distance)
;	(set-strategic-number sn-maximum-wood-drop-distance 6)
;	(set-strategic-number sn-maximum-gold-drop-distance 6)
;	(set-strategic-number sn-maximum-stone-drop-distance 6)
;	(set-strategic-number sn-maximum-hunt-drop-distance 17)
;	(up-assign-builders c: town-center-foundation c: 4)
;	(up-assign-builders c: house c: 1)
;	(up-assign-builders c: farm c: 1)
;	(up-assign-builders c: lumber-camp c: 1)
;	(up-assign-builders c: mining-camp c: 1)
;	(up-assign-builders c: mill c: 1)
;	(up-assign-builders c: dock c: 1)
;	(up-assign-builders c: barracks c: 1)
	(set-goal gl-modern-build-order -1)
	(do-nothing)
)

(defrule
	(up-compare-goal gl-modern-build-order < 0)
=>
	(up-jump-rule 53)
)

(defrule
	(true)
=>
	(set-goal temporary-goal -1)
)

(defrule
	(or	(up-set-target-by-id g: 451)
		(up-set-target-by-id g: 452))
=>
	(up-copy-point gl-point3-x gl-position-self-x)
	(up-add-point gl-point3-x gl-point3-x c: 99)
	(up-set-target-by-id g: 451)
	(up-get-object-data object-data-precise-x gl-point-x)
	(up-get-object-data object-data-precise-y gl-point-y)
	(up-add-point gl-point-x gl-point3-x c: -1)
	(up-set-target-by-id g: 452)
	(up-get-object-data object-data-precise-x gl-point2-x)
	(up-get-object-data object-data-precise-y gl-point2-y)
	(up-add-point gl-point2-x gl-point3-x c: -1)
	(set-goal temporary-goal 4)
)

(defrule
	(up-set-target-by-id g: 451)
	(or	(and	(up-compare-goal gl-point-x >= -200)
			(and	(up-compare-goal gl-point-x <= 200)
				(and	(up-compare-goal gl-point-y >= -200)
					(up-compare-goal gl-point-y <= 200))))
		(up-object-data object-data-hitpoints == 0))
=>
	(set-goal temporary-goal 5)
)

(defrule
	(up-set-target-by-id g: 452)
	(or	(and	(up-compare-goal gl-point2-x >= -200)
			(and	(up-compare-goal gl-point2-x <= 200)
				(and	(up-compare-goal gl-point2-y >= -200)
					(up-compare-goal gl-point2-y <= 200))))
		(up-object-data object-data-hitpoints == 0))
=>
	(set-goal temporary-goal 5)
)

(defrule
	(goal temporary-goal 5)
=>
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 5)
	(up-find-local c: sheep c: 2)
	(up-filter-status c: status-down c: list-active)
	(up-find-resource c: sheep c: 2)
	(up-get-search-state gl-local-total)
	(up-modify-goal temporary-goal8 g:= gl-local-total)
	(up-modify-goal temporary-goal8 g:+ gl-remote-total)
)

(defrule
	(goal temporary-goal 5)
	(building-type-count-total mill == 0)
	(or	(up-compare-goal gl-TC-garrisoning <= 0)
		(goal gl-TC-garrisoning early-retask-stage1))
	(goal gl-wood-villagers 0)
	(up-compare-goal temporary-goal8 > 1)
;	(goal gl-tc-gather-point sheep)
=>
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-target != forage-food)
	(up-remove-objects search-local object-data-carry g:< gl-villager-max-carry)
)

(defrule
	(goal temporary-goal 5)
	(building-type-count-total mill == 0)
	(or	(up-compare-goal gl-TC-garrisoning <= 0)
		(goal gl-TC-garrisoning early-retask-stage1))
	(goal gl-wood-villagers 0)
;	(goal gl-tc-gather-point sheep)
	(up-compare-goal temporary-goal8 > 1)
	(up-set-target-object search-local c: 0)
=>
	(up-set-target-by-id g: gl-main-tc-id)
	(up-target-objects 1 action-garrison -1 -1)
	(set-goal gl-TC-garrisoning early-retask-stage1)
	(set-strategic-number sn-tc-control-time 7)
)

(defrule
	(goal temporary-goal 5)
	(or	(up-compare-goal gl-TC-garrisoning <= 0)
		(goal gl-TC-garrisoning early-retask-stage1))
	(strategic-number sn-food-gatherer-percentage == 100)
	(goal gl-wood-villagers 0)
	(up-compare-goal temporary-goal8 > 1)
;	(goal gl-tc-gather-point sheep)
=>
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-target == forage-food)
	(up-get-search-state gl-local-total)
	(disable-self)
)

(defrule
	(goal temporary-goal 5)
	(or	(up-compare-goal gl-TC-garrisoning <= 0)
		(goal gl-TC-garrisoning early-retask-stage1))
	(strategic-number sn-food-gatherer-percentage == 100)
	(goal gl-wood-villagers 0)
	(up-compare-goal temporary-goal8 > 1)
;	(goal gl-tc-gather-point sheep)
=>
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-action == actionid-move); Those sent to move somewhere
	(up-remove-objects search-local object-data-target == sheep)
	(up-remove-objects search-local object-data-target == boar-food)
	(up-remove-objects search-local object-data-target == forage-food)
)

(defrule
	(goal temporary-goal 5)
	(or	(up-compare-goal gl-TC-garrisoning <= 0)
		(goal gl-TC-garrisoning early-retask-stage1))
	(strategic-number sn-food-gatherer-percentage == 100)
	(goal gl-wood-villagers 0)
	(up-compare-goal temporary-goal8 > 1)
;	(goal gl-tc-gather-point sheep)
=>
	(up-remove-objects search-local object-data-type == shepherd1)
	(up-remove-objects search-local object-data-type == shepherd2)
	(up-remove-objects search-local object-data-type == hunter1)
	(up-remove-objects search-local object-data-type == hunter2)
	(up-get-search-state gl-local-total)
)

(defrule
	(goal temporary-goal 5)
	(or	(up-compare-goal gl-TC-garrisoning <= 0)
		(goal gl-TC-garrisoning early-retask-stage1))
	(strategic-number sn-food-gatherer-percentage == 100)
	(goal gl-wood-villagers 0)
	(up-compare-goal temporary-goal8 > 1)
;	(goal gl-tc-gather-point sheep)
	(up-compare-goal gl-local-total > 0)
=>
	(up-set-target-by-id g: gl-main-tc-id)
	(up-target-objects 1 action-garrison -1 -1)
	(set-goal gl-TC-garrisoning early-retask-stage1)
	(set-strategic-number sn-tc-control-time 7)
	(chat-to-player my-player-number "gar1")
)

(defrule
	(goal temporary-goal 5)
	(goal gl-TC-garrisoning early-retask-stage1)
;	(goal gl-tc-gather-point sheep)
=>
	(up-full-reset-search)
	(up-add-object-by-id search-local g: gl-main-tc-id)
	(up-target-point 0 action-unload -1 -1)
)

(defrule
	(goal temporary-goal 4)
	(up-set-target-by-id g: 451)
	(up-compare-goal gl-point-x >= -500)
	(up-compare-goal gl-point-x <= 500)
	(up-compare-goal gl-point-y >= -500)
	(up-compare-goal gl-point-y <= 500)
	(up-object-data object-data-hitpoints > 0)
=>
	(set-goal temporary-goal 6)
)

(defrule
	(goal temporary-goal 4)
	(up-set-target-by-id g: 452)
	(up-compare-goal gl-point2-x >= -500)
	(up-compare-goal gl-point2-x <= 500)
	(up-compare-goal gl-point2-y >= -500)
	(up-compare-goal gl-point2-y <= 500)
	(up-object-data object-data-hitpoints > 0)
=>
	(up-copy-point gl-point-x gl-point2-x)
	(set-goal temporary-goal 6)
)

(defrule
	(goal temporary-goal 6)
	(up-compare-goal gl-TC-garrisoning <= 0)
	(goal gl-wood-villagers 0)
	(strategic-number sn-food-gatherer-percentage == 100)
	(game-time < 120)
;	(goal gl-tc-gather-point sheep)
=>
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-target == forage-food)
	(up-remove-objects search-local object-data-target == sheep)
	(up-remove-objects search-local object-data-precise-distance < 730)
	(set-goal temporary-goal 7)
	(up-get-search-state gl-local-total)
)

(defrule
	(goal temporary-goal 7)
	(up-compare-goal gl-local-total > 0)
=>
	(up-set-target-point gl-position-self-x)
	(up-set-target-by-id g: gl-main-tc-id)
	(up-target-objects 1 action-garrison -1 -1)
	(set-goal gl-TC-garrisoning early-retask-stage1)
	(set-strategic-number sn-tc-control-time 7)
	(chat-to-player my-player-number "gar2")
)

(defrule
	(goal gl-modern-build-order 100)
;	(game-time < 60)
;	(up-compare-goal temporary-goal < 5)
=>
	(set-goal temporary-goal 9)
	(set-goal temporary-goal3 -1)
	(set-goal temporary-goal4 11)
	(set-goal temporary-goal5 13)
	(set-goal temporary-goal6 -2)
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 32)
	(up-find-remote c: sheep c: 240)
	(up-clean-search search-remote object-data-distance search-order-asc)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)

(defrule
	(goal temporary-goal 9)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-full-reset-search)
	(up-find-local g: scout-unit c: 1)
	(up-get-search-state gl-local-total)
	(up-reset-search 1 1 1 1)
	(up-modify-goal temporary-goal6 g:= gl-local-total)
	(up-modify-goal temporary-goal6 c:- 1)
	(up-modify-goal temporary-goal6 c:* -1)
	(up-modify-goal temporary-goal5 g:* temporary-goal6)
	(up-modify-goal temporary-goal4 g:+ temporary-goal5)
	(up-filter-distance c: -1 g: temporary-goal4)
	(up-filter-exclude -1 actionid-build -1 -1)
)

(defrule
	(goal temporary-goal 9)
	(up-compare-goal temporary-goal6 != -2)
=>
	(up-find-local c: villager-class c: 240)
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-remove-objects search-local object-data-index > 0)
)

(defrule
	(goal temporary-goal 9)
	(up-compare-goal temporary-goal6 != -2)
	(up-set-target-object search-local c: 0)
=>
	(up-get-object-data object-data-id temporary-goal3)
)

(defrule
	(goal temporary-goal 9)
=>
	(set-goal temporary-goal2 0)
	(up-full-reset-search)
)

(defrule
	(goal temporary-goal 9)
=>
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-action != -1)
	(up-filter-include -1 actionid-move -1 -1)
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-id g:== temporary-goal3)
	(up-clean-search search-local object-data-index search-order-asc)
	(up-remove-objects search-local object-data-index g:!= temporary-goal2)
)

(defrule
	(goal temporary-goal 9)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-filters)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-distance c: -1 c: 7)
	(up-filter-status c: 3 c: list-active)
	(up-find-resource c: forage-class c: 240)
	(set-goal temporary-goal4 0)
)

(defrule
	(goal temporary-goal 9)
	(up-set-target-object search-local c: 0)
	(up-set-target-object search-remote c: 0)
=>
	(up-set-target-point gl-point-x)
	(up-clean-search search-remote object-data-precise-distance search-order-asc)
	(up-set-target-object search-remote c: 0)
	(up-target-objects 1 action-default -1 -1)
	(up-jump-rule 2)
)

(defrule
	(goal temporary-goal 9)
	(goal temporary-goal4 0)
	(up-set-target-object search-local c: 0)
=>
	(up-filter-status c: 2 c: list-active)
	(up-copy-point gl-point2-x gl-point-x)
	(up-lerp-tiles gl-point2-x gl-position-self-x c: 2)
	(up-set-target-point gl-point2-x)
	(up-filter-distance c: -1 c: 4)
	(up-find-resource c: wood c: 240)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 9)
	(up-find-resource c: wood c: 240)
)

(defrule
	(goal temporary-goal 9)
	(goal temporary-goal4 0)
	(up-set-target-object search-local c: 0)
=>
	(up-filter-status c: 3 c: list-active)
	(up-set-target-point gl-point2-x)
	(up-filter-distance c: -1 c: 4)
	(up-find-resource c: wood c: 240)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 9)
	(up-find-resource c: wood c: 240)
	(set-goal temporary-goal4 1)
	(up-get-search-state gl-local-total)
	(up-jump-rule -3)
)

(defrule
	(goal temporary-goal 9)
	(up-set-target-object search-local c: 0)
=>
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-full-reset-search)
	(up-jump-rule -5)

)

;

(defrule
	(goal gl-modern-build-order 100)
	(goal gl-next-villager-target wood)
	(up-pending-objects c: lumber-camp > 0)
=>
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: lumber-camp c: 1)
)

(defrule
	(goal gl-modern-build-order 100)
	(goal gl-next-villager-target wood)
	(up-pending-objects c: lumber-camp > 0)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 1 1 1 1)
	(up-add-object-by-id search-local g: gl-main-tc-id)
	(up-target-objects 1 action-gather -1 -1)
	(set-goal gl-tc-gather-point wood)
)

(defrule
	(goal gl-modern-build-order 100)
	(goal gl-next-villager-target wood)
	(up-pending-objects c: lumber-camp < 1)
=>
	(up-full-reset-search)
	(up-find-local c: lumber-camp c: 240)
	(up-set-target-point gl-position-self-x)
	(up-clean-search search-local object-data-distance search-order-desc)
)

(defrule
	(goal gl-modern-build-order 100)
	(goal gl-next-villager-target wood)
	(up-pending-objects c: lumber-camp < 1)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 1 1 1 1)
	(up-add-object-by-id search-local g: gl-main-tc-id)
	(up-target-objects 1 action-gather -1 -1)
	(set-goal gl-tc-gather-point wood)
)

;

(defrule
	(goal gl-modern-build-order 100)
	(goal gl-next-villager-target food)
	(up-pending-objects c: mill > 0)
=>
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: mill c: 1)
)

(defrule
	(goal gl-modern-build-order 100)
	(goal gl-next-villager-target food)
	(up-pending-objects c: mill > 0)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 1 1 1 1)
	(up-add-object-by-id search-local g: gl-main-tc-id)
	(up-target-objects 1 action-gather -1 -1)
	(set-goal gl-tc-gather-point forage-class)
)

(defrule
	(goal gl-modern-build-order 100)
	(goal gl-next-villager-target food)
	(up-pending-objects c: mill < 1)
=>
	(up-full-reset-search)
	(up-find-local c: mill c: 240)
	(up-set-target-point gl-position-self-x)
	(up-clean-search search-local object-data-distance search-order-desc)
)

(defrule
	(goal gl-modern-build-order 100)
	(goal gl-next-villager-target food)
	(up-pending-objects c: mill < 1)
	(up-set-target-object search-local c: 0)
=>
	(up-reset-search 1 1 1 1)
	(up-add-object-by-id search-local g: gl-main-tc-id)
	(up-target-objects 1 action-gather -1 -1)
	(set-goal gl-tc-gather-point forage-class)
)

(defrule
	(goal gl-next-villager-target food)
	(goal gl-tc-gather-point forage-class)
	(unit-type-count villager-forager > 3)
=>
	(up-gather-inside c: town-center c: 0)
)

;

(defrule
	(true)
=>
	(set-goal temporary-goal -1)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(set-goal temporary-goal6 2)
)

(defrule
	(building-type-count-total house > 1)
=>
	(set-goal temporary-goal6 1)
)

(defrule
	(game-time < 25)
	(up-pending-objects c: house > 0)
	(unit-type-count villager-builder > 1)
	(up-pending-placement c: house)
=>
	(set-goal temporary-goal 3)
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 1)
)

(defrule
	(goal temporary-goal 3)
	(up-set-target-object search-local c: 0)
=>
	(set-goal temporary-goal 1)
	(up-get-point position-object gl-point-x)
	(up-jump-rule 3)
)

(defrule
	(game-time < 25)
	(building-type-count-total house == 0)
	(up-pending-placement c: house)
=>
	(set-goal temporary-goal 0)
	(up-full-reset-search)
	(up-find-local c: villager-class c: 3)
)

(defrule
	(goal temporary-goal 0)
	(up-set-target-object search-local c: 2)
=>
	(set-goal temporary-goal 1)
	(up-get-point position-object gl-point3-x)
	(up-set-target-object search-local c: 1)
	(up-get-point position-object gl-point2-x)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-get-point-distance gl-point-x gl-point2-x temporary-goal4)
	(up-get-point-distance gl-point-x gl-point3-x temporary-goal5)
)

(defrule
	(goal temporary-goal 1)
	(up-point-distance gl-point2-x gl-point3-x g:< temporary-goal4)
	(up-point-distance gl-point2-x gl-point3-x g:< temporary-goal5)
=>
	(up-copy-point gl-point-x gl-point2-x)
)

(defrule
	(goal temporary-goal 1)
=>
	(up-copy-point gl-object-point-x gl-point-x)
	(up-lerp-tiles gl-object-point-x gl-position-self-x c: -1)
	(up-add-point gl-object-point-x gl-point-x c: -1)
	(up-modify-goal temporary-goal2 g:= gl-object-point-x)
	(up-modify-goal temporary-goal2 g:+ gl-object-point-y)
	(up-modify-goal gl-object-point-x g:* gl-object-point-x)
	(up-modify-goal gl-object-point-y g:* gl-object-point-y)
	(up-modify-goal gl-object-point-x g:+ gl-object-point-y)
	(up-get-point-distance gl-point-x gl-position-self-x temporary-goal5)
	(up-modify-goal temporary-goal5 c:- 7)
	(up-modify-goal temporary-goal5 c:min 0)
	(up-lerp-tiles gl-point-x gl-position-self-x g: temporary-goal5)
	(set-goal temporary-goal3 -1)
)

(defrule
	(goal temporary-goal 1)
	(up-compare-goal temporary-goal2 > 0)
=>
	(up-modify-goal temporary-goal3 g:- gl-object-point-x)
)

(defrule
	(goal temporary-goal 1)
=>
	(up-lerp-tiles gl-point-x gl-position-self-x g: temporary-goal3)
	(up-copy-point gl-saved-point-x gl-point-x)
	(set-goal temporary-goal2 1)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 3)
)

; TO-DO - CHECK NO SHEEP/VILLAGER/SCOUT OVER THE FOUNDATION PLACE

(defrule
	(goal temporary-goal 1)
	(up-can-build-line gl-point-x gl-point-x c: house)
=>
	(up-reset-placement c: house)
	(up-build-line gl-point-x gl-point-x c: house)
	(up-jump-rule 3)
)

(defrule
	(goal temporary-goal 1)
	(goal temporary-goal2 1)
	(up-compare-goal temporary-goal4 > 0)
=>
	(set-goal temporary-goal2 2)
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-lerp-tiles gl-point-x gl-position-self-x g: temporary-goal3)
	(up-cross-tiles gl-point-x gl-position-self-x c: 1)
	(up-jump-rule -2)
)

(defrule
	(goal temporary-goal 1)
	(goal temporary-goal2 2)
=>
	(set-goal temporary-goal2 3)
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-lerp-tiles gl-point-x gl-position-self-x g: temporary-goal3)
	(up-cross-tiles gl-point-x gl-position-self-x c: -1)
	(up-jump-rule -3)
)

(defrule
	(goal temporary-goal 1)
	(goal temporary-goal2 3)
	(up-compare-goal temporary-goal4 > 0)
=>
	(set-goal temporary-goal2 1)
	(up-modify-goal temporary-goal3 c:- 1)
	(up-modify-goal temporary-goal4 c:- 1)
	(up-copy-point gl-point-x gl-saved-point-x)
	(up-lerp-tiles gl-point-x gl-position-self-x g: temporary-goal3)
	(up-jump-rule -4)
)

(defrule
	(game-time < 25)
	(unit-type-count villager-builder < 3)
	(up-pending-objects c: house > 0)
	(or	(building-type-count-total house == 1)
		(and	(unit-type-count villager-builder == 2)
			(building-type-count-total house == 2)))
=>
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: house c: 240)
	(up-remove-objects search-local object-data-tasks-count > 0)
	(set-goal temporary-goal 2)
)

(defrule
	(goal temporary-goal 2)
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 6)
	(up-clean-search search-local object-data-precise-distance search-order-asc)
	(up-remove-objects search-local object-data-index g:>= temporary-goal6)
	(up-target-objects 1 action-default -1 -1)
)

(defrule
	(goal gl-modern-build-order 1)
=>
;	(set-strategic-number sn-maximum-food-drop-distance 0)
;	(set-strategic-number sn-maximum-wood-drop-distance 0)
;	(set-strategic-number sn-maximum-gold-drop-distance 0)
;	(set-strategic-number sn-maximum-stone-drop-distance 0)
;	(set-strategic-number sn-maximum-hunt-drop-distance 0)
;	(up-assign-builders c: town-center-foundation c: -1)
;	(up-assign-builders c: house c: -1)
;	(up-assign-builders c: farm c: -1)
;	(up-assign-builders c: lumber-camp c: -1)
;	(up-assign-builders c: mining-camp c: -1)
;	(up-assign-builders c: mill c: -1)
;	(up-assign-builders c: dock c: -1)
;	(up-assign-builders c: barracks c: -1)
	(do-nothing)
)

; =============== TC GARRISON CONTROL


(defrule
	(up-compare-goal gl-TC-garrisoning < modern-build-order-stages)
=>
	(set-strategic-number sn-tc-control-time 0)
	(up-jump-rule 2)
)

(defrule
	(true)
=>
	(up-full-reset-search)
	(up-filter-include -1 actionid-enter -1 -1)
	(up-find-local c: villager-class c: 240)
	(up-remove-objects search-local object-data-target-id g:!= gl-main-tc-id)
	(up-get-search-state gl-local-total)
	(up-modify-sn sn-tc-control-time c:- 1)
	(up-modify-sn sn-tc-control-time c:max 0)
)

(defrule
	(up-set-target-by-id g: gl-main-tc-id)
	(up-object-data object-data-garrison-count == 0)
	(strategic-number sn-tc-control-time == 0)
	(goal gl-local-total 0)
=>
	(set-goal gl-TC-garrisoning -1)
;	(chat-to-player my-player-number "turn garrison off")
)

; =============== THE THREE-SECOND TIMER

(defrule
	(up-timer-status 15 != timer-running)
=>
	(enable-timer 15 3)
)

; =============== THE SIX-SECOND TIMER

(defrule
	(up-timer-status 9 != timer-running)
=>
	(up-modify-flag gl-group0-state-flag c:- 131072)
	(up-modify-flag gl-group1-state-flag c:- 131072)
	(up-modify-flag gl-group2-state-flag c:- 131072)
	(enable-timer 9 6)
)

; =============== THE ONE-MINUTE TIMER

(defrule
	(timer-triggered 45)
	(up-compare-goal gl-current-age >= gv-feudal)
=>
	(up-modify-goal gl-gold-income-per-minute g:= gl-gold-score-last); First value uninitialized, but no large effect
	(up-get-fact resource-amount amount-gold-total gl-gold-score-last)
	(up-modify-goal gl-gold-income-per-minute g:- gl-gold-score-last)
	(up-modify-goal gl-gold-income-per-minute c:* -1)
)

(defrule
	(timer-triggered 45)
	(up-compare-goal gl-current-age >= gv-feudal)
	(game-time > 2460)
=>
	(up-modify-goal gl-gold-income-per-minute c:* 2); Carts don't return gold steadily, need longer time for comparison
	(up-modify-goal gl-gold-income-per-minute c:/ 3)
)

(defrule
	(up-timer-status 45 != timer-running)
	(game-time > 2400)
=>
	(enable-timer 45 90)
)

(defrule
	(up-timer-status 45 != timer-running)
=>
	(up-modify-flag gl-group0-state-flag c:- 262144)
	(up-modify-flag gl-group1-state-flag c:- 262144)
	(up-modify-flag gl-group2-state-flag c:- 262144)
	(enable-timer 45 60)
)

#load-if-not-defined DEATH-MATCH

; =============== CONCLUSION OF THE NEEDED GATHERER PERCENTAGES

(defrule
	(or	(up-compare-goal gl-fixed-eco-balancing != NO)
		(up-timer-status 3 != timer-triggered))
=>
	(up-jump-rule 52)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal g:= gl-available-food-amount)
	(up-modify-goal temporary-goal2 g:= gl-available-wood-amount)
	(up-modify-goal temporary-goal3 g:= gl-available-gold-amount)
	(up-get-fact civilian-population 0 temporary-goal4)
	(up-modify-goal temporary-goal4 c:- 70)
	(up-modify-goal temporary-goal4 c:max 0)
	(up-modify-goal temporary-goal4 c:min 30)
	(up-modify-goal temporary-goal4 c:+ 30)
	(up-modify-goal temporary-goal c:* 30)
	(up-modify-goal temporary-goal2 c:* 30)
	(up-modify-goal temporary-goal3 c:* 30)
	(up-modify-goal temporary-goal g:/ temporary-goal4)
	(up-modify-goal temporary-goal2 g:/ temporary-goal4)
	(up-modify-goal temporary-goal3 g:/ temporary-goal4)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(game-time < 2600)
	(up-compare-const gv-michi-style == 1)
=>
	(up-jump-rule 39)
)

(defrule
	(up-compare-goal temporary-goal2 > 250)
	(or	(food-amount < 100)
		(up-compare-goal temporary-goal2 > 350))
	(or	(food-amount < 200)
		(up-compare-goal temporary-goal2 > 450))
	(or	(food-amount < 300)
		(up-compare-goal temporary-goal2 > 2500))
	(food-amount < 1000)
=>
	(up-modify-goal gl-wood-gp-points c:- 10)
	(up-modify-goal gl-food-gp-points c:+ 10)
)

(defrule
	(up-compare-goal temporary-goal2 > 650)
	(or	(food-amount < 400)
		(up-compare-goal temporary-goal2 > 800))
	(or	(food-amount < 500)
		(up-compare-goal temporary-goal2 > 950))
	(or	(food-amount < 600)
		(up-compare-goal temporary-goal2 > 3000))
	(food-amount < 1300)
=>
	(up-modify-goal gl-wood-gp-points c:- 10)
	(up-modify-goal gl-food-gp-points c:+ 10)
)

(defrule
	(up-compare-goal temporary-goal2 > 1050)
	(or	(food-amount < 700)
		(up-compare-goal temporary-goal2 > 1300))
	(or	(food-amount < 850)
		(up-compare-goal temporary-goal2 > 1650))
	(or	(food-amount < 1000)
		(up-compare-goal temporary-goal2 > 3500))
	(food-amount < 1500)
=>
	(up-modify-goal gl-wood-gp-points c:- 10)
	(up-modify-goal gl-food-gp-points c:+ 10)
)

(defrule
	(up-compare-goal temporary-goal2 > 1850)
	(or	(food-amount < 1200)
		(up-compare-goal temporary-goal2 > 2050))
	(or	(food-amount < 1400)
		(up-compare-goal temporary-goal2 > 2350))
	(food-amount < 1650)
=>
	(up-modify-goal gl-wood-gp-points c:- 10)
	(up-modify-goal gl-food-gp-points c:+ 10)
)

(defrule
	(up-compare-goal temporary-goal2 > 2600)
	(or	(food-amount < 1900)
		(up-compare-goal temporary-goal2 > 2900))
	(or	(food-amount < 2100)
		(up-compare-goal temporary-goal2 > 3200))
	(food-amount < 2300)
=>
	(up-modify-goal gl-wood-gp-points c:- 10)
	(up-modify-goal gl-food-gp-points c:+ 10)
)

(defrule
	(up-compare-goal temporary-goal > 250)
	(or	(wood-amount < 100)
		(up-compare-goal temporary-goal > 350))
	(or	(wood-amount < 200)
		(up-compare-goal temporary-goal > 450))
	(wood-amount < 300)
	(up-compare-goal gl-current-age >= gv-castle-up)
	(civilian-population > 65)
=>
	(up-modify-goal gl-wood-gp-points c:+ 10)
	(up-modify-goal gl-food-gp-points c:- 10)
)

(defrule
	(up-compare-goal temporary-goal > 650)
	(or	(wood-amount < 400)
		(up-compare-goal temporary-goal > 800))
	(or	(wood-amount < 500)
		(up-compare-goal temporary-goal > 950))
	(wood-amount < 600)
	(nand	(or	(civilian-population > 70)
			(map-type islands))
		(goal gl-current-age gv-castle))
=>
	(up-modify-goal gl-wood-gp-points c:+ 10)
	(up-modify-goal gl-food-gp-points c:- 10)
)

(defrule
	(up-compare-goal temporary-goal > 1050)
	(or	(wood-amount < 700)
		(up-compare-goal temporary-goal > 1300))
	(or	(wood-amount < 850)
		(up-compare-goal temporary-goal > 1650))
	(wood-amount < 1000)
=>
	(up-modify-goal gl-wood-gp-points c:+ 10)
	(up-modify-goal gl-food-gp-points c:- 10)
)

(defrule
	(up-compare-goal temporary-goal > 1850)
	(or	(wood-amount < 1200)
		(up-compare-goal temporary-goal > 2100))
	(or	(wood-amount < 1400)
		(up-compare-goal temporary-goal > 2350))
	(wood-amount < 1650)
=>
	(up-modify-goal gl-wood-gp-points c:+ 10)
	(up-modify-goal gl-food-gp-points c:- 10)
)

(defrule
	(up-compare-goal temporary-goal > 2600)
	(or	(wood-amount < 1900)
		(up-compare-goal temporary-goal > 2850))
	(or	(wood-amount < 2100)
		(up-compare-goal temporary-goal > 3100))
	(wood-amount < 2300)
=>
	(up-modify-goal gl-wood-gp-points c:+ 10)
	(up-modify-goal gl-food-gp-points c:- 10)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(civilian-population < 110)
	(food-amount < 100)
	(up-compare-goal gl-available-gold-amount > 200)
=>
	(up-modify-goal gl-food-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(food-amount < 200)
	(up-compare-goal gl-available-gold-amount > 350)
=>
	(up-modify-goal gl-food-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(food-amount < 400)
	(up-compare-goal gl-available-gold-amount > 650)
=>
	(up-modify-goal gl-food-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(food-amount < 600)
	(up-compare-goal gl-available-gold-amount > 900)
=>
	(up-modify-goal gl-food-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(food-amount < 700)
	(up-compare-goal gl-available-gold-amount > 800)
	(or	(up-compare-goal gl-available-gold-amount > 1100)
		(and	(goal gl-current-age gv-castle)
			(current-age-time > 50)))
=>
	(up-modify-goal gl-food-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(food-amount < 900)
	(up-compare-goal gl-available-gold-amount > 1300)
=>
	(up-modify-goal gl-food-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(food-amount < 1100)
	(up-compare-goal gl-available-gold-amount > 1700)
=>
	(up-modify-goal gl-food-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(wood-amount < 200)
	(up-compare-goal gl-available-gold-amount > 450)
=>
	(up-modify-goal gl-wood-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(strategic-number sn-allow-resource-spending >= 0)
	(wood-amount < 300)
	(up-compare-goal gl-available-gold-amount > 550)
	(nand	(or	(food-amount > 500)
			(and	(civilian-population > 70)
				(food-amount > 200)))
		(and	(goal gl-current-age gv-castle)
			(gold-amount < needed-castle-gold)))
=>
	(up-modify-goal gl-wood-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(strategic-number sn-allow-resource-spending >= 0)
	(wood-amount < 400)
	(up-compare-goal gl-available-gold-amount > 750)
=>
	(up-modify-goal gl-wood-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(strategic-number sn-allow-resource-spending >= 0)
	(wood-amount < 600)
	(up-compare-goal gl-available-gold-amount > 950)
	(or	(up-compare-goal gl-available-gold-amount > 1150)
		(and	(goal gl-current-age gv-castle)
			(current-age-time > 50)))
=>
	(up-modify-goal gl-wood-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(strategic-number sn-allow-resource-spending >= 0)
	(wood-amount < 900)
	(up-compare-goal gl-available-gold-amount > 1500)
=>
	(up-modify-goal gl-wood-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(strategic-number sn-allow-resource-spending >= 0)
	(wood-amount < 1200)
	(up-compare-goal gl-available-gold-amount > 1800)
=>
	(up-modify-goal gl-wood-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(current-age == castle-age)
	(current-age != gv-maximum-age)
	(goal gl-current-age gv-castle)
	(goal gl-strategy castle-drop)
	(building-type-count-total town-center > 2)
=>
	(up-modify-goal gl-food-gp-points c:+ 60)
	(up-modify-goal gl-wood-gp-points c:+ 10)
	(up-modify-goal gl-gold-gp-points c:+ 30)
	(up-jump-rule 2)
)

(defrule
	(goal gl-current-age gv-castle)
	(or	(and	(soldier-count > 30)
			(and	(game-time > 1700)
				(and	(food-amount > 250)
					(gold-amount > 200))))
	;	(and
	(civilian-population > 70)
	)
;			(goal gl-peace-in-town YES)))
	(building-type-count-total town-center > 2)
=>
	(up-modify-goal gl-food-gp-points c:+ 70)
	(up-modify-goal gl-wood-gp-points c:+ 35)
	(up-modify-goal gl-gold-gp-points c:+ 40)
)

(defrule
	(up-compare-goal temporary-goal2 > 350)
	(gold-amount < 200)
	(food-amount < 200)
	(up-compare-goal gl-wood-gp-points > 60)
=>
	(up-modify-goal gl-wood-gp-points c:- 10)
)

(defrule
	(up-compare-goal temporary-goal2 > 900)
	(gold-amount < 400)
	(food-amount < 400)
=>
	(up-modify-goal gl-wood-gp-points c:- 10)
)

(defrule
	(wood-amount < 200)
	(food-amount < 200)
	(up-compare-goal gl-available-gold-amount > 400)
=>
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(or	(wood-amount < 400)
		(food-amount < 400))
	(up-compare-goal gl-available-gold-amount > 700)
=>
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(or	(wood-amount < 550)
		(food-amount < 550))
	(up-compare-goal gl-available-gold-amount > 900)
=>
	(up-modify-goal gl-gold-gp-points c:- 10)
)

(defrule
	(wood-amount < 200)
	(gold-amount < 200)
	(up-compare-goal gl-available-food-amount > 350)
	(up-compare-goal gl-my-villager-count-total > 65)
	(or	(up-compare-goal gl-available-food-amount > 500)
		(up-compare-goal gl-my-villager-count-total > 85))
=>
	(up-modify-goal gl-food-gp-points c:- 10)
)

(defrule
	(wood-amount < 400)
	(gold-amount < 400)
	(up-compare-goal gl-available-food-amount > 650)
=>
	(up-modify-goal gl-food-gp-points c:- 10)
)

(defrule
	(wood-amount < 700)
	(gold-amount < 700)
	(up-compare-goal gl-available-food-amount > 1400)
=>
	(up-modify-goal gl-food-gp-points c:- 10)
)

(defrule
	(goal gl-current-age gv-castle)
	(up-compare-goal gl-my-villager-count > 90)
	(research-available imperial-age)
	(gold-amount < 800)
	(up-compare-goal gl-available-food-amount > 1300)
=>
	(up-modify-goal gl-food-gp-points c:- 10)
)

(defrule
	(gold-amount < 100)
	(up-compare-goal temporary-goal2 > 250)
	(up-compare-goal temporary-goal > 250)
=>
	(up-modify-goal gl-gold-gp-points c:+ 10)
)

(defrule
	(or	(up-compare-goal gl-available-wood-amount > 400)
		(up-compare-goal gl-available-food-amount > 450))
	(gold-amount < 250)
=>
	(up-modify-goal gl-gold-gp-points c:+ 10)
)

(defrule
	(or	(up-compare-goal gl-available-wood-amount > 900)
		(up-compare-goal gl-available-food-amount > 950))
	(gold-amount < 550)
=>
	(up-modify-goal gl-gold-gp-points c:+ 10)
)

(defrule
	(up-compare-goal gl-my-villager-count-total > 85)
	(up-compare-goal gl-available-food-amount > 450)
	(up-compare-goal gl-available-wood-amount > 350)
	(or	(gold-amount < 250)
		(and	(up-compare-goal gl-available-food-amount > 800)
			(up-compare-goal gl-available-wood-amount > 700)))
	(or	(gold-amount < 550)
		(up-compare-goal gl-available-food-amount > 1500))
	(gold-amount < 900)
=>
	(up-modify-goal gl-gold-gp-points c:+ 10)
)

(defrule
	(up-compare-goal gl-my-villager-count-total > 50)
	(building-type-count-total market > 0)
=>
	(up-get-fact commodity-selling-price food temporary-goal)
	(up-modify-goal temporary-goal c:- 120)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal c:min 100)
	(up-modify-goal gl-gold-gp-points g:- temporary-goal)
	(up-get-fact commodity-selling-price wood temporary-goal)
	(up-modify-goal temporary-goal c:- 120)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal c:min 100)
	(up-modify-goal gl-gold-gp-points g:- temporary-goal)
)

(defrule
	(true)
=>
	(up-modify-goal gl-food-gp-points c:max 0)
	(up-modify-goal gl-wood-gp-points c:max 0)
	(up-modify-goal gl-gold-gp-points c:max 0)
	(up-get-fact food-amount 0 temporary-goal)
	(up-get-fact wood-amount 0 temporary-goal2)
	(up-get-fact gold-amount 0 temporary-goal3)
	(up-modify-goal temporary-goal4 g:= temporary-goal)
	(up-modify-goal temporary-goal g:max temporary-goal2)
	(up-modify-goal temporary-goal c:+ 1500)
	(up-modify-goal temporary-goal2 g:+ temporary-goal4)
	(up-modify-goal temporary-goal2 c:+ 2000)
	(up-modify-goal temporary-goal2 c:/ 2)
	(up-modify-goal temporary-goal g:min temporary-goal2)
	(up-modify-goal temporary-goal g:- temporary-goal3)
	(up-modify-goal temporary-goal c:min 0)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal c:/ 35)
	(up-modify-goal gl-gold-gp-points g:+ temporary-goal)
	(up-get-fact food-amount 0 temporary-goal)
	(up-modify-goal temporary-goal c:- 1000)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal c:/ 100)
	(up-get-fact wood-amount 0 temporary-goal2)
	(up-modify-goal temporary-goal2 c:- 1000)
	(up-modify-goal temporary-goal2 c:max 0)
	(up-modify-goal temporary-goal2 c:/ 100)
	(up-modify-goal temporary-goal4 g:= temporary-goal)
	(up-modify-goal temporary-goal4 g:+ temporary-goal2)
	(up-modify-goal temporary-goal3 g:= gl-food-gp-points)
	(up-modify-goal temporary-goal3 g:+ gl-wood-gp-points)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal5 g:= temporary-goal4)
	(up-modify-goal temporary-goal5 g:- temporary-goal)
	(up-modify-goal gl-food-gp-points g:+ temporary-goal5)
	(up-modify-goal temporary-goal5 g:= temporary-goal4)
	(up-modify-goal temporary-goal5 g:- temporary-goal2)
	(up-modify-goal gl-wood-gp-points g:+ temporary-goal5)
	(up-modify-goal temporary-goal g:= gl-food-gp-points)
	(up-modify-goal temporary-goal g:+ gl-wood-gp-points)
	(up-modify-goal gl-gold-gp-points g:* temporary-goal)
	(up-modify-goal gl-gold-gp-points g:/ temporary-goal3)
	(up-modify-goal gl-food-gp-points c:max 0)
	(up-modify-goal gl-wood-gp-points c:max 0)
	(up-modify-goal gl-gold-gp-points c:max 0)
)
#end-if; DM

(defrule
	(or	(dropsite-min-distance gold == -1)
		(dropsite-min-distance gold == 255))
=>
	(set-goal gl-gold-gp-points 0)
)

(defrule
	(dropsite-min-distance gold s:> sn-maximum-gold-drop-distance)
	(strategic-number sn-maximum-gold-drop-distance >= 0)
=>
	(up-modify-goal gl-gold-gp-points c:min 10)
)

(defrule
	(cc-players-unit-type-count 0 gold-mine > 0)
	(up-gaia-type-count c: gold < 6)
=>
	(up-modify-goal gl-gold-gp-points c:min 120)
)

(defrule
	(cc-players-unit-type-count 0 gold-mine > 0)
	(up-gaia-type-count c: gold < 4)
=>
	(up-modify-goal gl-gold-gp-points c:min 70)
)

(defrule
	(or	(game-time > 2400)
		(or	(goal gl-nothing-style-map YES)
			(cc-players-unit-type-count 0 stone-mine == 0)))
	(or	(dropsite-min-distance stone == -1)
		(dropsite-min-distance stone == 255))
=>
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(game-time > 2400)
	(dropsite-min-distance stone s:> sn-maximum-stone-drop-distance)
	(dropsite-min-distance stone < 255)
	(strategic-number sn-maximum-stone-drop-distance >= 0)
	(strategic-number sn-stone-gatherer-percentage > 0)
=>
	(set-strategic-number sn-stone-gatherer-percentage 1)
)

(defrule
	(timer-triggered 3); For DM
	(up-compare-goal gl-current-age >= gv-feudal-up)
=>
	(up-chat-data-to-player my-player-number "Food gp: %d" g: gl-food-gp-points)
	(up-chat-data-to-player my-player-number "Wood gp: %d" g: gl-wood-gp-points)
	(up-chat-data-to-player my-player-number "Gold gp: %d" g: gl-gold-gp-points)
	(up-modify-goal gl-food-gp-points c:* 100)
	(up-modify-goal gl-wood-gp-points c:* 100)
	(up-modify-goal gl-gold-gp-points c:* 100)
	(up-modify-goal temporary-goal g:= gl-food-gp-points)
	(up-modify-goal temporary-goal g:+ gl-wood-gp-points)
	(up-modify-goal temporary-goal g:+ gl-gold-gp-points)
	(up-modify-goal temporary-goal2 g:= temporary-goal)
	(up-modify-goal temporary-goal2 c:/ 100)
	(up-modify-goal temporary-goal2 s:* sn-stone-gatherer-percentage)
	(set-goal temporary-goal3 100)
	(up-modify-goal temporary-goal3 s:- sn-stone-gatherer-percentage)
)

(defrule
	(timer-triggered 3)
	(up-compare-goal gl-current-age >= gv-feudal-up)
=>
	(up-modify-goal temporary-goal2 g:%/ temporary-goal3)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-modify-goal gl-food-gp-points g:%/ temporary-goal)
	(up-modify-goal gl-wood-gp-points g:%/ temporary-goal)
	(up-modify-goal gl-gold-gp-points g:%/ temporary-goal)
	(up-modify-sn sn-food-gatherer-percentage g:= gl-food-gp-points)
	(up-modify-sn sn-wood-gatherer-percentage g:= gl-wood-gp-points)
	(up-modify-sn sn-gold-gatherer-percentage g:= gl-gold-gp-points)
	(up-chat-data-to-player my-player-number food-d s: sn-food-gatherer-percentage)
	(up-chat-data-to-player my-player-number wood-d s: sn-wood-gatherer-percentage)
	(up-chat-data-to-player my-player-number gold-d s: sn-gold-gatherer-percentage)
	(up-chat-data-to-player my-player-number stone-d s: sn-stone-gatherer-percentage)
	(set-goal gl-navy-train-notice NO)
	(enable-timer 3 35)
)

; end of jump

(defrule
	(or	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
		(goal gl-strategy sling))
=>
	(up-jump-rule 7)
)

(defrule
	(or	(goal gl-fixed-eco-balancing NO)
		(or	(goal gl-strategy grush)
			(or	(goal gl-strategy turtle-rush)
				(or	(goal gl-strategy war-galley-rush)
					(or	(goal gl-strategy fire-ship-rush)
						(and	(goal gl-strategy default)
							(and	(current-age-time < 6)
								(goal gl-current-age gv-castle))))))))					
=>
	(up-jump-rule 6)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
=>
	(up-get-fact gaia-type-count deep-fish temporary-goal3)
	(up-modify-goal temporary-goal3 c:min 1)
	(up-modify-goal temporary-goal3 c:* 2)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-modify-goal temporary-goal g:= gl-my-villager-count)
	(up-modify-goal temporary-goal s:%* sn-food-gatherer-percentage)
	(up-get-fact unit-type-count fishing-ship temporary-goal2)
	(up-modify-goal temporary-goal2 g:* temporary-goal3)
	(up-modify-goal temporary-goal2 c:/ 6)
	(set-goal temporary-goal5 0)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(or	(and	(up-compare-goal gl-strategy-type >= FC)
			(up-research-status c: castle-age < research-pending))
		(and	(goal gl-current-age gv-feudal)
			(current-age-time > 300)))
=>
	(up-modify-goal temporary-goal2 c:min 4)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(nand	(up-compare-goal gl-strategy-type >= FC)
		(up-research-status c: castle-age < research-pending))
	(nand	(goal gl-current-age gv-feudal)
		(current-age-time > 180))
=>
	(up-get-fact food-amount 0 temporary-goal3)
	(up-get-fact wood-amount 0 temporary-goal4)
	(up-modify-goal temporary-goal4 g:- temporary-goal3)
	(up-modify-goal temporary-goal4 c:z/ 140)
	(up-modify-goal temporary-goal4 c:min 10)
	(up-modify-goal temporary-goal2 g:- temporary-goal4)
	(up-modify-goal temporary-goal2 c:max 0)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(or	(strategic-number sn-food-gatherer-percentage g:!= gl-my-food-gp)
		(or	(strategic-number sn-wood-gatherer-percentage g:!= gl-my-wood-gp)
			(strategic-number sn-gold-gatherer-percentage g:!= gl-my-gold-gp)))
=>
	(up-modify-goal temporary-goal g:- temporary-goal2)
	(up-modify-goal temporary-goal g:%/ gl-my-villager-count)
	(up-modify-sn sn-food-gatherer-percentage g:= temporary-goal)
	(up-modify-goal temporary-goal2 s:= sn-food-gatherer-percentage)
	(up-modify-goal temporary-goal2 s:+ sn-wood-gatherer-percentage)
	(up-modify-goal temporary-goal2 s:+ sn-gold-gatherer-percentage)
	(up-modify-goal temporary-goal2 s:+ sn-stone-gatherer-percentage)
	(up-modify-sn sn-food-gatherer-percentage g:%/ temporary-goal2)
	(up-modify-sn sn-gold-gatherer-percentage g:%/ temporary-goal2)
	(set-goal temporary-goal5 1)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle)
	(strategic-number sn-gold-gatherer-percentage < 23)
	(goal temporary-goal5 1)
=>
	(up-modify-sn sn-food-gatherer-percentage c:- 2)
	(up-modify-sn sn-gold-gatherer-percentage c:+ 2)
)

(defrule
	(up-compare-goal gl-current-age >= gv-dark-up)
	(goal temporary-goal5 1)
=>
	(up-modify-sn sn-wood-gatherer-percentage g:%/ temporary-goal2)
	(up-modify-sn sn-food-gatherer-percentage c:- 6)
	(up-modify-sn sn-wood-gatherer-percentage c:+ 5)
	(up-modify-sn sn-gold-gatherer-percentage c:+ 1)
	(up-modify-goal gl-my-food-gp s:= sn-food-gatherer-percentage)
	(up-modify-goal gl-my-wood-gp s:= sn-wood-gatherer-percentage)
	(up-modify-goal gl-my-gold-gp s:= sn-gold-gatherer-percentage)
)

(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
)

(defrule
	(game-time > 2400)
=>
	(up-modify-goal temporary-goal2 g:= gl-my-villager-count)
	(up-modify-goal temporary-goal2 s:%* sn-wood-gatherer-percentage)
	(up-get-fact unit-type-count villager-wood temporary-goal)
	(up-modify-goal temporary-goal g:- temporary-goal2)
	(up-modify-goal temporary-goal c:/ 2)
	(up-modify-goal temporary-goal c:max 0)
)

(defrule
	(true)
=>
	(up-modify-goal gl-max-farm-count g:= gl-my-villager-count)
	(up-modify-goal gl-max-farm-count s:%* sn-food-gatherer-percentage)
	(up-modify-goal gl-max-farm-count g:+ temporary-goal); Increase farming when there are excess lumberjacks in late game
	(up-get-fact unit-type-count villager-food temporary-goal)
	(up-modify-goal gl-max-farm-count g:- temporary-goal)
	(up-get-fact unit-type-count villager-farmer temporary-goal)
	(up-modify-goal gl-max-farm-count g:+ temporary-goal)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal)
	(or	(current-age-time > 30)
		(up-compare-goal gl-current-age >= gv-feudal-up))
=>
	(up-modify-goal gl-max-farm-count g:= gl-my-villager-count)
	(up-modify-goal gl-max-farm-count s:%* sn-food-gatherer-percentage)
	(up-get-fact unit-type-count villager-forager temporary-goal)
	(up-modify-goal temporary-goal c:min 3)
	(up-modify-goal gl-max-farm-count g:- temporary-goal)
	(up-get-fact unit-type-count villager-hunter temporary-goal)
	(up-modify-goal temporary-goal c:min 3)
	(up-modify-goal gl-max-farm-count g:- temporary-goal)
	(up-get-fact unit-type-count villager-shepherd temporary-goal)
	(up-modify-goal temporary-goal c:min 3)
	(up-modify-goal gl-max-farm-count g:- temporary-goal)
)

(defrule
	(strategic-number sn-villager-deleting == 1)
=>
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-enter orderid-build -1)
	(up-find-local c: villager-class c: 1)
	(up-target-point 0 action-delete -1 -1)
)

(defrule
	(goal gl-scout-party leader)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-by-id g: gl-scout-target-id)
	(up-get-point position-object gl-saved-point-x)
)

#load-if-not-defined UP-HUMAN-IN-GAME
(defrule
	(taunt-detected any-computer 248)
=>
	(up-chat-data-to-player this-any-computer "Food gp: %d" s: sn-food-gatherer-percentage)
	(up-chat-data-to-player this-any-computer "Wood gp: %d" s: sn-wood-gatherer-percentage)
	(up-chat-data-to-player this-any-computer "Gold gp: %d" s: sn-gold-gatherer-percentage)
	(up-chat-data-to-player this-any-computer "Stone gp: %d" s: sn-stone-gatherer-percentage)
	(up-get-fact escrow-amount food temporary-goal)
	(up-chat-data-to-player this-any-computer "Food escrow: %d" g: temporary-goal)
	(up-get-fact escrow-amount wood temporary-goal)
	(up-chat-data-to-player this-any-computer "Wood escrow: %d" g: temporary-goal)
	(up-get-fact escrow-amount gold temporary-goal)
	(up-chat-data-to-player this-any-computer "Gold escrow: %d" g: temporary-goal)
	(acknowledge-taunt this-any-computer 248)
)

(defrule
	(taunt-detected any-computer 247)
=>
	(up-chat-data-to-player this-any-computer "TS: %d" s: sn-maximum-town-size)
	(up-chat-data-to-player this-any-computer "TSA: %d" g: TSA)
	(up-chat-data-to-player this-any-computer "DA: %d" g: gl-direct-attacking)
	(up-chat-data-to-player this-any-computer "Military rating: %d" g: gl-military-rating); Tracking only after dark-up
	(up-chat-data-to-player this-any-computer "Resource spending: %d" s: sn-allow-resource-spending)
	(up-chat-data-to-player this-any-computer "Mining camp max distance: %d" s: sn-mining-camp-max-distance)
	(up-chat-data-to-player this-any-computer "Lumber camp max distance: %d" s: sn-lumber-camp-max-distance)
;	(up-chat-data-to-player this-any-computer "Mill max distance: %d" s: sn-mill-max-distance)
	(up-chat-data-to-player this-any-computer "Response distance: %d" s: sn-enemy-sighted-response-distance)
	(acknowledge-taunt this-any-computer 247)
)

(defrule
	(taunt-detected any-computer 246)
=>
	(up-chat-data-to-player this-any-computer "Enemy infantry: %d" g: gl-enemy-infantry-count)
	(up-chat-data-to-player this-any-computer "Enemy archery: %d" g: gl-enemy-archery-count)
	(up-chat-data-to-player this-any-computer "Enemy archer: %d" g: gl-enemy-archer-count)
	(up-chat-data-to-player this-any-computer "Enemy cavalry: %d" g: gl-enemy-cavalry-count)
	(up-chat-data-to-player this-any-computer "Enemy eagles: %d" g: gl-enemy-eagle-count)
	(up-chat-data-to-player this-any-computer "Enemy gunpowder: %d" g: gl-enemy-gunpowder-count)
	(up-chat-data-to-player this-any-computer "Enemy huskarls: %d" g: gl-enemy-huskarl-count)
	(up-chat-data-to-player this-any-computer "Enemy navy: %d" g: gl-target-navy-count)
	(acknowledge-taunt this-any-computer 246)
)
#end-if

(defrule
	(taunt-detected taunt-sender1 249)
=>
	(up-get-fact food-amount 0 temporary-goal)
	(up-chat-data-to-player taunt-sender2 food-d g: temporary-goal)
	(up-get-fact wood-amount 0 temporary-goal)
	(up-chat-data-to-player taunt-sender2 wood-d g: temporary-goal)
	(up-get-fact gold-amount 0 temporary-goal)
	(up-chat-data-to-player taunt-sender2 gold-d g: temporary-goal)
	(up-get-fact stone-amount 0 temporary-goal)
	(up-chat-data-to-player taunt-sender2 stone-d g: temporary-goal)
	(up-get-fact population 0 temporary-goal)
	(up-chat-data-to-player taunt-sender2 "Population: %d" g: temporary-goal)
	(up-get-fact military-population 0 temporary-goal)
	(up-chat-data-to-player taunt-sender2 "Military population: %d" g: temporary-goal)
	(up-get-fact warboat-count 0 temporary-goal)
	(up-chat-data-to-player taunt-sender2 "Navy: %d" g: temporary-goal)
	(acknowledge-taunt taunt-sender2 249)
)

(defrule
	(taunt-detected any-computer 222)
=>
	(acknowledge-taunt every-computer 222)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal3 s:= sn-food-gatherer-percentage)
	(up-modify-goal temporary-goal4 s:= sn-wood-gatherer-percentage)
	(up-get-fact unit-type-count villager-builder temporary-goal6)
	(up-get-fact unit-type-count villager-food temporary-goal7)
	(up-get-fact unit-type-count villager-farmer temporary-goal8)
	(up-modify-goal temporary-goal g:= gl-my-villager-count)
	(up-modify-goal temporary-goal s:* sn-food-gatherer-percentage)
	(up-modify-goal temporary-goal c:/ 100)
	(set-goal temporary-goal2 0)
)

(defrule
	(game-time < 2100)
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(or	(goal gl-strategy-class basic-class)
		(up-compare-goal gl-strategy-type >= FC))
	(up-compare-goal temporary-goal7 g:== temporary-goal8)
	(up-compare-goal gl-TC-lost != YES)
	(game-time > 0)
=>
	(up-modify-goal temporary-goal c:- 2)
	(up-modify-goal temporary-goal g:- temporary-goal6)
	(up-modify-goal temporary-goal g:- temporary-goal7)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal g:%/ gl-my-villager-count)
	(up-modify-sn sn-food-gatherer-percentage g:- temporary-goal)
	(up-modify-sn sn-wood-gatherer-percentage g:+ temporary-goal)
	(set-goal temporary-goal2 78455)
)

#load-if-not-defined DEFEND-WONDER
(defrule
	(timer-triggered 5)
	(or	(and	(food-amount > 1700)
			(wood-amount > 1300))
		(gold-amount > 1600))
	(gold-amount > 1200)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(set-escrow-percentage stone 0)
	(up-release-escrow)
	(enable-timer 5 20)
)

(defrule
	(or	(timer-triggered 5)
		(up-compare-goal gl-current-age >= gv-feudal-up))
	(up-timer-status 5 != timer-running)
	(nand	(dropsite-min-distance wood > 4)
		(game-time < 3600))
	(strategic-number sn-allow-resource-spending >= 0)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(set-escrow-percentage stone 0)
	(up-release-escrow)
	(enable-timer 5 83); Occasionally resets escrows
)
#else
(defrule
;	(building-type-count lumber-camp > 0)
	(dropsite-min-distance wood < 5)
	(up-timer-status 5 != timer-running)
	(building-type-count town-center > 0)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(set-escrow-percentage stone 0)
	(up-release-escrow)
	(enable-timer 5 20)
)
#end-if

(defrule
;	(building-type-count lumber-camp > 0)
	(dropsite-min-distance wood < 5)
	(up-timer-status 5 != timer-running)
	(building-type-count town-center > 0)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(set-escrow-percentage stone 0)
	(up-release-escrow)
	(enable-timer 5 20)
)

#load-if-defined UP-HUMAN-IN-GAME
(defrule
	(taunt-detected 1 50)
=>
	(acknowledge-taunt 1 50)
	(acknowledge-taunt 1 51)
	(acknowledge-taunt 1 55)
	(acknowledge-taunt 1 57)
	(acknowledge-taunt 2 57)
)

(defrule
	(up-set-target-by-id g: 451)
	(or	(up-object-data object-data-type == farm)
		(up-object-data object-data-type == 415))
=>
	(up-chat-data-to-player my-player-number "!!! 1: %d" g: 451)
)

(defrule
	(up-set-target-by-id g: 452)
	(or	(up-object-data object-data-type == farm)
		(up-object-data object-data-type == 415))
=>
	(up-chat-data-to-player my-player-number "!!! 2: %d" g: 452)
)

(defrule
	(taunt-detected 1 57)
	(up-set-target-by-id g: 451)
=>
	(up-get-object-data object-data-type temporary-goal)
	(up-chat-data-to-all "Animal1t: %d" g: temporary-goal)
)

(defrule
	(taunt-detected 1 57)
	(not	(up-set-target-by-id g: 451))
=>
	(chat-to-all "Animal1: No")
)

(defrule
	(taunt-detected 1 57)
	(up-set-target-by-id g: 452)
=>
	(up-get-object-data object-data-type temporary-goal)
	(up-chat-data-to-all "Animal2t: %d" g: temporary-goal)
)

(defrule
	(taunt-detected 1 57)
	(not	(up-set-target-by-id g: 452))
=>
	(chat-to-all "Animal2: No")
)

(defrule
	(taunt-detected 1 57)
=>
	(up-chat-data-to-all "Animal1: %d" g: 451)
	(up-chat-data-to-all "Animal2: %d" g: 452)
	(up-chat-data-to-all "Boar: %d" g: gl-lured-boar-id)
	(acknowledge-taunt 1 57)
)

(defrule
	(taunt-detected 1 52)
=>
	(up-chat-data-to-all "Sheep: %d" s: sn-sheep-count)
	(up-chat-data-to-all "Boar: %d" g: gl-boar-eaten)
	(up-chat-data-to-all "Deer: %d" g: gl-lured-deer-count)
	(up-chat-data-to-all "Luring: %d" g: gl-deer-luring)
	(acknowledge-taunt 1 52)
)

(defrule
	(taunt-detected 1 53)
	(not	(up-set-target-by-id g: gl-boar-lurer-id))
=>
	(chat-to-all "Lurer not valid.")
)

(defrule
	(taunt-detected 1 53)
=>
	(up-chat-data-to-all "L ID: %d" g: gl-boar-lurer-id)
	(up-chat-data-to-all "b ID: %d" g: gl-lured-boar-id)
	(up-chat-data-to-all "d ID: %d" g: 496)
	(up-chat-data-to-all "Stage: %d" g: gl-boar-hunting-stage)
	(acknowledge-taunt 1 53)
)

(defrule
	(taunt-detected 1 54)
=>
	(up-chat-data-to-all "TSA: %d" g: TSA)
	(up-chat-data-to-all "ER: %d" g: gl-early-raid)
	(up-chat-data-to-all "DA: %d" g: gl-direct-attacking)
	(up-chat-data-to-all "Interfered: %d" g: gl-interfered-scout)
	(up-chat-data-to-all "Lame: %d" g: gl-villager-laming)
	(acknowledge-taunt 1 54)
)

(defrule
	(or	(taunt-detected 1 56)
		(taunt-detected 2 56))
=>
	(up-chat-data-to-all "g0: %d" g: gl-group0-state-flag)
	(up-chat-data-to-all "g1: %d" g: gl-group1-state-flag)
	(up-chat-data-to-all "g2: %d" g: gl-group2-state-flag)
	(up-chat-data-to-all "TS: %d" s: sn-maximum-town-size)
	(up-chat-data-to-all "AP: %d" s: sn-percent-attack-soldiers)
	(acknowledge-taunt 1 56)
	(acknowledge-taunt 2 56)
)

(defrule
	(taunt-detected 1 51)
=>
	(up-chat-data-to-all "Stage: %d" g: gl-boar-hunting-stage)
)

(defrule
	(taunt-detected 1 51)
	(up-set-target-by-id g: gl-boar-lurer-id)
=>
	(up-get-object-data object-data-target temporary-goal)
	(up-chat-data-to-all "Target: %d" g: temporary-goal)
)

(defrule
	(taunt-detected 1 55)
=>
	(up-full-reset-search)
)

(defrule
	(taunt-detected 1 55)
	(up-find-local c: archery-class c: 1)
	(up-set-target-object search-local c: 0)
=>
	(up-get-object-data object-data-target temporary-goal)
	(up-chat-data-to-all "Target: %d" g: temporary-goal)
	(up-get-object-data object-data-target-id temporary-goal)
	(up-chat-data-to-all "Target id: %d" g: temporary-goal)
;	(up-get-object-data object-data-move-x temporary-goal)
;	(up-chat-data-to-all "Move-x: %d" g: temporary-goal)
	(up-reset-search 0 1 0 0)
	(up-jump-rule -1)
)

(defrule
	(taunt-detected 1 55)
=>
	(acknowledge-taunt 1 55)
)

(defrule
	(player-number 1)
	(player-number 2)
=>
	(set-goal gl-DRUSH YES)
	(set-strategic-number sn-allow-new-build-order 4)
	(set-goal gl-strategy ranged-rush-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(set-strategic-number sn-strategy-lock 1)
	(disable-self)
)

(defrule
	(player-number 1)
	(player-number 2)
=>
;	(set-goal gl-DRUSH YES)
;	(set-strategic-number sn-allow-new-build-order 4)
	(set-goal gl-strategy scrush)
;	(set-goal gl-feudal-archery archers)
;	(set-goal gl-feudal-infantry men-at-arms)
;	(set-goal gl-strategy-type basic-flush)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(set-goal gl-strategy-type controlled-flush)
;	(set-goal gl-strategy scrush)
	(set-goal gl-DRUSH NO)
	(set-strategic-number sn-strategy-lock 1)
	(disable-self)
)

(defrule
	(map-size tiny)
	(player-number 1)
	(player-number 2)
=>
	(set-goal gl-DRUSH NO)
	(disable-self)
)

(defrule
	(player-number 1)
	(player-number 2)
=>
	(set-goal gl-DRUSH YES)
	(set-strategic-number sn-allow-new-build-order 4)
	(set-goal gl-strategy ranged-rush-strategy)
	(set-goal gl-strategy-type FC2)
	(set-goal gl-strategy-aggressiveness-level HIGH)
	(set-strategic-number sn-strategy-lock 1)
	(disable-self)
)

(defrule
	(false)
	(true)
=>
	(set-goal gl-current-age gv-castle)
	(set-goal MILITARY 1)
	(enable-timer 7 100)
	(train my-unique-unit-line)
)
#end-if


