
; ============== HOUSING ETC.

(defrule
	(game-time <= 210)
=>
	(set-strategic-number sn-maximum-gold-drop-distance 0)
	(set-strategic-number sn-maximum-wood-drop-distance 0)
	(set-strategic-number sn-maximum-food-drop-distance 0)
	(set-strategic-number sn-maximum-hunt-drop-distance 0)
	(set-strategic-number sn-maximum-stone-drop-distance 0)
	(set-strategic-number sn-food-gatherer-percentage 2)
	(set-strategic-number sn-wood-gatherer-percentage 94)
	(set-strategic-number sn-gold-gatherer-percentage 2)
	(set-strategic-number sn-stone-gatherer-percentage 2)
	(set-strategic-number sn-disable-villager-garrison 3)
)

(defrule
	(game-time > 210)
=>
	(set-strategic-number sn-maximum-gold-drop-distance 15)
	(set-strategic-number sn-maximum-wood-drop-distance 15)
	(set-strategic-number sn-maximum-food-drop-distance 20)
	(set-strategic-number sn-maximum-hunt-drop-distance 27)
	(set-strategic-number sn-maximum-stone-drop-distance 15)
	(disable-self)
)

(defrule
	(true)
=>
	(up-get-fact building-type-count-total building-class gl-my-builder-count)
	(up-get-fact building-type-count building-class temporary-goal)
	(up-modify-goal gl-my-builder-count g:- temporary-goal)
	(up-get-fact building-type-count-total tower-class temporary-goal)
	(up-modify-goal gl-my-builder-count g:+ temporary-goal)
	(up-get-fact building-type-count tower-class temporary-goal2)
	(up-modify-goal gl-my-builder-count g:- temporary-goal)
	(up-get-fact building-type-count-total tower-class temporary-goal)
	(up-modify-goal gl-my-builder-count g:+ temporary-goal)
	(up-get-fact building-type-count farm-class temporary-goal2)
	(up-modify-goal gl-my-builder-count g:- temporary-goal)
	(up-get-fact building-type-count house gl-my-house-count)
	(set-goal gl-required-food 1500)
	(set-strategic-number sn-unit-queue-speed 3)
)

(defrule
	(game-time < 480)
	(up-pending-placement c: barracks)
=>
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time < 480)
	(up-pending-placement c: archery-range)
=>
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time < 480)
	(up-pending-placement c: stable)
=>
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time < 480)
	(up-pending-placement c: castle)
=>
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time < 480)
	(up-pending-placement c: market)
=>
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time < 480)
	(up-pending-placement c: town-center)
=>
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time < 480)
	(up-pending-placement c: siege-workshop)
=>
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time < 480)
	(up-pending-placement c: house)
=>
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time < 480)
	(up-pending-placement c: farm)
=>
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time < 480)
	(up-pending-placement c: dock)
=>
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-point-contains gl-enemy-position-x c: town-center)
	(up-point-distance gl-enemy-position-x gl-position-self-x < 88)
	(or	(up-point-distance gl-enemy-position-x gl-position-self-x < 78)
		(up-research-status c: build-speed-tech != research-complete))
	(game-time > 0)
	(game-time < 20)
	(strategic-number sn-extra-builder-notice < 1)
	(building-type-count-total stable > 0)
=>
	(set-goal temporary-goal 0)
	(up-assign-builders c: stable c: 2)
	(set-strategic-number sn-extra-builder-notice 1)
)

(defrule
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-point-contains gl-enemy-position-x c: town-center)
	(up-point-distance gl-enemy-position-x gl-position-self-x < 88)
	(or	(up-point-distance gl-enemy-position-x gl-position-self-x < 78)
		(up-research-status c: build-speed-tech != research-complete))
	(game-time > 0)
	(game-time < 20)
	(strategic-number sn-extra-builder-notice < 1)
	(building-type-count-total barracks > 0)
=>
	(set-goal temporary-goal 0)
	(up-assign-builders c: barracks c: 2)
	(set-strategic-number sn-extra-builder-notice 2)
)

(defrule
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-point-contains gl-enemy-position-x c: town-center)
	(up-point-distance gl-enemy-position-x gl-position-self-x < 88)
	(or	(up-point-distance gl-enemy-position-x gl-position-self-x < 78)
		(up-research-status c: build-speed-tech != research-complete))
	(game-time > 0)
	(game-time < 20)
	(strategic-number sn-extra-builder-notice < 1)
	(building-type-count-total archery-range > 0)
=>
	(set-goal temporary-goal 0)
	(up-assign-builders c: archery-range c: 2)
	(set-strategic-number sn-extra-builder-notice 3)
)

(defrule
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(or	(and	(strategic-number sn-extra-builder-notice == 1)
			(building-type-count stable == 0))
		(or	(and	(strategic-number sn-extra-builder-notice == 2)
				(building-type-count barracks == 0))
			(and	(strategic-number sn-extra-builder-notice == 3)
				(building-type-count archery-range == 0))))
=>
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time < 480)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal gl-remote-total 0)
	(up-set-target-point gl-position-self-x)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: town-center c: 1)
)

(defrule
	(game-time < 480)
	(up-set-target-object search-local c: 0)
=>
	(up-get-object-data object-data-garrison-count temporary-goal2)
	(up-modify-goal gl-my-builder-count g:+ temporary-goal2)
)

(defrule
	(game-time < 480)
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-garrison-count g:== gl-my-villager-count)
		(up-compare-goal gl-my-villager-count g:< gl-my-builder-count))
	(up-pending-placement c: barracks)
=>
	(up-reset-placement c: barracks)
)

(defrule
	(game-time < 480)
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-garrison-count g:== gl-my-villager-count)
		(up-compare-goal gl-my-villager-count g:< gl-my-builder-count))
	(up-pending-placement c: archery-range)
=>
	(up-reset-placement c: archery-range)
)

(defrule
	(game-time < 480)
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-garrison-count g:== gl-my-villager-count)
		(up-compare-goal gl-my-villager-count g:< gl-my-builder-count))
	(up-pending-placement c: stable)
=>
	(up-reset-placement c: stable)
)

(defrule
	(game-time < 480)
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-garrison-count g:== gl-my-villager-count)
		(up-compare-goal gl-my-villager-count g:< gl-my-builder-count))
	(up-pending-placement c: house)
=>
	(up-reset-placement c: house)
)

(defrule
	(game-time < 480)
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-garrison-count g:== gl-my-villager-count)
		(up-compare-goal gl-my-villager-count g:< gl-my-builder-count))
	(up-pending-placement c: market)
=>
	(up-reset-placement c: market)
)

(defrule
	(game-time < 480)
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-garrison-count g:== gl-my-villager-count)
		(up-compare-goal gl-my-villager-count g:< gl-my-builder-count))
	(up-pending-placement c: siege-workshop)
=>
	(up-reset-placement c: siege-workshop)
)

(defrule
	(game-time < 480)
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-garrison-count g:== gl-my-villager-count)
		(up-compare-goal gl-my-villager-count g:< gl-my-builder-count))
	(up-pending-placement c: monastery)
=>
	(up-reset-placement c: monastery)
)

(defrule
	(game-time < 480)
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-garrison-count g:== gl-my-villager-count)
		(up-compare-goal gl-my-villager-count g:< gl-my-builder-count))
	(up-pending-placement c: town-center)
=>
	(up-reset-placement c: town-center)
)

(defrule
	(game-time < 480)
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-garrison-count g:== gl-my-villager-count)
		(up-compare-goal gl-my-villager-count g:< gl-my-builder-count))
	(up-pending-placement c: castle)
=>
	(up-reset-placement c: castle)
)

(defrule
	(game-time < 300)
	(stance-toward focus-player enemy)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 9)
	(up-find-remote c: -1 c: 1)
	(up-get-search-state gl-local-total)
)

(defrule
	(game-time < 300)
	(goal gl-remote-total 0)
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2)
)

(defrule
	(game-time < 480)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

(defrule
	(game-time < 300)
	(goal gl-remote-total 0)
=>
	(up-ungarrison c: town-center)
)

(defrule
	(or	(up-pending-placement c: barracks)
		(or	(up-pending-placement c: archery-range)
			(or	(up-pending-placement c: stable)
				(or	(building-type-count-total barracks > 0)
					(or	(building-type-count-total archery-range > 0)
						(building-type-count-total stable > 0))))))
	(game-time == 0)
=>
	(set-goal gl-my-builder-count 10000)
)

(defrule
	(or	(up-pending-placement c: barracks)
		(or	(up-pending-placement c: archery-range)
			(or	(up-pending-placement c: stable)
				(or	(building-type-count-total barracks > 0)
					(or	(building-type-count-total archery-range > 0)
						(building-type-count-total stable > 0))))))
	(strategic-number sn-extra-builder-notice >= 1)
	(game-time == 1)
=>
	(set-goal gl-my-builder-count 10000)
)

(defrule
	(game-time >= 20)
=>
	(up-assign-builders c: barracks c: 1)
	(up-assign-builders c: archery-range c: 1)
	(up-assign-builders c: stable c: 1)
	(disable-self)
)

(defrule
	(or	(and	(game-time > 900)
			(up-compare-goal gl-my-villager-count-total > 60))
		(or	(civilian-population >= imperial-villager-cap)
			(or	(civilian-population >= 90)
				(or	(up-compare-goal gl-my-villager-count-total > 90)
					(and	(military-population < 70)
						(and	(game-time < 600)
							(up-compare-goal gl-military-percentage < 100)))))))
=>
	(set-goal gl-required-food 400)
)

(defrule
	(or	(and	(game-time > 900)
			(up-compare-goal gl-my-villager-count-total > 60))
		(or	(civilian-population >= imperial-villager-cap)
			(or	(civilian-population >= 90)
				(up-compare-goal gl-my-villager-count-total > 90))))
=>
	(set-goal gl-required-food 400)
)

(defrule
	(game-time < 600)
	(up-compare-goal gl-my-villager-count-total > 60)
	(up-compare-goal gl-military-percentage < 80)
=>
	(set-goal gl-required-food 300)
)

(defrule
	(or 	(cc-players-unit-type-count 0 deep-fish > 20)
		(or	(cc-players-unit-type-count 0 shore-fish > 25)
			(and	(cc-players-unit-type-count 0 deep-fish > 9)
				(cc-players-unit-type-count 0 shore-fish > 9))))
	(nor	(map-type fortress)
		(map-type oasis))
	(building-type-count town-center > 0)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock mixed-map-style)
	(chat-to-player my-player-number "Water map - enable docking")
	(disable-self)
)

(defrule
	(game-time <= 22)
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(wall-completed-percentage 2 == 100)
	(building-type-count-total stone-wall-line < 1)
	(building-type-count-total palisade-wall < 1)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock islands-map-water-style)
	(set-strategic-number sn-minimum-boat-attack-group-size 1)
	(set-strategic-number sn-maximum-boat-attack-group-size 1)
	(set-goal DOCK 2)
	(chat-to-player my-player-number "Islands, huh?")
	(set-goal gl-islands-style YES)
	(set-goal gl-dm-wood-to-sell 0)
	(set-goal gl-dm-food-to-sell 2500)
	(set-goal gl-dm-stone-to-sell 1000)
	(disable-self)
)

(defrule
	(game-time > 1)
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(or 	(cc-players-unit-type-count 0 deep-fish > high-fish-amount)
		(or	(cc-players-unit-type-count 0 shore-fish > high-fish-amount)
			(and	(cc-players-unit-type-count 0 deep-fish > average-fish-amount)
				(cc-players-unit-type-count 0 shore-fish > average-fish-amount))))
=>
	(set-goal gl-dm-wood-to-sell 0)
	(set-goal gl-dm-food-to-sell 2000)
	(set-goal DOCK 1)
	(set-goal gl-heavy-water-map YES)
	(chat-to-player my-player-number "The map seems to have a lot of water")
	(disable-self)
)

(defrule
	(game-time > 1)
	(game-time < 10)
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(nor 	(cc-players-unit-type-count 0 deep-fish > high-fish-amount)
		(or	(cc-players-unit-type-count 0 shore-fish > high-fish-amount)
			(and	(cc-players-unit-type-count 0 deep-fish > average-fish-amount)
				(cc-players-unit-type-count 0 shore-fish > average-fish-amount))))
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock land-map-style)
	(chat-to-player my-player-number "The map doesn't seem to have much water")
	(disable-self)
)

(defrule
	(game-time > 10)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(or	(players-building-type-count any-enemy dock > 1)
		(players-building-type-count any-ally dock > 1))
	(up-compare-goal gl-heavy-water-map != YES)
=>
	(set-goal DOCK 1)
	(set-goal gl-heavy-water-map YES)
	(chat-to-player my-player-number "Someone is going water - do so too")
;	(set-strategic-number sn-dock-avoidance-factor -10000)
	(set-strategic-number sn-minimum-water-body-size-for-dock mixed-map-style)
	(disable-self)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
=>
	(set-strategic-number sn-dock-avoidance-factor -10000)
	(set-strategic-number sn-dock-proximity-factor -7000)
	(set-strategic-number sn-dock-placement-mode 1)
	(disable-self)
)

(defrule
	(or	(goal gl-heavy-water-map YES)
		(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style))
	(game-time > 300)
=>
	(set-strategic-number sn-percent-building-cancellation 20)
	(disable-self)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
=>
	(set-goal gl-dm-water-strategy dm-water-plan)
	(set-strategic-number sn-percent-building-cancellation 85)
	(disable-self)
)

(defrule
	(goal gl-heavy-water-map YES)
=>
	(set-goal gl-dm-water-strategy dm-water-plan)
	(up-modify-goal gl-dm-water-strategy c:+ 3); Galleons -> light galleons etc.
	(set-strategic-number sn-percent-building-cancellation 85)
	(disable-self)
)

(defrule
	(or	(goal gl-heavy-water-map YES)
		(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style))
	(game-time < 300)
	(strategic-number sn-percent-building-cancellation < 85)
=>
	(set-strategic-number sn-percent-building-cancellation 85)
)

(defrule
	(starting-age < post-imperial-age)
	(up-compare-goal gl-dm-food-to-sell > 0)
=>
	(set-goal gl-dm-food-to-sell 0)
)

(defrule
	(up-pending-objects c: town-center == 0)
	(strategic-number sn-town-center-placement != 0)
=>
	(set-strategic-number sn-town-center-placement 0)
)

#load-if-not-defined ALL-TECHS-ENABLED
(defrule
	(civ-selected hun)
=>
	(set-goal gl-my-house-count 9000)
)
#end-if

(defrule
	(game-time > 180)
=>
	(set-goal gl-fixed-eco-balancing NO)
	(set-goal gl-current-age gv-imperial)
	(enable-timer 8 60)
	(disable-self)
)

(defrule
	(game-time > 180)
=>
	(set-strategic-number sn-allow-resource-spending 6)
	(up-modify-sn sn-stone-gatherer-percentage c:max 4)
)

(defrule
	(game-time > 600)
	(civilian-population > 100)
=>
	(up-modify-sn sn-stone-gatherer-percentage c:max 4)
)

(defrule
	(game-time > 600)
	(civilian-population > 100)
	(goal gl-dm-allow-UU-training 1)
=>
	(up-modify-sn sn-stone-gatherer-percentage c:max 6)
)

(defrule
	(true)
=>
	(enable-timer 1 0)
	(enable-timer 7 0)
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-home-exploration-time 0)
	(set-strategic-number sn-mill-max-distance 28)
	(set-strategic-number sn-enable-training-queue 1)
	(set-strategic-number sn-dm-low-housing-time dm-low-housing-time)
	(up-set-defense-priority c: town-center c: 15000)
	(set-goal gl-strategy-aggressiveness-level VERY-LOW)
	(disable-self)
)

(defrule
	(or	(up-compare-goal gl-enemy-castle-distance < 300)
		(or	(game-time > 300)
			(or	(players-building-type-count target-player bombard-tower > 0)
				(unit-type-count battering-ram-line > 0))))
=>
	(set-goal target-system-rewriting YES)
	(disable-self)
)

(defrule
	(starting-age != post-imperial-age)
=>
	(set-strategic-number sn-enable-training-queue 0)
	(disable-self)
)

(defrule
	(timer-triggered 37)
=>
	(up-retreat-now)
	(disable-self)
)

(defrule
	(soldier-count > 1)
	(players-building-count target-player > 0)
	(strategic-number sn-total-number-explorers == 10)
	(nand	(game-time < 150)
		(player-valid 3))
=>
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
	(chat-to-player my-player-number "Explorers 0")
	(up-reset-scouts)
	(up-retreat-now)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: scout-unit c: 1)
	(up-target-point 0 action-stop -1 aggressive)
	(disable-self)
)

(defrule
	(or	(game-time > 150)
		(or	(up-compare-goal gl-target-player-distance < 90)
			(up-compare-const gv-2-player-game == 1)))
	(up-compare-const gv-explored-map == 0)
	(players-unit-type-count target-player villager > 0)
=>
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
;	(chat-to-player my-player-number "Explorers 0")
	(up-reset-scouts)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: scout-unit c: 1)
	(up-find-remote c: villager-class c: 1)
	(up-target-objects 0 action-default -1 aggressive)
	(disable-self)
)

(defrule
	(game-time > 10)
	(game-time <= 150)
	(up-point-contains gl-enemy-position-x c: town-center)
=>
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
	(up-reset-scouts)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: scout-unit c: 1)
	(up-get-fact resource-amount amount-kills temporary-goal)
;	get-loss-count
)

(defrule
	(game-time > 0)
	(game-time <= 150)
	(up-point-contains gl-enemy-position-x c: town-center)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:== gl-starting-scout-id)
	(up-object-data object-data-action == -1)
	(up-object-data object-data-target == -1); Scout idles
;	losses == 0
=>
	(up-target-point gl-enemy-position-x action-move -1 -1)
)

(defrule
	(or	(and	(game-time > 500)
			(and	(players-building-count every-enemy == 0)
				(strategic-number sn-number-explore-groups == 0)))
		(and	(strategic-number sn-number-explore-groups == dm-high-scouts)
			(and	(town-under-attack)
				(soldier-count <= dm-high-scouts))))
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(up-reset-scouts)
)

(defrule
	(not	(up-point-contains gl-enemy-position-x c: town-center))
	(up-compare-goal threat-time > 10000)
	(game-time < 120)
	(game-time > 10)
	(soldier-count > 1)
	(players-building-count every-enemy == 0)
=>
	(set-strategic-number sn-number-explore-groups dm-high-scouts)
	(set-strategic-number sn-total-number-explorers dm-high-scouts)
	(up-chat-data-to-player my-player-number "Explorers %d" s: sn-number-explore-groups)
	(disable-self)
)

(defrule
	(game-time < 600)
	(up-timer-status 26 != timer-running)
	(players-building-count any-enemy > 0)
	(up-point-contains gl-enemy-position-x c: town-center)
	(goal MILITARY 1)
=>
	(up-get-point-distance gl-enemy-position-x gl-position-self-x temporary-goal)
	(up-modify-goal temporary-goal g:- gl-target-player-distance)
)

(defrule
	(or	(and	(up-compare-goal threat-time > 3000)
			(and	(players-building-count every-enemy == 0)
				(strategic-number sn-patrol-group-notice < 2)))
		(and	(game-time < 210)
			(up-compare-goal gl-enemy-units-in-town > 0)))
=>
	(up-jump-rule 1)
)

(defrule
	(game-time < 600)
	(up-timer-status 26 != timer-running)
	(or	(up-compare-goal temporary-goal < -10); Real target is a lot closer
		(players-building-count every-enemy == 0))
	(up-point-contains gl-enemy-position-x c: town-center)
	(goal MILITARY 1)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 actionid-attack orderid-explore -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-enemy-position-x action-patrol -1 -1)
	(set-goal TSA 1)
	(set-strategic-number sn-patrol-group-notice 2)
	(enable-timer 26 10)
)

(defrule
	(soldier-count > 0)
	(up-compare-const gv-pocket-position == 1)
=>
	(up-send-scout group-type-land-explore scout-opposite)
	(disable-self)
)

(defrule
	(game-time > 600)
	(or	(game-time > 900)
		(starting-age == post-imperial-age))
=>
	(up-assign-builders c: castle c: dm-max-TC-builders); Use same amount as for TCs, 4/1
	(set-goal gl-dm-food-to-sell 0)
	(set-goal gl-dm-wood-to-sell 0)
	(set-goal gl-dm-stone-to-sell 0)
	(disable-self)
)

#load-if-defined MAYAN-CIV
#load-if-defined UP-2-PLAYER-GAME
(defrule
	(goal gl-my-villager-count 4)
	(building-type-count-total barracks > 1)
	(building-type-count-total market > 0)
	(building-type-count market == 0)
	(building-type-count-total house > 0)
	(game-time < 35)
=>
	(up-assign-builders c: market c: 2)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time >= 35)
=>
	(up-assign-builders c: market c: 1)
	(disable-self)
)
#end-if
#end-if

#load-if-not-defined DARK-AGE-START
#load-if-not-defined FEUDAL-AGE-START
(defrule
	(civ-selected mayan)
	(players-civ focus-player mayan)
	(strategic-number sn-threat-level < 0); Not first rule pass
	(game-time < 60)
	(starting-age == post-imperial-age)
	(or	(building-type-count-total barracks < 2)
		(building-type-count-total market < 1))
=>
	(up-jump-rule 13)
)

(defrule
	(civ-selected gothic)
	(starting-age == post-imperial-age)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(building-type-count-total house > 20)
	(up-compare-goal gl-dm-barracks-number >= 7)
	(up-pending-objects c: house > 4)
	(building-type-count-total barracks < 7)
=>
	(up-jump-rule 12)
)

(defrule
	(civ-selected gothic)
	(starting-age == post-imperial-age)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(building-type-count-total house > 1)
	(up-compare-goal gl-dm-barracks-number >= 3)
	(or	(and	(building-type-count-total barracks < 2)
			(building-type-count-total archery-range < 1))
		(building-type-count-total house > 5))
	(building-type-count-total archery-range < 2)
	(building-type-count-total barracks < 3)
=>
	(up-jump-rule 11)
)

(defrule
	(or	(and	(game-time < 120)
			(and	(or	(up-compare-const gv-michi-style == 1)
					(and	(up-compare-goal gl-my-villager-count < 7)
						(game-time < 30)))
				(and	(up-pending-objects c: house > 0)
					(or	(up-pending-objects c: house > 1)
						(up-compare-goal gl-my-villager-count < dm-housing-villagers2)))))
		(population-headroom < 4))
=>
	(up-jump-rule 10)
)

(defrule
	(true)
=>
	(set-goal temporary-goal2 6)
)

(defrule
	(game-time < 8)
=>
	(set-goal temporary-goal2 2)
)

(defrule
	(game-time < 240)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(set-goal temporary-goal 0)
)

(defrule
	(game-time < 210)
	(building-type-count-total house > 0)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
=>
	(set-goal temporary-goal 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(housing-headroom < 50)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-compare-goal gl-my-villager-count >= dm-housing-villagers1)
	(building-type-count-total barracks > 4)
	(civ-selected gothic)
	(up-pending-objects c: house < 7)
	(up-can-build 0 c: house)
=>
	(set-goal gl-house-build-priority 10000)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(housing-headroom < 50)
	(or	(up-pending-objects c: house < 2)
		(up-compare-goal gl-my-villager-count >= dm-housing-villagers1))
	(or	(up-pending-objects c: house < 4)
		(up-compare-goal gl-my-villager-count >= dm-housing-villagers2))
	(up-pending-objects c: house < 7)
	(up-can-build 0 c: house)
=>
	(set-goal gl-house-build-priority 10000)
)

(defrule
	(or	(game-time s:>= sn-dm-low-housing-time)
		(strategic-number sn-minimum-water-body-size-for-dock != land-map-style))
	(housing-headroom < 70)
	(or	(up-pending-objects c: house < 2)
		(up-compare-goal gl-my-villager-count >= dm-housing-villagers1))
	(or	(up-pending-objects c: house < 4)
		(up-compare-goal gl-my-villager-count >= dm-housing-villagers2))
	(up-pending-objects c: house < 9)
	(up-can-build 0 c: house)
=>
	(set-goal gl-house-build-priority 10000)
)

(defrule
	(or	(and	(game-time > 5)
			(game-time < 300))
		(up-compare-goal gl-my-villager-count g:<= gl-my-builder-count))
=>
	(up-jump-rule 3)
)

(defrule
	(game-time < 210)
	(goal temporary-goal 1)
	(up-set-target-object search-local c: 0)
	(goal gl-house-build-priority 10000)
	(up-can-build 0 c: house)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size dm-starting-zone-size)
	(up-build place-point 0 c: house)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(or	(game-time s:>= sn-dm-low-housing-time)
		(strategic-number sn-minimum-water-body-size-for-dock != land-map-style))
	(goal gl-house-build-priority 10000)
	(up-can-build 0 c: house)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(up-modify-sn sn-placement-zone-size g:= gl-my-maximum-town-size)
	(up-set-placement-data my-player-number -1 c: 0)
	(up-build place-control 0 c: house)
	(set-goal gl-house-build-priority -1)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(goal gl-house-build-priority 10000)
	(up-can-build 0 c: house)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(up-modify-sn sn-placement-zone-size g:= temporary-goal2)
	(up-set-placement-data my-player-number villager-class c: 0)
	(up-build place-control 0 c: house)
	(set-goal gl-house-build-priority -1)
	(up-modify-goal gl-my-builder-count c:+ 1)
)
#end-if
#end-if

(defrule
	(starting-age == dark-age)
	(game-time < 240)
	(population-headroom > 3)
	(housing-headroom < 70)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(or	(up-pending-objects c: house < 1)
		(up-compare-goal gl-current-age == gv-dark-up))
	(up-pending-objects c: house < 4)
	(up-can-build 0 c: house)
=>
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build place-control 0 c: house)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(starting-age == feudal-age)
	(game-time < 240)
	(population-headroom > 3)
	(housing-headroom < 70)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(or	(up-pending-objects c: house < 1)
		(up-compare-goal gl-current-age == gv-feudal-up))
	(up-pending-objects c: house < 4)
	(up-can-build 0 c: house)
=>
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build place-control 0 c: house)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
	(starting-age < castle-age)
	(up-compare-const gv-maximum-age != feudal-age)
	(building-type-count-total market < 1)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: market)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size dm-starting-zone-size)
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: market)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(or	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
		(game-time > 50))
	(starting-age < castle-age)
	(building-type-count-total blacksmith < 1)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: blacksmith)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size dm-starting-zone-size)
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: blacksmith)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(starting-age < imperial-age)
	(building-type-count-total siege-workshop < 1)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: siege-workshop)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size dm-starting-zone-size)
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: siege-workshop)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(or	(starting-age < imperial-age)
		(game-time > 900))
	(building-type-count-total monastery < 1)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: monastery)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size dm-starting-zone-size)
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: monastery)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(starting-age != post-imperial-age)
	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
	(building-type-count-total dock > 3)
	(building-type-count-total blacksmith < 1)
=>
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: blacksmith)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(starting-age < imperial-age)
	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
	(building-type-count-total dock > 3)
	(building-type-count-total university < 1)
=>
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: university)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(starting-age < castle-age)
	(game-time >= 240)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(population-headroom > 3)
	(housing-headroom < 70)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(or	(up-pending-objects c: house < 2)
		(up-compare-goal gl-my-villager-count > 7))
	(or	(up-pending-objects c: house < 4)
		(up-compare-goal gl-my-villager-count > 10))
	(up-pending-objects c: house < 10)
	(up-can-build 0 c: house)
=>
	(up-build place-normal 0 c: house)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(or	(goal MILITARY 1)
		(game-time > 360))
	(strategic-number sn-minimum-water-body-size-for-dock <= islands-map-landing-style)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-compare-goal gl-my-villager-count > 7)
	(or	(up-compare-goal gl-my-villager-count > 17)
		(or	(players-building-type-count target-player castle > 0)
			(players-building-type-count target-player bombard-tower > 0)))
	(building-type-count-total siege-workshop < 3)
=>
	(up-set-placement-data my-player-number -1 c: 15)
	(up-build place-control 0 c: siege-workshop)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time > 520)
	(strategic-number sn-minimum-water-body-size-for-dock <= islands-map-landing-style)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-compare-goal gl-my-villager-count > 20)
	(building-type-count-total siege-workshop < 5)
=>
	(up-set-placement-data my-player-number -1 c: 15)
	(up-build place-control 0 c: siege-workshop)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time > 60)
	(game-time <= 240)
	(building-type-count-total barracks g:>= gl-dm-barracks-number)
	(building-type-count-total archery-range g:>= gl-dm-range-number)
	(building-type-count-total stable g:>= gl-dm-stable-number)
	(building-type-count-total siege-workshop g:>= gl-dm-workshop-number)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(nand	(building-type-count-total castle < 4)
		(goal gl-dm-allow-UU-training 1))
	(building-type-count-total market < 1)
=>
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: market)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time < 900)
	(cc-players-unit-type-count 0 relic == 0)
=>
	(up-jump-rule 1)
)

(defrule
	(game-time > 60)
	(game-time <= 300)
	(building-type-count-total barracks g:>= gl-dm-barracks-number)
	(building-type-count-total archery-range g:>= gl-dm-range-number)
	(building-type-count-total stable g:>= gl-dm-stable-number)
	(building-type-count-total siege-workshop g:>= gl-dm-workshop-number)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-compare-goal gl-sighted-relic-count > 0)
	(nand	(building-type-count-total castle < 4)
		(goal gl-dm-allow-UU-training 1))
	(building-type-count-total monastery < 1)
=>
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: monastery)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(up-compare-goal gl-my-villager-count > 7)
	(game-time > 90)
	(or	(up-compare-goal gl-my-villager-count > 10)
		(or	(civ-selected saracen)
			(civ-selected turkish)))
	(nand	(civ-selected chinese)
		(up-compare-goal gl-my-villager-count < 16))
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(building-type-count-total market < 1)
	(can-build market)
=>
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: market)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(up-compare-goal gl-my-villager-count > 6)
	(game-time > 80)
	(or	(civ-selected hun)
		(civ-selected mayan))
	(commodity-selling-price food >= 70)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(building-type-count-total market < 1)
	(can-build market)
=>
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: market)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

#load-if-defined UP-2-PLAYER-GAME
(defrule
	(up-compare-goal gl-my-villager-count > 3)
	(starting-age == post-imperial-age)
	(or	(players-civ focus-player hun)
		(players-civ focus-player mayan))
	(civ-selected mayan)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(building-type-count-total market < 1)
	(can-build market)
=>
	(up-modify-goal gl-market-build-priority c:max 1000)
)
#end-if

(defrule
	(starting-age == feudal-age)
	(game-time <= 600)
=>
	(up-jump-rule 6)
)

(defrule
	(game-time > 60)
	(game-time <= 240)
	(building-type-count-total barracks g:>= gl-dm-barracks-number)
	(building-type-count-total archery-range g:>= gl-dm-range-number)
	(building-type-count-total stable g:>= gl-dm-stable-number)
	(building-type-count-total siege-workshop g:>= gl-dm-workshop-number)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(nand	(building-type-count-total castle < 4)
		(goal gl-dm-allow-UU-training 1))
	(building-type-count-total town-center < 6)
=>
	(set-strategic-number sn-placement-zone-size 20)
	(up-assign-builders c: town-center-foundation c: 1)
	(set-strategic-number sn-town-center-placement 0)
	(up-set-placement-data my-player-number -1 c: -12)
	(up-build place-control 0 c: town-center)
)

(defrule
	(civ-selected hun)
	(population > 25)
	(or	(strategic-number sn-market-notice < 1)
		(and	(population > 33)
			(building-type-count-total town-center < 3)))
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(game-time <= 600)
	(building-type-count-total town-center < 4)
=>
	(set-strategic-number sn-placement-zone-size 10)
	(up-assign-builders c: town-center-foundation c: 1)
	(set-strategic-number sn-town-center-placement 0)
	(up-set-placement-data my-player-number -1 c: -12)
	(up-build place-control 0 c: town-center)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(population > 7)
	(or	(and	(civ-selected chinese)
			(building-type-count-total town-center < 2))
		(population > dm-extra-TC-pop))
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(game-time <= 600)
	(building-type-count-total town-center < 3)
=>
	(set-strategic-number sn-placement-zone-size 10)
	(up-assign-builders c: town-center-foundation c: 1)
	(set-strategic-number sn-town-center-placement 0)
	(up-set-placement-data my-player-number -1 c: -12)
	(up-build place-control 0 c: town-center)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(up-compare-const gv-michi-style == 1)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(game-time <= 600)
	(building-type-count-total town-center < michi-TCs)
=>
	(set-strategic-number sn-placement-zone-size 20)
	(up-assign-builders c: town-center-foundation c: dm-max-TC-builders)
	(set-strategic-number sn-town-center-placement mining-camp)
	(up-build place-normal 0 c: town-center)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(up-compare-goal gl-my-villager-count > 50)
	(building-type-count town-center > 0)
	(building-type-count-total town-center < 6)
=>
	(set-strategic-number sn-placement-zone-size 20)
	(up-assign-builders c: town-center-foundation c: dm-max-TC-builders)
	(set-strategic-number sn-town-center-placement 0)
	(up-set-placement-data my-player-number -1 c: -15)
	(up-build place-control 0 c: town-center)
)

(defrule
	(or	(up-compare-goal gl-my-villager-count > 20)
		(game-time > 240))
	(building-type-count town-center > 0)
	(building-type-count-total town-center < 6)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 20)
	(up-assign-builders c: town-center-foundation c: 1)
	(set-strategic-number sn-town-center-placement 0)
	(up-set-placement-data my-player-number -1 c: -15)
	(up-build place-control 0 c: town-center)
)

(defrule
	(or	(and	(goal gl-heavy-water-map YES)
			(building-type-count-total dock < 9))
		(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(strategic-number sn-minimum-water-body-size-for-dock >= mixed-map-style)
	(building-type-count-total dock < 20)
	(can-build dock)
=>
	(up-modify-goal gl-dock-build-priority c:max 1000)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(stone-amount > 1500)
	(building-type-count-total dock > 13)
	(building-type-count-total watch-tower < 10)
	(can-build watch-tower)
=>
	(up-set-placement-data my-player-number dock c: 1)
	(up-build place-control 0 c: watch-tower)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(or	(and	(game-time < 900)
			(cc-players-unit-type-count 0 relic == 0))
		(or	(up-compare-goal gl-my-villager-count g:<= gl-my-builder-count)
			(not	(can-build monastery))))
=>
	(up-jump-rule 1)
)

#load-if-not-defined UP-2-PLAYER-TEAM
(defrule
	(game-time > 240)
	(or	(game-time > 300)
		(or	(civ-selected hun)
			(or	(civ-selected aztec)
				(civ-selected chinese))))
	(or	(not	(player-valid any-ally))
		(up-compare-const gv-pocket-position == 1))
	(building-type-count-total monastery < 1)
=>
	(up-set-placement-data my-player-number -1 c: -15)
	(up-build dm-placement-style 0 c: monastery)
	(up-modify-goal gl-my-builder-count c:+ 1)
)
#else
(defrule
	(game-time > 210)
	(or	(game-time > 240)
		(or	(civ-selected hun)
			(or	(civ-selected aztec)
				(or	(civ-selected chinese)
					(or	(civ-selected mayan)
						(civ-selected spanish))))))
	(building-type-count-total monastery < 1)
=>
	(up-set-placement-data my-player-number -1 c: -15)
	(up-build dm-placement-style 0 c: monastery)
	(up-modify-goal gl-my-builder-count c:+ 1)
)
#end-if

#load-if-defined AZTEC-CIV
(defrule
	(building-type-count-total barracks > 2)
	(goal gl-strategy dm-champ-turtle)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(nor	(players-civ any-enemy aztec)
		(players-civ any-enemy viking))
	(or	(building-type-count-total monastery < 2)
		(and	(building-type-count-total barracks > 3)
			(not	(players-civ focus-player gothic))))
	(strategic-number sn-minimum-water-body-size-for-dock <= islands-map-landing-style)
	(building-type-count-total monastery < 4)
=>
	(set-goal gl-monastery-build-priority 10000)
)

(defrule
	(building-type-count-total barracks > 1)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(or	(players-civ focus-player persian)
		(or	(players-civ focus-player korean)
			(or	(players-civ focus-player slavic)
				(players-civ focus-player indian))))
	(strategic-number sn-minimum-water-body-size-for-dock <= islands-map-landing-style)
	(building-type-count-total monastery < 2)
=>
	(set-goal gl-monastery-build-priority 10000)
)

(defrule
	(building-type-count-total barracks > 4)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(or	(players-civ focus-player gothic)
		(or	(players-civ focus-player japanese)
			(players-civ focus-player chinese)))
	(strategic-number sn-minimum-water-body-size-for-dock <= islands-map-landing-style)
	(building-type-count-total monastery < 2)
=>
	(set-goal gl-monastery-build-priority 10000)
)

(defrule
	(building-type-count-total barracks > 4)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(or	(players-civ focus-player persian)
		(or	(players-civ focus-player korean)
			(or	(players-civ focus-player slavic)
				(players-civ focus-player indian))))
	(strategic-number sn-minimum-water-body-size-for-dock <= islands-map-landing-style)
	(building-type-count-total monastery < 4)
=>
	(set-goal gl-monastery-build-priority 10000)
)

(defrule
	(building-type-count-total barracks > 4)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(or	(players-civ focus-player khmer)
		(or	(players-civ focus-player burmese)
			(players-civ focus-player vietnamese)))
	(strategic-number sn-minimum-water-body-size-for-dock <= islands-map-landing-style)
	(building-type-count-total monastery < 4)
=>
	(set-goal gl-monastery-build-priority 10000)
)

(defrule
	(game-time > 180);test
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(game-time < 270)
	(goal gl-monastery-build-priority 10000)
	(can-build monastery)
=>
	(set-strategic-number sn-placement-zone-size 5)
	(up-build place-point 0 c: monastery)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time > 180);test
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(can-build monastery)
	(goal gl-monastery-build-priority 10000)
=>
	(set-strategic-number sn-placement-zone-size 10)
	(up-set-placement-data my-player-number -1 c: -8)
	(up-build place-control 0 c: monastery)
	(up-modify-goal gl-my-builder-count c:+ 1)
)
#end-if

(defrule
	(gold-amount >= 1000)
	(or	(gold-amount >= 2000)
		(up-compare-goal gl-trade-unit-count-total > 25))
	(or	(food-amount < 300)
		(and	(gold-amount >= 2000)
			(commodity-buying-price food <= 90)))
	(food-amount < 1000)
	(can-buy-commodity food)
	(commodity-buying-price food <= 130)
=>
	(buy-commodity food)
	(chat-to-player my-player-number "Buy food")
	(set-goal gl-dm-food-to-sell 0)
)

(defrule
	(gold-amount >= 1000)
	(or	(gold-amount >= 2000)
		(up-compare-goal gl-trade-unit-count-total > 25))
	(or	(wood-amount < 300)
		(and	(gold-amount >= 2000)
			(commodity-buying-price wood <= 90)))
	(wood-amount < 1000)
	(can-buy-commodity wood)
	(commodity-buying-price wood <= 130)
=>
	(buy-commodity wood)
	(chat-to-player my-player-number "Buy wood")
	(set-goal gl-dm-wood-to-sell 0)
)

(defrule
	(up-compare-goal CASTLE != 0)
	(gold-amount > 2000)
	(or	(building-type-count-total castle < 1)
		(and	(gold-amount > 3000)
			(goal gl-dm-allow-UU-training 1)))
	(building-type-count-total castle < 4)
	(commodity-buying-price stone < 250)
	(stone-amount < castle-stone)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
	(chat-to-player my-player-number "Buy stone for castle")
	(set-goal gl-dm-stone-to-sell 0)
)

(defrule
	(up-compare-goal gl-dm-food-to-sell >= 1000)
	(commodity-selling-price food > 45)
	(can-sell-commodity food)
=>
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(up-modify-goal gl-dm-food-to-sell c:- 1000)
)

(defrule
	(or	(and	(up-compare-goal gl-dm-food-to-sell < 1000)
			(up-compare-goal gl-dm-food-to-sell >= 500))
		(and	(food-amount > 1000)
			(gold-amount < 300)))
	(commodity-selling-price food > 50)
	(can-sell-commodity food)
=>
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(up-modify-goal gl-dm-food-to-sell c:- 500)
)

(defrule
	(food-amount < 10000)
	(or	(civilian-population < 60)
		(food-amount < 7000))
	(civilian-population < 80)
=>
	(up-jump-rule 1)
)

(defrule
	(food-amount > 4000)
	(or	(gold-amount < 500)
		(food-amount > 5200))
	(gold-amount < 1200)
	(can-sell-commodity food)
=>
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(up-modify-goal gl-dm-food-to-sell c:- 900)
)

(defrule
	(game-time < 900)
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
=>
	(up-jump-rule 4)
)

(defrule
	(game-time < 600)
	(up-compare-const gv-maximum-age <= feudal-age)
	(commodity-selling-price wood > 65)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(up-modify-goal gl-dm-wood-to-sell c:- 1000)
)

(defrule
	(up-compare-goal gl-dm-wood-to-sell >= 1000)
	(commodity-selling-price wood > 45)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(up-modify-goal gl-dm-wood-to-sell c:- 1000)
)

(defrule
	(up-compare-goal gl-dm-wood-to-sell >= 500)
	(up-compare-goal gl-dm-wood-to-sell < 1000)
	(commodity-selling-price wood > 45)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(up-modify-goal gl-dm-wood-to-sell c:- 500)
)

(defrule
	(wood-amount < 9000)
	(or	(civilian-population < 60)
		(wood-amount < 6500))
	(civilian-population < 80)
=>
	(up-jump-rule 1)
)

(defrule
	(dropsite-min-distance wood != -1) 
	(dropsite-min-distance wood < 5) 
	(wood-amount > 4500)
	(gold-amount < 500)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(up-modify-goal gl-dm-wood-to-sell c:- 1000)
)

(defrule
	(up-compare-goal gl-dm-stone-to-sell >= 1000)
	(commodity-selling-price stone > 60)
	(can-sell-commodity stone)
=>
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(up-modify-goal gl-dm-stone-to-sell c:- 1000)
)

(defrule
	(up-compare-goal gl-dm-stone-to-sell < 1000)
	(up-compare-goal gl-dm-stone-to-sell >= 500)
	(commodity-selling-price stone > 60)
	(can-sell-commodity stone)
=>
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(up-modify-goal gl-dm-stone-to-sell c:- 500)
)

(defrule
	(up-compare-goal gl-dm-stone-to-sell >= 100)
	(commodity-selling-price stone > 60)
	(can-sell-commodity stone)
=>
	(sell-commodity stone)
	(up-modify-goal gl-dm-stone-to-sell c:- 100)
)

#load-if-defined UP-MICHI-STYLE
(defrule
	(or	(game-time > 5)
		(up-compare-const SO-in-tech-tree == 0))
=>
	(up-jump-rule 9)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal3 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal temporary-goal2 -1)
	(disable-self)
)

(defrule
	(goal 507 -1)
=>
	(up-modify-goal 508 s:= sn-focus-player-number)
)

(defrule
	(goal 507 -1)
	(stance-toward focus-player ally)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-remote c: town-center c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point-x)
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-modify-goal 503 s:= sn-focus-player-number)
)

(defrule
	(goal 507 -1)
	(stance-toward focus-player ally)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-remote c: town-center c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-point-x)
	(up-get-point-distance gl-saved-point-x gl-point-x temporary-goal)
	(up-modify-goal 504 s:= sn-focus-player-number)
)

(defrule
	(goal 507 -1)
	(up-compare-goal gl-point-x > 0)
	(up-compare-goal gl-point-y > 0)
	(up-compare-goal gl-saved-point-x > 0)
	(up-compare-goal gl-saved-point-y > 0)
	(up-compare-goal temporary-goal g:> temporary-goal2)
=>
	(up-modify-goal temporary-goal2 g:= temporary-goal)
	(up-copy-point gl-candidate1-point-x gl-point-x)
	(up-copy-point gl-candidate2-point-x gl-saved-point-x)
)

(defrule
	(goal 507 -1)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -3)
)

(defrule
	(goal 507 -1)
	(up-compare-goal 508 < 8)
=>
	(up-modify-goal 508 c:+ 1)
	(up-modify-sn sn-focus-player-number g:= 508)
	(up-jump-rule -6)
)

(defrule
	(goal 507 -1)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal3)
)

(defrule
	(true)
=>
	(up-get-point position-center gl-cut-point-x)
	(up-copy-point gl-second-cut-point-x gl-candidate1-point-x)
	(up-copy-point gl-third-cut-point-x gl-candidate2-point-x)
	(up-lerp-percent gl-candidate1-point-x gl-candidate2-point-x c: 50)
	(up-lerp-tiles gl-cut-point-x gl-candidate1-point-x c: 50)
	(up-get-point position-center gl-point-x)
	(up-lerp-tiles gl-candidate1-point-x gl-point-x c: -30)
	(up-copy-point gl-candidate2-point-x gl-cut-point-x)
	(up-copy-point gl-original-back-point-x gl-candidate1-point-x)
	(up-copy-point gl-original-cut-point-x gl-cut-point-x)
	(set-goal 507 0)
	(disable-self)
)

(defrule
	(up-compare-const SO-in-tech-tree == 0)
=>
	(up-jump-rule 20)
)

(defrule
	(goal gl-current-age gv-castle-up)
	(player-in-game any-human-ally)
	(goal gl-cutter -1)
=>
	(chat-to-allies "Taunt 187 if you want me to cut.")
	(disable-self)
)

(defrule
	(up-compare-goal gl-current-age >= gv-castle-up)
	(or	(nor	(player-valid any-human-ally)
			(up-allied-goal any-computer-ally 499 == 4535))
		(taunt-detected any-human-ally 187))
=>
	(set-goal 499 4535)
	(set-goal 497 1)
	(set-goal 500 1)
	(set-goal 501 0)
	(set-goal 502 -1)
	(set-goal gl-cutter IN-PROGRESS)
	(chat-to-allies "I'll cut.")
;	(chat-to-all "I'll cut.")
	(disable-self)
)

(defrule
	(game-time > 120)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(or	(goal gl-cutter IN-PROGRESS)
		(goal gl-cutter YES))
	(building-type-count-total siege-workshop < 3)
	(can-build siege-workshop)
=>
	(up-modify-goal gl-workshop-build-priority c:max 1000)
)

(defrule
	(or	(goal gl-cutter IN-PROGRESS)
		(goal gl-cutter YES))
	(unit-type-count-total mangonel-line < 10)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)

(defrule
	(goal gl-cutter IN-PROGRESS)
	(or	(up-research-status c: ri-siege-onager >= research-pending)
		(and	(up-compare-goal threat-time < 30000)
			(strategic-number sn-focus-player-number > 0)))
=>
	(set-goal gl-cutter YES)
)

(defrule
	(or	(goal 500 -1)
		(unit-type-count siege-onager == 0))
=>
	(up-jump-rule 12)
)

(defrule
	(goal 500 1)
	(goal 498 -1)
	(up-timer-status 37 != timer-running)
	(up-point-contains gl-cut-point-x c: tree-class)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: mangonel-line c: 3)
	(up-target-point gl-cut-point-x action-ground -1 defensive)
	(enable-timer 37 8)
;	(chat-to-all "Tree found!")
	(up-modify-goal 502 g:= 501)
	(up-get-fact game-time 0 495)
	(up-modify-goal 495 c:+ 50)
	(set-goal 498 0)
)

(defrule
	(goal 500 1)
	(up-timer-status 37 != timer-running)
	(up-compare-goal 502 g:== 501)
	(up-point-contains gl-cut-point-x c: tree-class)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: mangonel-line c: 3)
	(up-target-point gl-cut-point-x action-ground -1 defensive)
	(enable-timer 37 8)
;	(chat-to-all "Tree found!")
	(up-get-fact game-time 0 495)
	(up-modify-goal 495 c:+ 50)
)

(defrule
	(goal 500 1)
	(goal 498 0)
	(up-compare-goal 502 g:== 501)
	(not	(up-point-contains gl-cut-point-x c: tree-class))
=>
	(set-goal 500 2)
	(set-goal 503 0)
;	(chat-to-all "Gone")
	(set-goal 498 1)
)

(defrule
	(goal 500 1)
	(up-timer-status 37 != timer-running)
	(up-point-contains gl-cut-point-x c: tree-class)
=>
	(up-get-point position-self gl-saved-point-x)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: mangonel-line c: 3)
	(up-target-point gl-cut-point-x action-ground -1 defensive)
	(enable-timer 37 8)
;	(chat-to-all "Tree found!")
	(set-goal 500 2)
	(up-cross-tiles gl-cut-point-x gl-candidate1-point-x c: 2)
)

(defrule
	(goal 500 2)
	(up-timer-status 37 != timer-running)
=>
	(up-get-point position-self gl-saved-point-x)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: mangonel-line c: 3)
	(up-target-point gl-cut-point-x action-ground -1 defensive)
	(enable-timer 37 8)
;	(chat-to-all "Tree found!")
	(set-goal 500 3)
	(up-cross-tiles gl-cut-point-x gl-candidate1-point-x c: 2)
)

(defrule
	(goal 500 3)
	(up-timer-status 37 != timer-running)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: mangonel-line c: 3)
	(up-target-point gl-cut-point-x action-ground -1 defensive)
	(enable-timer 37 8)
;	(chat-to-all "Tree found!")
	(set-goal 500 4)
	(up-cross-tiles gl-cut-point-x gl-candidate1-point-x c: -8)
)

(defrule
	(goal 500 4)
	(up-timer-status 37 != timer-running)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: mangonel-line c: 3)
	(up-target-point gl-cut-point-x action-ground -1 defensive)
	(enable-timer 37 8)
;	(chat-to-all "Tree found!")
	(set-goal 500 5)
	(up-cross-tiles gl-cut-point-x gl-candidate1-point-x c: 2)
)

(defrule
	(goal 500 5)
	(up-timer-status 37 != timer-running)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: mangonel-line c: 3)
	(up-target-point gl-cut-point-x action-ground -1 defensive)
	(enable-timer 37 8)
;	(chat-to-all "Tree found!")
	(set-goal 500 1)
	(up-cross-tiles gl-cut-point-x gl-candidate1-point-x c: 2)
)

(defrule
	(goal 500 1)
	(up-compare-goal 501 < cut-length)
	(not	(up-point-contains gl-cut-point-x c: tree-class))
=>
	(up-lerp-tiles gl-cut-point-x gl-candidate1-point-x c: -2)
	(up-modify-goal 501 c:+ 2)
;	(up-chat-data-to-all "No tree - move forward! (%d)" g: 501)
	(up-get-fact game-time 0 495)
	(up-modify-goal 495 c:+ 50)
)

(defrule
	(goal 500 1)
	(goal 498 1)
	(up-compare-goal 503 < 3)
	(up-point-contains gl-cut-point-x c: tree-class)
	(game-time g:>= 495)
=>
	(up-modify-goal gl-candidate2-point-x c:- 1)
	(up-modify-goal gl-candidate2-point-y c:- 1)
	(up-copy-point gl-cut-point-x gl-candidate2-point-x)
	(set-goal 501 0)
	(up-modify-goal 503 c:+ 1)
;	(up-chat-data-to-all "No progress in a while - reset cut. (%d)" g: 501)
)

(defrule
	(research-completed ri-siege-onager)
	(up-compare-goal 501 > 0)
	(or	(up-compare-goal 501 >= cut-length)
		(or	(goal gl-cut-point-x -1)
			(goal gl-cut-point-y -1)))
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: mangonel-line c: 240)
	(up-target-point 0 action-stop -1 -1)
	(set-goal 500 -1)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(up-modify-goal 497 c:+ 1)
)

(defrule
	(research-completed ri-siege-onager)
	(up-compare-goal 501 > 0)
	(or	(up-compare-goal gl-cut-point-x g:>= gl-max-coordinate-value)
		(up-compare-goal gl-cut-point-y g:>= gl-max-coordinate-value))
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: mangonel-line c: 240)
	(up-target-point 0 action-stop -1 -1)
	(set-goal 500 -1)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(up-modify-goal 497 c:+ 1)
)

(defrule
	(goal 499 4535)
	(goal 497 2)
	(game-time > 4800)
=>
;	(chat-to-all "Attempting a new cut.")
	(up-copy-point temporary-goal gl-original-cut-point-x)
	(up-add-point temporary-goal gl-original-back-point-x c: -1)
	(up-copy-point gl-cut-point-x gl-third-cut-point-x)
	(up-add-point gl-cut-point-x temporary-goal c: 1)
	(up-copy-point gl-candidate1-point-x gl-third-cut-point-x)
	(up-copy-point gl-candidate2-point-x gl-third-cut-point-x)
	(up-lerp-percent gl-cut-point-x gl-third-cut-point-x c: 50)
	(set-goal 498 -1)
	(set-goal 500 1)
	(set-goal 501 0)
	(set-goal 502 -1)
	(disable-self)
)

(defrule
	(goal 499 4535)
	(goal 497 3)
	(game-time > 6800)
=>
;	(chat-to-all "Attempting a new cut.")
	(up-copy-point temporary-goal gl-original-cut-point-x)
	(up-add-point temporary-goal gl-original-back-point-x c: -1)
	(up-copy-point gl-cut-point-x gl-second-cut-point-x)
	(up-add-point gl-cut-point-x temporary-goal c: 1)
	(up-copy-point gl-candidate1-point-x gl-second-cut-point-x)
	(up-copy-point gl-candidate2-point-x gl-second-cut-point-x)
	(up-lerp-percent gl-cut-point-x gl-second-cut-point-x c: 50)
	(set-goal 498 -1)
	(set-goal 500 1)
	(set-goal 501 0)
	(set-goal 502 -1)
	(disable-self)
)
#end-if

#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(starting-age < castle-age)
	(up-compare-const gv-maximum-age != feudal-age)
	(building-type-count-total archery-range < 1)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: archery-range)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size dm-starting-zone-size)
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: archery-range)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(starting-age < castle-age)
	(up-compare-const gv-maximum-age != feudal-age)
	(building-type-count-total market < 1)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: market)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size dm-starting-zone-size)
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: market)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(or	(game-time > 100)
		(and	(starting-age == feudal-age)
			(up-compare-const gv-maximum-age != feudal-age)))
	(or	(building-type-count-total blacksmith < 1)
		(and	(game-time < 600)
			(population > 12)))
	(building-type-count-total blacksmith < 2)
=>
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: blacksmith)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(or	(game-time > 200)
		(starting-age == castle-age))
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(building-type-count-total university < 1)
=>
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: university)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(can-research ri-conscription)
=>
	(research ri-conscription)
)

(defrule
	(or	(players-unit-type-count any-enemy monk > 4)
		(players-unit-type-count any-enemy missionary > 4))
	(or	(can-research ri-heresy)
		(can-research ri-faith))
=>
	(research ri-heresy)
	(research ri-faith)
)

(defrule
	(unit-type-count-total galley-line > 0)
=>
	(research ri-war-galley)
	(research ri-galleon)
	(research ri-careening)
	(research ri-dry-dock)
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
	(research ri-ballistics)
	(research ri-chemistry)
)

(defrule
	(unit-type-count-total fire-ship-line > 0)
=>
	(research ri-fast-fire-ship)
	(research ri-careening)
	(research ri-dry-dock)
)

(defrule
	(unit-type-count-total transport-ship > 0)
=>
	(research ri-careening)
	(research ri-dry-dock)
)

(defrule
	(goal MILITARY 1)
	(or	(warboat-count > 12)
		(players-building-type-count any-enemy dock == 0))
	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
	(or	(can-research ri-cannon-galleon)
		(or	(can-research ri-deck-guns)
			(can-research ri-chemistry)))
=>
	(research ri-chemistry)
	(research ri-cannon-galleon)
	(research ri-deck-guns)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
=>
	(up-jump-rule 40)
)

(defrule
	(unit-type-count-total militiaman-line > 0)
=>
	(research ri-man-at-arms)
	(research ri-long-swordsman)
	(research ri-two-handed-swordsman)
	(research ri-champion)
	(research ri-squires)
	(research ri-scale-mail)
	(research ri-chain-mail)
	(research ri-plate-mail)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(unit-type-count-total scout-cavalry-line > 1)
=>
	(research ri-light-cavalry)
	(research ri-hussar)
	(research ri-bloodlines)
	(research ri-husbandry)
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(unit-type-count-total knight-line > 0)
=>
	(research ri-cavalier)
	(research ri-paladin)
	(research ri-bloodlines)
	(research ri-husbandry)
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(unit-type-count-total camel-line > 0)
=>
	(research ri-heavy-camel)
	(research ri-imperial-camel)
	(research ri-bloodlines)
	(research ri-husbandry)
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(civ-selected byzantine)
	(unit-type-count-total cataphract-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research my-unique-research)
	(research ri-bloodlines)
	(research ri-husbandry)
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(civ-selected slavic)
	(unit-type-count-total boyar > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-bloodlines)
	(research ri-husbandry)
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(civ-selected persian)
	(unit-type-count-total war-elephant-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research my-unique-research)
	(research ri-bloodlines)
	(research ri-husbandry)
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(civ-selected saracen)
	(unit-type-count-total mameluke-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research my-unique-research)
	(research ri-bloodlines)
	(research ri-husbandry)
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(civ-selected magyar)
	(unit-type-count-total my-UU > 0)
=>
	(research my-unique-unit-upgrade)
	(research my-unique-research)
	(research ri-bloodlines)
	(research ri-husbandry)
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(unit-type-count-total cavalry-archer-line > 0)
=>
	(research ri-heavy-cavalry-archer)
	(research ri-bloodlines)
	(research ri-husbandry)
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
	(research ri-parthian-tactics)
	(research ri-thumb-ring)
	(research ri-ballistics)
	(research ri-chemistry)
)

(defrule
	(civ-selected mongol)
	(unit-type-count-total mangudai-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-bloodlines)
	(research ri-husbandry)
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
	(research ri-parthian-tactics)
	(research ri-thumb-ring)
	(research ri-ballistics)
	(research ri-chemistry)
)

(defrule
	(civ-selected indian)
	(unit-type-count-total elephant-archer > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-bloodlines)
	(research ri-husbandry)
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
	(research ri-parthian-tactics)
	(research ri-thumb-ring)
	(research ri-ballistics)
	(research ri-chemistry)
)

(defrule
	(civ-selected korean)
	(unit-type-count-total war-wagon-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-bloodlines)
	(research ri-husbandry)
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
	(research ri-thumb-ring)
	(research ri-ballistics)
	(research ri-chemistry)
)

(defrule
	(civ-selected briton)
	(unit-type-count-total longbowman-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
	(research ri-thumb-ring)
	(research ri-ballistics)
	(research ri-chemistry)
)

(defrule
	(civ-selected chinese)
	(unit-type-count-total chu-ko-nu-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
	(research ri-thumb-ring)
	(research ri-ballistics)
	(research ri-chemistry)
)

(defrule
	(civ-selected mayan)
	(unit-type-count-total plumed-archer-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
	(research ri-thumb-ring)
	(research ri-ballistics)
	(research ri-chemistry)
)

(defrule
	(civ-selected italian)
	(unit-type-count-total genoese-crossbowman > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
	(research ri-thumb-ring)
	(research ri-ballistics)
	(research ri-chemistry)
)

(defrule
	(unit-type-count-total archer-line > 0)
=>
	(research ri-crossbow)
	(research ri-arbalest)
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
	(research ri-thumb-ring)
	(research ri-ballistics)
	(research ri-chemistry)
)

(defrule
	(up-compare-goal gl-skirmisher-count-total > 0)
=>
	(research ri-elite-skirmisher)
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
	(research ri-thumb-ring)
	(research ri-ballistics)
	(research ri-chemistry)
)

(defrule
	(unit-type-count-total hand-cannoneer > 0)
=>
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
)

(defrule
	(civ-selected turkish)
	(unit-type-count-total janissary-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
)

(defrule
	(civ-selected spanish)
	(unit-type-count-total conquistador-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-bloodlines)
	(research ri-husbandry)
)

(defrule
	(unit-type-count-total condottiero > 0)
	(or	(civ-selected italian)
		(players-civ any-ally italian))
=>
	(research ri-squires)
	(research ri-scale-mail)
	(research ri-chain-mail)
	(research ri-plate-mail)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(up-compare-goal gl-eagle-warrior-count-total > 1)
=>
	(research ri-eagle-warrior)
	(research ri-elite-eagle-warrior)
	(research ri-squires)
	(research ri-scale-mail)
	(research ri-chain-mail)
	(research ri-plate-mail)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(unit-type-count-total spearman-line > 0)
=>
	(research ri-pikeman)
	(research ri-halberdier)
	(research ri-squires)
	(research ri-scale-mail)
	(research ri-chain-mail)
	(research ri-plate-mail)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(civ-selected gothic)
	(unit-type-count-total huskarl-set > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-squires)
	(research ri-scale-mail)
	(research ri-chain-mail)
	(research ri-plate-mail)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(civ-selected aztec)
	(unit-type-count-total jaguar-man-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-squires)
	(research ri-scale-mail)
	(research ri-chain-mail)
	(research ri-plate-mail)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(civ-selected japanese)
	(unit-type-count-total samurai-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-squires)
	(research ri-scale-mail)
	(research ri-chain-mail)
	(research ri-plate-mail)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(civ-selected viking)
	(unit-type-count-total berserk-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-squires)
	(research ri-scale-mail)
	(research ri-chain-mail)
	(research ri-plate-mail)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(civ-selected celtic)
	(unit-type-count-total woad-raider-line > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-squires)
	(research ri-scale-mail)
	(research ri-chain-mail)
	(research ri-plate-mail)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(civ-selected incan)
	(unit-type-count-total kamayuk > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-squires)
	(research ri-scale-mail)
	(research ri-chain-mail)
	(research ri-plate-mail)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(civ-selected teutonic)
	(unit-type-count-total my-unique-unit > 0)
=>
	(research my-unique-unit-upgrade)
	(research ri-squires)
	(research ri-scale-mail)
	(research ri-chain-mail)
	(research ri-plate-mail)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

(defrule
	(unit-type-count-total battering-ram-line > 0)
=>
	(research ri-capped-ram)
	(research ri-siege-ram)
	(research ri-siege-engineers)
)

(defrule
	(or	(research-available ri-heavy-scorpion)
		(unit-type-count-total scorpion-line > 0))
=>
	(research ri-heavy-scorpion)
	(research ri-chemistry)
	(research ri-siege-engineers)
)

(defrule
	(or	(unit-type-count-total trebuchet-set > 2)
		(unit-type-count-total bombard-cannon > 2))
=>
	(research ri-siege-engineers)
)

(defrule
	(unit-type-count-total monk > 4)
	(or	(players-unit-type-count any-enemy monk > 3)
		(players-unit-type-count any-enemy missionary > 3))
	(can-research ri-atonement)
=>
	(research ri-atonement)
)

(defrule
	(or	(players-unit-type-count focus-player scorpion-line > 3)
		(or	(up-compare-goal gl-enemy-onager-count > 1)
			(players-unit-type-count focus-player bombard-cannon > 0)))
	(unit-type-count-total monk > 4)
	(can-research ri-redemption)
=>
	(research ri-redemption)
)

(defrule
	(unit-type-count-total monk > 4)
=>
	(research ri-sanctity)
	(research ri-fervor)
	(research ri-theocracy)
	(research ri-illumination)
	(research ri-block-printing)
)

(defrule
	(true)
=>
	(research ri-man-at-arms)
	(research ri-long-swordsman)
	(research ri-two-handed-swordsman)
	(research ri-champion)
	(research ri-pikeman)
	(research ri-halberdier)
	(research ri-elite-skirmisher)
	(research ri-light-cavalry)
	(research ri-hussar)
	(research ri-chemistry)
	(research ri-anarchy)
	(research ri-perfusion)
)

(defrule
	(up-compare-const dm-pala-in-tech-tree == 1); Civ with a paladin worth researching
=>
	(research ri-cavalier)
	(research ri-paladin)
)

(defrule
	(current-age < imperial-age)
=>
	(research feudal-age)
	(research castle-age)
	(research imperial-age)
)

(defrule
	(true)
=>
	(research ri-shipwright)
	(research ri-double-bit-axe)
	(research ri-bow-saw)
	(research ri-two-man-saw)
	(research ri-horse-collar)
	(research ri-heavy-plow)
	(research ri-crop-rotation)
	(research ri-gold-mining)
	(research ri-gold-shaft-mining)
	(research ri-stone-mining)
	(research ri-stone-shaft-mining)
	(research ri-guilds)
)

(defrule
	(or	(current-age == imperial-age)
		(and	(up-compare-const gv-maximum-age <= castle-age)
			(or	(game-time > 420)
				(and	(up-compare-const gv-maximum-age == feudal-age)
					(population >= pop-to-full-pop-attack)))))
=>
	(research ri-wheel-barrow)
	(research ri-hand-cart)
	(research ri-town-watch)
)

(defrule
	(players-building-type-count any-ally market > 0)
=>
	(research ri-cartography)
	(research ri-caravan)
)

(defrule
	(player-in-game any-ally)
	(game-time > 600)
	(or	(can-research ri-banking)
		(can-research ri-coinage))
=>
	(research ri-coinage)
	(research ri-banking)
	(enable-timer 4 34)
)

#load-if-defined AZTEC-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(research-completed ri-bodkin-arrow)
	(nand	(current-age == imperial-age)
		(research-available ri-bracer))
	(up-compare-goal gl-skirmisher-count-total > 10)
	(can-research ri-atlatl)
=>
	(research ri-atlatl)
)

(defrule
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined BRITON-CIV
(defrule
	(civ-selected briton)
	(research-completed ri-bracer)
	(research-completed ri-chemistry)
	(strategic-number sn-allow-resource-spending > 5)
	(or	(unit-type-count-total arbalest > 5)
		(or	(unit-type-count-total elite-longbowman > 5)
			(unit-type-count-total elite-skirmisher > 5)))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(soldier-count > 50)
	(unit-type-count-total trebuchet-set > 2)
	(can-research ri-war-wolf)
=>
	(research ri-war-wolf)
)
#end-if
#load-if-defined BYZANTINE-CIV
(defrule
	(civ-selected byzantine)
	(strategic-number sn-allow-resource-spending > 2)
	(research-completed my-unique-unit-upgrade)
	(or	(can-research my-unique-research)
		(or	(can-research ri-scale-barding)
			(or	(can-research ri-chain-barding)
				(can-research ri-plate-barding))))
=>
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(nand	(current-age == imperial-age)
		(research-available ri-fast-fire-ship))
	(unit-type-count-total fire-ship-line > 7)
	(can-research ri-greek-fire)
=>
	(research ri-greek-fire)
)
#end-if
#load-if-defined CELTIC-CIV
(defrule
	(civ-selected celtic)
	(strategic-number sn-allow-resource-spending > 4)
	(or	(unit-type-count-total battering-ram-line > 3)
		(or	(unit-type-count-total mangonel-line > 4)
			(and	(unit-type-count-total scorpion-line > 5)
				(not	(research-available ri-heavy-scorpion)))))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(building-type-count castle > 1)
	(can-research ri-stronghold)
=>
	(research ri-stronghold)
)
#end-if
#load-if-defined CHINESE-CIV
(defrule
	(civ-selected chinese)
	(strategic-number sn-allow-resource-spending > 0)
	(or	(unit-type-count-total chu-ko-nu-line > 4)
		(or	(and	(population > 190)
				(not	(goal CASTLE 0)))
			(unit-type-count-total scorpion > 4)))
	(can-research-with-escrow my-unique-research)
=>
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(release-escrow wood)
	(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined FRANKISH-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(unit-type-count-total throwing-axeman-line > 4)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(research-completed ri-paladin)
	(can-research ri-chivalry)
=>
	(research ri-chivalry)
)
#end-if
#load-if-defined HUN-CIV
#load-if-defined VICTORY-STANDARD
(defrule
	(or	(enemy-captured-relics)
		(players-building-type-count any-enemy wonder > 0))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#end-if
#load-if-defined INCAN-CIV
(defrule
	(or	(unit-type-count-total elite-eagle-warrior > 14)
		(or	(unit-type-count-total my-elite-UU > 10)
			(unit-type-count-total slinger > 17)))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(research-completed ri-bodkin-arrow)
	(nand	(current-age == imperial-age)
		(research-available ri-bracer))
	(up-compare-goal gl-skirmisher-count-total > 10)
	(can-research ri-andean-sling)
=>
	(research ri-andean-sling)
)
#end-if
#load-if-defined INDIAN-CIV
(defrule
	(strategic-number sn-allow-resource-spending > 2)
	(or	(unit-type-count-total hand-cannoneer > 12)
		(strategic-number sn-allow-resource-spending > 5))
	(or	(unit-type-count-total hand-cannoneer > 6)
		(and	(gold-amount > 1000)
			(goal gl-advanced-archery heavy-cannoneers)))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(up-compare-goal gl-my-villager-count-total > 70)
	(can-research ri-sultans)
=>
	(research ri-sultans)
)
#end-if
#load-if-defined ITALIAN-CIV
(defrule
	(soldier-count > 40)
	(strategic-number sn-allow-resource-spending > 2)
	(players-building-type-count any-ally market > 0)
	(can-research-with-escrow my-unique-research)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(research-completed ri-leather-archer-armor)
	(or	(unit-type-count-total my-UU > 15)
		(unit-type-count-total my-elite-UU > 7))
	(not	(research-available my-unique-unit-upgrade))
	(can-research ri-pavise)
=>
	(research ri-pavise)
)
#end-if
#load-if-defined JAPANESE-CIV
(defrule
	(civ-selected japanese)
	(research-completed my-unique-unit-upgrade)
	(gold-amount > 900)
	(wood-amount > 1500)
	(strategic-number sn-allow-resource-spending > 5)
	(unit-type-count-total trebuchet-set > 0)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined KOREAN-CIV
(defrule
	(civ-selected korean)
	(strategic-number sn-allow-resource-spending > 5)
	(unit-type-count-total mangonel-line > 3)
	(soldier-count > 40)
	(research-completed ri-siege-onager)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(strategic-number sn-allow-resource-spending > 1)
	(or	(unit-type-count-total turtle-ship-line > 9)
		(research-completed ri-elite-turtle-ship))
	(unit-type-count-total turtle-ship-line > 2)
	(can-research ri-panokseon)
=>
	(research ri-panokseon)
)
#end-if
#load-if-defined MAGYAR-CIV
(defrule
	(unit-type-count-total cavalry-archer-line > 0)
	(research-completed ri-heavy-cavalry-archer)
	(strategic-number sn-allow-resource-spending > 5)
	(can-research-with-escrow my-unique-research)
=>
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(release-escrow wood)
	(release-escrow gold)
	(research my-unique-research)
)

(defrule
	(or	(strategic-number sn-allow-resource-spending > 1)
		(up-compare-goal gl-my-villager-count-total > 70))
	(strategic-number sn-allow-resource-spending > 0)
	(not	(goal CASTLE 0))
	(can-research-with-escrow ri-mercenaries)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(research ri-mercenaries)
)
#end-if
#load-if-defined MAYAN-CIV
(defrule
	(up-compare-goal gl-eagle-warrior-count-total > 1)
	(up-research-status c: ri-elite-eagle-warrior >= research-pending)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined MONGOL-CIV
(defrule
	(civ-selected mongol)
	(or	(goal MILITARY 1)
		(strategic-number sn-allow-resource-spending > 5))
	(or	(unit-type-count-total battering-ram-line > 3)
		(or	(unit-type-count-total mangonel-line > 4)
			(and	(unit-type-count-total scorpion-line > 5)
				(not	(research-available ri-heavy-scorpion)))))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(civ-selected mongol)
	(can-research ri-nomads)
=>
	(research ri-nomads)
)
#end-if
#load-if-defined PERSIAN-CIV
(defrule
	(or	(not	(goal MILITARY 1))
		(strategic-number sn-allow-resource-spending > 5))
	(strategic-number sn-allow-resource-spending > 3)
	(game-time > 1500)
	(building-type-count-total castle > 3)
	(can-research ri-boiling-oil)
=>
	(research ri-boiling-oil)
)
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(or	(and	(unit-type-count-total camel-line > 4)
			(research-completed ri-heavy-camel))
		(and	(unit-type-count-total mameluke-line > 4)
			(research-completed my-unique-unit-upgrade)))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(or	(unit-type-count-total monk-set > 4)
		(or	(goal gl-strategy fi-monk-rush)
			(and	(strategic-number sn-allow-resource-spending > 5)
				(unit-type-count-total trade-cart > 20))))
	(can-research ri-madrasah)
=>
	(research ri-madrasah)
)
#end-if
#load-if-defined SLAVIC-CIV
(defrule
	(can-research-with-escrow my-unique-research)
=>
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(release-escrow wood)
	(release-escrow gold)
	(research my-unique-research)
)

(defrule
	(or	(unit-type-count-total monk-set > 4)
		(or	(goal gl-strategy fi-monk-rush)
			(and	(strategic-number sn-allow-resource-spending > 5)
				(unit-type-count-total trade-cart > 20))))
	(can-research-with-escrow ri-orthodoxy)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(research ri-orthodoxy)
)
#end-if
#load-if-defined SPANISH-CIV
(defrule
	(civ-selected spanish)
	(current-age-time > 60)
	(strategic-number sn-allow-resource-spending > 0)
	(or	(soldier-count > 50)
		(town-under-attack))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(or	(unit-type-count-total monk-set > 4)
		(or	(goal gl-strategy fi-monk-rush)
			(unit-type-count-total missionary > 4)))
	(research-completed ri-redemption)
	(can-research-with-escrow ri-inquisition)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(research ri-inquisition)
)
#end-if
#load-if-defined TEUTONIC-CIV
(defrule
	(food-amount > 1000)
	(or	(research-completed ri-paladin)
		(and	(goal gl-advanced-cavalry 0)
			(unit-type-count-total knight-line < 5)))
	(building-type-count-total castle > 3)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)

(defrule
	(or	(research-completed ri-paladin)
		(and	(goal gl-advanced-cavalry 0)
			(unit-type-count-total knight-line < 5)))
	(can-research ri-ironclad)
=>
	(research ri-ironclad)
)
#end-if
#load-if-defined TURKISH-CIV
(defrule
	(or	(building-type-count-total bombard-tower > 3)
		(or	(unit-type-count-total bombard-cannon > 3)
			(or	(unit-type-count-total cannon-galleon-line > 3)
				(gold-amount > 3000))))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined VIKING-CIV
(defrule
	(unit-type-count-total berserk-line > 4)
	(or	(players-unit-type-count any-enemy knight-line > 6)
		(or	(players-unit-type-count any-enemy scout-cavalry-line > 9)
			(or	(players-unit-type-count any-enemy tarkan-line > 6)
				(or	(players-unit-type-count any-enemy cavalry-archer-line > 6)
					(food-amount > 1400)))))
	(research-completed my-unique-unit-upgrade)
	(can-research ri-chieftains)
=>
	(research ri-chieftains)
)

(defrule
	(strategic-number sn-allow-resource-spending > 5)
	(unit-type-count-total berserk-line > 4)
	(research-completed my-unique-unit-upgrade)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if

(defrule
	(or	(stone-amount >= 900)
		(building-type-count-total town-center > 5))
	(building-type-count-total town-center > 2)
	(up-compare-goal gl-my-villager-count > 60)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: castle)
=>
	(up-set-placement-data my-player-number -1 c: 10)
	(set-strategic-number sn-placement-zone-size 15)
	(up-build place-control 0 c: castle)
	(chat-to-player my-player-number castle-chat)
	(set-goal gl-castle-placed YES)
	(set-goal gl-castle-control YES)
	(set-goal gl-defensive-castle-placed YES)
	(set-goal castle-dropped-timer 20)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

#load-if-not-defined IMPERIAL-AGE-START
#load-if-not-defined CASTLE-AGE-START

(defrule
	(true)
=>
	(set-goal temporary-goal 5)
)

(defrule
	(up-compare-const gv-maximum-age <= feudal-age)
=>
	(up-get-fact population-cap 0 temporary-goal)
	(up-modify-goal temporary-goal c:/ 25)
	(up-modify-goal temporary-goal c:+ 4)
	(up-modify-goal temporary-goal c:min 12)
	(up-modify-goal temporary-goal3 g:= temporary-goal)
	(up-modify-goal temporary-goal3 c:* 3)
	(up-modify-goal temporary-goal3 c:/ 2)
	(up-modify-goal temporary-goal3 c:min 15)
)

(defrule
	(building-type-count-total mill < 1)
	(current-age == dark-age)
	(up-compare-const gv-maximum-age != dark-age)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: mill)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size dm-starting-zone-size)
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: mill)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(building-type-count-total stable g:< temporary-goal)
	(nand	(up-compare-const gv-maximum-age == feudal-age)
		(up-research-status c: ri-bloodlines != research-available))
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: stable)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size dm-starting-zone-size)
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: stable)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(building-type-count-total barracks g:< temporary-goal3)
	(or	(building-type-count-total barracks g:< temporary-goal)
		(current-age == dark-age))
	(or	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
		(building-type-count-total barracks < 1))
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: barracks)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size dm-starting-zone-size)
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: barracks)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(building-type-count-total archery-range g:< temporary-goal)
	(or	(starting-age < castle-age)
		(and	(building-type-count-total archery-range < 5)
			(starting-age == castle-age)))
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: archery-range)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size dm-starting-zone-size)
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: archery-range)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(unit-type-count-total battering-ram-line < 6)
	(or	(players-building-type-count target-player castle > 0)
		(players-building-type-count target-player bombard-tower > 0))
	(or	(gold-amount > 1000)
		(up-compare-const gv-maximum-age == castle-age))
	(can-train battering-ram-line)
=>
	(up-train 0 c: battering-ram-line)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(food-amount > 1500)
	(or	(and	(game-time < 600)
			(and	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
				(gold-amount > 1200)))
		(and	(up-research-status c: cavalry-hp-research >= research-available)
			(up-compare-const gv-maximum-age == castle-age)))
	(can-train knight-line)
=>
	(up-train 0 c: knight-line)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(food-amount g:> gl-required-food)
	(up-compare-const gv-maximum-age == feudal-age)
	(up-research-status c: ri-bloodlines >= research-available)
	(can-train scout-cavalry-line)
=>
	(up-train 0 c: scout-cavalry-line)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(food-amount g:> gl-required-food)
	(or	(and	(game-time < 600)
			(food-amount > 2000))
		(up-compare-const gv-maximum-age <= feudal-age))
	(gold-amount > 1200)
	(can-train militiaman-line)
=>
	(up-train 0 c: militiaman-line)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(food-amount g:> gl-required-food)
	(unit-type-count-total spearman-line g:< gl-enemy-cavalry-count)
	(nand	(up-compare-const gv-maximum-age == castle-age)
		(civ-selected turkish))
	(up-compare-const gv-maximum-age <= castle-age)
	(can-train spearman-line)
=>
	(up-train 0 c: spearman-line)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(or	(nor	(civ-selected spanish)
			(civ-selected hun))
		(current-age < castle-age))
	(or	(game-time < 600)
		(up-compare-const gv-maximum-age <= feudal-age))
	(gold-amount > 1200)
	(can-train archer-line)
=>
	(up-train 0 c: archer-line)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(up-compare-goal gl-skirmisher-count-total g:< gl-enemy-archer-count)
	(food-amount g:> gl-required-food)
	(nand	(up-compare-const gv-maximum-age == castle-age)
		(civ-selected turkish))
	(or	(game-time < 600)
		(up-compare-const gv-maximum-age <= castle-age))
	(can-train skirmisher-line)
=>
	(up-train 0 c: skirmisher-line)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(or	(and	(civ-selected spanish)
			(game-time < 600))
		(civ-selected hun))
	(or	(game-time < 600)
		(up-compare-const gv-maximum-age == castle-age))
	(gold-amount > 1200)
	(can-train cavalry-archer-line)
=>
	(up-train 0 c: cavalry-archer-line)
)

(defrule
	(goal gl-current-age gv-dark)
	(population-cap > 60)
	(or	(unit-type-count fishing-ship < 4)
		(population-cap > 90))
	(or	(unit-type-count fishing-ship < 6)
		(population-cap > 190))
	(unit-type-count fishing-ship < 10)
	(can-train fishing-ship)
=>
	(up-train 0 c: fishing-ship)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(nand	(players-building-type-count target-player castle > 0)
		(unit-type-count-total battering-ram-line < 3))
	(gold-amount > 1000)
	(current-age < imperial-age)
	(game-time < 600)
	(gold-amount > 1200)
	(can-train scorpion-line)
=>
	(up-train 0 c: scorpion-line)
)

(defrule
	(building-type-count-total archery-range < 1)
	(game-time > 600)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: archery-range)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size dm-starting-zone-size)
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: archery-range)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(building-type-count-total barracks < 1)
	(game-time > 600)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: barracks)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size dm-starting-zone-size)
	(up-set-placement-data my-player-number villager-class c: 2)
	(up-build dm-placement-style 0 c: barracks)
	(up-modify-goal gl-my-builder-count c:+ 1)
)
#end-if
#end-if

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(stone-amount >= 900)
		(building-type-count-total town-center > 5))
	(building-type-count-total town-center > 2)
	(up-compare-goal gl-my-villager-count > 60)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: castle)
=>
	(up-set-placement-data my-player-number -1 c: 10)
	(set-strategic-number sn-placement-zone-size 15)
	(up-build place-control 0 c: castle)
	(chat-to-player my-player-number castle-chat)
	(set-goal gl-castle-placed YES)
	(set-goal gl-castle-control YES)
	(set-goal gl-defensive-castle-placed YES)
	(set-goal castle-dropped-timer 20)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(or	(game-time < 600)
		(or	(population < 160)
			(or	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
				(warboat-count < 50))))
	(or	(and	(game-time < 2)
			(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style))
		(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style))
=>
	(up-jump-rule 38)
)

(defrule
	(game-time > 300)
	(building-type-count-total castle > 0)
	(or	(stone-amount >= 900)
		(building-type-count-total town-center > 5))
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: castle)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 7)
	(up-build place-point 0 c: castle)
;	(chat-to-player my-player-number castle-chat)
	(set-goal gl-castle-placed placed-to-side1)
	(set-goal gl-castle-control YES)
	(set-goal gl-defensive-castle-placed YES)
	(set-goal castle-dropped-timer 20)
	(up-modify-goal gl-my-builder-count c:+ 1)
	(disable-self)
)

(defrule
	(game-time > 300)
	(building-type-count-total castle > 0)
	(or	(stone-amount >= 900)
		(building-type-count-total town-center > 5))
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: castle)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(set-strategic-number sn-placement-zone-size 7)
	(up-build place-point 0 c: castle)
;	(chat-to-player my-player-number castle-chat)
	(set-goal gl-castle-placed placed-to-side2)
	(set-goal gl-castle-control YES)
	(set-goal gl-defensive-castle-placed YES)
	(set-goal castle-dropped-timer 20)
	(up-modify-goal gl-my-builder-count c:+ 1)
	(disable-self)
)

(defrule
	(goal MILITARY 1)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(building-type-count-total town-center > 5)
	(up-compare-goal gl-my-villager-count > 65)
	(game-time > 1200)
	(building-type-count-total castle > 1)
	(players-building-count any-enemy > 0)
	(can-build castle)
=>
	(up-build place-forward 0 c: castle)
	(chat-to-player my-player-number "Forward castle!")
	(set-strategic-number sn-stone-gatherer-percentage 6)
	(set-goal gl-castle-placed placed-forward)
	(set-goal gl-castle-control placed-forward)
	(set-goal castle-dropped-timer 60)
)

(defrule
	(or	(and	(building-type-count-total barracks < 4)
			(up-compare-goal gl-dm-barracks-number >= 4))
		(or	(and	(building-type-count-total archery-range < 4)
				(up-compare-goal gl-dm-range-number >= 4))
			(and	(building-type-count-total stable < 4)
				(up-compare-goal gl-dm-stable-number >= 4))))
	(building-type-count-total castle > 2)
=>
	(up-jump-rule 7)
)

(defrule
	(or	(game-time <= 300)
		(and	(or	(building-type-count-total town-center < 6)
				(game-time < 420))
			(game-time < 600)))
	(up-compare-goal gl-dm-allow-UU-training != 1)
	(building-type-count-total castle > 1)
=>
	(up-jump-rule 6)
)

(defrule
	(or	(stone-amount >= 900)
		(building-type-count-total town-center > 5))
	(up-compare-goal gl-my-villager-count > 65)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: castle)
=>
	(set-strategic-number sn-placement-fail-delta 1)
	(up-set-placement-data my-player-number -1 c: 10)
	(set-strategic-number sn-placement-zone-size 10)
	(up-build place-control 0 c: castle)
	(chat-to-player my-player-number castle-chat)
	(set-goal gl-castle-placed YES)
	(set-goal gl-castle-control YES)
	(set-goal gl-defensive-castle-placed YES)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time > 120)
	(up-compare-goal gl-soldier-percentage > 200)
	(soldier-count > 45)
	(building-type-count-total castle < 2)
	(players-building-type-count target-player castle > 0)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: castle)
=>
	(set-strategic-number sn-placement-fail-delta 1)
	(up-set-placement-data my-player-number -1 c: 10)
	(set-strategic-number sn-placement-zone-size 10)
	(up-build place-control 0 c: castle)
;	(chat-to-player my-player-number castle-chat)
	(set-goal gl-castle-placed YES)
	(set-goal gl-castle-control YES)
	(set-goal gl-defensive-castle-placed YES)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time > 180)
	(stone-amount >= 1300)
	(up-compare-goal gl-patrol-defence != patrol-on)
	(or	(game-time > 300)
		(goal gl-dm-allow-UU-training 1))
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: castle)
=>
	(set-strategic-number sn-placement-fail-delta 1)
	(up-set-placement-data my-player-number -1 c: 10)
	(set-strategic-number sn-placement-zone-size 10)
	(set-goal gl-defensive-castle-placed YES)
	(up-build place-control 0 c: castle)
	(chat-to-player my-player-number castle-chat)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(game-time > 60)
	(stone-amount >= 1300)
	(or	(game-time > 300)
		(goal gl-dm-allow-UU-training 1))
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: castle)
=>
	(up-modify-goal gl-castle-build-priority c:max 999)
)

(defrule
	(game-time > 60)
	(stone-amount >= 1300)
	(building-type-count-total barracks g:>= gl-dm-barracks-number)
	(building-type-count-total archery-range g:>= gl-dm-range-number)
	(building-type-count-total stable g:>= gl-dm-stable-number)
	(building-type-count-total siege-workshop g:>= gl-dm-workshop-number)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: castle)
=>
	(up-modify-goal gl-castle-build-priority c:max 999)
)

(defrule
	(game-time > 20)
	(or	(goal gl-strategy dm-turtling)
		(goal gl-strategy dm-UU))
	(building-type-count-total barracks > 0)
	(building-type-count-total castle < 1)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: castle)
=>
	(up-modify-goal gl-castle-build-priority c:max 999)
)

(defrule
	(game-time > 180)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-compare-goal gl-castle-build-priority >= 999)
	(up-can-build 0 c: castle)
=>
	(set-goal gl-castle-build-priority -1)
	(up-set-placement-data my-player-number -1 c: 0)
	(set-strategic-number sn-placement-zone-size 12)
	(set-goal gl-defensive-castle-placed YES)
	(up-build place-control 0 c: castle)
	(chat-to-player my-player-number castle-chat)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

; ============== BUILDER PATROL

(defrule
	(or	(or	(game-time < 10)
			(or	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
				(game-time > 120)))
		(or	(up-compare-const gv-michi-style == 1)
			(or	(starting-age != post-imperial-age)
				;(not	(civ-selected hun)))))
				(true))));hax
=>
	(up-jump-rule 5)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-include -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 40)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-include -1 -1 -1 -1)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-remote c: building-class c: 40)
	(up-remove-objects search-remote object-data-tasks-count > 0)
	(up-clean-search search-remote object-data-distance search-order-asc)
	(set-goal temporary-goal 0)
)

(defrule
	(up-set-target-object search-local g: temporary-goal)
	(up-object-data object-data-target-id > 0)
	(up-object-target-data object-data-distance > 4)
	(up-set-target-object search-remote c: 0)
	(up-object-data object-data-distance < 5)
=>
	(up-set-target-object search-local g: temporary-goal)
	(up-get-object-target-data object-data-distance temporary-goal4)
;	(up-chat-data-to-all "dist: %d" g: temporary-goal4)
	(up-get-object-data object-data-id temporary-goal3)
	(up-reset-search 1 1 0 0)
	(up-add-object-by-id search-local g: temporary-goal3)
	(up-set-target-object search-remote c: 0)
	(up-target-objects 1 action-default -1 -1)
	(up-jump-rule 2)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal c:+ 1)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-include -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 40)
)

(defrule
	(up-set-target-object search-local g: temporary-goal)
=>
	(up-filter-include -1 -1 -1 -1)
	(up-filter-status c: status-pending c: list-active)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-remote c: building-class c: 40)
	(up-remove-objects search-remote object-data-tasks-count > 0)
	(up-clean-search search-remote object-data-distance search-order-asc)
	(up-jump-rule -3)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
)

; ============== EARLY BUILDINGS ETC.

(defrule
	(game-time < 90)
	(up-compare-const gv-michi-style == 1)
=>
	(up-jump-rule 24)
)

(defrule
	(game-time > 1)
	(strategic-number sn-minimum-water-body-size-for-dock != land-map-style)
=>
	(up-jump-rule 15)
)

(defrule
	(game-time < 240)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(set-goal temporary-goal 0)
)

(defrule
	(game-time < 240)
	(or	(up-pending-placement c: castle)
		(or	(up-pending-placement c: barracks)
			(or	(up-pending-placement c: archery-range)
				(or	(up-pending-placement c: stable)
					(or	(up-pending-placement c: siege-workshop)
						(or	(up-pending-placement c: market)
							(up-pending-placement c: house)))))))
=>
	(set-goal temporary-goal 1)
)

(defrule
	(game-time < 240)
	(or	(building-type-count-total stable > 0)
		(or	(building-type-count-total barracks > 0)
			(or	(building-type-count-total archery-range > 0)
				(or	(building-type-count-total stable > 0)
					(or	(building-type-count-total siege-workshop > 0)
						(or	(building-type-count-total market > 0)
							(building-type-count-total house > 0)))))))
=>
	(set-goal temporary-goal 1)
)

(defrule
	(game-time < 210)
	(players-civ focus-player hun)
	(up-set-target-object search-local c: 0)
	(up-compare-const camp-raid-time-variance >= 666)
	(goal temporary-goal 1)
	(building-type-count-total stable > 0)
	(strategic-number sn-market-notice == 1)
	(building-type-count-total stable g:< gl-dm-stable-number)
	(building-type-count-total stable < 3)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: stable)
=>
	(up-modify-goal gl-castle-build-priority c:max 998)
)

(defrule
	(game-time < 210)
	(players-civ focus-player hun)
	(up-compare-const camp-raid-time-variance <= 666)
	(up-set-target-object search-local c: 0)
	(goal temporary-goal 1)
	(up-compare-const gv-explored-map == 0)
	(building-type-count-total stable > 0)
	(strategic-number sn-market-notice != 1)
	(building-type-count-total barracks g:< gl-dm-barracks-number)
	(building-type-count-total barracks < 2)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: barracks)
=>
	(up-modify-goal gl-barracks-build-priority c:max 997)
)

(defrule
	(or	(and	(building-type-count-total barracks < 1)
			(building-type-count-total barracks g:< gl-dm-barracks-number))
		(or	(and	(building-type-count-total archery-range < 1)
				(building-type-count-total archery-range g:< gl-dm-range-number))
			(and	(building-type-count-total siege-workshop < 1)
				(building-type-count-total siege-workshop g:< gl-dm-workshop-number))))
	(building-type-count-total stable > 1)
=>
	(up-jump-rule 3)
)

(defrule
	(building-type-count-total archery-range g:< gl-dm-range-number)
	(building-type-count-total archery-range < 4)
	(building-type-count-total stable > 4)
=>
	(up-jump-rule 2)
)

(defrule
	(or	(and	(building-type-count-total barracks < 2)
			(building-type-count-total barracks g:< gl-dm-barracks-number))
		(or	(and	(building-type-count-total archery-range < 2)
				(building-type-count-total archery-range g:< gl-dm-range-number))
			(and	(building-type-count-total siege-workshop < 2)
				(building-type-count-total siege-workshop g:< gl-dm-workshop-number))))
	(building-type-count-total stable > 2)
=>
	(up-jump-rule 1)
)

(defrule
	(game-time < 240)
	(up-set-target-object search-local c: 0)
	(goal temporary-goal 1)
	(building-type-count-total stable g:< gl-dm-stable-number)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: stable)
=>
	(up-modify-goal gl-stable-build-priority c:max 996)
)

(defrule
	(or	(and	(or	(building-type-count-total barracks < 2)
				(and	(building-type-count-total archery-range > 2)
					(building-type-count-total barracks < 4)))
			(building-type-count-total barracks g:< gl-dm-barracks-number))
		(and	(building-type-count-total siege-workshop < 2)
			(building-type-count-total siege-workshop g:< gl-dm-workshop-number)))
	(building-type-count-total archery-range > 1)
=>
	(up-jump-rule 1)
)

(defrule
	(game-time < 210)
	(up-set-target-object search-local c: 0)
	(goal temporary-goal 1)
	(building-type-count-total archery-range g:< gl-dm-range-number)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: archery-range)
=>
	(up-modify-goal gl-range-build-priority c:max 995)
)

(defrule
	(building-type-count-total siege-workshop < 2)
	(building-type-count-total siege-workshop g:< gl-dm-workshop-number)
	(building-type-count-total barracks > 1)
=>
	(up-jump-rule 1)
)

(defrule
	(game-time < 210)
	(up-set-target-object search-local c: 0)
	(goal temporary-goal 1)
	(building-type-count-total barracks g:< gl-dm-barracks-number)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: barracks)
=>
	(up-modify-goal gl-barracks-build-priority c:max 994)
)

(defrule
	(game-time < 210)
	(up-set-target-object search-local c: 0)
	(goal temporary-goal 1)
	(building-type-count-total siege-workshop g:< gl-dm-workshop-number)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: siege-workshop)
=>
	(up-modify-goal gl-workshop-build-priority c:max 993)
)

(defrule
	(game-time < 240)
	(building-type-count-total stable < 2)
	(building-type-count-total stable g:< gl-dm-stable-number)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: stable)
=>
	(up-modify-goal gl-stable-build-priority c:max 992)
)

(defrule
	(game-time < 240)
	(building-type-count-total archery-range < 2)
	(building-type-count-total archery-range g:< gl-dm-range-number)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: archery-range)
=>
	(up-modify-goal gl-range-build-priority c:max 991)
)

(defrule
	(game-time < 240)
	(building-type-count-total barracks < 2)
	(building-type-count-total barracks g:< gl-dm-barracks-number)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: barracks)
=>
	(up-modify-goal gl-barracks-build-priority c:max 990)
)

(defrule
	(game-time < 300)
	(building-type-count-total siege-workshop < 2)
	(building-type-count-total siege-workshop g:< gl-dm-workshop-number)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: siege-workshop)
=>
	(up-modify-goal gl-workshop-build-priority c:max 989)
)

(defrule
	(game-time >= 300)
	(population > 80)
	(building-type-count-total siege-workshop < 2)
	(building-type-count-total siege-workshop g:< gl-dm-workshop-number)
	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: siege-workshop)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(up-modify-goal temporary-goal g:= gl-my-maximum-town-size)
	(up-modify-goal temporary-goal c:min 20)
	(up-modify-sn sn-placement-zone-size g:= temporary-goal)
	(up-set-placement-data my-player-number -1 c: 10)
	(up-build place-control 0 c: siege-workshop)
	(up-modify-goal gl-my-builder-count c:+ 1)
)

(defrule
	(building-type-count-total stable g:< gl-dm-stable-number)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: stable)
=>
	(up-modify-goal gl-stable-build-priority c:max 988)
)

(defrule
	(building-type-count-total barracks g:< gl-dm-barracks-number)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: barracks)
=>
	(up-modify-goal gl-barracks-build-priority c:max 988)
)

(defrule
	(building-type-count-total archery-range g:< gl-dm-range-number)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: archery-range)
=>
	(up-modify-goal gl-range-build-priority c:max 988)
)

(defrule
	(building-type-count-total siege-workshop g:< gl-dm-workshop-number)
;	(up-compare-goal gl-my-villager-count g:> gl-my-builder-count)
	(up-can-build 0 c: siege-workshop)
=>
	(up-modify-goal gl-workshop-build-priority c:max 988)
)

; ============== BUILDING PLACEMENT

(defrule
	(game-time > 300)
=>
	(up-jump-rule 20)
)

(defrule
	(true)
=>
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal8 0)
	(set-goal temporary-goal13 2)
	(up-full-reset-search)
	(up-find-local c: villager-class c: 40)
	(up-remove-objects search-local object-data-action == actionid-build)
	(up-remove-objects search-local object-data-action == actionid-enter)
)

(defrule
	(game-time > 50)
	(up-compare-goal gl-house-build-priority > 0)
	(goal temporary-goal13 2)
=>
	(set-goal temporary-goal4 house)
	(set-goal temporary-goal5 3)
	(up-modify-goal temporary-goal13 c:- 1)
	(up-jump-rule 8)
)

(defrule
	(up-compare-goal gl-house-build-priority > 0)
=>
	(set-goal temporary-goal4 house)
	(set-goal temporary-goal5 3)
	(set-goal gl-house-build-priority -1)
	(up-jump-rule 7)
)

(defrule
	(up-compare-goal gl-market-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-market-build-priority > 0)
	(up-compare-goal gl-market-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-market-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-market-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-market-build-priority g:>= gl-castle-build-priority)
	(up-compare-goal gl-market-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-market-build-priority g:>= gl-monastery-build-priority)
=>
	(set-goal temporary-goal4 market)
	(set-goal temporary-goal5 5)
	(set-goal gl-market-build-priority -1)
	(up-jump-rule 6)
)

(defrule
	(up-compare-goal gl-stable-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-stable-build-priority g:>= gl-market-build-priority)
	(up-compare-goal gl-stable-build-priority > 0)
	(up-compare-goal gl-stable-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-stable-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-stable-build-priority g:>= gl-castle-build-priority)
	(up-compare-goal gl-stable-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-stable-build-priority g:>= gl-monastery-build-priority)
=>
	(set-goal temporary-goal4 stable)
	(set-goal temporary-goal5 4)
	(set-goal gl-stable-build-priority -1)
	(up-jump-rule 5)
)

(defrule
	(up-compare-goal gl-barracks-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-barracks-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-barracks-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-barracks-build-priority > 0)
	(up-compare-goal gl-barracks-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-barracks-build-priority g:>= gl-castle-build-priority)
	(up-compare-goal gl-barracks-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-barracks-build-priority g:>= gl-monastery-build-priority)
=>
	(set-goal temporary-goal4 barracks)
	(set-goal temporary-goal5 4)
	(set-goal gl-barracks-build-priority -1)
	(up-jump-rule 4)
)

(defrule
	(up-compare-goal gl-range-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-range-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-range-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-range-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-range-build-priority > 0)
	(up-compare-goal gl-range-build-priority g:>= gl-castle-build-priority)
	(up-compare-goal gl-range-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-range-build-priority g:>= gl-monastery-build-priority)
=>
	(set-goal temporary-goal4 archery-range)
	(set-goal temporary-goal5 4)
	(set-goal gl-range-build-priority -1)
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal gl-castle-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-castle-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-castle-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-castle-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-castle-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-castle-build-priority > 0)
	(up-compare-goal gl-castle-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-castle-build-priority g:>= gl-monastery-build-priority)
=>
	(set-goal temporary-goal4 castle)
	(set-goal temporary-goal5 5)
	(set-goal gl-castle-build-priority -1)
	(up-jump-rule 2)
)

(defrule
	(up-compare-goal gl-workshop-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-workshop-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-workshop-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-workshop-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-workshop-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-workshop-build-priority g:>= gl-castle-build-priority)
	(up-compare-goal gl-workshop-build-priority > 0)
	(up-compare-goal gl-workshop-build-priority g:>= gl-monastery-build-priority)
=>
	(set-goal temporary-goal4 siege-workshop)
	(set-goal temporary-goal5 5)
	(set-goal gl-workshop-build-priority -1)
	(up-jump-rule 1)
)


(defrule
	(up-compare-goal gl-monastery-build-priority g:>= gl-house-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-stable-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-barracks-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-range-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-castle-build-priority)
	(up-compare-goal gl-monastery-build-priority g:>= gl-workshop-build-priority)
	(up-compare-goal gl-monastery-build-priority > 0)
=>
	(set-goal temporary-goal4 monastery)
	(set-goal temporary-goal5 4)
	(set-goal gl-monastery-build-priority -1)
)

;

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-point2-x)
	(up-get-point-distance gl-point2-x gl-position-self-x temporary-goal10)
	(up-modify-goal temporary-goal10 c:- 2)
	(up-modify-goal temporary-goal10 c:max 0)
	(up-lerp-tiles gl-point2-x gl-position-self-x g: temporary-goal10)
	(up-copy-point gl-point-x gl-point2-x)
	(up-cross-tiles gl-point-x gl-position-self-x c: 4)
	(set-goal temporary-goal 12)
	(set-goal temporary-goal2 12)
	(set-goal temporary-goal3 -1)
	(set-goal temporary-goal8 0)
	(set-goal temporary-goal11 5)
	(set-goal temporary-goal12 12)
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(up-set-target-object search-local c: 0)
	(up-can-build-line 0 gl-point-x g: temporary-goal4)
=>
	(up-copy-point gl-point4-x gl-point-x)
	(up-modify-goal temporary-goal7 g:= temporary-goal5)
	(up-modify-goal temporary-goal7 c:- 2)
	(up-modify-goal temporary-goal7 c:min 2)
	(up-modify-goal gl-point4-x g:+ temporary-goal7)
	(up-modify-goal gl-point4-y g:+ temporary-goal7)
	(set-goal gl-point5-x -1)
	(set-goal gl-point5-y 0)
	(set-goal temporary-goal8 1)
	(up-modify-goal temporary-goal9 g:= temporary-goal5)
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(up-compare-goal temporary-goal8 > 0)
	(not	(up-can-build-line 0 gl-point4-x c: outpost))
=>
;	(chat-to-all ".")
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(up-compare-goal temporary-goal8 > 0)
	(up-compare-goal temporary-goal9 >= 0)
=>
	(up-modify-goal temporary-goal9 c:- 1)
	(up-add-point gl-point4-x gl-point5-x c: 1)
;	(up-chat-data-to-player my-player-number "x: %d" g: gl-point4-x)
;	(up-chat-data-to-player my-player-number "y: %d" g: gl-point4-y)
	(up-jump-rule -2)
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(up-compare-goal temporary-goal8 > 0)
;	(goal temporary-goal9 0)
	(up-compare-goal temporary-goal8 < 4)
=>
	(up-modify-goal temporary-goal10 g:= gl-point5-y)
	(up-modify-goal gl-point5-y g:= gl-point5-x)
	(up-modify-goal gl-point5-x g:= temporary-goal10)
	(up-modify-goal gl-point5-x c:* -1)
	(up-modify-goal temporary-goal8 c:+ 1)
	(up-modify-goal temporary-goal9 g:= temporary-goal5)
	(up-jump-rule -2)
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(up-compare-goal temporary-goal8 > 0)
	(up-can-build-line 0 gl-point-x g: temporary-goal4)
=>
	(up-build-line gl-point-x gl-point-x g: temporary-goal4)
	(up-modify-goal gl-my-builder-count c:+ 1)
;	(up-chat-data-to-player my-player-number "Build: %d" g: temporary-goal4)
;	(up-chat-data-to-player my-player-number "bx: %d" g: gl-point-x)
;	(up-chat-data-to-player my-player-number "by: %d" g: gl-point-y)
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(up-compare-goal temporary-goal > 0)
	(up-set-target-object search-local c: 0)
=>
	(up-modify-goal temporary-goal c:- 1)
	(up-cross-tiles gl-point-x gl-position-self-x c: -1)
;	(up-send-flare gl-point-x)
	(set-goal temporary-goal8 0)
	(up-jump-rule -6)
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
	(up-compare-goal temporary-goal2 > 0)
	(up-set-target-object search-local c: 0)
=>
	(up-modify-goal temporary-goal g:= temporary-goal12)
	(up-modify-goal temporary-goal2 c:- 1)
	(up-modify-goal temporary-goal3 c:- 1)
	(up-copy-point gl-point-x gl-point2-x)
	(up-lerp-tiles gl-point-x gl-position-self-x g: temporary-goal3)
	(up-cross-tiles gl-point-x gl-position-self-x g: temporary-goal11)
;	(up-send-flare gl-point-x)
	(set-goal temporary-goal8 0)
	(up-jump-rule -7)
)

(defrule
	(goal temporary-goal12 12)
	(up-set-target-object search-local c: 0)
=>
	(set-goal temporary-goal11 10)
	(set-goal temporary-goal12 40)
	(set-goal temporary-goal 12)
	(set-goal temporary-goal2 22)
	(set-goal temporary-goal3 -1)
	(up-copy-point gl-point-x gl-point2-x)
	(up-lerp-tiles gl-point-x gl-position-self-x g: temporary-goal3)
	(up-cross-tiles gl-point-x gl-position-self-x g: temporary-goal11)
	(up-jump-rule -8)
)

(defrule
	(up-compare-goal temporary-goal4 > 0)
=>
	(up-remove-objects search-local object-data-index == 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal8 0)
	(up-jump-rule -19)
)

; ============== UNIT SELECTION

(defrule
	(or	(game-time < 600)
		(or	(population < 160)
			(or	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
				(warboat-count < 50))))
	(or	(and	(game-time < 2)
			(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style))
		(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style))
=>
	(up-jump-rule 47)
)

(defrule
	(building-type-count market > 0)
	(commodity-selling-price stone >= 90)
	(or	(commodity-selling-price stone > 100)
		(not	(research-completed ri-guilds)))
=>
	(set-strategic-number sn-market-notice 2)
)

(defrule
	(or	(and	(civ-selected aztec)
			(or	(up-compare-goal gl-enemy-archer-count > 5)
				(up-compare-goal gl-enemy-gunpowder-count > 5)))
		(or	(and	(civ-selected gothic)
				(building-type-count-total barracks > 7))
			(and	(up-compare-goal gl-enemy-scorpion-count > 5)
				(research-completed ri-siege-onager))))
=>
	(up-modify-goal gl-dm-workshop-number c:max 3)
)

(defrule
	(or	(and	(civ-selected hun)
			(and	(players-civ focus-player hun)
				(population > 90)))
		(and	(civ-selected gothic)
			(and	(players-civ focus-player gothic)
				(building-type-count-total barracks > 3))))
=>
	(up-modify-goal gl-dm-workshop-number c:max 3)
)

(defrule
	(or	(civ-selected chinese)
		(or	(and	(or	(civ-selected viking)
					(civ-selected japanese))
				(building-type-count-total barracks > 1))
			(and	(up-compare-goal gl-enemy-archery-count > 9)
				(and	(research-completed ri-onager)
					(game-time > 120)))))
	(goal gl-dm-workshop-number 0)
=>
	(set-goal gl-dm-workshop-number 1)
	(disable-self)
)

(defrule
	(game-time > 60)
	(or	(and	(civ-selected turkish)
			(game-time > 360))
		(or	(civ-selected japanese)
			(civ-selected viking)))
=>
	(up-modify-goal gl-dm-workshop-number c:max 4)
	(disable-self)
)

(defrule
	(game-time > 40)
	(up-research-status c: ri-heavy-scorpion >= research-pending)
	(or	(players-civ focus-player malay)
		(or	(players-civ focus-player khmer)
			(or	(players-civ focus-player burmese)
				(players-civ focus-player vietnamese))))
=>
	(up-modify-goal gl-dm-workshop-number c:max 3)
	(disable-self)
)

(defrule
	(goal gl-dm-allow-counter-halbs 1)
	(or	(up-compare-const dm-cavalry-threat-likelihood == 1)
		(or	(players-civ focus-player frankish)
			(or	(players-civ focus-player hun)
				(or	(players-civ focus-player persian)
					(or	(players-civ focus-player saracen)
						(or	(players-civ focus-player indian)
							(up-compare-goal gl-enemy-cavalry-count > 5)))))))
=>
	(up-modify-goal gl-dm-barracks-number c:max 4)
	(disable-self)
)

(defrule
	(goal gl-dm-allow-counter-halbs 1)
	(population > 12)
	(or	(up-compare-const dm-cavalry-threat-likelihood == 1)
		(or	(players-civ focus-player frankish)
			(or	(players-civ focus-player hun)
				(or	(players-civ focus-player persian)
					(or	(players-civ focus-player saracen)
						(players-civ focus-player indian))))))
=>
	(up-modify-goal gl-dm-barracks-number c:max 8)
	(disable-self)
)

(defrule
	(goal gl-dm-allow-counter-halbs 1)
	(civilian-population > 90)
	(or	(research-completed ri-halberdier)
		(or	(civ-selected aztec)
			(civ-selected viking)))
	(up-compare-goal gl-enemy-heavy-cavalry-count > 25)
=>
	(up-modify-goal gl-dm-barracks-number c:max 8)
)

(defrule
	(goal gl-dm-allow-counter-halbs 1)
	(population > 12)
	(or	(players-building-type-count target-player stable > 1)
		(up-compare-goal gl-enemy-cavalry-count > 10))
=>
	(up-modify-goal gl-dm-barracks-number c:max 5)
	(disable-self)
)

(defrule
	(goal gl-dm-allow-counter-halbs 1)
	(population > 45)
	(up-compare-goal gl-enemy-heavy-cavalry-count > 10)
	(or	(up-compare-goal gl-enemy-heavy-cavalry-count > 20)
		(players-building-type-count target-player stable > 3))
=>
	(up-modify-goal gl-dm-barracks-number c:max 7)
	(disable-self)
)

(defrule
	(or	(goal gl-strategy dm-palas)
		(civ-selected persian))
	(or	(up-compare-goal gl-enemy-spearman-count > 7)
		(up-compare-goal gl-enemy-camelry-count > 7))
	(up-research-status c: ri-heavy-scorpion >= research-pending)
	(population > 10)
=>
	(up-modify-goal gl-dm-workshop-number c:max 5)
	(disable-self)
)

(defrule
	(civ-selected magyar)
	(building-type-count-total stable > 2)
=>
	(up-modify-goal gl-dm-range-number c:max 7)
)

(defrule
	(civ-selected hun)
	(or	(players-civ focus-player aztec)
		(or	(players-civ focus-player celtic)
			(or	(players-civ focus-player gothic)
				(or	(players-civ focus-player japanese)
					(or	(players-civ focus-player viking)
						(or	(players-civ focus-player mayan)
							(up-compare-const dm-cavalry-threat-likelihood == 0)))))))
	(building-type-count-total stable > 2)
=>
	(up-modify-goal gl-dm-range-number c:max 5)
)

(defrule
	(civ-selected hun)
	(or	(players-civ focus-player mayan)
		(or	(players-civ focus-player celtic)
			(or	(players-civ focus-player gothic)
				(or	(players-civ focus-player japanese)
					(players-civ focus-player saracen)))))
	(building-type-count-total stable > 6)
=>
	(up-modify-goal gl-dm-range-number c:max 10)
)

(defrule
	(not	(civ-selected hun))
	(or	(strategic-number sn-gold-gatherer-percentage > 90)
		(and	(or	(goal gl-strategy dm-palas)
				(goal gl-strategy dm-pala-scorpion))
			(up-gaia-type-count c: gold > 9)))
=>
	(up-jump-rule 1)
)

(defrule
	(or	(goal gl-dm-allow-counter-skirms 1)
		(and	(civ-selected hun)
			(population > 24)))
	(population > 16)
	(or	(and	(up-compare-const dm-archer-threat-likelihood == 1)
			(and	(up-compare-const dm-anti-archer-threat-likelihood == 0)
				(gold-amount < 500)))
		(civ-selected hun))
=>
	(up-modify-goal gl-dm-range-number c:max 8)
)

(defrule
	(up-compare-goal gl-strategy != dm-pala-scorpion)
	(up-research-status c: ri-heavy-scorpion < research-pending)
	(or	(players-civ focus-player incan)
		(players-civ focus-player gothic))
	(research-completed ri-bloodlines)
	(research-completed ri-paladin)
	(game-time > 150)
	(unit-available hand-cannoneer)
	(up-compare-goal gl-dm-range-number < 4)
	(players-building-count every-enemy > 0)
=>
	(set-goal gl-dm-range-number 4)
)

(defrule
	(civ-selected gothic)
	(gold-amount > 1000)
=>
	(set-goal gl-dm-allow-counter-skirms 0)
	(up-jump-rule 6)
)

(defrule
	(game-time > 1200)
	(food-amount > 1500)
	(wood-amount > 1500)
	(gold-amount < 100)
	(research-completed ri-elite-skirmisher)
	(civilian-population > 90)
=>
	(up-modify-goal gl-dm-range-number c:max 6)
	(set-goal gl-dm-allow-counter-skirms 1)
)

(defrule
	(goal gl-dm-allow-counter-skirms 1)
	(population > 80)
	(gold-amount < 500)
	(or	(players-unit-type-count focus-player genoese-crossbowman > 10)
		(or	(up-compare-goal gl-enemy-archer-count > 10)
			(or	(up-compare-goal gl-enemy-gunpowder-count > 10)
				(or	(up-compare-goal gl-enemy-mameluke-count > 7)
					(players-unit-type-count focus-player elephant-archer > 7)))))
	(up-compare-goal gl-dm-range-number < 6)
=>
	(set-goal gl-dm-range-number 6)
)

(defrule
	(or	(up-compare-goal gl-enemy-spearman-count > 8)
		(and	(up-compare-goal gl-enemy-archer-count > 4)
			(or	(game-time > 900)
				(gold-amount < 100))))
	(game-time > 1500)
	(not	(player-in-game any-ally))
	(gold-amount < 500)
	(research-completed ri-elite-skirmisher)
	(population > 70)
=>
	(up-modify-goal gl-dm-range-number c:max 6)
	(set-goal gl-dm-allow-counter-skirms 1)
)

(defrule
	(goal gl-dm-main-unit paladin)
	(civ-selected hun)
	(game-time > 140)
	(up-compare-goal gl-dm-allow-UU-training != 1)
	(research-completed ri-heavy-cavalry-archer)
	(research-completed ri-bracer)
	(research-completed ri-parthian-tactics)
	(not	(unit-available hand-cannoneer))
	(players-civ focus-player gothic)
=>
	(up-modify-goal gl-dm-range-number c:max 5)
)

(defrule
	(game-time > 180)
	(up-compare-const dm-UU-type == anti-infantry-type)
	(or	(up-compare-goal gl-enemy-infantry-count > 6)
		(up-compare-goal gl-enemy-eagle-count > 7))
=>
	(set-goal gl-dm-allow-UU-training 1)
	(disable-self)
)

(defrule
	(game-time > 150)
	(up-compare-const dm-UU-type == archer-type)
	(or	(up-compare-goal gl-enemy-infantry-count > 6)
		(or	(players-unit-type-count focus-player cavalry-archer-line > 6)
			(up-compare-goal gl-enemy-gunpowder-count > 4)))
=>
	(set-goal gl-dm-allow-UU-training 1)
	(disable-self)
)

(defrule
	(game-time > 150)
	(unit-available hand-cannoneer)
	(or	(goal gl-dm-main-unit champion)
		(or	(goal gl-dm-main-unit huskarl)
			(goal gl-dm-main-unit halberdier)))
	(or	(up-compare-goal gl-enemy-infantry-count > 4)
		(players-unit-type-count focus-player teutonic-knight-line > 2))
	(up-compare-goal gl-dm-range-number < 3)
=>
	(set-goal gl-dm-range-number 3)
)

(defrule
	(game-time > 10)
	(or	(and	(unit-available hand-cannoneer)
			(and	(goal gl-dm-main-unit halberdier)
				(or	(up-compare-goal gl-enemy-eagle-count > 4)
					(up-compare-goal gl-enemy-spearman-count > 4))))
		(civ-selected hun))
	(up-compare-goal gl-dm-range-number < 2)
=>
	(set-goal gl-dm-range-number 2)
)

(defrule
	(goal gl-dm-main-unit champion)
	(or	(players-unit-type-count focus-player archery-range > 1)
		(or	(up-compare-goal gl-enemy-gunpowder-count > 1)
			(or	(up-compare-goal gl-enemy-archery-count > 1)
				(or	(up-compare-goal gl-enemy-scorpion-count > 1)
					(players-building-type-count focus-player castle > 1)))))
	(civ-selected gothic)
=>
	(set-goal gl-strategy dm-husk-champ)
	(set-goal gl-dm-main-unit huskarl)
)

(defrule
	(or	(and	(or	(goal gl-strategy dm-champ-turtle)
				(and	(up-compare-goal gl-enemy-infantry-count > 10)
					(not	(players-civ focus-player japanese))))
			(civ-selected aztec))
		(civ-selected turkish))
	(building-type-count castle > 1)
=>
	(set-goal gl-strategy dm-UU)
	(set-goal gl-dm-main-unit my-unique-unit)
	(disable-self)
)

(defrule
	(or	(civ-selected celtic)
		(civ-selected slavic))
	(building-type-count castle > 1)
=>
	(set-goal gl-strategy dm-UU-halb)
	(set-goal gl-dm-main-unit my-unique-unit)
	(disable-self)
)

(defrule
	(or	(civ-selected mayan)
		(and	(civ-selected celtic)
			(and	(or	(players-civ focus-player celtic)
					(or	(players-civ focus-player gothic)
						(players-civ focus-player viking)))
				(game-time > 140))))
	(game-time > 100)
=>
	(set-goal gl-dm-allow-UU-training 1)
	(disable-self)
)

(defrule
	(civ-selected celtic)
	(or	(players-civ focus-player celtic)
		(or	(players-civ focus-player gothic)
			(players-civ focus-player viking)))
	(building-type-count castle > 1)
	(game-time > 100)
=>
	(set-goal gl-strategy dm-UU)
	(set-goal gl-dm-main-unit my-unique-unit)
	(disable-self)
)

(defrule
	(or	(civ-selected mayan)
		(and	(or	(civ-selected celtic)
				(civ-selected slavic))
			(or	(players-civ focus-player aztec)
				(or	(players-civ focus-player mayan)
					(players-civ focus-player incan)))))
	(building-type-count castle > 1)
	(game-time > 100)
=>
	(set-goal gl-strategy dm-UU)
	(set-goal gl-dm-main-unit my-unique-unit)
	(disable-self)
)

(defrule
	(goal gl-strategy dm-halb-scorpion)
	(game-time < 210)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(and	(goal gl-dm-main-unit paladin)
			(goal gl-strategy dm-pala-turtle))
		(or	(and	(goal gl-dm-main-unit champion)
				(goal gl-strategy dm-champ-turtle))
			(or	(civ-selected turkish)
				(or	(goal gl-strategy dm-halb-scorpion)
					(civ-selected byzantine)))))
	(game-time > 100)
=>
	(set-goal gl-dm-allow-UU-training 1)
	(disable-self)
)

(defrule
	(game-time > 10)
	(goal gl-strategy dm-palas)
	(or	(up-compare-const dm-infantry-threat-likelihood == 1)
		(or	(players-civ focus-player gothic)
			(or	(players-civ focus-player japanese)
				(or	(up-compare-goal gl-enemy-spearman-count > 7)
					(up-compare-goal gl-enemy-camelry-count > 7)))))
	(civ-selected spanish)
=>
	(set-goal gl-strategy dm-pala-cannoneer)
	(up-modify-goal gl-dm-range-number c:max 6)
	(set-goal gl-dm-stable-number 8)
	(disable-self)
)

(defrule
	(game-time > 10)
	(goal gl-strategy dm-palas)
	(or	(players-civ focus-player aztec)
		(or	(players-civ focus-player mayan)
			(or	(and	(game-time > 180)
					(civ-selected spanish))
				(players-civ focus-player viking))))
	(civ-selected spanish)
=>
	(set-goal gl-strategy dm-pala-cannoneer)
	(up-modify-goal gl-dm-range-number c:max 6)
	(up-modify-goal gl-dm-stable-number c:max 7)
	(disable-self)
)

(defrule
	(game-time > 10)
	(goal gl-strategy dm-palas)
	(or	(up-compare-const dm-infantry-threat-likelihood == 1)
		(or	(players-civ focus-player gothic)
			(or	(players-civ focus-player japanese)
				(players-civ focus-player viking))))
	(or	(civ-selected teutonic)
		(civ-selected frankish))
=>
	(set-goal gl-strategy dm-pala-scorpion)
	(up-modify-goal gl-dm-workshop-number c:max 6)
	(set-goal gl-dm-stable-number 8)
	(disable-self)
)

(defrule
	(game-time > 10)
	(goal gl-strategy dm-palas)
	(or	(up-compare-goal gl-enemy-spearman-count > 7)
		(or	(up-compare-goal gl-enemy-camelry-count > 7)
			(or	(players-civ focus-player saracen)
				(players-civ focus-player byzantine))))
	(or	(civ-selected teutonic)
		(civ-selected frankish))
=>
	(set-goal gl-strategy dm-pala-scorpion)
	(up-modify-goal gl-dm-workshop-number c:max 6)
	(up-modify-goal gl-dm-stable-number c:max 7)
	(disable-self)
)

(defrule
	(game-time > 10)
	(goal gl-strategy dm-palas)
	(or	(players-civ focus-player aztec)
		(or	(players-civ focus-player mayan)
			(and	(game-time > 180)
				(civ-selected spanish))))
	(or	(civ-selected teutonic)
		(civ-selected frankish))
=>
	(set-goal gl-strategy dm-pala-scorpion)
	(up-modify-goal gl-dm-workshop-number c:max 6)
	(up-modify-goal gl-dm-stable-number c:max 7)
	(disable-self)
)

(defrule
	(goal gl-dm-main-unit camel)
	(building-type-count castle > 1)
	(civ-selected byzantine)
=>
	(set-goal gl-strategy dm-UU-halb)
	(set-goal gl-dm-main-unit my-unique-unit)
	(set-goal gl-dm-range-number 6)
	(disable-self)
)

(defrule
	(research-completed ri-champion)
	(or	(goal gl-strategy dm-palas)
		(goal gl-strategy dm-pala-scorpion))
	(or	(players-civ focus-player celtic)
		(or	(players-civ focus-player japanese)
			(players-civ focus-player viking)))
	(food-amount > 10000)
	(building-type-count-total stable > 1)
	(game-time < 600)
=>
	(up-modify-goal gl-dm-barracks-number c:max 4)
	(disable-self)
)

(defrule
	(civ-selected gothic)
	(or	(goal gl-strategy dm-champ-cannoneer)
		(or	(players-civ focus-player aztec)
			(or	(players-civ focus-player japanese)
				(or	(players-civ focus-player gothic)
					(players-civ focus-player viking)))))
	(game-time > 120)
=>
	(up-modify-goal gl-dm-range-number c:min 3)
	(up-modify-goal gl-dm-workshop-number c:max 6)
	(disable-self)
)

(defrule
	(civ-selected gothic)
	(or	(goal gl-strategy dm-champ-cannoneer)
		(or	(players-civ focus-player aztec)
			(or	(players-civ focus-player japanese)
				(or	(players-civ focus-player gothic)
					(players-civ focus-player viking)))))
	(game-time > 120)
	(building-type-count siege-workshop > 2)
=>
	(set-goal gl-strategy dm-champ-scorpion)
	(up-modify-goal gl-dm-range-number c:min 0)
	(disable-self)
)

(defrule
	(civ-selected gothic)
	(or	(goal gl-strategy dm-champ-cannoneer)
		(or	(players-civ focus-player aztec)
			(or	(players-civ focus-player japanese)
				(or	(players-civ focus-player gothic)
					(players-civ focus-player viking)))))
	(building-type-count siege-workshop > 0)
	(game-time > 120)
	(gold-amount > 1000)
=>
	(up-modify-goal gl-dm-range-number c:min 3)
)

(defrule
	(building-type-count castle > 1)
	(or	(civ-selected briton)
		(civ-selected chinese))
	(nor	(players-civ focus-player incan)
		(or	(players-civ focus-player mayan)
			(or	(players-civ focus-player aztec)
				(players-civ focus-player gothic))))
	(up-compare-goal gl-dm-main-unit != my-unique-unit)
=>
	(set-goal gl-strategy dm-UU-halb)
	(set-goal gl-dm-main-unit my-unique-unit)
)

(defrule
	(building-type-count castle > 1)
	(or	(civ-selected briton)
		(or	(civ-selected chinese)
			(civ-selected mongol)))
	(or	(players-civ focus-player incan)
		(or	(players-civ focus-player mayan)
			(or	(players-civ focus-player aztec)
				(players-civ focus-player gothic))))
	(up-compare-goal gl-dm-main-unit != champion)
=>
	(set-goal gl-strategy dm-UU)
	(set-goal gl-dm-main-unit champion)
)

(defrule
	(building-type-count castle > 1)
	(civ-selected mongol)
	(nor	(players-civ focus-player incan)
		(or	(players-civ focus-player mayan)
			(or	(players-civ focus-player aztec)
				(players-civ focus-player gothic))))
	(up-compare-goal gl-dm-main-unit != my-unique-unit)
=>
	(set-goal gl-strategy dm-UU)
	(set-goal gl-dm-main-unit my-unique-unit)
)

; ============== UNITS

(defrule
	(nand	(civ-selected mayan)
		(building-type-count house < 2))
	(up-compare-goal gl-my-villager-count-total < 50)
	(civilian-population < 70)
	(current-age == imperial-age)
=>
	(up-modify-sn sn-enable-training-queue c:+ 1)
)

(defrule
	(up-compare-goal gl-my-villager-count-total >= imperial-villager-cap)
=>
	(up-jump-rule 1)
)

(defrule
	(or	(up-compare-goal gl-my-villager-count-total < 80)
		(or	(and	(not	(player-in-game any-ally))
				(and	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
					(game-time < 600)))
			(population-cap > 240)))
	(or	(up-compare-goal gl-my-villager-count-total < 100)
		(up-compare-goal gl-trade-unit-count-total < 17))
	(up-compare-goal gl-my-villager-count-total < 120)
	(can-train villager)
=>
	(up-train 0 c: villager)
)

(defrule
	(players-building-type-count any-ally market > 0)
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
	(unit-type-count-total trade-cart < max-carts)
	(population-cap >= 65); Other rules handle <65
	(can-train trade-cart)
=>
	(up-train 0 c: trade-cart)
)

(defrule
	(nand	(civ-selected mayan)
		(building-type-count house < 2))
	(up-compare-goal gl-my-villager-count-total < 50)
	(civilian-population < 70)
	(current-age == imperial-age)
=>
	(up-modify-sn sn-enable-training-queue c:- 1)
)

(defrule
	(up-compare-const gv-FFA-like-game == 0)
	(current-age == gv-maximum-age)
	(game-time > time-to-allow-villager-deleting)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(food-amount > food-to-delete-75-extra-vill)
	(or	(up-compare-goal gl-my-villager-count-total > 75)
		(up-compare-goal gl-my-villager-count-total > imperial-villager-cap))
	(wood-amount > wood-to-delete-75-extra-vill)
	(gold-amount > gold-to-delete-75-extra-vill)
	(not	(player-in-game any-ally))
	(players-population every-enemy < almost-full-pop)
=>
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != wood-exhaustion)
	(up-compare-const gv-michi-style == 1)
	(soldier-count > 100)
	(civilian-population < 70)
	(population-cap < 240)
=>
	(up-jump-rule 106)
)

(defrule
	(or	(and	(unit-type-count-total trebuchet-set > 1)
			(unit-type-count-total battering-ram-line > 4))
		(goal MILITARY 0))
	(up-compare-goal gl-population >= almost-full-pop)
	(soldier-count > 50)
	(warboat-count < 30)
	(wood-amount > 200)
	(gold-amount > 200)
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
=>
	(up-jump-rule 105)
)

(defrule
	(or	(game-time < 600)
		(or	(population < 160)
			(or	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
				(warboat-count < 50))))
	(or	(and	(game-time < 2)
			(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style))
		(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style))
=>
	(up-jump-rule 104)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-landing-style)
	(strategic-number sn-minimum-water-body-size-for-dock != islands-map-water-style)
	(game-time < 75)
	(up-compare-const gv-meso-civ-enemy == 0)
	(not	(civ-selected turkish))
	(starting-age >= imperial-age)
	(or	(can-train spearman-line)
		(can-train camel-line))
=>
	(up-train 0 c: spearman-line)
	(up-train 0 c: camel-line)
	(disable-self)
)

(defrule
	(or	(up-projectile-detected projectile-castle < 5000)
		(or	(up-projectile-detected projectile-bombard-tower < 5000)
			(and	(goal MILITARY 1)
				(players-building-type-count target-player castle > 0))))
	(or	(unit-type-count-total trebuchet-set < 3)
		(game-time > 1200))
	(unit-type-count-total trebuchet-set < 5)
	(soldier-count > 55)
	(can-train-with-escrow trebuchet)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train trebuchet)
)

(defrule
	(or	(game-time > 1200)
		(and	(unit-type-count-total trebuchet-set < 3)
			(players-building-type-count target-player castle > 0)))
	(gold-amount > 2500)
	(unit-type-count-total trebuchet-set < 15)
	(soldier-count > 40)
	(or	(soldier-count > 70)
		(up-compare-goal gl-soldier-percentage > 170))
	(can-train-with-escrow trebuchet)
=>
	(release-escrow gold)
	(release-escrow wood)
	(train trebuchet)
)

(defrule
	(or	(and	(goal MILITARY 1)
			(or	(players-building-type-count target-player castle > 0)
				(players-building-type-count target-player bombard-tower > 0)))
		(up-compare-goal gl-population >= 175))
	(unit-type-count-total battering-ram-line < 4)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)

(defrule
	(or	(goal MILITARY 0)
		(unit-type-count-total battering-ram-line > 8))
	(unit-type-count-total battering-ram-line > 5)
	(up-pending-objects c: battering-ram-line > 0)
	(or	(up-pending-objects c: battering-ram-line > 1)
		(building-type-count siege-workshop < 2))
	(unit-type-count-total scorpion-line < 10)
	(unit-type-count-total mangonel-line < 5)
	(unit-type-count-total bombard-cannon < 6)
	(not	(civ-selected hun))
=>
	(up-jump-rule 1)
)

(defrule
	(or	(goal MILITARY 1)
		(and	(or	(up-compare-goal threat-time > 25000)
				(soldier-count > 60))
			(or	(players-building-type-count target-player castle > 0)
				(players-building-type-count target-player bombard-tower > 0))))
	(or	(soldier-count > 35)
		(up-compare-goal gl-my-villager-count > 17))
	(unit-type-count-total battering-ram-line < 13)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)

(defrule
	(population-cap >= 200)
	(unit-type-count-total battering-ram-line < 3)
	(unit-type-count-total trebuchet-set < 2)
	(or	(up-compare-goal gl-population >= pop-to-full-pop-attack)
		(and	(up-compare-goal gl-population >= almost-full-pop)
			(civilian-population < 80)))
=>
	(up-jump-rule 96)
)

(defrule
	(up-compare-goal gl-population < pop-to-full-pop-attack)
	(or	(and	(up-compare-goal TSA >= 1)
			(and	(up-compare-goal threat-time < 3000)
				(up-compare-goal gl-military-percentage < 120)))
		(or	(military-population < 70)
			(and	(military-population < 110)
				(game-time < 600))))
=>
	(up-jump-rule 1)
)

(defrule
	(or	(game-time < time-to-allow-villager-deleting)
		(or	(food-amount < food-to-delete-75-extra-vill)
			(or	(wood-amount < wood-to-delete-75-extra-vill)
				(gold-amount < gold-to-delete-75-extra-vill))))
	(or	(up-compare-goal gl-military-percentage > 250)
		(or	(up-compare-goal gl-population >= pop-to-full-pop-attack)
			(and	(up-compare-goal gl-population >= almost-full-pop)
				(up-compare-goal gl-my-villager-count-total < 40))))
	(civilian-population < 100)
=>
	(up-jump-rule 93)
)

(defrule
	(or	(nor	(civ-selected turkish)
			(civ-selected portuguese))
		(unit-type-count-total bombard-cannon >= max-cannons))
=>
	(up-jump-rule 3)
)

(defrule
	(or	(gold-amount > 1000)
		(unit-type-count-total trade-cart > 25))
	(or	(players-unit-type-count focus-player archer-line > 10)
		(or	(players-unit-type-count focus-player cavalry-archer-line > 10)
			(or	(players-unit-type-count focus-player hand-cannoneer > 10)
				(or	(up-compare-goal gl-enemy-mameluke-count > 7)
					(unit-type-count-total trade-cart > 35)))))
	(can-train bombard-cannon)
=>
	(up-train 0 c: bombard-cannon)
)

(defrule
	(or	(gold-amount > 1000)
		(unit-type-count-total trade-cart > 25))
	(or	(players-unit-type-count focus-player mangudai-line > 10)
		(or	(players-unit-type-count focus-player janissary-line > 10)
			(or	(players-unit-type-count focus-player plumed-archer-line > 10)
				(or	(players-unit-type-count focus-player chu-ko-nu-line > 10)
					(or	(players-building-type-count focus-player conquistador-line > 10)
						(players-building-type-count focus-player longbowman-line > 10))))))
	(can-train bombard-cannon)
=>
	(up-train 0 c: bombard-cannon)
)

(defrule
	(or	(gold-amount > 1000)
		(unit-type-count-total trade-cart > 25))
	(or	(and	(up-compare-goal gl-enemy-onager-count > 1)
			(unit-type-count-total bombard-cannon < 4))
		(or	(up-compare-goal gl-enemy-scorpion-count > 4)
			(or	(players-unit-type-count focus-player genoese-crossbowman > 4)
				(up-compare-goal gl-enemy-onager-count > 2))))
	(can-train bombard-cannon)
=>
	(up-train 0 c: bombard-cannon)
)

(defrule
	(gold-amount > 500)
	(up-compare-goal gl-enemy-elephant-count > 2)
	(nor	(players-civ focus-player malay)
		(players-civ target-player malay))
	(unit-type-count-total monk < 10)
	(can-train monk)
=>
	(up-train 0 c: monk)
)

(defrule
	(unit-type-count-total knight-line < 5)
	(unit-type-count-total scout-cavalry-line < 5)
	(unit-type-count-total mangudai-line < 5)
	(unit-type-count-total war-wagon-line < 5)
	(or	(players-unit-type-count focus-player hand-cannoneer > 4)
		(or	(players-unit-type-count focus-player conquistador-line > 4)
			(players-unit-type-count focus-player janissary-line > 4)))
	(unit-type-count-total condottiero < 10)
	(can-train condottiero)
=>
	(train condottiero-unit)
)

(defrule
	(unit-type-count-total knight-line < 5)
	(unit-type-count-total scout-cavalry-line < 5)
	(unit-type-count-total mangudai-line < 5)
	(unit-type-count-total war-wagon-line < 5)
	(or	(players-unit-type-count focus-player hand-cannoneer > 9)
		(or	(players-unit-type-count focus-player conquistador-line > 9)
			(players-unit-type-count focus-player janissary-line > 9)))
	(unit-type-count-total condottiero < 30)
	(can-train condottiero)
=>
	(train condottiero-unit)
)

(defrule
	(or	(goal gl-dm-allow-UU-training 1)
		(or	(goal gl-strategy dm-UU)
			(goal gl-dm-main-unit my-unique-unit)))
	(or	(food-amount g:> gl-required-food)
		(up-compare-const dm-food-costing-UU == 0))
	(can-train my-unique-unit-line)
=>
	(train my-unique-unit-line)
)

(defrule
	(civ-selected incan)
	(or	(players-unit-type-count focus-player militiaman-line > 4)
		(or	(players-unit-type-count focus-player eagle-warrior-line > 4)
			(or	(players-unit-type-count focus-player jaguar-man-line > 4)
				(or	(players-unit-type-count focus-player huskarl-line > 4)
					(or	(players-unit-type-count focus-player berserk-line > 4)
						(or	(players-unit-type-count focus-player woad-raider-line > 4)
							(players-unit-type-count focus-player throwing-axeman-line > 4)))))))
	(can-train slinger)
=>
	(up-train 0 c: slinger)
)

(defrule
	(civ-selected incan)
	(or	(players-civ focus-player gothic)
		(players-civ focus-player slavic))
	(can-train slinger)
=>
	(up-train 0 c: slinger)
)

(defrule
	(goal gl-dm-allow-counter-halbs 1)
	(food-amount g:> gl-required-food)
	(game-time < 180)
	(up-compare-const dm-cavalry-threat-likelihood == 1)
	(up-compare-const dm-archer-threat-likelihood == 0)
	(up-compare-const dm-gunpowder-threat-likelihood == 0)
	(or	(unit-type-count-total spearman-line < 15)
		(civ-selected hun))
	(unit-type-count-total spearman-line < 30)
	(can-train spearman-line)
=>
	(up-train 0 c: spearman-line)
)

(defrule
	(goal gl-dm-allow-counter-halbs 1)
	(food-amount g:> gl-required-food)
	(or	(up-compare-goal gl-enemy-cavalry-count > 2)
		(or	(up-compare-goal gl-enemy-cataphract-count > 2)
			(and	(or	(players-building-type-count target-player stable > 1)
					(players-civ focus-player persian))
				(game-time < 600))))
	(unit-type-count-total spearman-line < 30)
	(can-train spearman-line)
=>
	(up-train 0 c: spearman-line)
)

(defrule
	(goal POSITION FLANK)
	(up-compare-const dm-cavalry-threat-likelihood == 0)
	(unit-type-count-total huskarl-set < 5)
	(game-time < 150)
	(food-amount g:> gl-required-food)
	(can-train huskarl2)
=>
	(up-train 0 c: huskarl2)
	(up-train 0 c: huskarl2)
	(up-train 0 c: elite-huskarl2)
	(up-train 0 c: elite-huskarl2)
)

(defrule
	(or	(and	(civ-selected celtic)
			(research-completed ri-champion))
		(goal gl-strategy dm-halb-scorpion))
	(up-compare-const dm-cavalry-threat-likelihood == 0)
	(players-building-type-count target-player stable == 0)
	(game-time < 300)
	(unit-type-count-total militiaman-line < 15)
	(food-amount g:> gl-required-food)
	(can-train militiaman-line)
=>
	(up-train 0 c: militiaman-line)
)

(defrule
	(goal gl-strategy dm-halb-scorpion)
	(or	(up-compare-goal gl-enemy-eagle-count > 4)
		(or	(up-compare-const dm-eagle-threat-likelihood == 1)
			(or	(up-compare-goal gl-enemy-huskarl-count > 4)
				(players-civ focus-player gothic))))
	(unit-type-count-total militiaman-line < 40)
	(food-amount g:> gl-required-food)
	(or	(research-completed ri-champion)
		(game-time < 300))
	(can-train militiaman-line)
=>
	(up-train 0 c: militiaman-line)
)

(defrule
	(goal gl-dm-allow-UU-training 1)
	(or	(wood-amount < 400)
		(and	(goal gl-strategy dm-UU)
			(and	(game-time > 240)
				(game-time < 900))))
	(food-amount g:> gl-required-food)
	(research-completed ri-champion)
	(up-compare-const dm-cavalry-threat-likelihood == 0)
	(up-compare-const dm-UU-type == archer-type)
	(can-train militiaman-line)
=>
	(up-train 0 c: militiaman-line)
)

(defrule
	(goal gl-dm-allow-UU-training 1)
	(or	(up-compare-goal gl-enemy-huskarl-count > 4)
		(up-compare-goal gl-enemy-skirmisher-count > 25))
	(unit-type-count-total militiaman-line < 40)
	(food-amount g:> gl-required-food)
	(research-completed ri-champion)
	(up-compare-const dm-UU-type == archer-type)
	(can-train militiaman-line)
=>
	(up-train 0 c: militiaman-line)
)

(defrule
	(goal gl-strategy dm-eagles)
	(food-amount g:> gl-required-food)
	(research-completed ri-champion)
	(or	(and	(up-compare-goal gl-enemy-eagle-count > 4)
			(or	(up-compare-goal gl-enemy-archer-count < 10)
				(up-compare-goal gl-enemy-huskarl-count > 10)))
		(or	(gold-amount <= 4000)
			(and	(up-compare-const dm-eagle-threat-likelihood == 1)
				(game-time < 120))))
	(can-train militiaman-line)
=>
	(up-train 0 c: militiaman-line)
)

#load-if-defined INCAN-CIV
(defrule
	(or	(and	(goal gl-strategy dm-eagles)
			(gold-amount > 4000))
		(or	(and	(up-compare-goal gl-enemy-archer-count > 5)
				(up-compare-goal gl-eagle-warrior-count < 20))
			(and	(game-time < 300)
				(up-compare-goal gl-enemy-cavalry-count < 5))))
	(food-amount g:> gl-required-food)
	(can-train eagle-warrior-line)
=>
	(up-train 0 c: eagle-warrior-line)
)
#else
(defrule
	(or	(and	(goal gl-strategy dm-eagles)
			(gold-amount > 4000))
		(and	(civ-selected aztec)
			(and	(up-compare-goal gl-enemy-archer-count > 5)
				(up-compare-goal gl-eagle-warrior-count < 20))))
	(food-amount g:> gl-required-food)
	(can-train eagle-warrior-line)
=>
	(up-train 0 c: eagle-warrior-line)
)
#end-if

#load-if-defined MAYAN-CIV
(defrule
	(food-amount g:> gl-required-food)
	(or	(up-compare-goal gl-enemy-skirmisher-count > 7)
		(or	(players-unit-type-count focus-player war-wagon-line > 7)
			(or	(up-compare-goal gl-enemy-huskarl-count > 4)
				(or	(up-compare-goal gl-enemy-scorpion-count > 3)
					(or	(players-unit-type-count focus-player battering-ram-line > 2)
						(up-compare-goal gl-enemy-onager-count > 1))))))
	(up-compare-goal gl-eagle-warrior-count-total < 20)
	(can-train eagle-warrior-line)
=>
	(up-train 0 c: eagle-warrior-line)
)
#else
(defrule
	(food-amount g:> gl-required-food)
	(or	(players-unit-type-count focus-player war-wagon-line > 7)
		(or	(up-compare-goal gl-enemy-scorpion-count > 3)
			(or	(up-compare-goal gl-enemy-onager-count > 1)
				(and	(up-compare-goal gl-eagle-warrior-count < 5)
					(game-time < 150)))))
	(unit-type-count-total eagle-warrior-line < 20)
	(can-train eagle-warrior-line)
=>
	(up-train 0 c: eagle-warrior-line)
)
#end-if

(defrule
	(civ-selected mayan)
	(food-amount g:> gl-required-food)
	(or	(and	(or	(up-compare-goal gl-trade-unit-count-total > 30)
				(gold-amount > 2500))
			(gold-amount > 250))
		(and	(up-compare-goal gl-enemy-eagle-count > 15)
			(up-compare-goal gl-eagle-warrior-count-total < 25)))
	(can-train eagle-warrior-line)
=>
	(up-train 0 c: eagle-warrior-line)
)

(defrule
	(goal gl-strategy dm-halb-onager)
	(food-amount g:> gl-required-food)
	(can-train spearman-line)
=>
	(up-train 0 c: spearman-line)
)

(defrule
	(goal gl-strategy dm-halb-husk)
	(food-amount g:> gl-required-food)
	(or	(unit-type-count-total spearman-line < 15)
		(unit-type-count-total huskarl-set > 5))
	(or	(unit-type-count-total spearman-line < 25)
		(unit-type-count-total huskarl-set > 12))
	(or	(unit-type-count-total spearman-line < 45)
		(unit-type-count-total huskarl-set > 25))
	(unit-type-count-total spearman-line < 175)
	(can-train spearman-line)
=>
	(up-train 0 c: spearman-line)
)

(defrule
	(goal gl-strategy dm-UU-halb)
	(food-amount g:> gl-required-food)
	(or	(unit-type-count-total spearman-line < 15)
		(up-compare-goal gl-my-UU-count-total > 5))
	(or	(unit-type-count-total spearman-line < 17)
		(up-compare-goal gl-my-UU-count-total > 12))
	(or	(unit-type-count-total spearman-line < 37)
		(up-compare-goal gl-my-UU-count-total > 25))
	(unit-type-count-total spearman-line < 40)
	(can-train spearman-line)
=>
	(up-train 0 c: spearman-line)
)

(defrule
	(goal gl-strategy dm-UU-halb)
	(food-amount g:> gl-required-food)
	(unit-type-count-total my-unique-unit-line > 35)
	(or	(unit-type-count-total spearman-line < 50)
		(up-compare-goal gl-my-UU-count-total > 50))
	(or	(unit-type-count-total spearman-line < 65)
		(up-compare-goal gl-my-UU-count-total > 65))
	(or	(unit-type-count-total spearman-line < 80)
		(up-compare-goal gl-my-UU-count-total > 80))
	(can-train spearman-line)
=>
	(up-train 0 c: spearman-line)
)

(defrule
	(goal gl-strategy dm-husk-champ)
	(food-amount g:> gl-required-food)
	(unit-type-count-total huskarl-set > 2)
	(or	(unit-type-count-total militiaman-line < 10)
		(unit-type-count-total huskarl-set > 5))
	(or	(unit-type-count-total militiaman-line < 15)
		(unit-type-count-total huskarl-set > 12))
	(or	(unit-type-count-total militiaman-line < 20)
		(unit-type-count-total huskarl-set > 20))
	(unit-type-count-total militiaman-line < 35)
	(can-train militiaman-line)
=>
	(up-train 0 c: militiaman-line)
)

(defrule
	(goal gl-strategy dm-husk-champ)
	(food-amount g:> gl-required-food)
	(unit-type-count-total huskarl-set > 30)
	(or	(unit-type-count-total militiaman-line < 40)
		(unit-type-count-total huskarl-set > 45))
	(or	(unit-type-count-total militiaman-line < 60)
		(unit-type-count-total huskarl-set > 60))
	(or	(unit-type-count-total militiaman-line < 75)
		(unit-type-count-total huskarl-set > 75))
	(can-train militiaman-line)
=>
	(up-train 0 c: militiaman-line)
)

(defrule
	(research-completed ri-champion)
	(or	(and	(goal gl-dm-main-unit huskarl)
			(players-unit-type-count focus-player champion > 4))
		(or	(goal gl-dm-main-unit champion)
			(and	(goal gl-strategy dm-pala-turtle)
				(and	(unit-type-count-total militiaman-line < 25)
					(up-compare-const dm-cavalry-threat-likelihood == 0)))))
	(food-amount g:> gl-required-food)
	(can-train militiaman-line)
=>
	(up-train 0 c: militiaman-line)
)

(defrule
	(research-completed ri-champion)
	(goal gl-dm-main-unit paladin)
	(or	(players-civ focus-player aztec)
		(or	(players-civ focus-player mayan)
			(up-compare-goal gl-enemy-spearman-count > 9)))
	(food-amount > 6000)
	(game-time < 600)
	(unit-type-count-total militiaman-line < 40)
	(food-amount g:> gl-required-food)
	(can-train militiaman-line)
=>
	(up-train 0 c: militiaman-line)
)

(defrule
	(research-completed ri-champion)
	(goal gl-dm-main-unit paladin)
	(or	(players-civ focus-player celtic)
		(or	(players-civ focus-player japanese)
			(players-civ focus-player viking)))
	(food-amount > 6000)
	(game-time < 600)
	(unit-type-count-total militiaman-line < 40)
	(food-amount g:> gl-required-food)
	(can-train militiaman-line)
=>
	(up-train 0 c: militiaman-line)
)

(defrule
	(research-completed ri-champion)
	(goal gl-strategy dm-cannoneers)
	(up-compare-const dm-cavalry-threat-likelihood == 0)
	(or	(up-compare-goal gl-enemy-cavalry-count < 2)
		(game-time < 120))
	(unit-type-count-total militiaman-line < 35)
	(food-amount g:> gl-required-food)
	(can-train militiaman-line)
=>
	(up-train 0 c: militiaman-line)
)

(defrule
	(or	(goal gl-dm-main-unit huskarl)
		(and	(or	(up-compare-goal gl-enemy-scorpion-count > 4)
				(up-compare-goal gl-enemy-archer-count > 10))
			(unit-type-count-total huskarl-set < 25)))
	(food-amount g:> gl-required-food)
	(can-train huskarl2)
=>
	(up-train 0 c: huskarl2)
	(up-train 0 c: elite-huskarl2)
)

(defrule
	(or	(research-completed ri-elite-battle-elephant)
		(goal gl-dm-main-unit battle-elephant))
	(food-amount g:> gl-required-food)
	(can-train battle-elephant)
=>
	(up-train 0 c: battle-elephant)
)

#load-if-not-defined CELTIC-CIV
(defrule
	(nand	(civ-selected byzantine)
		(or	(game-time >= 240)
			(unit-type-count-total knight-line >= 15)))
	(research-completed ri-paladin)
	(game-time < 600)
	(gold-amount > 3000)
	(food-amount g:> gl-required-food)
	(or	(unit-type-count-total knight-line < 30)
		(or	(unit-type-count-total trade-cart > 30)
			(up-compare-goal gl-gathered-relics > 6)))
	(can-train knight-line)
=>
	(up-train 0 c: knight-line)
)
#else
#load-if-not-defined PERSIAN-CIV
(defrule
	(research-completed ri-paladin)
	(gold-amount > 2000)
	(food-amount g:> gl-required-food)
	(or	(unit-type-count-total trade-cart > 30)
		(or	(up-compare-goal gl-gathered-relics > 6)
			(and	(game-time < 240)
				(unit-type-count-total knight-line < 15))))
	(can-train knight-line)
=>
	(up-train 0 c: knight-line)
)
#else
(defrule
	(research-completed ri-paladin)
	(food-amount g:> gl-required-food)
	(or	(and	(gold-amount > 1000)
			(or	(and	(food-amount < 700)
					(up-compare-goal gl-population < almost-full-pop))
				(and	(game-time < 240)
					(unit-type-count-total knight-line < 15))))
		(building-type-count castle < 3))
	(can-train knight-line)
=>
	(up-train 0 c: knight-line)
)
#end-if
#end-if

(defrule
	(or	(civ-selected saracen)
		(and	(civ-selected turkish)
			(game-time <= 240)))
	(starting-age >= imperial-age)
	(food-amount g:> gl-required-food)
	(or	(game-time <= 240)
		(and	(gold-amount > 1200)
			(unit-type-count-total hand-cannoneer > 35)))
	(unit-type-count-total camel-line < 40)
	(can-train camel-line)
=>
	(up-train 0 c: camel-line)
)

(defrule
	(or	(up-research-status c: ri-paladin <= research-pending)
		(game-time > 900))
	(food-amount g:> gl-required-food)
	(unit-type-count-total war-elephant-line < 10)
	(or	(up-compare-goal gl-enemy-cavalry-count > 5)
		(and	(players-building-type-count target-player stable > 1)
			(game-time < 360)))
	(or	(unit-type-count-total camel-line < 22)
		(civ-selected turkish))
	(unit-type-count-total camel-line < 38)
	(can-train camel-line)
=>
	(up-train 0 c: camel-line)
)

(defrule
	(or	(goal gl-dm-main-unit camel)
		(and	(or	(civ-selected turkish)
				(and	(up-compare-const dm-cavalry-threat-likelihood == 1)
					(or	(game-time > 120)
						(up-research-status c: ri-paladin <= research-pending))))
			(game-time < 240)))
	(food-amount g:> gl-required-food)
	(unit-type-count-total camel-line < 70)
	(can-train camel-line)
=>
	(up-train 0 c: camel-line)
)

(defrule
	(or	(goal gl-dm-main-unit paladin)
		(and	(goal gl-dm-main-unit my-unique-unit)
			(and	(research-completed ri-cavalier)
				(and	(research-completed ri-plate-barding)
					(and	(game-time < 180)
						(up-compare-const dm-cavalry-threat-likelihood == 0))))))
	(not	(civ-selected byzantine))
	(food-amount g:> gl-required-food)
	(can-train knight-line)
=>
	(up-train 0 c: knight-line)
)

(defrule
	(goal gl-dm-main-unit arbalest)
	(game-time < 180)
	(unit-type-count-total knight-line < 4)
	(food-amount g:> gl-required-food)
	(can-train knight-line)
=>
	(up-train 0 c: knight-line)
)

(defrule
	(goal gl-dm-main-unit my-unique-unit)
	(nand	(player-in-game any-ally)
		(civ-selected persian))
	(or	(and	(game-time < 180)
			(up-compare-const dm-cavalry-threat-likelihood == 1))
		(up-compare-goal gl-enemy-heavy-cavalry-count > 5))
	(unit-type-count-total camel-line < 22)
	(food-amount g:> gl-required-food)
	(can-train camel-line)
=>
	(up-train 0 c: camel-line)
)

(defrule
	(goal gl-dm-main-unit my-unique-unit)
	(food-amount g:> gl-required-food)
	(research-completed ri-champion)
	(or	(and	(up-compare-goal gl-enemy-eagle-count > 7)
			(up-compare-const dm-UU-type != anti-infantry-type))
		(or	(and	(up-compare-const dm-eagle-threat-likelihood == 1)
				(game-time < 210))
			(and	(game-time < 180)
				(up-compare-const dm-cavalry-threat-likelihood == 0))))
	(can-train militiaman-line)
=>
	(up-train 0 c: militiaman-line)
)

(defrule
	(food-amount g:> gl-required-food)
	(research-completed ri-halberdier)
	(or	(and	(game-time < 240)
			(up-compare-const dm-cavalry-threat-likelihood == 1))
		(and	(up-compare-goal gl-enemy-elephant-count > 2)
			(or	(unit-type-count-total spearman-line < 25)
				(up-compare-goal gl-enemy-elephant-count > 10))))
	(unit-type-count-total spearman-line < 60)
	(can-train spearman-line)
=>
	(up-train 0 c: spearman-line)
)

(defrule
	(goal gl-dm-allow-counter-halbs 1)
	(food-amount >= 50)
	(or	(food-amount g:> gl-required-food)
		(and	(up-compare-goal gl-enemy-heavy-cavalry-count > 20)
			(civilian-population > 75)))
	(or	(up-compare-goal gl-enemy-cavalry-count > 4)
		(and	(players-building-type-count target-player stable > 1)
			(game-time < 600)))
	(unit-type-count-total spearman-line < 30)
	(can-train spearman-line)
=>
	(up-train 0 c: spearman-line)
)

(defrule
	(goal gl-dm-allow-counter-halbs 1)
	(food-amount g:> gl-required-food)
	(or	(and	(or	(up-compare-goal gl-enemy-cavalry-count > 10)
				(up-compare-goal gl-enemy-cataphract-count > 10))
			(unit-type-count-total spearman-line < 65))
		(and	(goal gl-strategy dm-halb-scorpion)
			(up-compare-const dm-eagle-threat-likelihood == 0)))
	(can-train spearman-line)
=>
	(up-train 0 c: spearman-line)
)

(defrule
	(or	(goal gl-strategy dm-arbalests)
		(or	(and	(civ-selected incan)
				(unit-type-count-total slinger < 10))
			(and	(building-type-count castle < 2)
				(and	(civ-selected mayan)
					(or	(up-compare-goal gl-enemy-infantry-count > 1)
						(up-compare-const dm-infantry-threat-likelihood == 1))))))
	(unit-type-count-total archer-line < 70)
	(can-train archer-line)
=>
	(up-train 0 c: archer-line)
)

(defrule
	(food-amount g:> gl-required-food)
	(or	(goal gl-strategy dm-champ-cannoneer)
		(or	(goal gl-strategy dm-camel-cannoneer)
			(or	(goal gl-strategy dm-pala-cannoneer)
				(or	(goal gl-strategy dm-cannoneers)
					(and	(goal gl-strategy dm-UU-halb)
						(unit-type-count-total hand-cannoneer < 30))))))
	(unit-type-count-total hand-cannoneer < 70)
	(can-train hand-cannoneer)
=>
	(up-train 0 c: hand-cannoneer)
)

(defrule
	(food-amount g:> gl-required-food)
	(goal gl-strategy dm-halb-onager)
	(or	(up-compare-goal gl-enemy-infantry-count > 4)
		(or	(up-compare-goal gl-enemy-spearman-count > 9)
			(or	(up-compare-goal gl-enemy-huskarl-count > 4)
				(up-compare-goal gl-enemy-eagle-count > 4))))
	(unit-type-count-total hand-cannoneer < 30)
	(can-train hand-cannoneer)
=>
	(up-train 0 c: hand-cannoneer)
)

(defrule
	(food-amount g:> gl-required-food)
	(or	(and	(or	(players-civ focus-player incan)
				(players-civ focus-player gothic))
			(unit-type-count-total hand-cannoneer < 15))
		(or	(goal gl-dm-main-unit hand-cannoneer)
			(and	(game-time < 300)
				(up-compare-const dm-infantry-threat-likelihood == 1))))
	(unit-type-count-total hand-cannoneer < 80)
	(can-train hand-cannoneer)
=>
	(up-train 0 c: hand-cannoneer)
)

(defrule
	(goal gl-dm-allow-counter-halbs 1)
	(research-completed ri-pikeman)
	(or	(research-completed ri-halberdier)
		(and	(research-completed ri-blast-furnace)
			(up-research-status c: ri-hussar < research-pending)))
	(food-amount > 1500)
	(wood-amount > 2000)
	(gold-amount < 300)
	(unit-type-count-total spearman-line < 55)
	(can-train spearman-line)
=>
	(up-train 0 c: spearman-line)
)

(defrule
	(goal gl-dm-allow-counter-halbs 1)
	(food-amount > 600)
	(research-completed ri-halberdier)
	(unit-type-count-total spearman-line < 25)
	(up-compare-const dm-cavalry-threat-likelihood == 1)
	(up-compare-const dm-archer-threat-likelihood == 0)
	(up-compare-const dm-gunpowder-threat-likelihood == 0)
	(game-time < 300)
	(can-train spearman-line)
=>
	(up-train 0 c: spearman-line)
)

(defrule
	(food-amount < 8000)
	(or	(civilian-population < 60)
		(food-amount < 4500))
	(civilian-population < 80)
=>
	(up-jump-rule 4)
)

(defrule
	(research-completed ri-hussar)
	(research-completed ri-bloodlines)
	(food-amount g:> gl-required-food)
	(or	(up-pending-objects c: camel-line < 1)
		(game-time > 600))
	(civ-selected mongol)
	(nand	(gold-amount > 2000)
		(and	(game-time > 1200)
			(unit-type-count trade-cart > 30)))
	(unit-type-count-total scout-cavalry-line < 55)
	(can-train scout-cavalry-line)
=>
	(up-train 0 c: scout-cavalry-line)
)

(defrule
	(research-completed ri-hussar)
	(research-completed ri-bloodlines)
	(food-amount g:> gl-required-food)
	(or	(and	(food-amount > 1500)
			(wood-amount > 2000))
		(or	(civ-selected hun)
			(civ-selected mongol)))
	(gold-amount < 300)
	(unit-type-count-total scout-cavalry-line < 55)
	(can-train scout-cavalry-line)
=>
	(up-train 0 c: scout-cavalry-line)
)

(defrule
	(or	(research-completed ri-hussar)
		(research-completed ri-plate-barding))
	(research-completed ri-bloodlines)
	(food-amount g:> gl-required-food)
	(or	(up-compare-const dm-UU-type == archer-type)
		(up-compare-const dm-UU-type == gunpowder-type))
	(or	(gold-amount < 2000)
		(food-amount > 3500))
	(gold-amount < 2700)
	(unit-type-count-total scout-cavalry-line < 55)
	(can-train scout-cavalry-line)
=>
	(up-train 0 c: scout-cavalry-line)
)

(defrule
	(or	(and	(goal gl-strategy dm-UU)
			(and	(up-compare-goal gl-dm-main-unit != champion)
				(civ-selected mongol)))
		(and	(or	(civ-selected turkish)
				(civ-selected saracen))
			(game-time > 240)))
	(food-amount g:> gl-required-food)
	(unit-type-count-total scout-cavalry-line < 85)
	(can-train scout-cavalry-line)
=>
	(up-train 0 c: scout-cavalry-line)
)

(defrule
	(or	(and	(gold-amount > 500)
			(player-in-game any-ally))
		(up-compare-goal gl-trade-unit-count-total > 35))
=>
	(up-jump-rule 3)
)

(defrule
	(up-compare-goal gl-enemy-mameluke-count < 3)
	(up-compare-goal gl-enemy-gunpowder-count < 5)
	(or	(gold-amount > 500)
		(or	(unit-type-count huskarl-set > 20)
			(up-compare-goal gl-eagle-warrior-count > 30)))
	(or	(unit-type-count huskarl-set > 5)
		(up-compare-goal gl-eagle-warrior-count > 5))
=>
	(up-jump-rule 2)
)

(defrule
	(goal gl-dm-allow-counter-skirms 1)
	(food-amount g:> gl-required-food)
	(or	(and	(unit-type-count huskarl-set < 15)
			(up-compare-goal gl-enemy-archer-count > 4))
		(or	(up-compare-goal gl-enemy-mameluke-count > 2)
			(up-compare-goal gl-enemy-gunpowder-count > 4)))
	(up-compare-goal gl-skirmisher-count-total < 50)
	(can-train skirmisher-line)
=>
	(up-train 0 c: skirmisher-line)
)

(defrule
	(goal gl-dm-allow-counter-skirms 1)
	(food-amount g:> gl-required-food)
	(or	(and	(research-completed ri-elite-skirmisher)
			(and	(food-amount > 1700)
				(and	(wood-amount > 2000)
					(gold-amount < 300))))
		(or	(players-unit-type-count focus-player genoese-crossbowman > 8)
			(players-unit-type-count focus-player elephant-archer > 5)))
	(up-compare-goal gl-skirmisher-count-total < 65)
	(can-train skirmisher-line)
=>
	(up-train 0 c: skirmisher-line)
)

(defrule
	(civ-selected hun)
	(civilian-population > 70)
	(up-compare-goal gl-trade-unit-count-total > 20)
	(up-compare-goal gl-enemy-spearman-count < 25)
	(up-compare-goal gl-enemy-camelry-count < 16)
	(or	(and	(up-compare-goal gl-enemy-spearman-count < 15)
			(up-compare-goal gl-enemy-camelry-count < 9))
		(unit-type-count-total cavalry-archer-line > 25))
	(players-unit-type-count focus-player teutonic-knight-line < 6)
	(players-unit-type-count target-player teutonic-knight-line < 6)
=>
	(up-jump-rule 3)
)

(defrule
	(or	(civ-selected hun)
		(civ-selected magyar))
	(or	(gold-amount < 1000)
		(unit-type-count-total cavalry-archer-line > 70))
	(unit-type-count-total knight-line < 50)
	(or	(unit-type-count-total cavalry-archer-line > 60)
		(unit-type-count-total knight-line < 20))
	(or	(unit-type-count-total cavalry-archer-line > 33)
		(unit-type-count-total knight-line < 10))
	(unit-type-count-total cavalry-archer-line > 22)
=>
	(up-jump-rule 2)
)

(defrule
	(or	(civ-selected hun)
		(and	(civ-selected saracen)
			(gold-amount > 2500)))
	(research-completed ri-heavy-cavalry-archer)
	(research-completed ri-bracer)
	(or	(and	(up-compare-goal gl-enemy-spearman-count > 8)
			(food-amount < 1000))
		(civ-selected hun))
	(can-train cavalry-archer-line)
=>
	(up-train 0 c: cavalry-archer-line)
)

(defrule
	(civ-selected magyar)
	(research-completed ri-heavy-cavalry-archer)
	(research-completed ri-bracer)
	(can-train cavalry-archer-line)
=>
	(up-train 0 c: cavalry-archer-line)
)

(defrule
	(goal gl-dm-main-unit paladin)
	(research-completed ri-heavy-cavalry-archer)
	(research-completed ri-bracer)
	(research-completed ri-parthian-tactics)
	(not	(unit-available hand-cannoneer))
	(or	(and	(up-compare-goal gl-dm-allow-UU-training != 1)
			(players-civ focus-player gothic))
		(and	(civ-selected magyar)
			(game-time > 500)))
	(unit-type-count-total cavalry-archer-line < 65)
	(can-train cavalry-archer-line)
=>
	(up-train 0 c: cavalry-archer-line)
)

(defrule
	(civ-selected turkish)
	(food-amount g:> gl-required-food)
	(or	(players-unit-type-count focus-player huskarl-line > 3)
		(or	(up-compare-goal gl-enemy-infantry-count > 4)
			(players-unit-type-count focus-player teutonic-knight-line > 2)))
	(unit-type-count-total hand-cannoneer < 35)
	(can-train hand-cannoneer)
=>
	(up-train 0 c: hand-cannoneer)
)

(defrule
	(food-amount g:> gl-required-food)
	(or	(goal gl-dm-main-unit champion)
		(goal gl-dm-main-unit huskarl))
	(or	(up-compare-goal gl-enemy-infantry-count > 4)
		(players-unit-type-count focus-player teutonic-knight-line > 2))
	(or	(unit-type-count-total hand-cannoneer < 17)
		(game-time < 420))
	(unit-type-count-total hand-cannoneer < 30)
	(can-train hand-cannoneer)
=>
	(up-train 0 c: hand-cannoneer)
)

(defrule
	(or	(players-building-type-count target-player castle > 0)
		(players-building-type-count target-player bombard-tower > 0))
	(goal MILITARY 1)
	(unit-type-count-total battering-ram-line < 4)
	(unit-type-count-total trebuchet-set < 2)
=>
	(up-jump-rule 15)
)

(defrule
	(or	(goal gl-dm-main-unit battle-elephant)
		(or	(up-compare-goal gl-enemy-elephant-count > 8)
			(and	(civ-selected incan)
				(unit-type-count-total scorpion-line < 12))))
	(up-research-status c: ri-heavy-scorpion >= research-pending)
	(or	(unit-type-count-total scorpion-line < 14)
		(gold-amount > 275))
	(unit-type-count-total scorpion-line < 27)
	(can-train scorpion-line)
=>
	(up-train 0 c: scorpion-line)
)

(defrule
	(or	(goal gl-strategy dm-pala-scorpion)
		(and	(or	(goal gl-strategy dm-palas)
				(civ-selected persian))
			(or	(up-compare-goal gl-enemy-spearman-count > 7)
				(up-compare-goal gl-enemy-camelry-count > 7))))
	(up-research-status c: ri-heavy-scorpion >= research-pending)
	(or	(unit-type-count-total scorpion-line < 14)
		(gold-amount > 275))
	(unit-type-count-total scorpion-line < 27)
	(can-train scorpion-line)
=>
	(up-train 0 c: scorpion-line)
)

(defrule
	(civ-selected gothic)
	(or	(goal gl-strategy dm-champ-scorpion)
		(or	(goal gl-strategy dm-champ-cannoneer)
			(or	(up-compare-goal gl-enemy-gunpowder-count > 7)
				(gold-amount > 1000))))
	(up-research-status c: ri-heavy-scorpion != research-available)
	(or	(unit-type-count-total scorpion-line < 14)
		(gold-amount > 275))
	(unit-type-count-total scorpion-line < 25)
	(can-train scorpion-line)
=>
	(up-train 0 c: scorpion-line)
)

(defrule
	(civ-selected gothic)
	(or	(players-civ focus-player aztec)
		(or	(players-civ focus-player japanese)
			(or	(players-civ focus-player gothic)
				(players-civ focus-player viking))))
	(up-research-status c: ri-heavy-scorpion != research-available)
	(or	(unit-type-count-total scorpion-line < 14)
		(gold-amount > 275))
	(unit-type-count-total scorpion-line < 25)
	(can-train scorpion-line)
=>
	(up-train 0 c: scorpion-line)
)

(defrule
	(up-research-status c: ri-siege-onager <= research-pending)
	(research-completed ri-heavy-scorpion)
	(or	(players-unit-type-count focus-player teutonic-knight-line > 3)
		(or	(players-unit-type-count focus-player boyar > 3)
			(or	(players-unit-type-count focus-player kamayuk > 7)
				(or	(civ-selected chinese)
					(or	(civ-selected japanese)
						(civ-selected viking))))))
	(unit-type-count-total scorpion-line < 18)
	(can-train scorpion-line)
=>
	(up-train 0 c: scorpion-line)
)

(defrule
	(research-completed ri-siege-onager)
	(or	(and	(civ-selected aztec)
			(or	(up-compare-goal gl-enemy-archer-count > 5)
				(up-compare-goal gl-enemy-gunpowder-count > 5)))
		(and	(civ-selected celtic)
			(and	(players-civ focus-player celtic)
				(unit-type-count-total scorpion-line > 9))))
	(game-time < 600)
	(unit-type-count-total mangonel-line < 3)
	(can-train mangonel-line)
=>
	(up-train 0 c: mangonel-line)
)

(defrule
	(research-completed ri-siege-onager)
	(or	(soldier-count > 30)
		(civ-selected korean))
	(or	(up-compare-goal gl-enemy-infantry-count > 15)
		(or	(and	(up-compare-goal gl-enemy-spearman-count > 15)
				(civ-selected saracen))
			(or	(up-compare-goal gl-enemy-huskarl-count > 15)
				(civ-selected korean))))
	(unit-type-count-total mangonel-line < 4)
	(can-train mangonel-line)
=>
	(up-train 0 c: mangonel-line)
)

(defrule
	(research-completed ri-onager)
	(soldier-count > 30)
	(or	(and	(research-completed ri-siege-onager)
			(up-compare-goal gl-enemy-onager-count > 4))
		(or	(players-unit-type-count focus-player slinger > 8)
			(up-compare-goal gl-enemy-mameluke-count > 7)))
	(or	(unit-type-count-total mangonel-line < 7)
		(research-completed ri-siege-onager))
	(unit-type-count-total mangonel-line < 10)
	(can-train mangonel-line)
=>
	(up-train 0 c: mangonel-line)
)

(defrule
	(research-completed ri-onager)
	(or	(and	(soldier-count > 20)
			(and	(up-compare-goal gl-enemy-onager-count > 1)
				(and	(or	(research-completed ri-siege-onager)
						(up-compare-goal gl-enemy-onager-count > 1))
					(unit-type-count-total mangonel-line < 5))))
		(goal gl-strategy dm-halb-onager))
	(unit-type-count-total mangonel-line < 20)
	(can-train mangonel-line)
=>
	(up-train 0 c: mangonel-line)
)

(defrule
	(research-completed ri-onager)
	(soldier-count > 30)
	(or	(up-compare-goal gl-enemy-archery-count > 9)
		(or	(up-compare-goal gl-enemy-gunpowder-count > 9)
			(or	(up-compare-goal gl-enemy-scorpion-count > 5)
				(players-unit-type-count focus-player teutonic-knight-line > 7))))
	(or	(unit-type-count-total mangonel-line < 7)
		(research-completed ri-siege-onager))
	(unit-type-count-total mangonel-line < 10)
	(can-train mangonel-line)
=>
	(up-train 0 c: mangonel-line)
)

(defrule
	(gold-amount > 1000)
	(or	(up-compare-goal gl-enemy-onager-count > 1)
		(or	(up-compare-goal gl-enemy-scorpion-count > 5)
			(and	(up-compare-goal gl-enemy-archery-count > 9)
				(not	(research-completed ri-onager)))))
	(unit-type-count-total bombard-cannon < 7)
	(can-train bombard-cannon)
=>
	(up-train 0 c: bombard-cannon)
)

(defrule
	(or	(civ-selected celtic)
		(or	(and	(civ-selected chinese)
				(nand	(game-time < 1200)
					(unit-type-count-total scorpion-line > 15)))
			(or	(civ-selected slavic)
				(goal gl-dm-main-unit scorpion))))
	(can-train scorpion-line)
=>
	(up-train 0 c: scorpion-line)
)

(defrule
	(game-time > 600)
	(up-research-status c: ri-siege-engineers < research-pending)
	(or	(food-amount > 1000)
		(gold-amount < 2000))
=>
	(up-jump-rule 2)
)

(defrule
	(research-completed ri-heavy-scorpion)
	(game-time < 600)
	(civ-selected gothic)
	(players-civ focus-player gothic)
	(gold-amount > 1000)
	(unit-type-count-total scorpion-line < 15)
	(can-train scorpion-line)
=>
	(up-train 0 c: scorpion-line)
)

(defrule
	(up-research-status c: ri-siege-onager <= research-pending)
	(research-completed ri-heavy-scorpion)
	(or	(up-compare-goal gl-enemy-archer-count > 10)
		(or	(up-compare-goal gl-enemy-gunpowder-count > 10)
			(or	(up-compare-goal gl-enemy-mameluke-count > 7)
				(or	(up-compare-goal gl-enemy-infantry-count > 10)
					(food-amount < 1000)))))
	(unit-type-count-total scorpion-line < 30)
	(can-train scorpion-line)
=>
	(up-train 0 c: scorpion-line)
)

(defrule
	(gold-amount > 1500)
	(civ-selected aztec)
	(or	(and	(or	(players-civ focus-player gothic)
				(or	(players-civ focus-player chinese)
					(players-civ focus-player japanese)))
			(unit-type-count-total monk < 12))
		(or	(players-civ focus-player korean)
			(players-civ focus-player persian)))
	(unit-type-count-total monk-set < 25)
	(can-train monk)
=>
	(up-train 0 c: monk)
)

(defrule
	(gold-amount > 1500)
	(civ-selected aztec)
	(or	(players-civ focus-player slavic)
		(or	(players-civ focus-player indian)
			(or	(players-civ focus-player khmer)
				(or	(players-civ focus-player burmese)
					(players-civ focus-player vietnamese)))))
	(unit-type-count-total monk-set < 25)
	(can-train monk)
=>
	(up-train 0 c: monk)
)

(defrule
	(or	(and	(up-compare-goal gl-military-percentage < 70)
			(and	(up-compare-goal gl-enemy-cavalry-count < 5)
				(and	(up-compare-goal gl-enemy-eagle-count < 5)
					(up-compare-goal gl-enemy-huskarl-count < 5))))
		(soldier-count < 25))
	(up-compare-goal gl-enemy-archery-count > 10)
	(gold-amount < 100)
	(food-amount >= 85)
	(research-completed ri-elite-skirmisher)
	(up-compare-goal gl-skirmisher-count-total < 20)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(current-age == imperial-age)
	(current-age-time > 1200)
	(food-amount > 110)
	(or	(and	(food-amount > 1000)
			(gold-amount < 50))
		(and	(up-compare-goal gl-gold-income-per-minute < 300)
			(civilian-population > 100)))
	(up-compare-goal gl-trade-unit-count-total < 20)
	(unit-type-count-total scout-cavalry-line < late-game-scout-amount)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)

(defrule
	(current-age == imperial-age)
	(current-age-time > 1200)
	(gold-amount < 100)
	(food-amount > 1000)
	(up-compare-goal gl-trade-unit-count-total < 20)
	(unit-type-count-total scout-cavalry-line < upgraded-scout-amount)
	(research-completed ri-chain-barding)
	(research-completed ri-iron-casting)
	(nor	(research-available ri-light-cavalry)
		(research-available ri-hussar))
	(nor	(research-available ri-blast-furnace)
		(research-available ri-plate-barding))
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)

(defrule
	(civ-selected turkish)
=>
	(up-jump-rule 6)
)

(defrule
	(or	(up-compare-goal gl-strategy-class != basic-class)
		(and	(up-compare-goal gl-skirmisher-count-total > 35)
			(and	(food-amount > 129)
				(and	(unit-type-count-total scout-cavalry-line < 25)
					(and	(current-age-time > 1200)
						(up-compare-const late-game-scout-amount >= 25))))))
=>
	(up-jump-rule 5)
)

#load-if-not-defined UP-2-PLAYER-GAME
(defrule
	(up-compare-goal gl-gold-income-per-minute >= 300)
	(up-compare-goal gl-enemy-archery-count < 5)
	(up-compare-goal gl-enemy-gunpowder-count < 5)
	(or	(up-compare-goal gl-enemy-spearman-count < 10)
		(unit-type-count cavalry-class < 5))
=>
	(up-jump-rule 1)
)

(defrule
	(or	(and	(gold-amount < 50)
			(up-compare-goal gl-skirmisher-count-total < 30))
		(wood-amount > 500))
	(gold-amount < 100)
	(up-compare-goal gl-current-age >= gv-castle)
	(up-compare-goal gl-trade-unit-count-total < 7)
	(up-compare-goal gl-gold-income-per-minute < 300)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(food-amount > 500)
	(current-age-time > 1200)
	(up-compare-goal gl-skirmisher-count-total < 70)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(or	(and	(gold-amount < 50)
			(unit-type-count-total spearman-line < 30))
		(wood-amount > 500))
	(gold-amount < 100)
	(up-compare-goal gl-trade-unit-count-total < 7)
	(up-compare-goal gl-gold-income-per-minute < 300)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(food-amount > 500)
	(up-compare-goal gl-current-age >= gv-castle)
	(current-age-time > 1200)
	(unit-type-count-total spearman-line < 50)
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(false)
=>
	(do-nothing)
)

(defrule
	(false)
=>
	(do-nothing)
)
#else
(defrule
	(up-compare-goal gl-gold-income-per-minute >= 300)
	(up-compare-goal gl-enemy-archery-count < 5)
	(up-compare-goal gl-enemy-gunpowder-count < 5)
	(or	(up-compare-goal gl-enemy-spearman-count < 10)
		(unit-type-count cavalry-class < 5))
=>
	(up-jump-rule 2)
)

(defrule
	(or	(and	(gold-amount < 50)
			(up-compare-goal gl-skirmisher-count-total < 30))
		(and	(food-amount > 500)
			(wood-amount > 500)))
	(gold-amount < 100)
	(up-compare-goal gl-gold-income-per-minute < 300)
	(strategic-number sn-allow-resource-spending > 2)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(food-amount > 110)
	(current-age-time > 1200)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(or	(gold-amount < 50)
		(food-amount > 500))
	(food-amount > 110)
	(wood-amount > 500)
	(up-compare-goal gl-gold-income-per-minute < 300)
	(military-population < 70)
	(or	(cc-players-unit-type-count 0 tree > 20)
		(up-compare-const scout-unit == eagle-warrior-line))
	(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)
	(or	(wood-amount > 600)
		(up-compare-goal gl-skirmisher-count-total < 30))
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)

(defrule
	(or	(gold-amount < 50)
		(food-amount > 500))
	(food-amount > 85)
	(wood-amount > 500)
	(up-compare-goal gl-gold-income-per-minute < 300)
	(military-population < 60)
	(or	(cc-players-unit-type-count 0 tree > 20)
		(up-compare-const scout-unit == eagle-warrior-line))
	(strategic-number sn-minimum-water-body-size-for-dock == wood-exhaustion)
	(or	(wood-amount > 600)
		(unit-type-count-total spearman-line < 30))
	(can-train spearman-line)
=>
	(train spearman-line)
)

(defrule
	(food-amount > 500)
	(or	(gold-amount < 50)
		(and	(wood-amount > 500)
			(unit-type-count-total spearman-line < 30)))
	(gold-amount < 100)
	(up-compare-goal gl-gold-income-per-minute < 300)
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(nand	(unit-type-count-total scout-cavalry-line > 10)
		(up-compare-goal gl-enemy-cavalry-count < 5))
	(current-age-time > 1200)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if

(defrule
	(strategic-number sn-unit-queue-speed > 0)
=>
	(up-modify-sn sn-unit-queue-speed c:- 1)
	(up-jump-rule -104)
)

(defrule
	(or	(not	(player-valid any-ally))
		(or	(goal POSITION POCKET)
			(unit-type-count-total monk-set < 1)))
	(or	(unit-type-count-total monk-set < 1)
		(game-time < 600))
	(unit-type-count-total monk-set < 2)
	(can-train monk)
=>
	(up-train 0 c: monk)
	(set-strategic-number sn-monk-trained 1)
)

(defrule
	(or	(goal DOCK 1)
		(and	(goal MILITARY 1)
			(soldier-count > 15)))
	(or	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-landing-style)
		(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style))
	(or	(unit-type-count-total transport-ship < 3)
		(and	(soldier-count > 30)
			(unit-type-count-total transport-ship < 6)))
	(can-train transport-ship)
=>
	(train transport-ship)
)

(defrule
	(game-time > 300)
	(warboat-count > 18)
	(or	(players-military-population target-player < 20)
		(or	(game-time > 1500)
			(or	(players-building-type-count target-player castle > 0)
				(up-projectile-detected projectile-fortification < 150000))))
	(or	(warboat-count > 50)
		(unit-type-count-total cannon-galleon-line < 5))
	(unit-type-count-total cannon-galleon-line < 10)
	(can-train cannon-galleon-line)
=>
	(up-train 0 c: cannon-galleon-line)
)

(defrule
	(up-compare-goal gl-ship-timer <= 0)
	(research-completed ri-heavy-demolition-ship)
	(or	(and	(players-unit-type-count any-enemy fire-ship-line > 4)
			(unit-type-count-total demolition-ship-line < 1))
		(and	(players-unit-type-count any-enemy fire-ship-line > 7)
			(unit-type-count-total demolition-ship-line < 5)))
	(can-train demolition-ship)
=>
	(train demolition-ship)
)

(defrule
	(current-age < imperial-age)
	(nand	(population-cap < 200)
		(population > almost-full-pop))
	(up-compare-goal gl-ship-timer <= 0)
	(unit-type-count-total galley-line < 150)
	(can-train galley-line)
=>
	(up-train 0 c: galley-line)
)

(defrule
	(goal gl-dm-water-strategy dm-galleons)
	(or	(game-time < 600)
		(unit-type-count-total galley-line < 80))
	(nand	(population-cap < 200)
		(population > almost-full-pop))
	(up-compare-goal gl-ship-timer <= 0)
	(unit-type-count-total galley-line < 150)
	(can-train galley-line)
=>
	(up-train 0 c: galley-line)
)

(defrule
	(goal gl-dm-water-strategy dm-fire-galley)
	(or	(game-time < 600)
		(unit-type-count-total galley-line < 40))
	(nand	(population-cap < 200)
		(population > almost-full-pop))
	(up-compare-goal gl-ship-timer <= 0)
	(unit-type-count-total galley-line < 75)
	(can-train galley-line)
=>
	(up-train 0 c: galley-line)
)

(defrule
	(goal gl-dm-water-strategy dm-fire-galley)
	(or	(game-time < 600)
		(unit-type-count-total fire-ship-line < 40))
	(nand	(population-cap < 200)
		(population > almost-full-pop))
	(up-compare-goal gl-ship-timer <= 0)
	(unit-type-count-total fire-ship-line < 75)
	(can-train fire-ship-line)
=>
	(up-train 0 c: fire-ship-line)
)

(defrule
	(goal gl-dm-water-strategy dm-fireships)
	(or	(game-time < 600)
		(unit-type-count-total fire-ship-line < 80))
	(nand	(population-cap < 200)
		(population > almost-full-pop))
	(up-compare-goal gl-ship-timer <= 0)
	(unit-type-count-total fire-ship-line < 150)
	(can-train fire-ship-line)
=>
	(up-train 0 c: fire-ship-line)
)

(defrule
	(goal gl-dm-water-strategy dm-light-galleons)
	(or	(game-time < 600)
		(unit-type-count-total galley-line < 55))
	(nand	(population-cap < 200)
		(population > almost-full-pop))
	(up-compare-goal gl-ship-timer <= 0)
	(unit-type-count-total galley-line < 90)
	(can-train galley-line)
=>
	(up-train 0 c: galley-line)
)

(defrule
	(goal gl-dm-water-strategy dm-light-fire-galley)
	(or	(game-time < 600)
		(unit-type-count-total galley-line < 35))
	(nand	(population-cap < 200)
		(population > almost-full-pop))
	(up-compare-goal gl-ship-timer <= 0)
	(unit-type-count-total galley-line < 60)
	(can-train galley-line)
=>
	(up-train 0 c: galley-line)
)

(defrule
	(goal gl-dm-water-strategy dm-light-fire-galley)
	(or	(game-time < 600)
		(unit-type-count-total fire-ship-line < 20))
	(nand	(population-cap < 200)
		(population > almost-full-pop))
	(up-compare-goal gl-ship-timer <= 0)
	(unit-type-count-total fire-ship-line < 30)
	(can-train fire-ship-line)
=>
	(up-train 0 c: fire-ship-line)
)

(defrule
	(goal gl-dm-water-strategy dm-light-fireships)
	(or	(game-time < 600)
		(unit-type-count-total fire-ship-line < 40))
	(nand	(population-cap < 200)
		(population > almost-full-pop))
	(up-compare-goal gl-ship-timer <= 0)
	(unit-type-count-total fire-ship-line < 65)
	(can-train fire-ship-line)
=>
	(up-train 0 c: fire-ship-line)
)

(defrule
	(goal gl-dm-water-strategy dm-light-fireships)
	(nand	(population-cap < 200)
		(population > almost-full-pop))
	(up-compare-goal gl-ship-timer <= 0)
	(unit-type-count-total fire-ship-line > 9)
	(unit-type-count-total galley-line < 25)
	(can-train galley-line)
=>
	(up-train 0 c: galley-line)
)

(defrule
	(civ-selected spanish)
	(game-time > 120)
	(gold-amount > 3000)
	(warboat-count > 10)
	(or	(warboat-count > 20)
		(unit-type-count-total cannon-galleon-line < 3))
	(or	(warboat-count > 35)
		(unit-type-count-total cannon-galleon-line < 6))
	(or	(warboat-count > 50)
		(unit-type-count-total cannon-galleon-line < 8))
	(unit-type-count-total cannon-galleon-line < 15)
	(can-train cannon-galleon-line)
=>
	(up-train 0 c: cannon-galleon-line)
)

(defrule
	(civ-selected korean)
	(game-time > 120)
	(gold-amount > 3000)
	(up-compare-goal gl-ship-timer <= 0)
	(or	(warboat-count > 10)
		(unit-type-count-total turtle-ship-line < 3))
	(or	(warboat-count > 20)
		(unit-type-count-total turtle-ship-line < 6))
	(or	(warboat-count > 35)
		(unit-type-count-total turtle-ship-line < 8))
	(unit-type-count-total turtle-ship-line < 15)
	(can-train turtle-ship-line)
=>
	(up-train 0 c: turtle-ship-line)
)

(defrule
	(up-compare-goal MILITARY <= 0)
	(strategic-number sn-number-boat-attack-groups > 0)
=>
	(set-strategic-number sn-number-boat-attack-groups 0)
	(enable-timer 1 10)
)

(defrule
	(game-time > 360)
	(strategic-number sn-minimum-water-body-size-for-dock == mixed-map-style)
	(warboat-count > relative-10-units)
=>
	(set-strategic-number sn-dock-training-filter 2)
	(disable-self)
)

(defrule
	(or	(goal gl-heavy-water-map YES)
		(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))
=>
	(up-get-fact warboat-count 0 temporary-goal)
	(up-modify-goal temporary-goal c:+ 1)
	(up-modify-goal temporary-goal c:min 20)
)

(defrule
	(or	(goal gl-heavy-water-map YES)
		(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))
	(warboat-count > 0)
	(players-building-type-count every-enemy dock == 0)
	(strategic-number sn-total-number-explorers g:!= temporary-goal)
	(up-compare-goal threat-time >= 20000)
=>
	(up-modify-sn sn-total-number-explorers g:= temporary-goal)
	(up-modify-goal temporary-goal c:- 1)
	(up-modify-sn sn-number-boat-explore-groups g:= temporary-goal)
)

(defrule
	(or	(goal gl-heavy-water-map YES)
		(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))
	(players-unit-type-count every-enemy galley-line < 5)
	(players-unit-type-count every-enemy fire-ship-line < 5)
	(players-unit-type-count every-enemy longboat-line < 5)
	(players-unit-type-count every-enemy turtle-ship-line < 1)
	(players-unit-type-count every-enemy cannon-galleon-line < 2)
	(players-building-type-count any-enemy dock > 0)
	(strategic-number sn-number-boat-explore-groups > 1)
=>
	(set-strategic-number sn-total-number-explorers 2)
	(set-strategic-number sn-number-boat-explore-groups 1)
	(up-reset-scouts)
)

(defrule
	(or	(goal gl-heavy-water-map YES)
		(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))
	(up-compare-goal threat-time < 20000)
	(or	(up-projectile-target projectile-any == warship-class)
		(up-compare-goal threat-target == warship-class))
	(players-building-type-count every-enemy dock == 0)
	(strategic-number sn-number-boat-explore-groups > 1)
=>
	(set-strategic-number sn-total-number-explorers 2)
	(set-strategic-number sn-number-boat-explore-groups 1)
	(up-reset-scouts)
)

(defrule
	(or	(goal gl-heavy-water-map YES)
		(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))
	(up-compare-goal threat-time < 20000)
	(or	(up-projectile-target projectile-any == warship-class)
		(up-compare-goal threat-target == warship-class))
	(players-building-type-count any-enemy dock > 0)
	(strategic-number sn-number-boat-explore-groups > 0)
=>
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-number-boat-explore-groups 0)
	(up-reset-scouts)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
	(game-time > 1200)
	(players-building-count any-enemy > 0)
	(warboat-count > 18)
	(or	(up-compare-goal gl-target-navy-count < 10)
		(warboat-count > 31))
	(up-compare-goal gl-target-navy-count < 15)
=>
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-minimum-water-body-size-for-dock islands-map-landing-style)
	(set-goal DOCK 1)
	(chat-to-player my-player-number "Enable landing")
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == islands-map-water-style)
	(game-time > 500)
	(players-building-count any-enemy > 0)
	(or	(warboat-count > 20)
		(population >= almost-full-pop))
	(or	(players-building-type-count any-enemy wonder > 0)
		(enemy-captured-relics))
	(victory-condition standard)
=>
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-minimum-water-body-size-for-dock islands-map-landing-style)
	(set-goal DOCK 1)
	(chat-to-player my-player-number "Enable landing")
)

; ============== BUILDINGS - ECONOMY

(defrule
	(civilian-population >= imperial-villager-cap)
	(or	(and	(dropsite-min-distance gold > 4)
			(dropsite-min-distance gold < 255))
		(and	(dropsite-min-distance stone > 4)
			(dropsite-min-distance stone < 255)))
	(building-type-count-total mining-camp < 10)
	(up-pending-objects c: mining-camp < 1)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(build mining-camp)
)

(defrule
	(up-compare-goal gl-my-villager-count-total >= dm-villager-mining)
	(or	(building-type-count-total mining-camp < 4)
		(or	(dropsite-min-distance gold > 4)
			(and	(building-type-count-total mining-camp < 6)
				(up-compare-goal gl-my-villager-count-total > 70))))
	(building-type-count-total mining-camp < 14)
	(goal gl-fixed-eco-balancing NO)
	(dropsite-min-distance gold >= 0)
	(dropsite-min-distance gold < 255)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(build mining-camp)
)

(defrule
	(up-compare-goal gl-my-villager-count-total > 22)
	(game-time > 1500)
	(or	(building-type-count-total mining-camp < 7)
		(game-time > 1800))
	(or	(building-type-count-total mining-camp < 9)
		(game-time > 2400))
	(building-type-count-total mining-camp < 10)
	(goal gl-fixed-eco-balancing NO)
	(dropsite-min-distance gold >= 0)
	(dropsite-min-distance gold < 255)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(build mining-camp)
)

(defrule
	(timer-triggered 8)
	(game-time > 360)
	(or	(game-time > 480)
		(up-pending-objects c: town-center < 1))
	(up-compare-goal gl-my-villager-count-total > 5)
	(up-compare-goal gl-my-villager-count-total < 30)
	(resource-found wood)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(enable-timer 8 360)
	(build lumber-camp)
)

(defrule
	(timer-triggered 8)
	(game-time > 360)
	(or	(game-time > 480)
		(up-pending-objects c: town-center < 1))
	(up-compare-goal gl-my-villager-count-total > 30)
	(up-compare-goal gl-my-villager-count-total <= 70)
	(resource-found wood)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(enable-timer 8 220)
	(build lumber-camp)
)

(defrule
	(timer-triggered 8)
	(game-time > 360)
	(or	(game-time > 480)
		(up-pending-objects c: town-center < 1))
	(up-compare-goal gl-my-villager-count-total > 70)
	(resource-found wood)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(enable-timer 8 130)
	(build lumber-camp)
)

(defrule
	(timer-triggered 8)
	(game-time > 360)
	(or	(game-time > 480)
		(up-pending-objects c: town-center < 1))
	(up-compare-goal gl-my-villager-count-total > 110)
	(resource-found wood)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(enable-timer 8 110)
	(build lumber-camp)
)

(defrule
	(building-type-count town-center > 0)
	(game-time > 360)
	(civilian-population >= imperial-villager-cap)
	(or	(building-type-count-total mill < 2)
		(building-type-count-total farm > 8))
	(building-type-count-total mill < 3)
	(can-build mill)
=>
	(build mill)
)

(defrule
	(building-type-count town-center > 0)
	(game-time > 360)
	(or	(building-type-count-total mill < 4)
		(or	(building-type-count-total farm > 44)
			(and	(building-type-count-total mill < 5)
				(building-type-count-total farm > 27))))
	(building-type-count-total mill < 7)
	(building-type-count-total farm > 20)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 6)
	(up-modify-sn sn-mill-max-distance c:max 29)
	(build mill)
)

(defrule
	(game-time > 360)
	(goal gl-fixed-eco-balancing NO)
	(building-type-count-total farm g:< gl-max-farm-count)
	(nand	(food-amount > 8000)
		(wood-amount < 4000))
	(nand	(food-amount > 5000)
		(wood-amount < 2000))
=>
	(set-goal gl-farming 1)
)

(defrule
	(or	(building-type-count town-center == 0)
		(or	(and	(population < 100)
				(or	(game-time > 900)
					(population < 70)))
			(or	(and	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
					(unit-type-count-total trade-cart < 2))
				(goal gl-migration-notice 0))))
=>
	(up-jump-rule 2)
)

(defrule
	(up-compare-goal gl-disable-market-placing != YES)
	(or	(game-time > 780)
		(population > 167))
	(population > extra-market-pop)
	(building-type-count-total market < 1)
	(players-building-type-count any-ally market > 0)
	(building-type-count town-center > 2)
	(not	(up-pending-placement c: market))
=>
	(up-modify-escrow wood c:max 175)
)

(defrule
	(up-compare-goal gl-disable-market-placing != YES)
	(or	(game-time > 480)
		(population > 130))
	(building-type-count-total market < 4)
	(players-building-type-count any-ally market > 0)
	(can-build-with-escrow market)
=>
	(release-escrow wood)
	(set-strategic-number sn-placement-zone-size 50)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: -120)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-build place-control 0 c: market)
	(set-strategic-number sn-object-repair-level 20611)
	(up-jump-rule 1)
)

(defrule
	(nor	(up-pending-placement c: watch-tower)
		(up-pending-placement c: market))
	(or	(strategic-number sn-placement-fail-delta == -1)
		(and	(strategic-number sn-placement-to-center == 1)
			(nor	(up-pending-placement c: town-center)
				(up-pending-placement c: castle))))
=>
	(set-strategic-number sn-placement-to-center 0)
	(set-strategic-number sn-placement-fail-delta 0)
)

(defrule
	(strategic-number sn-object-repair-level < 20000)
=>
	(up-modify-sn sn-object-repair-level c:+ 16384)
)

(defrule
	(or	(unit-type-count dead-builder1 > 2)
		(or	(unit-type-count dead-builder2 > 2)
			(or	(and	(unit-type-count dead-builder1 > 0)
					(unit-type-count dead-builder2 > 1))
				(and	(unit-type-count dead-builder1 > 1)
					(unit-type-count dead-builder2 > 0)))))
	(strategic-number sn-object-repair-level >= 20000)
=>
	(up-modify-sn sn-object-repair-level c:- 16384)
)

#load-if-defined POPULATION-CAP-200
(defrule
	(game-time > 900)
	(up-compare-goal gv-wonder-race == 0)
	(up-compare-goal gl-my-villager-count > 80)
	(strategic-number sn-gold-gatherer-percentage > 19)
	(research-completed ri-heavy-plow)
	(up-pending-objects c: farm < 2)
	(wood-amount > 450)
	(or	(food-amount < 300)
		(wood-amount > 700))
	(or	(food-amount < 500)
		(wood-amount > 1100))
	(idle-farm-count < 15)
=>
	(set-goal gl-farming 1)
)
#end-if

(defrule
	(goal gl-farming 1)
	(building-type-count town-center > 0)
	(nand	(building-type-count-total farm > 19)
		(and	(building-type-count-total town-center < 2)
			(building-type-count-total mill < 2)))
	(can-build farm)
=>
	(build farm)
)

; ============== ECO BALANCING

(defrule
	(not	(timer-triggered 3))
=>
	(up-jump-rule 23)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
=>
	(up-get-fact food-amount 0 temporary-goal2)
	(up-get-fact wood-amount 0 temporary-goal3)
	(up-get-fact gold-amount 0 temporary-goal4)
	(up-modify-goal temporary-goal2 c:/ 100)
	(up-modify-goal temporary-goal3 c:/ 100)
	(up-modify-goal temporary-goal4 c:/ 100)
	(up-modify-goal temporary-goal g:= temporary-goal2)
	(up-modify-goal temporary-goal g:+ temporary-goal3)
	(up-modify-goal temporary-goal g:+ temporary-goal4)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
=>
	(up-modify-goal gl-food-gp-points g:= temporary-goal)
	(up-modify-goal gl-wood-gp-points g:= temporary-goal)
	(up-modify-goal gl-gold-gp-points g:= temporary-goal)
	(up-modify-goal gl-food-gp-points g:- temporary-goal2)
	(up-modify-goal gl-wood-gp-points g:- temporary-goal3)
	(up-modify-goal gl-gold-gp-points g:- temporary-goal4)
	(up-modify-goal gl-food-gp-points c:+ 15); Ensuring they don't ever end up 0 and balancing them a bit
	(up-modify-goal gl-wood-gp-points c:+ 15)
	(up-modify-goal gl-gold-gp-points c:+ 15)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(or	(gold-amount < 2000)
		(game-time < 300))
	(game-time < 600)
=>
	(up-modify-goal gl-gold-gp-points c:+ 30)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(food-amount < 2000)
	(or	(game-time < 600)
		(civilian-population < 100))
=>
	(up-modify-goal gl-food-gp-points c:+ 30)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(wood-amount < 1500)
	(game-time < 600)
=>
	(up-modify-goal gl-wood-gp-points c:+ 30)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(wood-amount < 600)
	(food-amount > 2000)
=>
	(up-modify-goal gl-wood-gp-points c:+ 22)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(or	(food-amount < 3500)
		(game-time < 800))
	(or	(civ-selected gothic)
		(or	(civ-selected slavic)
			(and	(goal gl-dm-main-unit battle-elephant)
				(or	(up-gaia-type-count c: gold > 9)
					(up-compare-goal gl-trade-unit-count-total > 30)))))
=>
	(up-modify-goal gl-food-gp-points c:+ 22)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(or	(and	(food-amount > 800)
			(wood-amount < 1500))
		(game-time < 1200))
	(wood-amount < 3000)
	(or	(civ-selected briton)
		(or	(civ-selected chinese)
			(or	(civ-selected korean)
				(civ-selected mongol))))
=>
	(up-modify-goal gl-wood-gp-points c:+ 13)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(civ-selected mayan)
	(up-compare-goal gl-enemy-cavalry-count < 1)
	(up-compare-goal gl-enemy-cataphract-count < 1)
	(up-gaia-type-count c: gold > 9)
=>
	(up-modify-goal gl-food-gp-points c:- 6)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(civ-selected gothic)
	(starting-age == post-imperial-age)
	(or	(strategic-number sn-wood-gatherer-percentage == 0)
		(and	(strategic-number sn-wood-gatherer-percentage == 94)
			(strategic-number sn-food-gatherer-percentage == 2)))
	(wood-amount > 3000)
	(gold-amount > 2000)
	(game-time < 780)
	(up-compare-goal gl-my-villager-count < 65)
=>
	(set-goal gl-food-gp-points 10)
	(set-goal gl-wood-gp-points 0)
	(set-goal gl-gold-gp-points 0)
	(up-jump-rule 1)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(civ-selected gothic)
	(starting-age == post-imperial-age)
	(or	(strategic-number sn-wood-gatherer-percentage == 0)
		(and	(strategic-number sn-wood-gatherer-percentage == 94)
			(strategic-number sn-food-gatherer-percentage == 2)))
	(wood-amount > 3000)
	(game-time < 780)
	(up-gaia-type-count c: gold > 5)
=>
	(set-goal gl-food-gp-points 10)
	(set-goal gl-wood-gp-points 0)
	(set-goal gl-gold-gp-points 3)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(civ-selected mayan)
	(up-compare-goal gl-enemy-cavalry-count < 5)
	(up-compare-goal gl-enemy-cataphract-count < 5)
	(game-time < 1200)
	(food-amount > 5000)
=>
	(set-goal gl-food-gp-points 0)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(or	(civ-selected saracen)
		(civ-selected spanish))
	(game-time < 1200)
	(wood-amount > 4000)
=>
	(set-goal gl-wood-gp-points 0)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(up-gaia-type-count c: gold < 10)
=>
	(up-modify-goal gl-gold-gp-points c:- 6)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(up-gaia-type-count c: gold < 7)
=>
	(up-modify-goal gl-gold-gp-points c:- 6)
)

(defrule
	(up-compare-goal gl-trade-unit-count-total > 25)
=>
	(up-modify-goal gl-gold-gp-points c:* 3)
	(up-modify-goal gl-gold-gp-points c:/ 5)
)

(defrule
	(up-compare-goal gl-trade-unit-count-total > 35)
=>
	(up-modify-goal gl-gold-gp-points c:* 3)
	(up-modify-goal gl-gold-gp-points c:/ 5)
)

(defrule
	(or	(civ-selected hun)
		(or	(civ-selected mayan)
			(goal gl-strategy dm-pala-scorpion)))
	(civilian-population < 55)
	(starting-age == post-imperial-age)
	(strategic-number sn-food-gatherer-percentage <= 2)
	(food-amount > 2000)
	(wood-amount > 2000)
	(game-time < 780)
	(up-gaia-type-count c: gold > 6)
=>
	(set-goal gl-food-gp-points 0)
	(set-goal gl-wood-gp-points 0)
	(set-goal gl-gold-gp-points 10)
)

(defrule
	(goal gl-strategy dm-halb-scorpion)
	(starting-age == post-imperial-age)
	(strategic-number sn-food-gatherer-percentage <= 2)
	(food-amount > 3500)
	(game-time < 780)
	(up-gaia-type-count c: gold > 6)
=>
	(set-goal gl-food-gp-points 0)
	(set-goal gl-wood-gp-points 10)
	(set-goal gl-gold-gp-points 3)
)

(defrule
	(civ-selected frankish)
	(starting-age == post-imperial-age)
	(or	(strategic-number sn-wood-gatherer-percentage == 0)
		(and	(strategic-number sn-wood-gatherer-percentage == 94)
			(strategic-number sn-food-gatherer-percentage == 2)))
	(wood-amount > 3500)
	(game-time < 780)
	(up-gaia-type-count c: gold > 6)
=>
	(set-goal gl-wood-gp-points 0)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(game-time < 1200)
	(gold-amount > 1000)
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
=>
	(up-modify-goal gl-wood-gp-points c:+ 35)
	(up-modify-goal gl-food-gp-points c:- 1)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(or	(and	(game-time > 1200)
			(wood-amount < 2000))
		(and	(game-time < 1200)
			(and	(gold-amount > 1000)
				(goal gl-heavy-water-map YES))))
	(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style)
=>
	(up-modify-goal gl-wood-gp-points c:+ 20)
)

(defrule
	(goal gl-fixed-eco-balancing NO)
	(food-amount > 7000)
	(game-time < 1200)
	(wood-amount < 6000)
	(or	(wood-amount < 4500)
		(food-amount > 10000))
	(gold-amount < 4500)
=>
	(set-goal gl-food-gp-points 0)
)

; ============== GARRISON VILLAGERS VS ENEMY SCOUT

(defrule
	(game-time > 210)
=>
	(up-jump-rule 5)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(up-reset-search 1 1 1 1)
	(up-add-object-by-id search-local g: gl-main-tc-id)
	(up-target-point 0 action-work -1 -1)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 20)
	(up-filter-include cmdid-military -1 -1 -1)
)

(defrule
	(stance-toward focus-player enemy)
	(up-find-remote c: -1 c: 1)
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-get-object-data object-data-target-id temporary-goal2)
	(up-jump-rule 1)
)

(defrule
	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2)
	
)

(defrule
	(up-set-target-object search-remote c: 0)
	(up-set-target-by-id g: temporary-goal2)
	(up-object-data object-data-class == villager-class)
	(up-object-data object-data-player == my-player-number)
	(up-object-data object-data-distance < 7)
=>
	(up-reset-search 1 1 1 1)
	(up-add-object-by-id search-local g: temporary-goal2)
	(up-add-object-by-id search-remote g: gl-main-tc-id)
	(up-target-objects 0 action-garrison -1 -1)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)

; ============== RAIDING

#load-if-defined POST-IMPERIAL-AGE-START
(defrule
	(or	(game-time >= 300); 260
		(or	(not	(up-point-contains gl-enemy-position-x c: town-center))
			(not	(up-set-target-by-id g: gl-saved-id-goal))))
=>
	(up-jump-rule 29)
;	(chat-to-all "jump")
)

(defrule
	(or	(goal gl-dm-main-unit paladin)
		(unit-available eagle-warrior-line))
	(soldier-count > 9)
	(up-compare-goal threat-time < 10000)
	(up-compare-goal gl-raider4-id > 0)
=>
	(set-goal gl-group-leaderid -1)
	(set-goal gl-vice-group-leaderid -1)
	(disable-self)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 30)
)

(defrule
	(stance-toward focus-player enemy)
	(up-find-remote c: -1 c: 1)
=>
	(up-jump-rule 2)
)

(defrule
	(player-valid focus-player)
	(up-compare-goal gl-enemy-units-in-town > 0)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-reset-search 0 0 1 1)
	(up-jump-rule -2)
)

(defrule
	(not	(player-valid focus-player))
	(goal TSA 0)
=>
	(set-goal gl-enemy-units-in-town 0)
)

(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-get-fact unit-type-count scout-unit temporary-goal3)
	(up-modify-goal temporary-goal3 c:min 1)
	(set-goal temporary-goal4 3)
	(up-modify-goal temporary-goal4 g:+ temporary-goal3)
	(up-modify-goal temporary-goal5 g:= temporary-goal4)
	(up-modify-goal temporary-goal5 c:- 2)
	(set-goal temporary-goal 1)
	(set-goal temporary-goal2 1)
	(up-set-target-point gl-enemy-position-x)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 27)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: -1 c: 1)
)

(defrule
	(true)
=>
	(up-modify-goal temporary-goal6 g:= temporary-goal4)
	(up-modify-goal temporary-goal6 c:- 1)
)

(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-filter-include -1 -1 -1 -1)
	(up-filter-distance c: -1 c: 1)
	(up-find-remote c: villager-class c: 1)
	(up-filter-distance c: -1 c: 3)
	(up-find-remote c: villager-class c: 1)
	(up-filter-distance c: -1 c: 6)
	(up-find-remote c: villager-class c: 1)
	(up-filter-distance c: -1 c: 9)
	(up-find-remote c: villager-class c: 1)
	(up-filter-distance c: -1 c: 2)
	(up-get-search-state gl-local-total)
)

(defrule
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:!= gl-group-leaderid)
	(up-object-data object-data-id g:!= gl-vice-group-leaderid)
	(up-object-data object-data-id g:!= gl-raider3-id)
	(up-object-data object-data-id g:!= gl-raider4-id)
	(or	(up-object-data object-data-target != villager-class)
		(up-object-data object-data-action != actionid-attack))
	(up-set-target-object search-remote c: 0)
	(up-object-data object-data-class == villager-class)
=>
	(up-target-objects 1 action-default -1 stand-ground)
;	(chat-to-all "Eat villager")
	(enable-timer 35 5)
	(up-jump-rule 3)
)

(defrule
	(up-set-target-object search-local c: 0)
	(or	(up-object-data object-data-target != villager-class)
		(up-object-data object-data-action != actionid-attack))
	(up-set-target-object search-remote c: 0)
	(up-object-data object-data-class == villager-class)
=>
	(up-target-objects 1 action-default -1 stand-ground)
;	(chat-to-all "Eat villager2")
	(set-goal temporary-goal2 0)
	(enable-timer 35 5)
	(up-jump-rule 2)
)

(defrule
	(up-find-remote c: town-center c: 1)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:!= gl-group-leaderid)
	(up-object-data object-data-id g:!= gl-vice-group-leaderid)
	(up-object-data object-data-id g:!= gl-raider3-id)
	(up-object-data object-data-id g:!= gl-raider4-id)
	(up-timer-status 15 != timer-running)
	(up-object-data object-data-target != villager-class)
	(up-object-data object-data-action != actionid-attack)
	(up-set-target-object search-remote c: 0)
=>
	(up-target-objects 1 action-default -1 aggressive)
;	(chat-to-all "Eat TC")
	(up-jump-rule 1)
)

(defrule
	(up-find-remote c: town-center c: 1)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-target != villager-class)
	(up-object-data object-data-action != actionid-attack)
	(up-set-target-object search-remote c: 0)
=>
	(up-target-objects 1 action-default -1 aggressive)
;	(chat-to-all "Eat TC2")
	(set-goal temporary-goal2 0)
)

(defrule
	(up-compare-goal temporary-goal < 5)
	(up-set-target-object search-local c: 0)
=>
	(up-set-target-point gl-enemy-position-x)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 27)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: -1 g: temporary-goal)
	(up-modify-goal temporary-goal c:+ 1)
	(up-reset-search 0 1 0 0)
	(up-find-local c: -1 c: 1)
	(up-jump-rule -6)
)

(defrule
	(game-time < 200); 150
	(soldier-count g:> temporary-goal6)
	(unit-type-count dm-raid-unit2 g:> temporary-goal5)
	(goal gl-group-leaderid -1)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 20)
	(up-find-local c: eagle-warrior-line c: 1)
	(up-reset-search 0 1 0 0)
	(up-find-local c: dm-raid-unit c: 2)
	(set-goal temporary-goal 1000)
	(up-jump-rule 1)
)

(defrule
	(game-time > 60)
	(game-time < 200); 150
	(soldier-count > 4)
	(unit-type-count dm-raid-unit2 g:> temporary-goal4)
	(up-set-target-by-id g: gl-vice-group-leaderid)
	(up-object-data object-data-action != -1)
	(goal gl-raider3-id -1)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-set-target-by-id g: gl-saved-id-goal)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-position-self-x)
	(up-filter-exclude -1 actionid-attack orderid-move -1)
	(up-filter-distance c: -1 c: 15)
	(set-goal temporary-goal 2000)
	(up-find-local c: dm-raid-unit c: 1)
)

(defrule
	(goal temporary-goal 2000)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:!= gl-group-leaderid)
	(up-object-data object-data-id g:!= gl-vice-group-leaderid)
=>
	(up-get-object-data object-data-id gl-raider3-id)
)

(defrule
	(goal temporary-goal 2000)
=>
	(up-copy-point gl-saved-point-x gl-point-x)
	(up-cross-tiles gl-point-x gl-position-self-x c: 10)
	(up-lerp-tiles gl-point-x gl-position-self-x c: -7)
	(up-set-target-point gl-point-x)
	(up-target-point 0 action-move -1 no-attack)
	(up-cross-tiles gl-saved-point-x gl-position-self-x c: -10)
	(up-lerp-tiles gl-point-x gl-position-self-x c: -7)
	(up-reset-search 0 1 0 0)
	(up-set-target-point gl-position-self-x)
	(up-find-local c: dm-raid-unit c: 1)
	(up-set-target-point gl-saved-point-x)
	(up-target-point 0 action-move -1 no-attack)
)

(defrule
	(goal temporary-goal 2000)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-id g:!= gl-group-leaderid)
	(up-object-data object-data-id g:!= gl-vice-group-leaderid)
=>
	(up-get-object-data object-data-id gl-raider4-id)
)

(defrule
	(goal temporary-goal 1000)
	(up-set-target-object search-local c: 1)
=>
	(up-get-object-data object-data-id gl-group-leaderid)
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-id gl-vice-group-leaderid)
)

(defrule
	(up-set-target-by-id g: gl-saved-id-goal)
=>
	(up-get-point position-object gl-point2-x)
	(up-copy-point gl-saved-point-x gl-point2-x)
	(up-cross-tiles gl-point2-x gl-position-self-x c: 10)
	(up-lerp-tiles gl-point2-x gl-position-self-x c: -7)
	(up-cross-tiles gl-saved-point-x gl-position-self-x c: -10)
	(up-lerp-tiles gl-point2-x gl-position-self-x c: -7)
	(up-set-target-by-id g: gl-raider3-id)
	(up-get-point position-object gl-temporary-point-x)
	(up-set-target-by-id g: gl-raider4-id)
	(up-get-point position-object gl-object-point-x)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 0)
	(up-filter-include cmdid-military -1 -1 -1)
	(set-goal temporary-goal3 0)
)

(defrule
	(or	(and	(goal TSA 1)
			(and	(strategic-number sn-maximum-town-size < 44)
				(up-compare-goal gl-target-player-distance >= 44)))
		(or	(strategic-number sn-unit-spreading2 == 2)
			(strategic-number sn-unit-spreading2 == 5)))
=>
	(set-goal temporary-goal3 1)
)

(defrule
	(goal temporary-goal2 1)
	(game-time < 240)
	(or	(goal gl-enemy-units-in-town 0)
		(soldier-count >= 8))
	(strategic-number sn-stance-reset-notice == 1)
=>
	(set-strategic-number sn-stance-reset-notice 0)
	(set-goal temporary-goal3 1)
	(up-jump-rule 1)
)

(defrule
	(or	(goal temporary-goal2 0)
		(or	(and	(up-compare-goal gl-enemy-units-in-town > 0)
				(and	(soldier-count < 8)
					(or	(soldier-count < 5)
						(up-compare-goal gl-raider3-id != -1))))
			(or	(and	(up-timer-status 15 == timer-running); first rule pass of TSA -> send units again
					(goal temporary-goal3 0))
				(game-time >= 240))))
=>
	(up-jump-rule 6)
)

(defrule
	(up-set-target-by-id g: gl-group-leaderid)
	(or	(up-object-data object-data-action != actionid-attack)
		(and	(goal temporary-goal3 1)
			(up-object-data object-data-target != villager-class)))
=>
	(up-reset-search 1 1 1 1)
	(up-set-target-by-id g: gl-group-leaderid)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-find-local c: dm-raid-unit c: 1)
	(up-set-target-by-id g: gl-saved-id-goal)
	(up-target-objects 1 action-move -1 no-attack)
)

(defrule
	(up-set-target-by-id g: gl-vice-group-leaderid)
	(or	(up-object-data object-data-action != actionid-attack)
		(and	(goal temporary-goal3 1)
			(up-object-data object-data-target != villager-class)))
=>
	(up-reset-search 1 1 1 1)
	(up-set-target-by-id g: gl-vice-group-leaderid)
	(up-get-point position-object gl-point-x)
	(up-set-target-point gl-point-x)
	(up-find-local c: dm-raid-unit c: 1)
	(up-set-target-by-id g: gl-saved-id-goal)
	(up-target-objects 1 action-move -1 no-attack)
)

(defrule
	(up-set-target-by-id g: gl-raider3-id)
	(or	(up-object-data object-data-action != actionid-attack)
		(and	(goal temporary-goal3 1)
			(up-object-data object-data-target != villager-class)))
	(up-point-distance gl-temporary-point-x gl-point2-x > 4)
=>
	(up-reset-search 1 1 1 1)
	(up-set-target-point gl-temporary-point-x)
	(up-find-local c: dm-raid-unit c: 1)
	(up-set-target-point gl-point2-x)
	(up-target-point 0 action-move -1 no-attack)
)

(defrule
	(up-set-target-by-id g: gl-raider3-id)
	(or	(up-object-data object-data-action != actionid-attack)
		(and	(goal temporary-goal3 1)
			(up-object-data object-data-target != villager-class)))
	(up-point-distance gl-temporary-point-x gl-point2-x <= 4)
=>
	(up-reset-search 1 1 1 1)
	(up-set-target-point gl-temporary-point-x)
	(up-find-local c: dm-raid-unit c: 1)
	(up-set-target-point gl-point2-x)
	(up-target-point 0 action-move -1 aggressive)
)

(defrule
	(up-set-target-by-id g: gl-raider4-id)
	(or	(up-object-data object-data-action != actionid-attack)
		(and	(goal temporary-goal3 1)
			(up-object-data object-data-target != villager-class)))
	(up-point-distance gl-object-point-x gl-saved-point-x > 4)
=>
	(up-reset-search 1 1 1 1)
	(up-set-target-point gl-object-point-x)
	(up-find-local c: dm-raid-unit c: 1)
	(up-set-target-point gl-saved-point-x)
	(up-target-point 0 action-move -1 no-attack)
)

(defrule
	(up-set-target-by-id g: gl-raider4-id)
	(or	(up-object-data object-data-action != actionid-attack)
		(and	(goal temporary-goal3 1)
			(up-object-data object-data-target != villager-class)))
	(up-point-distance gl-object-point-x gl-saved-point-x <= 4)
=>
	(up-reset-search 1 1 1 1)
	(up-set-target-point gl-object-point-x)
	(up-find-local c: dm-raid-unit c: 1)
	(up-set-target-point gl-saved-point-x)
	(up-target-point 0 action-move -1 aggressive)
)
#end-if

; ============== THREAT LEVEL

(defrule
	(game-time < 150)
	(civ-selected hun)
	(starting-age == post-imperial-age)
	(not	(players-civ focus-player hun))
	(strategic-number sn-minimum-water-body-size-for-dock == land-map-style)
=>
	(set-strategic-number sn-threat-level -4)
	(up-jump-rule 5)
)

(defrule
	(true)
=>
	(set-strategic-number sn-threat-level dm-early-threat-level)
	(disable-self)
)

(defrule
	(game-time < 30)
	(or	(goal gl-heavy-water-map YES)
		(strategic-number sn-minimum-water-body-size-for-dock >= islands-map-landing-style))
=>
	(set-strategic-number sn-threat-level -2)
	(disable-self)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(unit-type-count battering-ram-line < 6)
	(unit-type-count trebuchet-set < 3)
	(population < almost-full-pop)
	(or	(unit-type-count-total knight-line < 38)
		(strategic-number sn-enemy-castle-count > 3))
	(or	(strategic-number sn-enemy-castle-count > 1)
		(players-building-type-count target-player bombard-tower > 0))
	(or	(up-projectile-detected projectile-castle < 500000)
		(up-projectile-detected projectile-bombard-tower < 500000))
	(game-time < 420)
=>
	(set-strategic-number sn-threat-level 1)
	(disable-self)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock <= mixed-map-style)
	(or	(unit-type-count battering-ram-line > 5)
		(unit-type-count trebuchet-set > 2))
	(game-time < 420)
=>
	(set-strategic-number sn-threat-level dm-early-threat-level)
	(disable-self)
)

(defrule
	(or	(not	(goal MILITARY 1))
		(strategic-number sn-threat-level > 0))
	(game-time > 420)
=>
	(set-strategic-number sn-threat-level dm-default-threat-level)
	(disable-self)
)

(defrule
	(player-valid any-ally)
	(game-time > 420)
	(strategic-number sn-threat-level > dm-default-threat-level)
=>
	(set-strategic-number sn-threat-level dm-default-threat-level)
)

(defrule
	(up-compare-goal gl-current-age >= gv-feudal-up)
	(game-time > 600)
=>
	(up-get-point position-center gl-point-x)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-filter-exclude -1 -1 orderid-explore -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-point-x action-stop -1 aggressive)
	(disable-self)
)



