;The purpose of this AI is to write an extremely thoroughly documented AI for
;training purposes.
;
;Author:       BearTheGreat
;Last Updated: Feb. 7, 2007
;
;The first thing to note is that anything following a semi-colon will not be
;read by the computer when it is reading the AI.  Anything following the
;semi-colon is a comment for the benefit of any human reading the file.  The
;semi-colon does not have to be the first character on the line, either.  It
;be placed anywhere on the line to provide a comment.  You'll see what I mean 
;further on in the file.

;All the rules in the file follow what is known as the "If this, then that."
;form of programming.  These are the basic components of a rule.
;
;(defrule             Start defining the rule.
;   (condition 1) }
;   (condition 2) }   This is the "If" part of the rule.  If all these
;   (condition 3) }   conditions are true ...
;   ...
;   =>                Then
;   (action 1)    }
;   (action 2)    }   Do these things.
;   (action 3)    }
;   ...
;)                    End of the rule.
;
;As with any programming language, the number of closing parenthesis must match
;the number of opening parenthesis.  The game comes equipped with a fairly good
;script debugger.  If you try something that has errors in it, it will let you
;know.  The error messages are very descriptive, but sometimes the problem may
;lie on a different line number than reported.  You'll quickly get the hang of
;this with practice.

;Now there are a lot of strategic numbers that could be introduced, but let's 
;just take the defaults for now till we need something different.

;Important Lesson Number 1:  Put all age advancement rules at the top of the
;file.  Otherwise you'll just keep merrily training villagers and never
;advance to the next age.

(defrule
   (can-research feudal-age)
   =>
   (research feudal-age)
)

(defrule
   (can-research castle-age)
   =>
   (research castle-age)
)

(defrule
   (can-research imperial-age)
   =>
   (research imperial-age)
)

;The game has started.  Opening move.  What do you need to do if you're not a
;Hun?  Build a house.  We'll use the #load-if-not-defined rules to keep from
;loading the rule if we are Huns.  Rather than explain its syntax I'll just
;show you an example.

#load-if-not-defined HUN-CIV ;Start reading these lines if you're not a Hun

(defrule
   (housing-headroom < 4)
   (population-headroom > 3)
   (can-build house)
   =>
   (build house)
)

#end-if                      ;O.K.  Time for the Huns to pay attention again.

;Great.  Now that works.  The next thing you will want to do is train
;villagers.  The AI cannot use more than 100, so there is no use in training
;more than 100.

(defrule
   (unit-type-count-total villager < 100)
   (can-train villager)
   =>
   (train villager)
)

;The default strategic numbers are not working for us.  Let's force no civilian
;explorers after the berries are found.  We still want our scout to explore.

(defrule
   (true)
   =>
   (set-strategic-number sn-percent-civilian-explorers 100)
   (set-strategic-number sn-minimum-civilian-explorers 100)
   (set-strategic-number sn-cap-civilian-explorers 100)
   (set-strategic-number sn-total-number-explorers 101)
   (set-strategic-number sn-number-explore-groups 101)
   (set-strategic-number sn-minimum-explore-group-size 1)
   (set-strategic-number sn-maximum-explore-group-size 1)
   (set-strategic-number sn-initial-exploration-required 0)
   (disable-self)
)

(defrule
   (resource-found food)
   =>
   (set-strategic-number sn-percent-civilian-explorers 0)
   (set-strategic-number sn-minimum-civilian-explorers 0)
   (set-strategic-number sn-cap-civilian-explorers 0)
   (set-strategic-number sn-total-number-explorers 1)
   (set-strategic-number sn-number-explore-groups 1)
   (disable-self)
)

;The (disable-self) means the rule will only run one time.

;So far so good.  We need 2 Dark Age buildings and 500 food to advance to the
;Feudal Age.  There are absolutely refinements that can be made to the
;following rule, but for now let's keep it simple.  Let's say we want 60% of
;our villagers on food and 40% on wood.

(defrule
   (current-age == dark-age)
   =>
   (set-strategic-number sn-food-gatherer-percentage 60)
   (set-strategic-number sn-wood-gatherer-percentage 40)
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

;Now let's build a mill.

(defrule
   (or(building-type-count-total house > 0) ;Start first house before mill.
      (civ-selected hun))                   ;Unless you're a Hun.
   (building-type-count-total mill < 1)
   (resource-found food)
   (can-build mill)
   =>
   (build mill)
)

;Now we'll try to also build a lumber camp.  The default strategic numbers do
;not always work well for the initial camp placement, so hang with me here.
;I copied the following from Elite Raider and it hardly ever fails on a
;standard map.

;START of first lumber camp placement rules.

(defrule
   (true)
   =>
   (set-strategic-number sn-camp-max-distance 8)
   (disable-self)
)

;The theory is that the amount of time it takes for your scout to see trees is
;related to how far away they are from your camp.

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 4)
   =>
   (set-strategic-number sn-camp-max-distance 11)
   (chat-local-to-self "Camp distance 11.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 7)
   =>
   (set-strategic-number sn-camp-max-distance 13)
   (chat-local-to-self "Camp distance 13.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 12)
   =>
   (set-strategic-number sn-camp-max-distance 15)
   (chat-local-to-self "Camp distance 15.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 16)
   =>
   (set-strategic-number sn-camp-max-distance 17)
   (chat-local-to-self "Camp distance 17.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 25)
   =>
   (set-strategic-number sn-camp-max-distance 20)
   (chat-local-to-self "Camp distance 20.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time > 25)
   =>
   (set-strategic-number sn-camp-max-distance 22)
   (chat-local-to-self "Camp distance 22.")
   (disable-self)
)

;I added the next two rules as acts of desperation.  They rarely fire on a
;standard map.

(defrule
   (current-age == dark-age)
   (wood-amount > 200)
   (population > 19)
   (building-type-count-total lumber-camp == 0)
   =>
   (set-strategic-number sn-camp-max-distance 35)
   (chat-to-allies "Wood further away than 22 tiles!")
   (chat-local-to-self "Camp distance 35.")
   (disable-self)
)

(defrule
   (current-age == dark-age)
   (wood-amount > 200)
   (population > 21)
   (building-type-count-total lumber-camp == 0)
   =>
   (set-strategic-number sn-camp-max-distance 45)
   (chat-to-allies "Wood further away than 35 tiles!")
   (chat-local-to-self "Camp distance 45.")
   (disable-self)
)

;END of first lumber camp placement rules

;Now that we've hopefully found the trees at a reasonable distance
;from the town center, let's build that lumber camp.

(defrule
   (current-age == dark-age)
   (building-type-count-total mill > 0)
   (resource-found wood)
   (building-type-count-total lumber-camp < 1)
   (can-build lumber-camp)
   =>
   (build lumber-camp)
)

;With our villagers set at 60% food/40% wood, we will almost certainly hit a
;time when we will be waiting on food to train another villager, so we may as
;well research loom at that time.

(defrule
   (food-amount < 50)
   (can-research ri-loom)
   =>
   (research ri-loom)
   (chat-local-to-self "Researching loom.")
)

;Once we've got a mill and a lumber camp it is time to start building farms.

(defrule
   (current-age == dark-age)
   (building-type-count-total mill > 0)
   (building-type-count-total lumber-camp > 0)
   (or(building-type-count-total farm < 15)
      (idle-farm-count == 0))
   (can-build farm)
   =>
   (build farm)
)

;This will get you to the Feudal Age in about 14 to 16 minutes with a strong
;economy.  Yes, there are many areas for improvements, but this is the first
;lesson.