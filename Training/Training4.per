;The purpose of this AI is to write an extremely thoroughly documented AI for
;training purposes.
;
;Author:       BearTheGreat
;Last Updated: Feb. 11, 2007
;
;PREREQUISITES:  Be comfortable with the concepts in the preceding AIs.  They 
;will not necessarily be repeated in this AI, but any new changes will be noted
;with "New in Training4".
;
;******************************************************************************
;
; Defconst Rules
;
;******************************************************************************
;
;There are two large advantages to defining constants.  One is that it makes
;the script easier to read.  The other is that it makes the script easier to
;modify.  Let's settle in on some conventions.  All goal numbers will be 
;preceded by "g-", all goal values will be preceded by "gv-".  All regular
;constants will not be preceded by either.

;Need to set a limit on the number of Dark Age Villagers.  Otherwise it may 
;take too long to get out of the Dark Age!

(defconst max-num-dark-villagers 30) 

;It is useful to know your age status for many reasons.

(defconst g-age-status 1) ;Goal 1
(defconst gv-dark-age 0)
(defconst gv-advancing-to-feudal 1)
(defconst gv-feudal-age 2)
(defconst gv-advancing-to-castle 3)
(defconst gv-castle-age 4)
(defconst gv-advancing-to-imperial 5)
(defconst gv-imperial-age 6)

(defconst g-tsa 2) ;Goal 2 New in Training4.
(defconst t-gather-idle-soldiers 1)  ;Timer 1 New in Training4
(defconst tv-gather-idle-soldiers 15) ;New in Training4

;The following will also prove valuable for a number of future goals

(defconst gv-off 0)
(defconst gv-on 1)
(defconst gv-no 0)
(defconst gv-yes 1)

(defrule
   (true)
   =>
   (set-goal g-age-status gv-dark-age)
   (set-goal g-tsa gv-off)
   (enable-timer t-gather-idle-soldiers tv-gather-idle-soldiers)
   (disable-self)
)

;******************************************************************************
;
; Starting Strategic Numbers
;
;******************************************************************************

(defrule
   (true)
   =>
   (set-strategic-number sn-camp-max-distance 8)
   (set-strategic-number sn-initial-exploration-required 0)
   (set-strategic-number sn-food-dropsite-distance -1)
   (set-strategic-number sn-wood-dropsite-distance -1)
   (set-strategic-number sn-stone-dropsite-distance 100)
   (set-strategic-number sn-gold-dropsite-distance 35)
   (set-strategic-number sn-maximum-food-drop-distance 15)
   (set-strategic-number sn-maximum-wood-drop-distance 15)
   (set-strategic-number sn-maximum-stone-drop-distance 25)
   (set-strategic-number sn-maximum-gold-drop-distance 25)
   (set-strategic-number sn-maximum-hunt-drop-distance 15)
   (set-strategic-number sn-maximum-fish-boat-drop-distance 15)
   (set-strategic-number sn-mill-max-distance 15)
;New in Training4 - Allow more than the two builder default.
   (set-strategic-number sn-cap-civilian-builders 100)
   (disable-self)
)

(defrule
   (true)
   =>
   (set-strategic-number sn-gold-defend-priority 1)
   (set-strategic-number sn-stone-defend-priority 0)
   (set-strategic-number sn-forage-defend-priority 0)
   (set-strategic-number sn-relic-defend-priority 0)
   (set-strategic-number sn-town-defend-priority 0)
;New in Training4 - Spreading your troops all over town is not necessarily
;desirable.  It is better to have them grouped so they can respond as a unit.
   (set-strategic-number sn-task-ungrouped-soldiers 0)
;New in Training4 - The following strategic number is very useful in stopping
;a TSA.
   (set-strategic-number sn-gather-idle-soldiers-at-center 0)
;New in Training4 - Let's get ready for that town-size attack!
   (set-strategic-number sn-minimum-town-size 1)
   (set-strategic-number sn-maximum-town-size 16)
   (set-strategic-number sn-enemy-sighted-response-distance 2)
   (disable-self)
)

;******************************************************************************
;
; Market Rules
;
;******************************************************************************

;******************************************************************************
;
; Economy Rules
;
;******************************************************************************

;New in Training4 - The 60%Food/40%Wood split is O.K., but it does 
;occassionally allow the town center to sit idle for a while.  Therefore, what
;most scripters do is try to get the first 8 to 10 villagers on food and the 
;next 8 to 10 villagers on wood.  The remainder of the Dark Age villagers
;will go on food.  Note that this method does not penalize the Chinese or the
;Aztecs.  We still allow for the Teuton and Celtic bonuses as well by 
;using the #load-if-defined rules to define different gatherer percentages for
;their civilizations.

(defrule
   (goal g-age-status gv-dark-age)
   =>
   (set-strategic-number sn-food-gatherer-percentage 100)
   (set-strategic-number sn-wood-gatherer-percentage 0)
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 9)
   =>
   (set-strategic-number sn-food-gatherer-percentage 84);8
   (set-strategic-number sn-wood-gatherer-percentage 16)
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 11)
   =>
   (set-strategic-number sn-food-gatherer-percentage 69);8
   (set-strategic-number sn-wood-gatherer-percentage 31)
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 13)
   =>
   (set-strategic-number sn-food-gatherer-percentage 59);8
   (set-strategic-number sn-wood-gatherer-percentage 41)
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

#load-if-not-defined CELTIC-CIV
#load-if-not-defined TEUTONIC-CIV

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 15)
   =>
   (set-strategic-number sn-food-gatherer-percentage 52);8
   (set-strategic-number sn-wood-gatherer-percentage 48);7 to 8
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 17)
   =>
   (set-strategic-number sn-food-gatherer-percentage 46);8
   (set-strategic-number sn-wood-gatherer-percentage 54);9 to 10
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 19)
   =>
   (set-strategic-number sn-food-gatherer-percentage 49)
   (set-strategic-number sn-wood-gatherer-percentage 51);10
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 21)
   =>
   (set-strategic-number sn-food-gatherer-percentage 53)
   (set-strategic-number sn-wood-gatherer-percentage 47);10
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 23)
   =>
   (set-strategic-number sn-food-gatherer-percentage 57)
   (set-strategic-number sn-wood-gatherer-percentage 43);10
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 25)
   =>
   (set-strategic-number sn-food-gatherer-percentage 61)
   (set-strategic-number sn-wood-gatherer-percentage 39);10
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 27)
   =>
   (set-strategic-number sn-food-gatherer-percentage 64)
   (set-strategic-number sn-wood-gatherer-percentage 36);10
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 30)
   =>
   (set-strategic-number sn-food-gatherer-percentage 68)
   (set-strategic-number sn-wood-gatherer-percentage 32);10
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

#end-if
#end-if

#load-if-defined CELTIC-CIV

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 15)
   =>
   (set-strategic-number sn-food-gatherer-percentage 52);8
   (set-strategic-number sn-wood-gatherer-percentage 48);7 to 8
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 17)
   =>
   (set-strategic-number sn-food-gatherer-percentage 54);9 to 10
   (set-strategic-number sn-wood-gatherer-percentage 46);8
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 19)
   =>
   (set-strategic-number sn-food-gatherer-percentage 59)
   (set-strategic-number sn-wood-gatherer-percentage 41);8
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 21)
   =>
   (set-strategic-number sn-food-gatherer-percentage 63)
   (set-strategic-number sn-wood-gatherer-percentage 37);8
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 23)
   =>
   (set-strategic-number sn-food-gatherer-percentage 66)
   (set-strategic-number sn-wood-gatherer-percentage 34);8
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 25)
   =>
   (set-strategic-number sn-food-gatherer-percentage 68)
   (set-strategic-number sn-wood-gatherer-percentage 32);8
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 27)
   =>
   (set-strategic-number sn-food-gatherer-percentage 72)
   (set-strategic-number sn-wood-gatherer-percentage 28);8
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 30)
   =>
   (set-strategic-number sn-food-gatherer-percentage 74)
   (set-strategic-number sn-wood-gatherer-percentage 26);8
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

#end-if

#load-if-defined TEUTONIC-CIV

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 15)
   =>
   (set-strategic-number sn-food-gatherer-percentage 55);8 to 9
   (set-strategic-number sn-wood-gatherer-percentage 45);7
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 17)
   =>
   (set-strategic-number sn-food-gatherer-percentage 60);10 to 11
   (set-strategic-number sn-wood-gatherer-percentage 40);7
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 19)
   =>
   (set-strategic-number sn-food-gatherer-percentage 64)
   (set-strategic-number sn-wood-gatherer-percentage 36);7
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 21)
   =>
   (set-strategic-number sn-food-gatherer-percentage 67)
   (set-strategic-number sn-wood-gatherer-percentage 33);7
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 23)
   =>
   (set-strategic-number sn-food-gatherer-percentage 70)
   (set-strategic-number sn-wood-gatherer-percentage 30);7
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 25)
   =>
   (set-strategic-number sn-food-gatherer-percentage 72)
   (set-strategic-number sn-wood-gatherer-percentage 28);7
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 27)
   =>
   (set-strategic-number sn-food-gatherer-percentage 75)
   (set-strategic-number sn-wood-gatherer-percentage 25);7
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-dark-age)
   (unit-type-count villager >= 30)
   =>
   (set-strategic-number sn-food-gatherer-percentage 78)
   (set-strategic-number sn-wood-gatherer-percentage 22);7
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

#end-if

;While advancing to Feudal Age, wood for buildings is suddenly very
;important.  Switch more villagers to wood.  A very useful fact for setting 
;gatherer percentages is that the last valid rule in the file is the one
;that will be implemented.  The AI can read through several valid rules.
;It will only implement the last valid rule.

(defrule
   (goal g-age-status gv-advancing-to-feudal)
   =>
   (set-strategic-number sn-food-gatherer-percentage 40)
   (set-strategic-number sn-wood-gatherer-percentage 50)
   (set-strategic-number sn-gold-gatherer-percentage 10)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-advancing-to-feudal)  
   (building-type-count-total barracks > 1)
   =>
   (set-strategic-number sn-food-gatherer-percentage 55)
   (set-strategic-number sn-wood-gatherer-percentage 35)
   (set-strategic-number sn-gold-gatherer-percentage 10)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-feudal-age)  
   =>
   (set-strategic-number sn-food-gatherer-percentage 55)
   (set-strategic-number sn-wood-gatherer-percentage 35)
   (set-strategic-number sn-gold-gatherer-percentage 10)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-feudal-age)
   (building-type-count-total barracks < 2)
   =>
   (set-strategic-number sn-food-gatherer-percentage 40)
   (set-strategic-number sn-wood-gatherer-percentage 50)
   (set-strategic-number sn-gold-gatherer-percentage 10)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (goal g-age-status gv-feudal-age)  
   (building-type-count-total blacksmith > 0)
   (or(building-type-count-total archery-range > 0)
      (building-type-count-total market > 0))
   =>
   (set-strategic-number sn-food-gatherer-percentage 55)
   (set-strategic-number sn-wood-gatherer-percentage 30)
   (set-strategic-number sn-gold-gatherer-percentage 10)
   (set-strategic-number sn-stone-gatherer-percentage 5)
)

(defrule
   (goal g-age-status gv-feudal-age)  
   (building-type-count-total blacksmith > 0)
   (or(building-type-count-total archery-range > 0)
      (building-type-count-total market > 0))
   (wood-amount > 200)
   =>
   (set-strategic-number sn-food-gatherer-percentage 60)
   (set-strategic-number sn-wood-gatherer-percentage 20)
   (set-strategic-number sn-gold-gatherer-percentage 15)
   (set-strategic-number sn-stone-gatherer-percentage 5)
)

(defrule
   (goal g-age-status gv-feudal-age)  
   (building-type-count-total blacksmith > 0)
   (or(building-type-count-total archery-range > 0)
      (building-type-count-total market > 0))
   (wood-amount > 200)
   (gold-amount > 200)
   =>
   (set-strategic-number sn-food-gatherer-percentage 65)
   (set-strategic-number sn-wood-gatherer-percentage 20)
   (set-strategic-number sn-gold-gatherer-percentage 10)
   (set-strategic-number sn-stone-gatherer-percentage 5)
)

;******************************************************************************
;
; Research Rules
;
;******************************************************************************

(defrule
   (goal g-age-status gv-advancing-to-feudal)
   (research-available feudal-age)
   =>
   (chat-to-allies "Age research misfire!")
   (set-goal g-age-status gv-dark-age)
)

(defrule
   (can-research feudal-age)
   =>
   (research feudal-age)
   (set-goal g-age-status gv-advancing-to-feudal)
   (chat-to-allies "Researching Feudal Age")
)

(defrule
   (current-age == feudal-age)
   =>
   (set-goal g-age-status gv-feudal-age)
   (disable-self)
)

(defrule
   (goal g-age-status gv-advancing-to-castle)
   (research-available castle-age)
   =>
   (chat-to-allies "Age research misfire!")
   (set-goal g-age-status gv-feudal-age)
)

(defrule
   (can-research castle-age)
   =>
   (research castle-age)
   (set-goal g-age-status gv-advancing-to-castle)
   (chat-to-allies "Researching Castle Age")
)

(defrule
   (current-age == castle-age)
   =>
   (set-goal g-age-status gv-castle-age)
   (disable-self)
)

(defrule
   (goal g-age-status gv-advancing-to-imperial)
   (research-available imperial-age)
   =>
   (chat-to-allies "Age research misfire!")
   (set-goal g-age-status gv-castle-age)
)

(defrule
   (can-research imperial-age)
   =>
   (research imperial-age)
   (set-goal g-age-status gv-advancing-to-imperial)
   (chat-to-allies "Researching Imperial Age")
)

(defrule
   (current-age == imperial-age)
   =>
   (set-goal g-age-status gv-imperial-age)
   (disable-self)
)

;New in Training4 - Postpone loom till the Feudal Age unless you're Chinese.

#load-if-defined CHINESE-CIV

(defrule
   (can-research ri-loom)
   =>
   (research ri-loom)
   (chat-to-allies "Researching loom.")
)

#else

(defrule
   (research-completed ri-wheel-barrow)
   (can-research ri-loom)
   =>
   (research ri-loom)
   (chat-to-allies "Researching loom.")
)

#end-if

;***************************** Feudal Age Research ****************************

(defrule
   (can-research ri-wheel-barrow)
   =>
   (research ri-wheel-barrow)
   (chat-to-allies "Researching wheel barrow.")
)

(defrule
   (can-research ri-man-at-arms)
   =>
   (research ri-man-at-arms)
   (chat-to-allies "Researching man at arms.")
)

(defrule
   (not(research-available ri-wheel-barrow))
   (not(research-available ri-man-at-arms))
   (can-research ri-double-bit-axe)
   =>
   (research ri-double-bit-axe)
   (chat-to-allies "Researching double bit axe.")
)

(defrule
   (not(research-available ri-double-bit-axe))
   (can-research ri-gold-mining)
   =>
   (research ri-gold-mining)
   (chat-to-allies "Researching gold mining.")
)

(defrule
   (not(research-available ri-gold-mining))
   (can-research ri-horse-collar)
   =>
   (research ri-horse-collar)
   (chat-to-allies "Researching horse collar.")
)

(defrule
   (not(research-available ri-man-at-arms))
   (can-research ri-scale-mail)
   =>
   (research ri-scale-mail)
   (chat-to-allies "Researching scale mail armor.")
)

(defrule
   (research-completed ri-scale-mail)
   (can-research ri-forging)
   =>
   (research ri-forging)
   (chat-to-allies "Researching forging.")
)

;The following rule will greatly aid in the TC being able
;to defend itself.

(defrule
   (town-under-attack)
   (can-research ri-fletching)
   =>
   (research ri-fletching)
   (chat-to-allies "Researching fletching.")
)

(defrule
   (or(current-age > feudal-age)
       (goal g-age-status gv-advancing-to-castle))
   (can-research ri-stone-mining)
   =>
   (research ri-stone-mining)
   (chat-to-allies "Researching stone mining.")
)
;******************************************************************************
;
; Escrow Rules
;
;******************************************************************************

;******************************************************************************
;
; Build Rules
;
;******************************************************************************

#load-if-not-defined HUN-CIV

(defrule
   (housing-headroom < 4)
   (population-headroom > 3)
   (can-build house)
   =>
   (build house)
)

(defrule
   (or(current-age > dark-age)
      (and(goal g-age-status gv-advancing-to-feudal)
          (building-type-count-total barracks > 1)))
   (housing-headroom < 10)
   (population-headroom > 3)
   (can-build house)
   =>
   (build house)
)

#end-if

;Not all maps have forage bushes.  To be able to progress with this situation,
;stop doing your initial exploring after you've built a mill.

(defrule
   (game-time < 600)
   (sheep-and-forage-too-far)
   (not(resource-found food)) ;Haven't found the berries yet.
   (building-type-count-total mill == 0)
   =>
   (set-strategic-number sn-percent-civilian-explorers 100)
   (set-strategic-number sn-minimum-civilian-explorers 100)
   (set-strategic-number sn-cap-civilian-explorers 100)
   (set-strategic-number sn-total-number-explorers 101)
   (set-strategic-number sn-number-explore-groups 101)
   (set-strategic-number sn-minimum-explore-group-size 1)
   (set-strategic-number sn-maximum-explore-group-size 1)
)

(defrule
   (or(not(sheep-and-forage-too-far))
   (or(resource-found food)
      (building-type-count-total mill > 0)))
   (strategic-number sn-percent-civilian-explorers != 0)
   =>
   (set-strategic-number sn-percent-civilian-explorers 0)
   (set-strategic-number sn-minimum-civilian-explorers 0)
   (set-strategic-number sn-cap-civilian-explorers 0)
   (set-strategic-number sn-total-number-explorers 1)
   (set-strategic-number sn-number-explore-groups 1)
)

(defrule
   (or(building-type-count-total house > 0)
      (civ-selected hun))
   (building-type-count-total mill < 1)
   (or(resource-found food)
      (and(cc-players-unit-type-count 0 59 == 0) ;The map has no berries.
          (not(sheep-and-forage-too-far))))      ;You've found your first sheep.
   (can-build mill)
   =>
   (build mill)
)

;New in Training4 - Build Feudal Age hunting mills if you find hunting

(defrule
   (building-type-count-total blacksmith > 0)
   =>
   (set-strategic-number sn-mill-max-distance 35)
   (set-strategic-number sn-maximum-hunt-drop-distance 25)
   (disable-self)
)

(defrule
   (building-type-count-total blacksmith > 0)
   (or(unit-type-count 122 > 0)  ;Hunters
      (unit-type-count 216 > 0))
   (building-type-count-total mill < 3)
   (can-build mill)
   =>
   (build mill)
)

;New in Training4 - Build an extra mill if you have 20 or more farms.

(defrule
   (current-age == feudal-age)
   (building-type-count-total blacksmith > 0)
   (building-type-count farm > 19)
   (building-type-count-total mill < 2)
   (can-build mill)
   =>
   (build mill)
)

;Now we'll try to also build a lumber camp.  The default strategic numbers do
;not always work well for the initial camp placement, so hang with me here.
;I copied the following from Elite Raider and it hardly ever fails on a
;standard map.

;START of first lumber camp placement rules.

;The theory is that the amount of time it takes for your scout to see trees is
;related to how far away they are from your camp.

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 4)
   =>
   (set-strategic-number sn-camp-max-distance 11)
   (chat-local-to-self "Camp distance 11.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 7)
   =>
   (set-strategic-number sn-camp-max-distance 13)
   (chat-local-to-self "Camp distance 13.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 12)
   =>
   (set-strategic-number sn-camp-max-distance 15)
   (chat-local-to-self "Camp distance 15.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 16)
   =>
   (set-strategic-number sn-camp-max-distance 17)
   (chat-local-to-self "Camp distance 17.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 25)
   =>
   (set-strategic-number sn-camp-max-distance 20)
   (chat-local-to-self "Camp distance 20.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time > 25)
   =>
   (set-strategic-number sn-camp-max-distance 22)
   (chat-local-to-self "Camp distance 22.")
   (disable-self)
)

;I added the next two rules as acts of desperation.  They rarely fire on a
;standard map.

(defrule
   (current-age == dark-age)
   (wood-amount > 200)
   (population > 19)
   (building-type-count-total lumber-camp == 0)
   =>
   (set-strategic-number sn-camp-max-distance 35)
   (chat-to-allies "Wood further away than 22 tiles!")
   (chat-local-to-self "Camp distance 35.")
   (disable-self)
)

(defrule
   (current-age == dark-age)
   (wood-amount > 200)
   (population > 21)
   (building-type-count-total lumber-camp == 0)
   =>
   (set-strategic-number sn-camp-max-distance 45)
   (chat-to-allies "Wood further away than 35 tiles!")
   (chat-local-to-self "Camp distance 45.")
   (disable-self)
)

;END of first lumber camp placement rules

;Now that we've hopefully found the trees at a reasonable distance
;from the town center, let's build that lumber camp.

(defrule
   (current-age == dark-age)
   (building-type-count-total mill > 0)
   (resource-found wood)
   (building-type-count-total lumber-camp < 1)
   (can-build lumber-camp)
   =>
   (build lumber-camp)
)

(defrule
   (building-type-count-total lumber-camp > 0)
   (strategic-number sn-camp-max-distance < 35)
   =>
   (set-strategic-number sn-camp-max-distance 35)
   (chat-local-to-self "Camp distance 35.")
   (disable-self)
)

;One of the saddest things that can happen to an AI is for
;its first lumber camp to be poorly placed.  Be prepared to detect this
;situation and correct it.  The next 3 rules address this situation.

(defrule
   (current-age <= feudal-age)
   (building-type-count lumber-camp == 1)
   (dropsite-min-distance wood > 5)
   =>
   (chat-to-allies "Bad lumber camp.")
   (set-strategic-number sn-camp-max-distance 45)
   (chat-local-to-self "Camp distance 45.")
   (set-strategic-number sn-maximum-wood-drop-distance -1)
   (disable-self)
)

(defrule
   (building-type-count-total lumber-camp == 2)
   =>
   (set-strategic-number sn-maximum-wood-drop-distance 15)
   (disable-self)
)

(defrule
   (or(current-age >= feudal-age)
      (strategic-number sn-camp-max-distance == 45))
   (dropsite-min-distance wood > 5)
   (can-build lumber-camp)
   =>
   (build lumber-camp)
)

(defrule
   (current-age == feudal-age)
   (building-type-count-total blacksmith > 0)
   (or(building-type-count-total archery-range > 0)
      (building-type-count-total market > 0))
   (building-type-count-total lumber-camp < 2)
   (can-build lumber-camp)
   =>
   (build lumber-camp)
)

(defrule
   (or(current-age > dark-age)
      (goal g-age-status gv-advancing-to-feudal))
   (building-type-count-total barracks > 0) ;New in Training4
   (or(unit-type-count 579 > 0)   ;Male gold miner
      (unit-type-count 581 > 0))  ;Female gold miner 
   (resource-found gold)
   (building-type-count mining-camp < 4)
   (cc-players-unit-type-count 0 66 > 0) 
   (dropsite-min-distance gold > 5)
;The following line will not allow you to build mining camps
;on your island if all the remaining gold is on somebody else's island.
   (dropsite-min-distance gold < 255)
   (can-build mining-camp)
   =>
   (build mining-camp)
)

(defrule
   (current-age >= feudal-age)
   (building-type-count-total blacksmith > 0)
   (or(building-type-count-total archery-range > 0)
      (building-type-count-total market > 0))
   (resource-found stone)
   (building-type-count mining-camp < 4)
   (dropsite-min-distance stone > 5)
   (building-type-count-total mining-camp < 2)
   (can-build mining-camp)
   =>
   (build mining-camp)
)

(defrule
   (building-type-count-total mining-camp > 0)
   (dropsite-min-distance gold <= 5)
   =>
   (set-strategic-number sn-gold-dropsite-distance -1)
   (set-strategic-number sn-stone-dropsite-distance -1)
   (disable-self)
)

;New in Training4 - Invert build order on first barracks and first mining camp.
;Now build the barracks first.

(defrule
   (or(current-age > dark-age)
      (goal g-age-status gv-advancing-to-feudal))
;   (building-type-count-total mining-camp > 0)
   (building-type-count-total barracks < 2)
   (can-build barracks)
   =>
   (build barracks)
   (set-strategic-number sn-maximum-town-size 2) ;New in Training4
)

;****************************** Feudal Buildings ******************************

(defrule
   (current-age >= feudal-age)
   (building-type-count-total barracks > 1)
   (building-type-count-total blacksmith < 1)
   (can-build blacksmith)
   =>
   (build blacksmith)
   (set-strategic-number sn-maximum-town-size 2) ;New in Training4
)

;New in Training4 - Build a market after the archery range even if you have 
;gold miners.

(defrule
   (current-age >= feudal-age)
   (building-type-count-total blacksmith > 0)
   (or(and(unit-type-count 579 == 0)  ;Male gold miner
          (unit-type-count 581 == 0)) ;Female gold miner
      (building-type-count-total archery-range > 0))
   (building-type-count-total market < 1)
   (can-build market)
   =>
   (build market)
   (set-strategic-number sn-maximum-town-size 2) ;New in Training4
)

;New in Training4 - Build an archery range once you have a market.

(defrule
   (current-age >= feudal-age)
   (building-type-count-total blacksmith > 0)
   (or(and(unit-type-count 579 > 0)   ;Male gold miner
          (unit-type-count 581 > 0))  ;Female gold miner 
      (building-type-count-total market > 0))
   (building-type-count-total archery-range < 1)
   (can-build archery-range)
   =>
   (build archery-range)
   (set-strategic-number sn-maximum-town-size 2) ;New in Training4
)

(defrule
   (current-age == feudal-age)
   (building-type-count-total blacksmith > 0)
   (or(unit-type-count 579 > 0)   ;Male gold miner
      (unit-type-count 581 > 0))  ;Female gold miner 
   (can-build watch-tower)
   =>
   (build watch-tower)
)

;******************************* Farm Building ********************************

(defrule
   (goal g-age-status gv-dark-age)
   (building-type-count-total mill > 0)
   (building-type-count-total lumber-camp > 0)
;If (dropsite-min-distance wood > 5) then the first lumber
;camp was placed poorly.  Save the wood for a new lumber camp.
   (dropsite-min-distance wood < 6)
   (or(building-type-count-total farm < 15)
      (idle-farm-count == 0))
   (can-build farm)
   =>
   (build farm)
)

(defrule
   (or(current-age > dark-age)
      (goal g-age-status gv-advancing-to-feudal))
   (idle-farm-count == 0)
   (can-build farm)
   =>
   (build farm)
)

;******************************************************************************
;
; Military Superiority Rules - New in Training4
;
;******************************************************************************
;
; This can also be done with a goal, but I prefer using an obsolete 
; strategic number instead because it allows for comparisons.  For example,
; if my military superiority is greater than some value do this, if it is less
; than that value do that.  You can do the same thing with goals by nesting
; a bunch of "or" statements.  I just find it much easier to do with an 
; obsolete strategic number.

;  Redefine strategic number 215 - Degree of military superiority.
;
;        -2 = There is an enemy that has at least 20 more military than I do.
;        -1 = There is an enemy that has at least 10 more military than I do.
;         0 = Every enemy is within 10 of my military.
;         1 = I have over 195 military or 10 more than every enemy.
;         2 = I have over 200 military or 20 more than every enemy.

(defrule  ;Initialize
   (true)
   =>
   (set-strategic-number 215 0)
)

(defrule
   (or(military-population > 195)
      (or(and(military-population > 190)
             (players-military-population every-enemy < 180))
          (or(and(military-population > 180)
                 (players-military-population every-enemy < 170))
             (and(military-population > 170)
                 (players-military-population every-enemy < 160)))))
   =>
   (set-strategic-number 215 1)
)

(defrule
   (or(and(military-population > 160)
          (players-military-population every-enemy < 150))
      (or(and(military-population > 150)
             (players-military-population every-enemy < 140))
          (or(and(military-population > 140)
                 (players-military-population every-enemy < 130))
             (and(military-population > 130)
                 (players-military-population every-enemy < 120)))))
   =>
   (set-strategic-number 215 1)
)

(defrule
   (or(and(military-population > 120)
          (players-military-population every-enemy < 110))
      (or(and(military-population > 110)
             (players-military-population every-enemy < 100))
          (or(and(military-population > 100)
                 (players-military-population every-enemy < 90))
             (and(military-population > 90)
                 (players-military-population every-enemy < 80)))))
   =>
   (set-strategic-number 215 1)
)

(defrule
   (or(and(military-population > 80)
          (players-military-population every-enemy < 70))
      (or(and(military-population > 70)
             (players-military-population every-enemy < 60))
          (or(and(military-population > 60)
                 (players-military-population every-enemy < 50))
             (and(military-population > 50)
                 (players-military-population every-enemy < 40)))))
   =>
   (set-strategic-number 215 1)
)

(defrule
   (or(and(military-population > 40)
          (players-military-population every-enemy < 30))
      (or(and(military-population > 30)
             (players-military-population every-enemy < 20))
          (or(and(military-population > 20)
                 (players-military-population every-enemy < 10))
             (and(military-population > 10)
                 (players-military-population every-enemy == 0)))))
   =>
   (set-strategic-number 215 1)
)

(defrule
   (or(military-population > 200)
      (or(and(military-population > 190)
             (players-military-population every-enemy < 170))
          (or(and(military-population > 180)
                 (players-military-population every-enemy < 160))
             (and(military-population > 170)
                 (players-military-population every-enemy < 150)))))
   =>
   (set-strategic-number 215 2)
)

(defrule
   (or(and(military-population > 160)
          (players-military-population every-enemy < 140))
      (or(and(military-population > 150)
             (players-military-population every-enemy < 130))
          (or(and(military-population > 140)
                 (players-military-population every-enemy < 120))
             (and(military-population > 130)
                 (players-military-population every-enemy < 110)))))
   =>
   (set-strategic-number 215 2)
)

(defrule
   (or(and(military-population > 120)
          (players-military-population every-enemy < 100))
      (or(and(military-population > 110)
             (players-military-population every-enemy < 90))
          (or(and(military-population > 100)
                 (players-military-population every-enemy < 80))
             (and(military-population > 90)
                 (players-military-population every-enemy < 70)))))
   =>
   (set-strategic-number 215 2)
)

(defrule
   (or(and(military-population > 80)
          (players-military-population every-enemy < 60))
      (or(and(military-population > 70)
             (players-military-population every-enemy < 50))
          (or(and(military-population > 60)
                 (players-military-population every-enemy < 40))
             (and(military-population > 50)
                 (players-military-population every-enemy < 30)))))
   =>
   (set-strategic-number 215 2)
)

(defrule
   (or(and(military-population > 40)
          (players-military-population every-enemy < 20))
      (or(and(military-population > 30)
             (players-military-population every-enemy < 10))
         (and(military-population > 20)
             (players-military-population every-enemy == 0))))
   =>
   (set-strategic-number 215 2)
)

(defrule
   (or(and(military-population == 0)
          (players-military-population any-enemy > 10))
      (or(and(military-population < 10)
             (players-military-population any-enemy > 20))
          (or(and(military-population < 20)
                 (players-military-population any-enemy > 30))
             (and(military-population < 30)
                 (players-military-population any-enemy > 40)))))
   =>
   (set-strategic-number 215 -1)
)

(defrule
   (or(and(military-population < 40)
          (players-military-population any-enemy > 50))
      (or(and(military-population < 50)
             (players-military-population any-enemy > 60))
          (or(and(military-population < 60)
                 (players-military-population any-enemy > 70))
             (and(military-population < 70)
                 (players-military-population any-enemy > 80)))))
   =>
   (set-strategic-number 215 -1)
)

(defrule
   (or(and(military-population < 80)
          (players-military-population any-enemy > 90))
      (or(and(military-population < 90)
             (players-military-population any-enemy > 100))
          (or(and(military-population < 100)
                 (players-military-population any-enemy > 110))
             (and(military-population < 110)
                 (players-military-population any-enemy > 120)))))
   =>
   (set-strategic-number 215 -1)
)

(defrule
   (or(and(military-population < 120)
          (players-military-population any-enemy > 130))
      (or(and(military-population < 130)
             (players-military-population any-enemy > 140))
          (or(and(military-population < 140)
                 (players-military-population any-enemy > 150))
             (and(military-population < 150)
                 (players-military-population any-enemy > 160)))))
   =>
   (set-strategic-number 215 -1)
)

(defrule
   (or(and(military-population < 160)
          (players-military-population any-enemy > 170))
      (or(and(military-population < 170)
             (players-military-population any-enemy > 180))
          (or(and(military-population < 180)
                 (players-military-population any-enemy > 190))
             (and(military-population < 190)
                 (players-military-population any-enemy > 200)))))
   =>
   (set-strategic-number 215 -1)
)

(defrule
   (or(and(military-population == 0)
          (players-military-population any-enemy > 20))
      (or(and(military-population < 10)
             (players-military-population any-enemy > 30))
          (or(and(military-population < 20)
                 (players-military-population any-enemy > 40))
             (and(military-population < 30)
                 (players-military-population any-enemy > 50)))))
   =>
   (set-strategic-number 215 -2)
)

(defrule
   (or(and(military-population < 40)
          (players-military-population any-enemy > 60))
      (or(and(military-population < 50)
             (players-military-population any-enemy > 70))
          (or(and(military-population < 60)
                 (players-military-population any-enemy > 80))
             (and(military-population < 70)
                 (players-military-population any-enemy > 90)))))
   =>
   (set-strategic-number 215 -2)
)

(defrule
   (or(and(military-population < 80)
          (players-military-population any-enemy > 100))
      (or(and(military-population < 90)
             (players-military-population any-enemy > 110))
          (or(and(military-population < 100)
                 (players-military-population any-enemy > 120))
             (and(military-population < 110)
                 (players-military-population any-enemy > 130)))))
   =>
   (set-strategic-number 215 -2)
)

(defrule
   (or(and(military-population < 120)
          (players-military-population any-enemy > 140))
      (or(and(military-population < 130)
             (players-military-population any-enemy > 150))
          (or(and(military-population < 140)
                 (players-military-population any-enemy > 160))
             (and(military-population < 150)
                 (players-military-population any-enemy > 170)))))
   =>
   (set-strategic-number 215 -2)
)

(defrule
   (or(and(military-population < 160)
          (players-military-population any-enemy > 180))
      (or(and(military-population < 170)
             (players-military-population any-enemy > 190))
          (or(and(military-population < 180)
                 (players-military-population any-enemy > 200))
             (and(military-population < 190)
                 (players-military-population any-enemy > 210)))))
   =>
   (set-strategic-number 215 -2)
)

;******************************************************************************
;
; Training Rules
;
;******************************************************************************

(defrule
   (current-age == dark-age)
   (unit-type-count-total villager < max-num-dark-villagers)
   (can-train villager)
   =>
   (train villager)
)

(defrule
   (current-age > dark-age) 
   (unit-type-count-total villager < 100)
   (can-train villager)
   =>
   (train villager)
)

(defrule
   (goal g-age-status gv-advancing-to-feudal)
   (can-train militiaman-line)
   =>
   (train militiaman-line)
)

(defrule
   (current-age > dark-age)
   (not(research-available ri-man-at-arms))
   (can-train militiaman-line)
   =>
   (train militiaman-line)
)

;******************************************************************************
;
; Taunting Rules
;
;******************************************************************************

;******************************************************************************
;
; Resignation Rules
;
;******************************************************************************

;******************************************************************************
;
; Town-Size Rules
;
;******************************************************************************
;
; Rather than put all those rules in here, lets put them in a separate file and
; load that file into this one using the load command.

(load "Training4/TSA366")

;What you will find in this file are several rules that look like this:
;
;(defrule
;   (strategic-number sn-maximum-town-size == 42)
;   (not(enemy-buildings-in-town))
;   (goal g-tsa gv-on)
;   =>
;   (set-strategic-number sn-maximum-town-size 44)
;   (chat-local-to-self "TS 44.")
;)
;
;(defrule
;   (strategic-number sn-maximum-town-size == 40)
;   (not(enemy-buildings-in-town))
;   (goal g-tsa gv-on)
;   =>
;   (set-strategic-number sn-maximum-town-size 42)
;   (chat-local-to-self "TS 42.")
;)

;Now this is the whole idea of the TSA - to increase your town size so that
;your military will "defend" against the enemy buildings in your town.
;
;Following up on a post by Vader, I combined my TSA rules with my building
;rules to build a nice, tight, easily defendable town.  If I fire off my build
;rule at a small town size and allow the TSA rules to increment the town size
;till the building can be placed, I will have a nice, tight town.

;******************************************************************************
;
; Defend Rules - New in Training4
;
;******************************************************************************
;
;  I copied these rules from Mabuse.  I added the TSA portion to them.

(defrule
   (town-under-attack)
   (strategic-number sn-enemy-sighted-response-distance == 2)
   (goal g-tsa gv-off)
   =>
   (set-strategic-number sn-enemy-sighted-response-distance 144) ;Maximum
   (set-strategic-number sn-target-evaluation-siege-weapon 100)
)

(defrule
   (or(not(town-under-attack))
      (goal g-tsa gv-on))
   (strategic-number sn-enemy-sighted-response-distance == 144)
   =>
   (set-strategic-number sn-enemy-sighted-response-distance 2) ;On Sight Only
   (set-strategic-number sn-target-evaluation-siege-weapon 0)
)

;******************************************************************************
;
; Counter-Attack Rules
;
;******************************************************************************

;******************************************************************************
;
; Attack Rules
;
;******************************************************************************

;New in Training4 - Finally we get to attack something!

(defrule
   (current-age >= feudal-age)
   (strategic-number 215 > 0) ;We have military superiority!
   (goal g-tsa gv-off)
   =>
   (set-goal g-tsa gv-on)
   (chat-to-allies "We have military superiority.  Starting TSA.")
)

(defrule
   (strategic-number 215 < 1) ;We lost military superiority!
   (goal g-tsa gv-on)
   =>
   (set-goal g-tsa gv-off)
   (chat-to-allies "We lost military superiority.  Stopping TSA.")
   (set-strategic-number sn-maximum-town-size 16)
   (set-strategic-number sn-gather-idle-soldiers-at-center 1)
   (disable-timer t-gather-idle-soldiers)
   (enable-timer t-gather-idle-soldiers tv-gather-idle-soldiers)
)

(defrule
   (timer-triggered t-gather-idle-soldiers)
   (strategic-number sn-gather-idle-soldiers-at-center == 1)
   =>
   (set-strategic-number sn-gather-idle-soldiers-at-center 0)
)

;Now let's go smash the standard computer AI!




